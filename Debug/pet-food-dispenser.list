
pet-food-dispenser.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc78  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a8  0800bd84  0800bd84  0000cd84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c12c  0800c12c  0000e098  2**0
                  CONTENTS
  4 .ARM          00000008  0800c12c  0800c12c  0000d12c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c134  0800c134  0000e098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c134  0800c134  0000d134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c138  0800c138  0000d138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000098  20000000  0800c13c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  20000098  0800c1d4  0000e098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002dc  0800c1d4  0000e2dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000e098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cd9b  00000000  00000000  0000e0c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000210a  00000000  00000000  0001ae5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da0  00000000  00000000  0001cf68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a93  00000000  00000000  0001dd08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000186f5  00000000  00000000  0001e79b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000132b9  00000000  00000000  00036e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ac7e  00000000  00000000  0004a149  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d4dc7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e78  00000000  00000000  000d4e0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000d8c84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000098 	.word	0x20000098
 8000128:	00000000 	.word	0x00000000
 800012c:	0800bd6c 	.word	0x0800bd6c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000009c 	.word	0x2000009c
 8000148:	0800bd6c 	.word	0x0800bd6c

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000170:	b580      	push	{r7, lr}
 8000172:	b09c      	sub	sp, #112	@ 0x70
 8000174:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000176:	f007 ffc3 	bl	8008100 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800017a:	f006 ffa1 	bl	80070c0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800017e:	f007 f897 	bl	80072b0 <MX_GPIO_Init>
	MX_TIM1_Init();
 8000182:	f007 f811 	bl	80071a8 <MX_TIM1_Init>
	MX_I2C2_Init();
 8000186:	f006 ffe1 	bl	800714c <MX_I2C2_Init>
	//initialize device drivers
	//first we initialize the lcd to display the updates
	//the LCD will be connected to: --> can be found in line 32 in the main.c file
	//A0,1,2,3 --> Data pins
	//A4:RS, A5:EN
	Alcd_Init(&lcd, 2, 16);
 800018a:	2210      	movs	r2, #16
 800018c:	2102      	movs	r1, #2
 800018e:	48ba      	ldr	r0, [pc, #744]	@ (8000478 <main+0x308>)
 8000190:	f007 fd80 	bl	8007c94 <Alcd_Init>

	//clear display
	Alcd_Clear(&lcd);
 8000194:	48b8      	ldr	r0, [pc, #736]	@ (8000478 <main+0x308>)
 8000196:	f007 fe51 	bl	8007e3c <Alcd_Clear>

	Keypad_Init(&kp);
 800019a:	48b8      	ldr	r0, [pc, #736]	@ (800047c <main+0x30c>)
 800019c:	f007 ff34 	bl	8008008 <Keypad_Init>

	//initialize the RTC
	Ds1307_init(&CLK, &hi2c2);
 80001a0:	49b7      	ldr	r1, [pc, #732]	@ (8000480 <main+0x310>)
 80001a2:	48b8      	ldr	r0, [pc, #736]	@ (8000484 <main+0x314>)
 80001a4:	f007 fb1e 	bl	80077e4 <Ds1307_init>

	//initialize the eeprom
	eeprom24c32_init(&memory, &hi2c2);
 80001a8:	49b5      	ldr	r1, [pc, #724]	@ (8000480 <main+0x310>)
 80001aa:	48b7      	ldr	r0, [pc, #732]	@ (8000488 <main+0x318>)
 80001ac:	f007 fa42 	bl	8007634 <eeprom24c32_init>

	//to initiate the base (counter)
	HAL_TIM_Base_Start(&htim1);
 80001b0:	48b6      	ldr	r0, [pc, #728]	@ (800048c <main+0x31c>)
 80001b2:	f00a fbc7 	bl	800a944 <HAL_TIM_Base_Start>

	//enable the OC pin (PWM pin)
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80001b6:	2100      	movs	r1, #0
 80001b8:	48b4      	ldr	r0, [pc, #720]	@ (800048c <main+0x31c>)
 80001ba:	f00a fc5d 	bl	800aa78 <HAL_TIM_PWM_Start>

	//to change the duty cycle -> CCR
	//range is from 999 to 1999 (according to calculations)

	//the servo is set at 0 degree upon starting
	TIM1->CCR1 = 999;
 80001be:	4bb4      	ldr	r3, [pc, #720]	@ (8000490 <main+0x320>)
 80001c0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80001c4:	635a      	str	r2, [r3, #52]	@ 0x34

	//a flag if button is pressed
	uint8_t password_comp_flag, error_code, delay_flag;
	int8_t status;
	password_comp_flag = 0;
 80001c6:	2300      	movs	r3, #0
 80001c8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	status = 0;
 80001cc:	2300      	movs	r3, #0
 80001ce:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
	error_code = 0;
 80001d2:	2300      	movs	r3, #0
 80001d4:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
	uint8_t dose_h, dose_m, dose_s, dose_num;

	//finite state machine section
	uint32_t current_tick;

	uint32_t dosing_tick = 0;
 80001d8:	2300      	movs	r3, #0
 80001da:	65fb      	str	r3, [r7, #92]	@ 0x5c

	// a string to save the RTC time
	char timeString[50];

	/*password section*/
	char menu_pass[] = "1234";
 80001dc:	4aad      	ldr	r2, [pc, #692]	@ (8000494 <main+0x324>)
 80001de:	f107 0314 	add.w	r3, r7, #20
 80001e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80001e6:	6018      	str	r0, [r3, #0]
 80001e8:	3304      	adds	r3, #4
 80001ea:	7019      	strb	r1, [r3, #0]
	char entered_password[5] = ""; // User input buffer (4 digits + null terminator)
 80001ec:	2300      	movs	r3, #0
 80001ee:	60fb      	str	r3, [r7, #12]
 80001f0:	2300      	movs	r3, #0
 80001f2:	743b      	strb	r3, [r7, #16]
	char time_date_buffer[5];
	uint16_t buffer;
	uint8_t input_index = 0;
 80001f4:	2300      	movs	r3, #0
 80001f6:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55

	general_delay = HAL_GetTick() + 250;
 80001fa:	f007 ffd9 	bl	80081b0 <HAL_GetTick>
 80001fe:	4603      	mov	r3, r0
 8000200:	33fa      	adds	r3, #250	@ 0xfa
 8000202:	65bb      	str	r3, [r7, #88]	@ 0x58
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		//get the current tick number
		current_tick = HAL_GetTick();
 8000204:	f007 ffd4 	bl	80081b0 <HAL_GetTick>
 8000208:	6638      	str	r0, [r7, #96]	@ 0x60

		//in idle mode -> button flag is 0 and status is zero
		while ((status == 0) && (error_code == 0)
 800020a:	e124      	b.n	8000456 <main+0x2e6>
				&& (current_tick >= general_delay)) {

			//get the current tick number
			current_tick = HAL_GetTick();
 800020c:	f007 ffd0 	bl	80081b0 <HAL_GetTick>
 8000210:	6638      	str	r0, [r7, #96]	@ 0x60

			//displaying the time and date
			//the lcd will display the time
			// Read time from DS1307
			if (Ds1307_read(&CLK) == DS1307_OK) //in case reading is ok
 8000212:	489c      	ldr	r0, [pc, #624]	@ (8000484 <main+0x314>)
 8000214:	f007 fbb6 	bl	8007984 <Ds1307_read>
 8000218:	4603      	mov	r3, r0
 800021a:	2b00      	cmp	r3, #0
 800021c:	f040 80db 	bne.w	80003d6 <main+0x266>
					{

				//check if the time format is 24h or 12h
				//in case of 12h
				if (CLK.format == 1) {
 8000220:	4b98      	ldr	r3, [pc, #608]	@ (8000484 <main+0x314>)
 8000222:	7c5b      	ldrb	r3, [r3, #17]
 8000224:	f003 0301 	and.w	r3, r3, #1
 8000228:	b2db      	uxtb	r3, r3
 800022a:	2b00      	cmp	r3, #0
 800022c:	f000 8084 	beq.w	8000338 <main+0x1c8>

					// display the time
					Alcd_Clear(&lcd);
 8000230:	4891      	ldr	r0, [pc, #580]	@ (8000478 <main+0x308>)
 8000232:	f007 fe03 	bl	8007e3c <Alcd_Clear>
					Alcd_Display_Control(&lcd, 1, 0, 0);
 8000236:	2300      	movs	r3, #0
 8000238:	2200      	movs	r2, #0
 800023a:	2101      	movs	r1, #1
 800023c:	488e      	ldr	r0, [pc, #568]	@ (8000478 <main+0x308>)
 800023e:	f007 fe0e 	bl	8007e5e <Alcd_Display_Control>
					snprintf(timeString, sizeof(timeString), "%02d:%02d:%02d",
							CLK.hour, CLK.min, CLK.sec);
 8000242:	4b90      	ldr	r3, [pc, #576]	@ (8000484 <main+0x314>)
 8000244:	7a9b      	ldrb	r3, [r3, #10]
					snprintf(timeString, sizeof(timeString), "%02d:%02d:%02d",
 8000246:	4619      	mov	r1, r3
							CLK.hour, CLK.min, CLK.sec);
 8000248:	4b8e      	ldr	r3, [pc, #568]	@ (8000484 <main+0x314>)
 800024a:	7a5b      	ldrb	r3, [r3, #9]
					snprintf(timeString, sizeof(timeString), "%02d:%02d:%02d",
 800024c:	461a      	mov	r2, r3
							CLK.hour, CLK.min, CLK.sec);
 800024e:	4b8d      	ldr	r3, [pc, #564]	@ (8000484 <main+0x314>)
 8000250:	7a1b      	ldrb	r3, [r3, #8]
					snprintf(timeString, sizeof(timeString), "%02d:%02d:%02d",
 8000252:	f107 001c 	add.w	r0, r7, #28
 8000256:	9301      	str	r3, [sp, #4]
 8000258:	9200      	str	r2, [sp, #0]
 800025a:	460b      	mov	r3, r1
 800025c:	4a8e      	ldr	r2, [pc, #568]	@ (8000498 <main+0x328>)
 800025e:	2132      	movs	r1, #50	@ 0x32
 8000260:	f00b f8c0 	bl	800b3e4 <sniprintf>
					Alcd_PutAt_n(&lcd, 1, 0, timeString, strlen(timeString));
 8000264:	f107 031c 	add.w	r3, r7, #28
 8000268:	4618      	mov	r0, r3
 800026a:	f7ff ff79 	bl	8000160 <strlen>
 800026e:	4603      	mov	r3, r0
 8000270:	b2db      	uxtb	r3, r3
 8000272:	f107 021c 	add.w	r2, r7, #28
 8000276:	9300      	str	r3, [sp, #0]
 8000278:	4613      	mov	r3, r2
 800027a:	2200      	movs	r2, #0
 800027c:	2101      	movs	r1, #1
 800027e:	487e      	ldr	r0, [pc, #504]	@ (8000478 <main+0x308>)
 8000280:	f007 fdc3 	bl	8007e0a <Alcd_PutAt_n>

					//check for PM or AM
					//in case: AM
					if (CLK.AM_PM == 0) {
 8000284:	4b7f      	ldr	r3, [pc, #508]	@ (8000484 <main+0x314>)
 8000286:	7c5b      	ldrb	r3, [r3, #17]
 8000288:	f003 0302 	and.w	r3, r3, #2
 800028c:	b2db      	uxtb	r3, r3
 800028e:	2b00      	cmp	r3, #0
 8000290:	d10c      	bne.n	80002ac <main+0x13c>
						Alcd_PutAt(&lcd, 1, 9, "AM");
 8000292:	4882      	ldr	r0, [pc, #520]	@ (800049c <main+0x32c>)
 8000294:	f007 fe26 	bl	8007ee4 <Str_Len>
 8000298:	4603      	mov	r3, r0
 800029a:	b2db      	uxtb	r3, r3
 800029c:	9300      	str	r3, [sp, #0]
 800029e:	4b7f      	ldr	r3, [pc, #508]	@ (800049c <main+0x32c>)
 80002a0:	2209      	movs	r2, #9
 80002a2:	2101      	movs	r1, #1
 80002a4:	4874      	ldr	r0, [pc, #464]	@ (8000478 <main+0x308>)
 80002a6:	f007 fdb0 	bl	8007e0a <Alcd_PutAt_n>
 80002aa:	e00b      	b.n	80002c4 <main+0x154>

					} else {
						Alcd_PutAt(&lcd, 1, 9, "PM");
 80002ac:	487c      	ldr	r0, [pc, #496]	@ (80004a0 <main+0x330>)
 80002ae:	f007 fe19 	bl	8007ee4 <Str_Len>
 80002b2:	4603      	mov	r3, r0
 80002b4:	b2db      	uxtb	r3, r3
 80002b6:	9300      	str	r3, [sp, #0]
 80002b8:	4b79      	ldr	r3, [pc, #484]	@ (80004a0 <main+0x330>)
 80002ba:	2209      	movs	r2, #9
 80002bc:	2101      	movs	r1, #1
 80002be:	486e      	ldr	r0, [pc, #440]	@ (8000478 <main+0x308>)
 80002c0:	f007 fda3 	bl	8007e0a <Alcd_PutAt_n>

					}

					snprintf(timeString, sizeof(timeString), "%02d-%02d-%04d",
							CLK.date, CLK.month, CLK.year);
 80002c4:	4b6f      	ldr	r3, [pc, #444]	@ (8000484 <main+0x314>)
 80002c6:	7b1b      	ldrb	r3, [r3, #12]
					snprintf(timeString, sizeof(timeString), "%02d-%02d-%04d",
 80002c8:	4619      	mov	r1, r3
							CLK.date, CLK.month, CLK.year);
 80002ca:	4b6e      	ldr	r3, [pc, #440]	@ (8000484 <main+0x314>)
 80002cc:	7b5b      	ldrb	r3, [r3, #13]
					snprintf(timeString, sizeof(timeString), "%02d-%02d-%04d",
 80002ce:	461a      	mov	r2, r3
							CLK.date, CLK.month, CLK.year);
 80002d0:	4b6c      	ldr	r3, [pc, #432]	@ (8000484 <main+0x314>)
 80002d2:	89db      	ldrh	r3, [r3, #14]
					snprintf(timeString, sizeof(timeString), "%02d-%02d-%04d",
 80002d4:	f107 001c 	add.w	r0, r7, #28
 80002d8:	9301      	str	r3, [sp, #4]
 80002da:	9200      	str	r2, [sp, #0]
 80002dc:	460b      	mov	r3, r1
 80002de:	4a71      	ldr	r2, [pc, #452]	@ (80004a4 <main+0x334>)
 80002e0:	2132      	movs	r1, #50	@ 0x32
 80002e2:	f00b f87f 	bl	800b3e4 <sniprintf>
					Alcd_PutAt_n(&lcd, 0, 0, timeString, strlen(timeString));
 80002e6:	f107 031c 	add.w	r3, r7, #28
 80002ea:	4618      	mov	r0, r3
 80002ec:	f7ff ff38 	bl	8000160 <strlen>
 80002f0:	4603      	mov	r3, r0
 80002f2:	b2db      	uxtb	r3, r3
 80002f4:	f107 021c 	add.w	r2, r7, #28
 80002f8:	9300      	str	r3, [sp, #0]
 80002fa:	4613      	mov	r3, r2
 80002fc:	2200      	movs	r2, #0
 80002fe:	2100      	movs	r1, #0
 8000300:	485d      	ldr	r0, [pc, #372]	@ (8000478 <main+0x308>)
 8000302:	f007 fd82 	bl	8007e0a <Alcd_PutAt_n>

					snprintf(timeString, sizeof(timeString), "%02d", status);
 8000306:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 800030a:	f107 001c 	add.w	r0, r7, #28
 800030e:	4a66      	ldr	r2, [pc, #408]	@ (80004a8 <main+0x338>)
 8000310:	2132      	movs	r1, #50	@ 0x32
 8000312:	f00b f867 	bl	800b3e4 <sniprintf>
					Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 8000316:	f107 031c 	add.w	r3, r7, #28
 800031a:	4618      	mov	r0, r3
 800031c:	f7ff ff20 	bl	8000160 <strlen>
 8000320:	4603      	mov	r3, r0
 8000322:	b2db      	uxtb	r3, r3
 8000324:	f107 021c 	add.w	r2, r7, #28
 8000328:	9300      	str	r3, [sp, #0]
 800032a:	4613      	mov	r3, r2
 800032c:	220e      	movs	r2, #14
 800032e:	2100      	movs	r1, #0
 8000330:	4851      	ldr	r0, [pc, #324]	@ (8000478 <main+0x308>)
 8000332:	f007 fd6a 	bl	8007e0a <Alcd_PutAt_n>
 8000336:	e060      	b.n	80003fa <main+0x28a>

				//in case of 24 format
				else {

					snprintf(timeString, sizeof(timeString), "%02d:%02d:%02d",
							CLK.hour, CLK.min, CLK.sec);
 8000338:	4b52      	ldr	r3, [pc, #328]	@ (8000484 <main+0x314>)
 800033a:	7a9b      	ldrb	r3, [r3, #10]
					snprintf(timeString, sizeof(timeString), "%02d:%02d:%02d",
 800033c:	4619      	mov	r1, r3
							CLK.hour, CLK.min, CLK.sec);
 800033e:	4b51      	ldr	r3, [pc, #324]	@ (8000484 <main+0x314>)
 8000340:	7a5b      	ldrb	r3, [r3, #9]
					snprintf(timeString, sizeof(timeString), "%02d:%02d:%02d",
 8000342:	461a      	mov	r2, r3
							CLK.hour, CLK.min, CLK.sec);
 8000344:	4b4f      	ldr	r3, [pc, #316]	@ (8000484 <main+0x314>)
 8000346:	7a1b      	ldrb	r3, [r3, #8]
					snprintf(timeString, sizeof(timeString), "%02d:%02d:%02d",
 8000348:	f107 001c 	add.w	r0, r7, #28
 800034c:	9301      	str	r3, [sp, #4]
 800034e:	9200      	str	r2, [sp, #0]
 8000350:	460b      	mov	r3, r1
 8000352:	4a51      	ldr	r2, [pc, #324]	@ (8000498 <main+0x328>)
 8000354:	2132      	movs	r1, #50	@ 0x32
 8000356:	f00b f845 	bl	800b3e4 <sniprintf>

					// display the time
					Alcd_Clear(&lcd);
 800035a:	4847      	ldr	r0, [pc, #284]	@ (8000478 <main+0x308>)
 800035c:	f007 fd6e 	bl	8007e3c <Alcd_Clear>
					Alcd_Display_Control(&lcd, 1, 0, 0);
 8000360:	2300      	movs	r3, #0
 8000362:	2200      	movs	r2, #0
 8000364:	2101      	movs	r1, #1
 8000366:	4844      	ldr	r0, [pc, #272]	@ (8000478 <main+0x308>)
 8000368:	f007 fd79 	bl	8007e5e <Alcd_Display_Control>
					Alcd_PutAt_n(&lcd, 1, 0, timeString, strlen(timeString));
 800036c:	f107 031c 	add.w	r3, r7, #28
 8000370:	4618      	mov	r0, r3
 8000372:	f7ff fef5 	bl	8000160 <strlen>
 8000376:	4603      	mov	r3, r0
 8000378:	b2db      	uxtb	r3, r3
 800037a:	f107 021c 	add.w	r2, r7, #28
 800037e:	9300      	str	r3, [sp, #0]
 8000380:	4613      	mov	r3, r2
 8000382:	2200      	movs	r2, #0
 8000384:	2101      	movs	r1, #1
 8000386:	483c      	ldr	r0, [pc, #240]	@ (8000478 <main+0x308>)
 8000388:	f007 fd3f 	bl	8007e0a <Alcd_PutAt_n>

					Alcd_PutAt(&lcd, 0, 0, "Time");
 800038c:	4847      	ldr	r0, [pc, #284]	@ (80004ac <main+0x33c>)
 800038e:	f007 fda9 	bl	8007ee4 <Str_Len>
 8000392:	4603      	mov	r3, r0
 8000394:	b2db      	uxtb	r3, r3
 8000396:	9300      	str	r3, [sp, #0]
 8000398:	4b44      	ldr	r3, [pc, #272]	@ (80004ac <main+0x33c>)
 800039a:	2200      	movs	r2, #0
 800039c:	2100      	movs	r1, #0
 800039e:	4836      	ldr	r0, [pc, #216]	@ (8000478 <main+0x308>)
 80003a0:	f007 fd33 	bl	8007e0a <Alcd_PutAt_n>

					snprintf(timeString, sizeof(timeString), "%02d", status);
 80003a4:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 80003a8:	f107 001c 	add.w	r0, r7, #28
 80003ac:	4a3e      	ldr	r2, [pc, #248]	@ (80004a8 <main+0x338>)
 80003ae:	2132      	movs	r1, #50	@ 0x32
 80003b0:	f00b f818 	bl	800b3e4 <sniprintf>
					Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 80003b4:	f107 031c 	add.w	r3, r7, #28
 80003b8:	4618      	mov	r0, r3
 80003ba:	f7ff fed1 	bl	8000160 <strlen>
 80003be:	4603      	mov	r3, r0
 80003c0:	b2db      	uxtb	r3, r3
 80003c2:	f107 021c 	add.w	r2, r7, #28
 80003c6:	9300      	str	r3, [sp, #0]
 80003c8:	4613      	mov	r3, r2
 80003ca:	220e      	movs	r2, #14
 80003cc:	2100      	movs	r1, #0
 80003ce:	482a      	ldr	r0, [pc, #168]	@ (8000478 <main+0x308>)
 80003d0:	f007 fd1b 	bl	8007e0a <Alcd_PutAt_n>
 80003d4:	e011      	b.n	80003fa <main+0x28a>

				}

			} else {

				Alcd_Clear(&lcd);
 80003d6:	4828      	ldr	r0, [pc, #160]	@ (8000478 <main+0x308>)
 80003d8:	f007 fd30 	bl	8007e3c <Alcd_Clear>
				Alcd_PutAt(&lcd, 0, 0, "RTC failure");
 80003dc:	4834      	ldr	r0, [pc, #208]	@ (80004b0 <main+0x340>)
 80003de:	f007 fd81 	bl	8007ee4 <Str_Len>
 80003e2:	4603      	mov	r3, r0
 80003e4:	b2db      	uxtb	r3, r3
 80003e6:	9300      	str	r3, [sp, #0]
 80003e8:	4b31      	ldr	r3, [pc, #196]	@ (80004b0 <main+0x340>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	2100      	movs	r1, #0
 80003ee:	4822      	ldr	r0, [pc, #136]	@ (8000478 <main+0x308>)
 80003f0:	f007 fd0b 	bl	8007e0a <Alcd_PutAt_n>
				error_code = 1;
 80003f4:	2301      	movs	r3, #1
 80003f6:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66

			}
			snprintf(timeString, sizeof(timeString), "%02d", status);
 80003fa:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 80003fe:	f107 001c 	add.w	r0, r7, #28
 8000402:	4a29      	ldr	r2, [pc, #164]	@ (80004a8 <main+0x338>)
 8000404:	2132      	movs	r1, #50	@ 0x32
 8000406:	f00a ffed 	bl	800b3e4 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 800040a:	f107 031c 	add.w	r3, r7, #28
 800040e:	4618      	mov	r0, r3
 8000410:	f7ff fea6 	bl	8000160 <strlen>
 8000414:	4603      	mov	r3, r0
 8000416:	b2db      	uxtb	r3, r3
 8000418:	f107 021c 	add.w	r2, r7, #28
 800041c:	9300      	str	r3, [sp, #0]
 800041e:	4613      	mov	r3, r2
 8000420:	220e      	movs	r2, #14
 8000422:	2100      	movs	r1, #0
 8000424:	4814      	ldr	r0, [pc, #80]	@ (8000478 <main+0x308>)
 8000426:	f007 fcf0 	bl	8007e0a <Alcd_PutAt_n>

			//check if any button is pressed
			//check for any keypad input
			Keypad_Refresh(&kp);
 800042a:	4814      	ldr	r0, [pc, #80]	@ (800047c <main+0x30c>)
 800042c:	f007 fdb4 	bl	8007f98 <Keypad_Refresh>

			//in case menu is pressed -> move to state10
			if (Keypad_Get_Key(&kp, kp_button_save_menu)
 8000430:	210c      	movs	r1, #12
 8000432:	4812      	ldr	r0, [pc, #72]	@ (800047c <main+0x30c>)
 8000434:	f007 fe4c 	bl	80080d0 <Keypad_Get_Key>
 8000438:	4603      	mov	r3, r0
 800043a:	2b00      	cmp	r3, #0
 800043c:	d006      	beq.n	800044c <main+0x2dc>
					&& (current_tick >= general_delay)) {
 800043e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000440:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000442:	429a      	cmp	r2, r3
 8000444:	d302      	bcc.n	800044c <main+0x2dc>
				status = 10;
 8000446:	230a      	movs	r3, #10
 8000448:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

			}

			general_delay = HAL_GetTick() + 250;
 800044c:	f007 feb0 	bl	80081b0 <HAL_GetTick>
 8000450:	4603      	mov	r3, r0
 8000452:	33fa      	adds	r3, #250	@ 0xfa
 8000454:	65bb      	str	r3, [r7, #88]	@ 0x58
				&& (current_tick >= general_delay)) {
 8000456:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 800045a:	2b00      	cmp	r3, #0
 800045c:	f040 8097 	bne.w	800058e <main+0x41e>
		while ((status == 0) && (error_code == 0)
 8000460:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8000464:	2b00      	cmp	r3, #0
 8000466:	f040 8092 	bne.w	800058e <main+0x41e>
				&& (current_tick >= general_delay)) {
 800046a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800046c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800046e:	429a      	cmp	r2, r3
 8000470:	f4bf aecc 	bcs.w	800020c <main+0x9c>

		}

		//status 10 -> main menu
		while ((status == 10) && (current_tick >= general_delay)) {
 8000474:	e08b      	b.n	800058e <main+0x41e>
 8000476:	bf00      	nop
 8000478:	2000001c 	.word	0x2000001c
 800047c:	20000000 	.word	0x20000000
 8000480:	200000b4 	.word	0x200000b4
 8000484:	20000150 	.word	0x20000150
 8000488:	20000168 	.word	0x20000168
 800048c:	20000108 	.word	0x20000108
 8000490:	40012c00 	.word	0x40012c00
 8000494:	0800bfc4 	.word	0x0800bfc4
 8000498:	0800bd84 	.word	0x0800bd84
 800049c:	0800bd94 	.word	0x0800bd94
 80004a0:	0800bd98 	.word	0x0800bd98
 80004a4:	0800bd9c 	.word	0x0800bd9c
 80004a8:	0800bdac 	.word	0x0800bdac
 80004ac:	0800bdb4 	.word	0x0800bdb4
 80004b0:	0800bdbc 	.word	0x0800bdbc

			//get the current tick number
			current_tick = HAL_GetTick();
 80004b4:	f007 fe7c 	bl	80081b0 <HAL_GetTick>
 80004b8:	6638      	str	r0, [r7, #96]	@ 0x60

			Alcd_Clear(&lcd);
 80004ba:	489b      	ldr	r0, [pc, #620]	@ (8000728 <main+0x5b8>)
 80004bc:	f007 fcbe 	bl	8007e3c <Alcd_Clear>
			Alcd_PutAt(&lcd, 0, 0, "1: view");
 80004c0:	489a      	ldr	r0, [pc, #616]	@ (800072c <main+0x5bc>)
 80004c2:	f007 fd0f 	bl	8007ee4 <Str_Len>
 80004c6:	4603      	mov	r3, r0
 80004c8:	b2db      	uxtb	r3, r3
 80004ca:	9300      	str	r3, [sp, #0]
 80004cc:	4b97      	ldr	r3, [pc, #604]	@ (800072c <main+0x5bc>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	2100      	movs	r1, #0
 80004d2:	4895      	ldr	r0, [pc, #596]	@ (8000728 <main+0x5b8>)
 80004d4:	f007 fc99 	bl	8007e0a <Alcd_PutAt_n>
			Alcd_PutAt(&lcd, 1, 0, "2: edit");
 80004d8:	4895      	ldr	r0, [pc, #596]	@ (8000730 <main+0x5c0>)
 80004da:	f007 fd03 	bl	8007ee4 <Str_Len>
 80004de:	4603      	mov	r3, r0
 80004e0:	b2db      	uxtb	r3, r3
 80004e2:	9300      	str	r3, [sp, #0]
 80004e4:	4b92      	ldr	r3, [pc, #584]	@ (8000730 <main+0x5c0>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	2101      	movs	r1, #1
 80004ea:	488f      	ldr	r0, [pc, #572]	@ (8000728 <main+0x5b8>)
 80004ec:	f007 fc8d 	bl	8007e0a <Alcd_PutAt_n>
			snprintf(timeString, sizeof(timeString), "%02d", status);
 80004f0:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 80004f4:	f107 001c 	add.w	r0, r7, #28
 80004f8:	4a8e      	ldr	r2, [pc, #568]	@ (8000734 <main+0x5c4>)
 80004fa:	2132      	movs	r1, #50	@ 0x32
 80004fc:	f00a ff72 	bl	800b3e4 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 8000500:	f107 031c 	add.w	r3, r7, #28
 8000504:	4618      	mov	r0, r3
 8000506:	f7ff fe2b 	bl	8000160 <strlen>
 800050a:	4603      	mov	r3, r0
 800050c:	b2db      	uxtb	r3, r3
 800050e:	f107 021c 	add.w	r2, r7, #28
 8000512:	9300      	str	r3, [sp, #0]
 8000514:	4613      	mov	r3, r2
 8000516:	220e      	movs	r2, #14
 8000518:	2100      	movs	r1, #0
 800051a:	4883      	ldr	r0, [pc, #524]	@ (8000728 <main+0x5b8>)
 800051c:	f007 fc75 	bl	8007e0a <Alcd_PutAt_n>

			//check if any button is pressed
			//check for any keypad input
			Keypad_Refresh(&kp);
 8000520:	4885      	ldr	r0, [pc, #532]	@ (8000738 <main+0x5c8>)
 8000522:	f007 fd39 	bl	8007f98 <Keypad_Refresh>

			//in case 1 is selected -> view menu (status 11)
			if (Keypad_Get_Key(&kp, kp_button_1)
 8000526:	2100      	movs	r1, #0
 8000528:	4883      	ldr	r0, [pc, #524]	@ (8000738 <main+0x5c8>)
 800052a:	f007 fdd1 	bl	80080d0 <Keypad_Get_Key>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d007      	beq.n	8000544 <main+0x3d4>
					&& (current_tick >= general_delay)) {
 8000534:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000536:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000538:	429a      	cmp	r2, r3
 800053a:	d303      	bcc.n	8000544 <main+0x3d4>

				status = 11;
 800053c:	230b      	movs	r3, #11
 800053e:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 8000542:	e01f      	b.n	8000584 <main+0x414>

			}

			//2 is selected -> edit menu (status 20)
			else if (Keypad_Get_Key(&kp, kp_button_2)
 8000544:	2101      	movs	r1, #1
 8000546:	487c      	ldr	r0, [pc, #496]	@ (8000738 <main+0x5c8>)
 8000548:	f007 fdc2 	bl	80080d0 <Keypad_Get_Key>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d00a      	beq.n	8000568 <main+0x3f8>
					&& (current_tick >= general_delay)) {
 8000552:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000554:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000556:	429a      	cmp	r2, r3
 8000558:	d306      	bcc.n	8000568 <main+0x3f8>

				//ask the user for password
				Alcd_Clear(&lcd);
 800055a:	4873      	ldr	r0, [pc, #460]	@ (8000728 <main+0x5b8>)
 800055c:	f007 fc6e 	bl	8007e3c <Alcd_Clear>
				status = 20;
 8000560:	2314      	movs	r3, #20
 8000562:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 8000566:	e00d      	b.n	8000584 <main+0x414>

			}

			//back is selected
			else if (Keypad_Get_Key(&kp, kp_button_no_back)
 8000568:	210e      	movs	r1, #14
 800056a:	4873      	ldr	r0, [pc, #460]	@ (8000738 <main+0x5c8>)
 800056c:	f007 fdb0 	bl	80080d0 <Keypad_Get_Key>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d006      	beq.n	8000584 <main+0x414>
					&& (current_tick >= general_delay)) {
 8000576:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000578:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800057a:	429a      	cmp	r2, r3
 800057c:	d302      	bcc.n	8000584 <main+0x414>

				status = 0;
 800057e:	2300      	movs	r3, #0
 8000580:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

			}

			general_delay = HAL_GetTick() + 250;
 8000584:	f007 fe14 	bl	80081b0 <HAL_GetTick>
 8000588:	4603      	mov	r3, r0
 800058a:	33fa      	adds	r3, #250	@ 0xfa
 800058c:	65bb      	str	r3, [r7, #88]	@ 0x58
		while ((status == 10) && (current_tick >= general_delay)) {
 800058e:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8000592:	2b0a      	cmp	r3, #10
 8000594:	d16e      	bne.n	8000674 <main+0x504>
 8000596:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000598:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800059a:	429a      	cmp	r2, r3
 800059c:	d28a      	bcs.n	80004b4 <main+0x344>
		}

		//status 11 -> view menu
		while ((status == 11) && (current_tick >= general_delay)) {
 800059e:	e069      	b.n	8000674 <main+0x504>

			//get the current tick number
			current_tick = HAL_GetTick();
 80005a0:	f007 fe06 	bl	80081b0 <HAL_GetTick>
 80005a4:	6638      	str	r0, [r7, #96]	@ 0x60

			Alcd_Clear(&lcd);
 80005a6:	4860      	ldr	r0, [pc, #384]	@ (8000728 <main+0x5b8>)
 80005a8:	f007 fc48 	bl	8007e3c <Alcd_Clear>
			Alcd_PutAt(&lcd, 0, 0, "1: date");
 80005ac:	4863      	ldr	r0, [pc, #396]	@ (800073c <main+0x5cc>)
 80005ae:	f007 fc99 	bl	8007ee4 <Str_Len>
 80005b2:	4603      	mov	r3, r0
 80005b4:	b2db      	uxtb	r3, r3
 80005b6:	9300      	str	r3, [sp, #0]
 80005b8:	4b60      	ldr	r3, [pc, #384]	@ (800073c <main+0x5cc>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	2100      	movs	r1, #0
 80005be:	485a      	ldr	r0, [pc, #360]	@ (8000728 <main+0x5b8>)
 80005c0:	f007 fc23 	bl	8007e0a <Alcd_PutAt_n>
			Alcd_PutAt(&lcd, 1, 0, "2: parameters");
 80005c4:	485e      	ldr	r0, [pc, #376]	@ (8000740 <main+0x5d0>)
 80005c6:	f007 fc8d 	bl	8007ee4 <Str_Len>
 80005ca:	4603      	mov	r3, r0
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	9300      	str	r3, [sp, #0]
 80005d0:	4b5b      	ldr	r3, [pc, #364]	@ (8000740 <main+0x5d0>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	2101      	movs	r1, #1
 80005d6:	4854      	ldr	r0, [pc, #336]	@ (8000728 <main+0x5b8>)
 80005d8:	f007 fc17 	bl	8007e0a <Alcd_PutAt_n>
			snprintf(timeString, sizeof(timeString), "%02d", status);
 80005dc:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 80005e0:	f107 001c 	add.w	r0, r7, #28
 80005e4:	4a53      	ldr	r2, [pc, #332]	@ (8000734 <main+0x5c4>)
 80005e6:	2132      	movs	r1, #50	@ 0x32
 80005e8:	f00a fefc 	bl	800b3e4 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 80005ec:	f107 031c 	add.w	r3, r7, #28
 80005f0:	4618      	mov	r0, r3
 80005f2:	f7ff fdb5 	bl	8000160 <strlen>
 80005f6:	4603      	mov	r3, r0
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	f107 021c 	add.w	r2, r7, #28
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	4613      	mov	r3, r2
 8000602:	220e      	movs	r2, #14
 8000604:	2100      	movs	r1, #0
 8000606:	4848      	ldr	r0, [pc, #288]	@ (8000728 <main+0x5b8>)
 8000608:	f007 fbff 	bl	8007e0a <Alcd_PutAt_n>

			//check if any button is pressed
			//check for any keypad input
			Keypad_Refresh(&kp);
 800060c:	484a      	ldr	r0, [pc, #296]	@ (8000738 <main+0x5c8>)
 800060e:	f007 fcc3 	bl	8007f98 <Keypad_Refresh>

			//in case 1 is selected -> view date (status 13)
			if (Keypad_Get_Key(&kp, kp_button_1)
 8000612:	2100      	movs	r1, #0
 8000614:	4848      	ldr	r0, [pc, #288]	@ (8000738 <main+0x5c8>)
 8000616:	f007 fd5b 	bl	80080d0 <Keypad_Get_Key>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d007      	beq.n	8000630 <main+0x4c0>
					&& (current_tick >= general_delay)) {
 8000620:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000622:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000624:	429a      	cmp	r2, r3
 8000626:	d303      	bcc.n	8000630 <main+0x4c0>

				status = 13;
 8000628:	230d      	movs	r3, #13
 800062a:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 800062e:	e01c      	b.n	800066a <main+0x4fa>

			}

			//2 is selected -> view parameters (status 14)
			else if (Keypad_Get_Key(&kp, kp_button_2)
 8000630:	2101      	movs	r1, #1
 8000632:	4841      	ldr	r0, [pc, #260]	@ (8000738 <main+0x5c8>)
 8000634:	f007 fd4c 	bl	80080d0 <Keypad_Get_Key>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d007      	beq.n	800064e <main+0x4de>
					&& (current_tick >= general_delay)) {
 800063e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000640:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000642:	429a      	cmp	r2, r3
 8000644:	d303      	bcc.n	800064e <main+0x4de>

				status = 14;
 8000646:	230e      	movs	r3, #14
 8000648:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 800064c:	e00d      	b.n	800066a <main+0x4fa>

			}

			//back is selected
			else if (Keypad_Get_Key(&kp, kp_button_no_back)
 800064e:	210e      	movs	r1, #14
 8000650:	4839      	ldr	r0, [pc, #228]	@ (8000738 <main+0x5c8>)
 8000652:	f007 fd3d 	bl	80080d0 <Keypad_Get_Key>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d006      	beq.n	800066a <main+0x4fa>
					&& (current_tick >= general_delay)) {
 800065c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800065e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000660:	429a      	cmp	r2, r3
 8000662:	d302      	bcc.n	800066a <main+0x4fa>

				//back to previous menu
				status = 10;
 8000664:	230a      	movs	r3, #10
 8000666:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

			}

			general_delay = HAL_GetTick() + 250;
 800066a:	f007 fda1 	bl	80081b0 <HAL_GetTick>
 800066e:	4603      	mov	r3, r0
 8000670:	33fa      	adds	r3, #250	@ 0xfa
 8000672:	65bb      	str	r3, [r7, #88]	@ 0x58
		while ((status == 11) && (current_tick >= general_delay)) {
 8000674:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8000678:	2b0b      	cmp	r3, #11
 800067a:	f040 8153 	bne.w	8000924 <main+0x7b4>
 800067e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000680:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000682:	429a      	cmp	r2, r3
 8000684:	d28c      	bcs.n	80005a0 <main+0x430>
		}

		//view the time and date -> status 13
		while ((status == 13) && (current_tick >= general_delay)) {
 8000686:	e14d      	b.n	8000924 <main+0x7b4>

			//get the current tick number
			current_tick = HAL_GetTick();
 8000688:	f007 fd92 	bl	80081b0 <HAL_GetTick>
 800068c:	6638      	str	r0, [r7, #96]	@ 0x60

			//displaying the time and date
			//the lcd will display the time
			// Read time from DS1307
			if (Ds1307_read(&CLK) == DS1307_OK) //in case reading is ok
 800068e:	482d      	ldr	r0, [pc, #180]	@ (8000744 <main+0x5d4>)
 8000690:	f007 f978 	bl	8007984 <Ds1307_read>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	f040 8104 	bne.w	80008a4 <main+0x734>
					{

				//check if the time format is 24h or 12h
				//in case of 12h
				if (CLK.format == 1) {
 800069c:	4b29      	ldr	r3, [pc, #164]	@ (8000744 <main+0x5d4>)
 800069e:	7c5b      	ldrb	r3, [r3, #17]
 80006a0:	f003 0301 	and.w	r3, r3, #1
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	f000 8098 	beq.w	80007dc <main+0x66c>

					// display the time
					Alcd_Clear(&lcd);
 80006ac:	481e      	ldr	r0, [pc, #120]	@ (8000728 <main+0x5b8>)
 80006ae:	f007 fbc5 	bl	8007e3c <Alcd_Clear>
					Alcd_Display_Control(&lcd, 1, 0, 0);
 80006b2:	2300      	movs	r3, #0
 80006b4:	2200      	movs	r2, #0
 80006b6:	2101      	movs	r1, #1
 80006b8:	481b      	ldr	r0, [pc, #108]	@ (8000728 <main+0x5b8>)
 80006ba:	f007 fbd0 	bl	8007e5e <Alcd_Display_Control>
					snprintf(timeString, sizeof(timeString), "%02d:%02d:%02d",
							CLK.hour, CLK.min, CLK.sec);
 80006be:	4b21      	ldr	r3, [pc, #132]	@ (8000744 <main+0x5d4>)
 80006c0:	7a9b      	ldrb	r3, [r3, #10]
					snprintf(timeString, sizeof(timeString), "%02d:%02d:%02d",
 80006c2:	4619      	mov	r1, r3
							CLK.hour, CLK.min, CLK.sec);
 80006c4:	4b1f      	ldr	r3, [pc, #124]	@ (8000744 <main+0x5d4>)
 80006c6:	7a5b      	ldrb	r3, [r3, #9]
					snprintf(timeString, sizeof(timeString), "%02d:%02d:%02d",
 80006c8:	461a      	mov	r2, r3
							CLK.hour, CLK.min, CLK.sec);
 80006ca:	4b1e      	ldr	r3, [pc, #120]	@ (8000744 <main+0x5d4>)
 80006cc:	7a1b      	ldrb	r3, [r3, #8]
					snprintf(timeString, sizeof(timeString), "%02d:%02d:%02d",
 80006ce:	f107 001c 	add.w	r0, r7, #28
 80006d2:	9301      	str	r3, [sp, #4]
 80006d4:	9200      	str	r2, [sp, #0]
 80006d6:	460b      	mov	r3, r1
 80006d8:	4a1b      	ldr	r2, [pc, #108]	@ (8000748 <main+0x5d8>)
 80006da:	2132      	movs	r1, #50	@ 0x32
 80006dc:	f00a fe82 	bl	800b3e4 <sniprintf>
					Alcd_PutAt_n(&lcd, 1, 0, timeString, strlen(timeString));
 80006e0:	f107 031c 	add.w	r3, r7, #28
 80006e4:	4618      	mov	r0, r3
 80006e6:	f7ff fd3b 	bl	8000160 <strlen>
 80006ea:	4603      	mov	r3, r0
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	f107 021c 	add.w	r2, r7, #28
 80006f2:	9300      	str	r3, [sp, #0]
 80006f4:	4613      	mov	r3, r2
 80006f6:	2200      	movs	r2, #0
 80006f8:	2101      	movs	r1, #1
 80006fa:	480b      	ldr	r0, [pc, #44]	@ (8000728 <main+0x5b8>)
 80006fc:	f007 fb85 	bl	8007e0a <Alcd_PutAt_n>

					//check for PM or AM
					//in case: AM
					if (CLK.AM_PM == 0) {
 8000700:	4b10      	ldr	r3, [pc, #64]	@ (8000744 <main+0x5d4>)
 8000702:	7c5b      	ldrb	r3, [r3, #17]
 8000704:	f003 0302 	and.w	r3, r3, #2
 8000708:	b2db      	uxtb	r3, r3
 800070a:	2b00      	cmp	r3, #0
 800070c:	d120      	bne.n	8000750 <main+0x5e0>
						Alcd_PutAt(&lcd, 1, 9, "AM");
 800070e:	480f      	ldr	r0, [pc, #60]	@ (800074c <main+0x5dc>)
 8000710:	f007 fbe8 	bl	8007ee4 <Str_Len>
 8000714:	4603      	mov	r3, r0
 8000716:	b2db      	uxtb	r3, r3
 8000718:	9300      	str	r3, [sp, #0]
 800071a:	4b0c      	ldr	r3, [pc, #48]	@ (800074c <main+0x5dc>)
 800071c:	2209      	movs	r2, #9
 800071e:	2101      	movs	r1, #1
 8000720:	4801      	ldr	r0, [pc, #4]	@ (8000728 <main+0x5b8>)
 8000722:	f007 fb72 	bl	8007e0a <Alcd_PutAt_n>
 8000726:	e01f      	b.n	8000768 <main+0x5f8>
 8000728:	2000001c 	.word	0x2000001c
 800072c:	0800bdc8 	.word	0x0800bdc8
 8000730:	0800bdd0 	.word	0x0800bdd0
 8000734:	0800bdac 	.word	0x0800bdac
 8000738:	20000000 	.word	0x20000000
 800073c:	0800bdd8 	.word	0x0800bdd8
 8000740:	0800bde0 	.word	0x0800bde0
 8000744:	20000150 	.word	0x20000150
 8000748:	0800bd84 	.word	0x0800bd84
 800074c:	0800bd94 	.word	0x0800bd94

					} else {
						Alcd_PutAt(&lcd, 1, 9, "PM");
 8000750:	48b5      	ldr	r0, [pc, #724]	@ (8000a28 <main+0x8b8>)
 8000752:	f007 fbc7 	bl	8007ee4 <Str_Len>
 8000756:	4603      	mov	r3, r0
 8000758:	b2db      	uxtb	r3, r3
 800075a:	9300      	str	r3, [sp, #0]
 800075c:	4bb2      	ldr	r3, [pc, #712]	@ (8000a28 <main+0x8b8>)
 800075e:	2209      	movs	r2, #9
 8000760:	2101      	movs	r1, #1
 8000762:	48b2      	ldr	r0, [pc, #712]	@ (8000a2c <main+0x8bc>)
 8000764:	f007 fb51 	bl	8007e0a <Alcd_PutAt_n>

					}

					snprintf(timeString, sizeof(timeString), "%02d-%02d-%04d",
							CLK.date, CLK.month, CLK.year);
 8000768:	4bb1      	ldr	r3, [pc, #708]	@ (8000a30 <main+0x8c0>)
 800076a:	7b1b      	ldrb	r3, [r3, #12]
					snprintf(timeString, sizeof(timeString), "%02d-%02d-%04d",
 800076c:	4619      	mov	r1, r3
							CLK.date, CLK.month, CLK.year);
 800076e:	4bb0      	ldr	r3, [pc, #704]	@ (8000a30 <main+0x8c0>)
 8000770:	7b5b      	ldrb	r3, [r3, #13]
					snprintf(timeString, sizeof(timeString), "%02d-%02d-%04d",
 8000772:	461a      	mov	r2, r3
							CLK.date, CLK.month, CLK.year);
 8000774:	4bae      	ldr	r3, [pc, #696]	@ (8000a30 <main+0x8c0>)
 8000776:	89db      	ldrh	r3, [r3, #14]
					snprintf(timeString, sizeof(timeString), "%02d-%02d-%04d",
 8000778:	f107 001c 	add.w	r0, r7, #28
 800077c:	9301      	str	r3, [sp, #4]
 800077e:	9200      	str	r2, [sp, #0]
 8000780:	460b      	mov	r3, r1
 8000782:	4aac      	ldr	r2, [pc, #688]	@ (8000a34 <main+0x8c4>)
 8000784:	2132      	movs	r1, #50	@ 0x32
 8000786:	f00a fe2d 	bl	800b3e4 <sniprintf>
					Alcd_PutAt_n(&lcd, 0, 0, timeString, strlen(timeString));
 800078a:	f107 031c 	add.w	r3, r7, #28
 800078e:	4618      	mov	r0, r3
 8000790:	f7ff fce6 	bl	8000160 <strlen>
 8000794:	4603      	mov	r3, r0
 8000796:	b2db      	uxtb	r3, r3
 8000798:	f107 021c 	add.w	r2, r7, #28
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	4613      	mov	r3, r2
 80007a0:	2200      	movs	r2, #0
 80007a2:	2100      	movs	r1, #0
 80007a4:	48a1      	ldr	r0, [pc, #644]	@ (8000a2c <main+0x8bc>)
 80007a6:	f007 fb30 	bl	8007e0a <Alcd_PutAt_n>

					snprintf(timeString, sizeof(timeString), "%02d", status);
 80007aa:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 80007ae:	f107 001c 	add.w	r0, r7, #28
 80007b2:	4aa1      	ldr	r2, [pc, #644]	@ (8000a38 <main+0x8c8>)
 80007b4:	2132      	movs	r1, #50	@ 0x32
 80007b6:	f00a fe15 	bl	800b3e4 <sniprintf>
					Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 80007ba:	f107 031c 	add.w	r3, r7, #28
 80007be:	4618      	mov	r0, r3
 80007c0:	f7ff fcce 	bl	8000160 <strlen>
 80007c4:	4603      	mov	r3, r0
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	f107 021c 	add.w	r2, r7, #28
 80007cc:	9300      	str	r3, [sp, #0]
 80007ce:	4613      	mov	r3, r2
 80007d0:	220e      	movs	r2, #14
 80007d2:	2100      	movs	r1, #0
 80007d4:	4895      	ldr	r0, [pc, #596]	@ (8000a2c <main+0x8bc>)
 80007d6:	f007 fb18 	bl	8007e0a <Alcd_PutAt_n>
 80007da:	e075      	b.n	80008c8 <main+0x758>

				//in case of 24 format
				else {

					snprintf(timeString, sizeof(timeString), "%02d:%02d:%02d",
							CLK.hour, CLK.min, CLK.sec);
 80007dc:	4b94      	ldr	r3, [pc, #592]	@ (8000a30 <main+0x8c0>)
 80007de:	7a9b      	ldrb	r3, [r3, #10]
					snprintf(timeString, sizeof(timeString), "%02d:%02d:%02d",
 80007e0:	4619      	mov	r1, r3
							CLK.hour, CLK.min, CLK.sec);
 80007e2:	4b93      	ldr	r3, [pc, #588]	@ (8000a30 <main+0x8c0>)
 80007e4:	7a5b      	ldrb	r3, [r3, #9]
					snprintf(timeString, sizeof(timeString), "%02d:%02d:%02d",
 80007e6:	461a      	mov	r2, r3
							CLK.hour, CLK.min, CLK.sec);
 80007e8:	4b91      	ldr	r3, [pc, #580]	@ (8000a30 <main+0x8c0>)
 80007ea:	7a1b      	ldrb	r3, [r3, #8]
					snprintf(timeString, sizeof(timeString), "%02d:%02d:%02d",
 80007ec:	f107 001c 	add.w	r0, r7, #28
 80007f0:	9301      	str	r3, [sp, #4]
 80007f2:	9200      	str	r2, [sp, #0]
 80007f4:	460b      	mov	r3, r1
 80007f6:	4a91      	ldr	r2, [pc, #580]	@ (8000a3c <main+0x8cc>)
 80007f8:	2132      	movs	r1, #50	@ 0x32
 80007fa:	f00a fdf3 	bl	800b3e4 <sniprintf>

					// display the time
					Alcd_Clear(&lcd);
 80007fe:	488b      	ldr	r0, [pc, #556]	@ (8000a2c <main+0x8bc>)
 8000800:	f007 fb1c 	bl	8007e3c <Alcd_Clear>
					Alcd_Display_Control(&lcd, 1, 0, 0);
 8000804:	2300      	movs	r3, #0
 8000806:	2200      	movs	r2, #0
 8000808:	2101      	movs	r1, #1
 800080a:	4888      	ldr	r0, [pc, #544]	@ (8000a2c <main+0x8bc>)
 800080c:	f007 fb27 	bl	8007e5e <Alcd_Display_Control>
					Alcd_PutAt_n(&lcd, 1, 0, timeString, strlen(timeString));
 8000810:	f107 031c 	add.w	r3, r7, #28
 8000814:	4618      	mov	r0, r3
 8000816:	f7ff fca3 	bl	8000160 <strlen>
 800081a:	4603      	mov	r3, r0
 800081c:	b2db      	uxtb	r3, r3
 800081e:	f107 021c 	add.w	r2, r7, #28
 8000822:	9300      	str	r3, [sp, #0]
 8000824:	4613      	mov	r3, r2
 8000826:	2200      	movs	r2, #0
 8000828:	2101      	movs	r1, #1
 800082a:	4880      	ldr	r0, [pc, #512]	@ (8000a2c <main+0x8bc>)
 800082c:	f007 faed 	bl	8007e0a <Alcd_PutAt_n>

					snprintf(timeString, sizeof(timeString), "%02d-%02d-%04d",
							CLK.date, CLK.month, CLK.year);
 8000830:	4b7f      	ldr	r3, [pc, #508]	@ (8000a30 <main+0x8c0>)
 8000832:	7b1b      	ldrb	r3, [r3, #12]
					snprintf(timeString, sizeof(timeString), "%02d-%02d-%04d",
 8000834:	4619      	mov	r1, r3
							CLK.date, CLK.month, CLK.year);
 8000836:	4b7e      	ldr	r3, [pc, #504]	@ (8000a30 <main+0x8c0>)
 8000838:	7b5b      	ldrb	r3, [r3, #13]
					snprintf(timeString, sizeof(timeString), "%02d-%02d-%04d",
 800083a:	461a      	mov	r2, r3
							CLK.date, CLK.month, CLK.year);
 800083c:	4b7c      	ldr	r3, [pc, #496]	@ (8000a30 <main+0x8c0>)
 800083e:	89db      	ldrh	r3, [r3, #14]
					snprintf(timeString, sizeof(timeString), "%02d-%02d-%04d",
 8000840:	f107 001c 	add.w	r0, r7, #28
 8000844:	9301      	str	r3, [sp, #4]
 8000846:	9200      	str	r2, [sp, #0]
 8000848:	460b      	mov	r3, r1
 800084a:	4a7a      	ldr	r2, [pc, #488]	@ (8000a34 <main+0x8c4>)
 800084c:	2132      	movs	r1, #50	@ 0x32
 800084e:	f00a fdc9 	bl	800b3e4 <sniprintf>
					Alcd_PutAt_n(&lcd, 0, 0, timeString, strlen(timeString));
 8000852:	f107 031c 	add.w	r3, r7, #28
 8000856:	4618      	mov	r0, r3
 8000858:	f7ff fc82 	bl	8000160 <strlen>
 800085c:	4603      	mov	r3, r0
 800085e:	b2db      	uxtb	r3, r3
 8000860:	f107 021c 	add.w	r2, r7, #28
 8000864:	9300      	str	r3, [sp, #0]
 8000866:	4613      	mov	r3, r2
 8000868:	2200      	movs	r2, #0
 800086a:	2100      	movs	r1, #0
 800086c:	486f      	ldr	r0, [pc, #444]	@ (8000a2c <main+0x8bc>)
 800086e:	f007 facc 	bl	8007e0a <Alcd_PutAt_n>

					snprintf(timeString, sizeof(timeString), "%02d", status);
 8000872:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8000876:	f107 001c 	add.w	r0, r7, #28
 800087a:	4a6f      	ldr	r2, [pc, #444]	@ (8000a38 <main+0x8c8>)
 800087c:	2132      	movs	r1, #50	@ 0x32
 800087e:	f00a fdb1 	bl	800b3e4 <sniprintf>
					Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 8000882:	f107 031c 	add.w	r3, r7, #28
 8000886:	4618      	mov	r0, r3
 8000888:	f7ff fc6a 	bl	8000160 <strlen>
 800088c:	4603      	mov	r3, r0
 800088e:	b2db      	uxtb	r3, r3
 8000890:	f107 021c 	add.w	r2, r7, #28
 8000894:	9300      	str	r3, [sp, #0]
 8000896:	4613      	mov	r3, r2
 8000898:	220e      	movs	r2, #14
 800089a:	2100      	movs	r1, #0
 800089c:	4863      	ldr	r0, [pc, #396]	@ (8000a2c <main+0x8bc>)
 800089e:	f007 fab4 	bl	8007e0a <Alcd_PutAt_n>
 80008a2:	e011      	b.n	80008c8 <main+0x758>

				}

			} else {
				Alcd_Clear(&lcd);
 80008a4:	4861      	ldr	r0, [pc, #388]	@ (8000a2c <main+0x8bc>)
 80008a6:	f007 fac9 	bl	8007e3c <Alcd_Clear>
				Alcd_PutAt(&lcd, 0, 0, "RTC failure");
 80008aa:	4865      	ldr	r0, [pc, #404]	@ (8000a40 <main+0x8d0>)
 80008ac:	f007 fb1a 	bl	8007ee4 <Str_Len>
 80008b0:	4603      	mov	r3, r0
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	9300      	str	r3, [sp, #0]
 80008b6:	4b62      	ldr	r3, [pc, #392]	@ (8000a40 <main+0x8d0>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	2100      	movs	r1, #0
 80008bc:	485b      	ldr	r0, [pc, #364]	@ (8000a2c <main+0x8bc>)
 80008be:	f007 faa4 	bl	8007e0a <Alcd_PutAt_n>
				error_code = 1;
 80008c2:	2301      	movs	r3, #1
 80008c4:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
			}
			snprintf(timeString, sizeof(timeString), "%02d", status);
 80008c8:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 80008cc:	f107 001c 	add.w	r0, r7, #28
 80008d0:	4a59      	ldr	r2, [pc, #356]	@ (8000a38 <main+0x8c8>)
 80008d2:	2132      	movs	r1, #50	@ 0x32
 80008d4:	f00a fd86 	bl	800b3e4 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 80008d8:	f107 031c 	add.w	r3, r7, #28
 80008dc:	4618      	mov	r0, r3
 80008de:	f7ff fc3f 	bl	8000160 <strlen>
 80008e2:	4603      	mov	r3, r0
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	f107 021c 	add.w	r2, r7, #28
 80008ea:	9300      	str	r3, [sp, #0]
 80008ec:	4613      	mov	r3, r2
 80008ee:	220e      	movs	r2, #14
 80008f0:	2100      	movs	r1, #0
 80008f2:	484e      	ldr	r0, [pc, #312]	@ (8000a2c <main+0x8bc>)
 80008f4:	f007 fa89 	bl	8007e0a <Alcd_PutAt_n>

			//check if back is selected
			Keypad_Refresh(&kp);
 80008f8:	4852      	ldr	r0, [pc, #328]	@ (8000a44 <main+0x8d4>)
 80008fa:	f007 fb4d 	bl	8007f98 <Keypad_Refresh>
			if (Keypad_Get_Key(&kp, kp_button_no_back)
 80008fe:	210e      	movs	r1, #14
 8000900:	4850      	ldr	r0, [pc, #320]	@ (8000a44 <main+0x8d4>)
 8000902:	f007 fbe5 	bl	80080d0 <Keypad_Get_Key>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d006      	beq.n	800091a <main+0x7aa>
					&& (current_tick >= general_delay)) {
 800090c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800090e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000910:	429a      	cmp	r2, r3
 8000912:	d302      	bcc.n	800091a <main+0x7aa>

				//back to previous menu
				status = 11;
 8000914:	230b      	movs	r3, #11
 8000916:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

			}

			general_delay = HAL_GetTick() + 250;
 800091a:	f007 fc49 	bl	80081b0 <HAL_GetTick>
 800091e:	4603      	mov	r3, r0
 8000920:	33fa      	adds	r3, #250	@ 0xfa
 8000922:	65bb      	str	r3, [r7, #88]	@ 0x58
		while ((status == 13) && (current_tick >= general_delay)) {
 8000924:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8000928:	2b0d      	cmp	r3, #13
 800092a:	d174      	bne.n	8000a16 <main+0x8a6>
 800092c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800092e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000930:	429a      	cmp	r2, r3
 8000932:	f4bf aea9 	bcs.w	8000688 <main+0x518>
		}

		//view the time parameters -> status 14
		while ((status == 14) && (current_tick >= general_delay)) {
 8000936:	e06e      	b.n	8000a16 <main+0x8a6>

			//get the current tick number
			current_tick = HAL_GetTick();
 8000938:	f007 fc3a 	bl	80081b0 <HAL_GetTick>
 800093c:	6638      	str	r0, [r7, #96]	@ 0x60
			//clear the lcd
			Alcd_Clear(&lcd);
 800093e:	483b      	ldr	r0, [pc, #236]	@ (8000a2c <main+0x8bc>)
 8000940:	f007 fa7c 	bl	8007e3c <Alcd_Clear>
			Alcd_PutAt(&lcd, 0, 0, "Dose @");
 8000944:	4840      	ldr	r0, [pc, #256]	@ (8000a48 <main+0x8d8>)
 8000946:	f007 facd 	bl	8007ee4 <Str_Len>
 800094a:	4603      	mov	r3, r0
 800094c:	b2db      	uxtb	r3, r3
 800094e:	9300      	str	r3, [sp, #0]
 8000950:	4b3d      	ldr	r3, [pc, #244]	@ (8000a48 <main+0x8d8>)
 8000952:	2200      	movs	r2, #0
 8000954:	2100      	movs	r1, #0
 8000956:	4835      	ldr	r0, [pc, #212]	@ (8000a2c <main+0x8bc>)
 8000958:	f007 fa57 	bl	8007e0a <Alcd_PutAt_n>

			//reading dosing hours
			eeprom24c32_read(&memory, &dose_h, dosing_time_hours);
 800095c:	4b3b      	ldr	r3, [pc, #236]	@ (8000a4c <main+0x8dc>)
 800095e:	b29a      	uxth	r2, r3
 8000960:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000964:	4619      	mov	r1, r3
 8000966:	4839      	ldr	r0, [pc, #228]	@ (8000a4c <main+0x8dc>)
 8000968:	f006 fea0 	bl	80076ac <eeprom24c32_read>

			//reading dosing minutes
			eeprom24c32_read(&memory, &dose_m, dosing_time_minutes);
 800096c:	4b38      	ldr	r3, [pc, #224]	@ (8000a50 <main+0x8e0>)
 800096e:	b29a      	uxth	r2, r3
 8000970:	f107 0353 	add.w	r3, r7, #83	@ 0x53
 8000974:	4619      	mov	r1, r3
 8000976:	4835      	ldr	r0, [pc, #212]	@ (8000a4c <main+0x8dc>)
 8000978:	f006 fe98 	bl	80076ac <eeprom24c32_read>

			//reading dosing seconds
			eeprom24c32_read(&memory, &dose_s, dosing_time_seconds);
 800097c:	4b35      	ldr	r3, [pc, #212]	@ (8000a54 <main+0x8e4>)
 800097e:	b29a      	uxth	r2, r3
 8000980:	f107 0352 	add.w	r3, r7, #82	@ 0x52
 8000984:	4619      	mov	r1, r3
 8000986:	4831      	ldr	r0, [pc, #196]	@ (8000a4c <main+0x8dc>)
 8000988:	f006 fe90 	bl	80076ac <eeprom24c32_read>

			snprintf(timeString, sizeof(timeString), "%02d:%02d:%02d", dose_h,
 800098c:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8000990:	4619      	mov	r1, r3
 8000992:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8000996:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 800099a:	f107 001c 	add.w	r0, r7, #28
 800099e:	9201      	str	r2, [sp, #4]
 80009a0:	9300      	str	r3, [sp, #0]
 80009a2:	460b      	mov	r3, r1
 80009a4:	4a25      	ldr	r2, [pc, #148]	@ (8000a3c <main+0x8cc>)
 80009a6:	2132      	movs	r1, #50	@ 0x32
 80009a8:	f00a fd1c 	bl	800b3e4 <sniprintf>
					dose_m, dose_s);
			Alcd_PutAt_n(&lcd, 1, 0, timeString, strlen(timeString));
 80009ac:	f107 031c 	add.w	r3, r7, #28
 80009b0:	4618      	mov	r0, r3
 80009b2:	f7ff fbd5 	bl	8000160 <strlen>
 80009b6:	4603      	mov	r3, r0
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	f107 021c 	add.w	r2, r7, #28
 80009be:	9300      	str	r3, [sp, #0]
 80009c0:	4613      	mov	r3, r2
 80009c2:	2200      	movs	r2, #0
 80009c4:	2101      	movs	r1, #1
 80009c6:	4819      	ldr	r0, [pc, #100]	@ (8000a2c <main+0x8bc>)
 80009c8:	f007 fa1f 	bl	8007e0a <Alcd_PutAt_n>

			//check if back or next is selected
			Keypad_Refresh(&kp);
 80009cc:	481d      	ldr	r0, [pc, #116]	@ (8000a44 <main+0x8d4>)
 80009ce:	f007 fae3 	bl	8007f98 <Keypad_Refresh>
			//in case back is selected
			if (Keypad_Get_Key(&kp, kp_button_no_back)
 80009d2:	210e      	movs	r1, #14
 80009d4:	481b      	ldr	r0, [pc, #108]	@ (8000a44 <main+0x8d4>)
 80009d6:	f007 fb7b 	bl	80080d0 <Keypad_Get_Key>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d007      	beq.n	80009f0 <main+0x880>
					&& (current_tick >= general_delay)) {
 80009e0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80009e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80009e4:	429a      	cmp	r2, r3
 80009e6:	d303      	bcc.n	80009f0 <main+0x880>

				//back to previous menu
				status = 11;
 80009e8:	230b      	movs	r3, #11
 80009ea:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 80009ee:	e00d      	b.n	8000a0c <main+0x89c>

			}

			//in case next is selected
			else if (Keypad_Get_Key(&kp, kp_button_next)
 80009f0:	2103      	movs	r1, #3
 80009f2:	4814      	ldr	r0, [pc, #80]	@ (8000a44 <main+0x8d4>)
 80009f4:	f007 fb6c 	bl	80080d0 <Keypad_Get_Key>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d006      	beq.n	8000a0c <main+0x89c>
					&& (current_tick >= general_delay)) {
 80009fe:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000a00:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000a02:	429a      	cmp	r2, r3
 8000a04:	d302      	bcc.n	8000a0c <main+0x89c>

				//back to display no of doses -> status 15
				status = 15;
 8000a06:	230f      	movs	r3, #15
 8000a08:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

			}

			general_delay = HAL_GetTick() + 250;
 8000a0c:	f007 fbd0 	bl	80081b0 <HAL_GetTick>
 8000a10:	4603      	mov	r3, r0
 8000a12:	33fa      	adds	r3, #250	@ 0xfa
 8000a14:	65bb      	str	r3, [r7, #88]	@ 0x58
		while ((status == 14) && (current_tick >= general_delay)) {
 8000a16:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8000a1a:	2b0e      	cmp	r3, #14
 8000a1c:	d172      	bne.n	8000b04 <main+0x994>
 8000a1e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000a20:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000a22:	429a      	cmp	r2, r3
 8000a24:	d288      	bcs.n	8000938 <main+0x7c8>
		}

		//view the no. of doses -> status 15
		while ((status == 15) && (current_tick >= general_delay)) {
 8000a26:	e06d      	b.n	8000b04 <main+0x994>
 8000a28:	0800bd98 	.word	0x0800bd98
 8000a2c:	2000001c 	.word	0x2000001c
 8000a30:	20000150 	.word	0x20000150
 8000a34:	0800bd9c 	.word	0x0800bd9c
 8000a38:	0800bdac 	.word	0x0800bdac
 8000a3c:	0800bd84 	.word	0x0800bd84
 8000a40:	0800bdbc 	.word	0x0800bdbc
 8000a44:	20000000 	.word	0x20000000
 8000a48:	0800bdf0 	.word	0x0800bdf0
 8000a4c:	20000168 	.word	0x20000168
 8000a50:	2000016c 	.word	0x2000016c
 8000a54:	20000170 	.word	0x20000170

			//get the current tick number
			current_tick = HAL_GetTick();
 8000a58:	f007 fbaa 	bl	80081b0 <HAL_GetTick>
 8000a5c:	6638      	str	r0, [r7, #96]	@ 0x60
			//clear the lcd
			Alcd_Clear(&lcd);
 8000a5e:	48c2      	ldr	r0, [pc, #776]	@ (8000d68 <main+0xbf8>)
 8000a60:	f007 f9ec 	bl	8007e3c <Alcd_Clear>
			Alcd_PutAt(&lcd, 0, 0, "doses no.");
 8000a64:	48c1      	ldr	r0, [pc, #772]	@ (8000d6c <main+0xbfc>)
 8000a66:	f007 fa3d 	bl	8007ee4 <Str_Len>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	9300      	str	r3, [sp, #0]
 8000a70:	4bbe      	ldr	r3, [pc, #760]	@ (8000d6c <main+0xbfc>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	2100      	movs	r1, #0
 8000a76:	48bc      	ldr	r0, [pc, #752]	@ (8000d68 <main+0xbf8>)
 8000a78:	f007 f9c7 	bl	8007e0a <Alcd_PutAt_n>

			//reading dosing hours
			eeprom24c32_read(&memory, &dose_num, doses_number);
 8000a7c:	4bbc      	ldr	r3, [pc, #752]	@ (8000d70 <main+0xc00>)
 8000a7e:	b29a      	uxth	r2, r3
 8000a80:	f107 0351 	add.w	r3, r7, #81	@ 0x51
 8000a84:	4619      	mov	r1, r3
 8000a86:	48bb      	ldr	r0, [pc, #748]	@ (8000d74 <main+0xc04>)
 8000a88:	f006 fe10 	bl	80076ac <eeprom24c32_read>

			snprintf(timeString, sizeof(timeString), "%02d", dose_num);
 8000a8c:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 8000a90:	f107 001c 	add.w	r0, r7, #28
 8000a94:	4ab8      	ldr	r2, [pc, #736]	@ (8000d78 <main+0xc08>)
 8000a96:	2132      	movs	r1, #50	@ 0x32
 8000a98:	f00a fca4 	bl	800b3e4 <sniprintf>
			Alcd_PutAt_n(&lcd, 1, 0, timeString, strlen(timeString));
 8000a9c:	f107 031c 	add.w	r3, r7, #28
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f7ff fb5d 	bl	8000160 <strlen>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	f107 021c 	add.w	r2, r7, #28
 8000aae:	9300      	str	r3, [sp, #0]
 8000ab0:	4613      	mov	r3, r2
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	2101      	movs	r1, #1
 8000ab6:	48ac      	ldr	r0, [pc, #688]	@ (8000d68 <main+0xbf8>)
 8000ab8:	f007 f9a7 	bl	8007e0a <Alcd_PutAt_n>

			//check if back or next is selected
			Keypad_Refresh(&kp);
 8000abc:	48af      	ldr	r0, [pc, #700]	@ (8000d7c <main+0xc0c>)
 8000abe:	f007 fa6b 	bl	8007f98 <Keypad_Refresh>
			//in case back is selected
			if (Keypad_Get_Key(&kp, kp_button_no_back)
 8000ac2:	210e      	movs	r1, #14
 8000ac4:	48ad      	ldr	r0, [pc, #692]	@ (8000d7c <main+0xc0c>)
 8000ac6:	f007 fb03 	bl	80080d0 <Keypad_Get_Key>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d006      	beq.n	8000ade <main+0x96e>
					&& (current_tick >= general_delay)) {
 8000ad0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000ad2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d302      	bcc.n	8000ade <main+0x96e>

				//back to previous menu
				status = 11;
 8000ad8:	230b      	movs	r3, #11
 8000ada:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

			}

			//in case previous button is selected
			if (Keypad_Get_Key(&kp, kp_button_previous)
 8000ade:	2107      	movs	r1, #7
 8000ae0:	48a6      	ldr	r0, [pc, #664]	@ (8000d7c <main+0xc0c>)
 8000ae2:	f007 faf5 	bl	80080d0 <Keypad_Get_Key>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d006      	beq.n	8000afa <main+0x98a>
					&& (current_tick >= general_delay)) {
 8000aec:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000aee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000af0:	429a      	cmp	r2, r3
 8000af2:	d302      	bcc.n	8000afa <main+0x98a>

				//back to previous menu
				status = 14;
 8000af4:	230e      	movs	r3, #14
 8000af6:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

			}

			general_delay = HAL_GetTick() + 250;
 8000afa:	f007 fb59 	bl	80081b0 <HAL_GetTick>
 8000afe:	4603      	mov	r3, r0
 8000b00:	33fa      	adds	r3, #250	@ 0xfa
 8000b02:	65bb      	str	r3, [r7, #88]	@ 0x58
		while ((status == 15) && (current_tick >= general_delay)) {
 8000b04:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8000b08:	2b0f      	cmp	r3, #15
 8000b0a:	f040 83b3 	bne.w	8001274 <main+0x1104>
 8000b0e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000b10:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000b12:	429a      	cmp	r2, r3
 8000b14:	d2a0      	bcs.n	8000a58 <main+0x8e8>
		}

		//edit menu -> status 20
		while ((status == 20) && (current_tick >= general_delay)) {
 8000b16:	e3ad      	b.n	8001274 <main+0x1104>

			//get the current tick number
			current_tick = HAL_GetTick();
 8000b18:	f007 fb4a 	bl	80081b0 <HAL_GetTick>
 8000b1c:	6638      	str	r0, [r7, #96]	@ 0x60

			Alcd_PutAt(&lcd, 0, 0, "Password:");
 8000b1e:	4898      	ldr	r0, [pc, #608]	@ (8000d80 <main+0xc10>)
 8000b20:	f007 f9e0 	bl	8007ee4 <Str_Len>
 8000b24:	4603      	mov	r3, r0
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	9300      	str	r3, [sp, #0]
 8000b2a:	4b95      	ldr	r3, [pc, #596]	@ (8000d80 <main+0xc10>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2100      	movs	r1, #0
 8000b30:	488d      	ldr	r0, [pc, #564]	@ (8000d68 <main+0xbf8>)
 8000b32:	f007 f96a 	bl	8007e0a <Alcd_PutAt_n>
			snprintf(timeString, sizeof(timeString), "%02d", status);
 8000b36:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8000b3a:	f107 001c 	add.w	r0, r7, #28
 8000b3e:	4a8e      	ldr	r2, [pc, #568]	@ (8000d78 <main+0xc08>)
 8000b40:	2132      	movs	r1, #50	@ 0x32
 8000b42:	f00a fc4f 	bl	800b3e4 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 8000b46:	f107 031c 	add.w	r3, r7, #28
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f7ff fb08 	bl	8000160 <strlen>
 8000b50:	4603      	mov	r3, r0
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	f107 021c 	add.w	r2, r7, #28
 8000b58:	9300      	str	r3, [sp, #0]
 8000b5a:	4613      	mov	r3, r2
 8000b5c:	220e      	movs	r2, #14
 8000b5e:	2100      	movs	r1, #0
 8000b60:	4881      	ldr	r0, [pc, #516]	@ (8000d68 <main+0xbf8>)
 8000b62:	f007 f952 	bl	8007e0a <Alcd_PutAt_n>

			Alcd_CursorAt(&lcd, 1, input_index);
 8000b66:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	2101      	movs	r1, #1
 8000b6e:	487e      	ldr	r0, [pc, #504]	@ (8000d68 <main+0xbf8>)
 8000b70:	f007 f90f 	bl	8007d92 <Alcd_CursorAt>
			Alcd_Display_Control(&lcd, 1, 1, 1);
 8000b74:	2301      	movs	r3, #1
 8000b76:	2201      	movs	r2, #1
 8000b78:	2101      	movs	r1, #1
 8000b7a:	487b      	ldr	r0, [pc, #492]	@ (8000d68 <main+0xbf8>)
 8000b7c:	f007 f96f 	bl	8007e5e <Alcd_Display_Control>

			Keypad_Refresh(&kp);
 8000b80:	487e      	ldr	r0, [pc, #504]	@ (8000d7c <main+0xc0c>)
 8000b82:	f007 fa09 	bl	8007f98 <Keypad_Refresh>

			//in case back is selected
			if (Keypad_Get_Key(&kp, kp_button_no_back)
 8000b86:	210e      	movs	r1, #14
 8000b88:	487c      	ldr	r0, [pc, #496]	@ (8000d7c <main+0xc0c>)
 8000b8a:	f007 faa1 	bl	80080d0 <Keypad_Get_Key>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d00a      	beq.n	8000baa <main+0xa3a>
					&& (current_tick >= general_delay)) {
 8000b94:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000b96:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	d306      	bcc.n	8000baa <main+0xa3a>

				input_index = 0;  // Reset input index
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55

				//back to previous menu
				status = 11;
 8000ba2:	230b      	movs	r3, #11
 8000ba4:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 8000ba8:	e364      	b.n	8001274 <main+0x1104>

			}

			//if 0 is pressed
			else if (Keypad_Get_Key(&kp, kp_button_0)
 8000baa:	210d      	movs	r1, #13
 8000bac:	4873      	ldr	r0, [pc, #460]	@ (8000d7c <main+0xc0c>)
 8000bae:	f007 fa8f 	bl	80080d0 <Keypad_Get_Key>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d042      	beq.n	8000c3e <main+0xace>
					&& (current_tick >= general_delay)) {
 8000bb8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000bba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d33e      	bcc.n	8000c3e <main+0xace>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	2101      	movs	r1, #1
 8000bc6:	4868      	ldr	r0, [pc, #416]	@ (8000d68 <main+0xbf8>)
 8000bc8:	f007 f949 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered password
				if (input_index < 4) {
 8000bcc:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8000bd0:	2b03      	cmp	r3, #3
 8000bd2:	d827      	bhi.n	8000c24 <main+0xab4>
					entered_password[input_index] = '0';
 8000bd4:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8000bd8:	3368      	adds	r3, #104	@ 0x68
 8000bda:	443b      	add	r3, r7
 8000bdc:	2230      	movs	r2, #48	@ 0x30
 8000bde:	f803 2c5c 	strb.w	r2, [r3, #-92]
					entered_password[input_index + 1] = '\0'; // Null-terminate the string
 8000be2:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8000be6:	3301      	adds	r3, #1
 8000be8:	3368      	adds	r3, #104	@ 0x68
 8000bea:	443b      	add	r3, r7
 8000bec:	2200      	movs	r2, #0
 8000bee:	f803 2c5c 	strb.w	r2, [r3, #-92]
					Alcd_PutAt(&lcd, 1, input_index, "*");
 8000bf2:	4864      	ldr	r0, [pc, #400]	@ (8000d84 <main+0xc14>)
 8000bf4:	f007 f976 	bl	8007ee4 <Str_Len>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8000c00:	9300      	str	r3, [sp, #0]
 8000c02:	4b60      	ldr	r3, [pc, #384]	@ (8000d84 <main+0xc14>)
 8000c04:	2101      	movs	r1, #1
 8000c06:	4858      	ldr	r0, [pc, #352]	@ (8000d68 <main+0xbf8>)
 8000c08:	f007 f8ff 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 8000c0c:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8000c10:	3301      	adds	r3, #1
 8000c12:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8000c16:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	2101      	movs	r1, #1
 8000c1e:	4852      	ldr	r0, [pc, #328]	@ (8000d68 <main+0xbf8>)
 8000c20:	f007 f8b7 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8000c24:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8000c28:	2301      	movs	r3, #1
 8000c2a:	2101      	movs	r1, #1
 8000c2c:	484e      	ldr	r0, [pc, #312]	@ (8000d68 <main+0xbf8>)
 8000c2e:	f007 f916 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8000c32:	f007 fabd 	bl	80081b0 <HAL_GetTick>
 8000c36:	4603      	mov	r3, r0
 8000c38:	33fa      	adds	r3, #250	@ 0xfa
 8000c3a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000c3c:	e31a      	b.n	8001274 <main+0x1104>
			}

			//if 1 is pressed
			else if (Keypad_Get_Key(&kp, kp_button_1)
 8000c3e:	2100      	movs	r1, #0
 8000c40:	484e      	ldr	r0, [pc, #312]	@ (8000d7c <main+0xc0c>)
 8000c42:	f007 fa45 	bl	80080d0 <Keypad_Get_Key>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d042      	beq.n	8000cd2 <main+0xb62>
					&& (current_tick >= general_delay)) {
 8000c4c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000c4e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000c50:	429a      	cmp	r2, r3
 8000c52:	d33e      	bcc.n	8000cd2 <main+0xb62>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8000c54:	2300      	movs	r3, #0
 8000c56:	2200      	movs	r2, #0
 8000c58:	2101      	movs	r1, #1
 8000c5a:	4843      	ldr	r0, [pc, #268]	@ (8000d68 <main+0xbf8>)
 8000c5c:	f007 f8ff 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered password
				if (input_index < 4) {
 8000c60:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8000c64:	2b03      	cmp	r3, #3
 8000c66:	d827      	bhi.n	8000cb8 <main+0xb48>
					entered_password[input_index] = '1';
 8000c68:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8000c6c:	3368      	adds	r3, #104	@ 0x68
 8000c6e:	443b      	add	r3, r7
 8000c70:	2231      	movs	r2, #49	@ 0x31
 8000c72:	f803 2c5c 	strb.w	r2, [r3, #-92]
					entered_password[input_index + 1] = '\0'; // Null-terminate the string
 8000c76:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	3368      	adds	r3, #104	@ 0x68
 8000c7e:	443b      	add	r3, r7
 8000c80:	2200      	movs	r2, #0
 8000c82:	f803 2c5c 	strb.w	r2, [r3, #-92]
					Alcd_PutAt(&lcd, 1, input_index, "*");
 8000c86:	483f      	ldr	r0, [pc, #252]	@ (8000d84 <main+0xc14>)
 8000c88:	f007 f92c 	bl	8007ee4 <Str_Len>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8000c94:	9300      	str	r3, [sp, #0]
 8000c96:	4b3b      	ldr	r3, [pc, #236]	@ (8000d84 <main+0xc14>)
 8000c98:	2101      	movs	r1, #1
 8000c9a:	4833      	ldr	r0, [pc, #204]	@ (8000d68 <main+0xbf8>)
 8000c9c:	f007 f8b5 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 8000ca0:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8000caa:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8000cae:	461a      	mov	r2, r3
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	482d      	ldr	r0, [pc, #180]	@ (8000d68 <main+0xbf8>)
 8000cb4:	f007 f86d 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8000cb8:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	2101      	movs	r1, #1
 8000cc0:	4829      	ldr	r0, [pc, #164]	@ (8000d68 <main+0xbf8>)
 8000cc2:	f007 f8cc 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8000cc6:	f007 fa73 	bl	80081b0 <HAL_GetTick>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	33fa      	adds	r3, #250	@ 0xfa
 8000cce:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000cd0:	e2d0      	b.n	8001274 <main+0x1104>
			}

			//if 2 is pressed
			else if (Keypad_Get_Key(&kp, kp_button_2)
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	4829      	ldr	r0, [pc, #164]	@ (8000d7c <main+0xc0c>)
 8000cd6:	f007 f9fb 	bl	80080d0 <Keypad_Get_Key>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d053      	beq.n	8000d88 <main+0xc18>
					&& (current_tick >= general_delay)) {
 8000ce0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000ce2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	d34f      	bcc.n	8000d88 <main+0xc18>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8000ce8:	2300      	movs	r3, #0
 8000cea:	2200      	movs	r2, #0
 8000cec:	2101      	movs	r1, #1
 8000cee:	481e      	ldr	r0, [pc, #120]	@ (8000d68 <main+0xbf8>)
 8000cf0:	f007 f8b5 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered password
				if (input_index < 4) {
 8000cf4:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8000cf8:	2b03      	cmp	r3, #3
 8000cfa:	d827      	bhi.n	8000d4c <main+0xbdc>
					entered_password[input_index] = '2';
 8000cfc:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8000d00:	3368      	adds	r3, #104	@ 0x68
 8000d02:	443b      	add	r3, r7
 8000d04:	2232      	movs	r2, #50	@ 0x32
 8000d06:	f803 2c5c 	strb.w	r2, [r3, #-92]
					entered_password[input_index + 1] = '\0'; // Null-terminate the string
 8000d0a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8000d0e:	3301      	adds	r3, #1
 8000d10:	3368      	adds	r3, #104	@ 0x68
 8000d12:	443b      	add	r3, r7
 8000d14:	2200      	movs	r2, #0
 8000d16:	f803 2c5c 	strb.w	r2, [r3, #-92]
					Alcd_PutAt(&lcd, 1, input_index, "*");
 8000d1a:	481a      	ldr	r0, [pc, #104]	@ (8000d84 <main+0xc14>)
 8000d1c:	f007 f8e2 	bl	8007ee4 <Str_Len>
 8000d20:	4603      	mov	r3, r0
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8000d28:	9300      	str	r3, [sp, #0]
 8000d2a:	4b16      	ldr	r3, [pc, #88]	@ (8000d84 <main+0xc14>)
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	480e      	ldr	r0, [pc, #56]	@ (8000d68 <main+0xbf8>)
 8000d30:	f007 f86b 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 8000d34:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8000d38:	3301      	adds	r3, #1
 8000d3a:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8000d3e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8000d42:	461a      	mov	r2, r3
 8000d44:	2101      	movs	r1, #1
 8000d46:	4808      	ldr	r0, [pc, #32]	@ (8000d68 <main+0xbf8>)
 8000d48:	f007 f823 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8000d4c:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8000d50:	2301      	movs	r3, #1
 8000d52:	2101      	movs	r1, #1
 8000d54:	4804      	ldr	r0, [pc, #16]	@ (8000d68 <main+0xbf8>)
 8000d56:	f007 f882 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8000d5a:	f007 fa29 	bl	80081b0 <HAL_GetTick>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	33fa      	adds	r3, #250	@ 0xfa
 8000d62:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000d64:	e286      	b.n	8001274 <main+0x1104>
 8000d66:	bf00      	nop
 8000d68:	2000001c 	.word	0x2000001c
 8000d6c:	0800bdf8 	.word	0x0800bdf8
 8000d70:	20000174 	.word	0x20000174
 8000d74:	20000168 	.word	0x20000168
 8000d78:	0800bdac 	.word	0x0800bdac
 8000d7c:	20000000 	.word	0x20000000
 8000d80:	0800be04 	.word	0x0800be04
 8000d84:	0800be10 	.word	0x0800be10
			}

			//if 3 is pressed
			else if (Keypad_Get_Key(&kp, kp_button_3)
 8000d88:	2102      	movs	r1, #2
 8000d8a:	48b8      	ldr	r0, [pc, #736]	@ (800106c <main+0xefc>)
 8000d8c:	f007 f9a0 	bl	80080d0 <Keypad_Get_Key>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d042      	beq.n	8000e1c <main+0xcac>
					&& (current_tick >= general_delay)) {
 8000d96:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000d98:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	d33e      	bcc.n	8000e1c <main+0xcac>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8000d9e:	2300      	movs	r3, #0
 8000da0:	2200      	movs	r2, #0
 8000da2:	2101      	movs	r1, #1
 8000da4:	48b2      	ldr	r0, [pc, #712]	@ (8001070 <main+0xf00>)
 8000da6:	f007 f85a 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered password
				if (input_index < 4) {
 8000daa:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8000dae:	2b03      	cmp	r3, #3
 8000db0:	d827      	bhi.n	8000e02 <main+0xc92>
					entered_password[input_index] = '3';
 8000db2:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8000db6:	3368      	adds	r3, #104	@ 0x68
 8000db8:	443b      	add	r3, r7
 8000dba:	2233      	movs	r2, #51	@ 0x33
 8000dbc:	f803 2c5c 	strb.w	r2, [r3, #-92]
					entered_password[input_index + 1] = '\0'; // Null-terminate the string
 8000dc0:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	3368      	adds	r3, #104	@ 0x68
 8000dc8:	443b      	add	r3, r7
 8000dca:	2200      	movs	r2, #0
 8000dcc:	f803 2c5c 	strb.w	r2, [r3, #-92]
					Alcd_PutAt(&lcd, 1, input_index, "*");
 8000dd0:	48a8      	ldr	r0, [pc, #672]	@ (8001074 <main+0xf04>)
 8000dd2:	f007 f887 	bl	8007ee4 <Str_Len>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8000dde:	9300      	str	r3, [sp, #0]
 8000de0:	4ba4      	ldr	r3, [pc, #656]	@ (8001074 <main+0xf04>)
 8000de2:	2101      	movs	r1, #1
 8000de4:	48a2      	ldr	r0, [pc, #648]	@ (8001070 <main+0xf00>)
 8000de6:	f007 f810 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 8000dea:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8000dee:	3301      	adds	r3, #1
 8000df0:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8000df4:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8000df8:	461a      	mov	r2, r3
 8000dfa:	2101      	movs	r1, #1
 8000dfc:	489c      	ldr	r0, [pc, #624]	@ (8001070 <main+0xf00>)
 8000dfe:	f006 ffc8 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8000e02:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8000e06:	2301      	movs	r3, #1
 8000e08:	2101      	movs	r1, #1
 8000e0a:	4899      	ldr	r0, [pc, #612]	@ (8001070 <main+0xf00>)
 8000e0c:	f007 f827 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8000e10:	f007 f9ce 	bl	80081b0 <HAL_GetTick>
 8000e14:	4603      	mov	r3, r0
 8000e16:	33fa      	adds	r3, #250	@ 0xfa
 8000e18:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000e1a:	e22b      	b.n	8001274 <main+0x1104>
			}
			//if 4 is pressed
			else if (Keypad_Get_Key(&kp, kp_button_4)
 8000e1c:	2104      	movs	r1, #4
 8000e1e:	4893      	ldr	r0, [pc, #588]	@ (800106c <main+0xefc>)
 8000e20:	f007 f956 	bl	80080d0 <Keypad_Get_Key>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d042      	beq.n	8000eb0 <main+0xd40>
					&& (current_tick >= general_delay)) {
 8000e2a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000e2c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d33e      	bcc.n	8000eb0 <main+0xd40>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8000e32:	2300      	movs	r3, #0
 8000e34:	2200      	movs	r2, #0
 8000e36:	2101      	movs	r1, #1
 8000e38:	488d      	ldr	r0, [pc, #564]	@ (8001070 <main+0xf00>)
 8000e3a:	f007 f810 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered password
				if (input_index < 4) {
 8000e3e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8000e42:	2b03      	cmp	r3, #3
 8000e44:	d827      	bhi.n	8000e96 <main+0xd26>
					entered_password[input_index] = '4';
 8000e46:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8000e4a:	3368      	adds	r3, #104	@ 0x68
 8000e4c:	443b      	add	r3, r7
 8000e4e:	2234      	movs	r2, #52	@ 0x34
 8000e50:	f803 2c5c 	strb.w	r2, [r3, #-92]
					entered_password[input_index + 1] = '\0'; // Null-terminate the string
 8000e54:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8000e58:	3301      	adds	r3, #1
 8000e5a:	3368      	adds	r3, #104	@ 0x68
 8000e5c:	443b      	add	r3, r7
 8000e5e:	2200      	movs	r2, #0
 8000e60:	f803 2c5c 	strb.w	r2, [r3, #-92]
					Alcd_PutAt(&lcd, 1, input_index, "*");
 8000e64:	4883      	ldr	r0, [pc, #524]	@ (8001074 <main+0xf04>)
 8000e66:	f007 f83d 	bl	8007ee4 <Str_Len>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8000e72:	9300      	str	r3, [sp, #0]
 8000e74:	4b7f      	ldr	r3, [pc, #508]	@ (8001074 <main+0xf04>)
 8000e76:	2101      	movs	r1, #1
 8000e78:	487d      	ldr	r0, [pc, #500]	@ (8001070 <main+0xf00>)
 8000e7a:	f006 ffc6 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 8000e7e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8000e82:	3301      	adds	r3, #1
 8000e84:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8000e88:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	2101      	movs	r1, #1
 8000e90:	4877      	ldr	r0, [pc, #476]	@ (8001070 <main+0xf00>)
 8000e92:	f006 ff7e 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8000e96:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	2101      	movs	r1, #1
 8000e9e:	4874      	ldr	r0, [pc, #464]	@ (8001070 <main+0xf00>)
 8000ea0:	f006 ffdd 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8000ea4:	f007 f984 	bl	80081b0 <HAL_GetTick>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	33fa      	adds	r3, #250	@ 0xfa
 8000eac:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000eae:	e1e1      	b.n	8001274 <main+0x1104>
			}

			//if 5 is pressed
			else if (Keypad_Get_Key(&kp, kp_button_5)
 8000eb0:	2105      	movs	r1, #5
 8000eb2:	486e      	ldr	r0, [pc, #440]	@ (800106c <main+0xefc>)
 8000eb4:	f007 f90c 	bl	80080d0 <Keypad_Get_Key>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d042      	beq.n	8000f44 <main+0xdd4>
					&& (current_tick >= general_delay)) {
 8000ebe:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000ec0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	d33e      	bcc.n	8000f44 <main+0xdd4>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	2200      	movs	r2, #0
 8000eca:	2101      	movs	r1, #1
 8000ecc:	4868      	ldr	r0, [pc, #416]	@ (8001070 <main+0xf00>)
 8000ece:	f006 ffc6 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered password
				if (input_index < 4) {
 8000ed2:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8000ed6:	2b03      	cmp	r3, #3
 8000ed8:	d827      	bhi.n	8000f2a <main+0xdba>
					entered_password[input_index] = '5';
 8000eda:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8000ede:	3368      	adds	r3, #104	@ 0x68
 8000ee0:	443b      	add	r3, r7
 8000ee2:	2235      	movs	r2, #53	@ 0x35
 8000ee4:	f803 2c5c 	strb.w	r2, [r3, #-92]
					entered_password[input_index + 1] = '\0'; // Null-terminate the string
 8000ee8:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8000eec:	3301      	adds	r3, #1
 8000eee:	3368      	adds	r3, #104	@ 0x68
 8000ef0:	443b      	add	r3, r7
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f803 2c5c 	strb.w	r2, [r3, #-92]
					Alcd_PutAt(&lcd, 1, input_index, "*");
 8000ef8:	485e      	ldr	r0, [pc, #376]	@ (8001074 <main+0xf04>)
 8000efa:	f006 fff3 	bl	8007ee4 <Str_Len>
 8000efe:	4603      	mov	r3, r0
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8000f06:	9300      	str	r3, [sp, #0]
 8000f08:	4b5a      	ldr	r3, [pc, #360]	@ (8001074 <main+0xf04>)
 8000f0a:	2101      	movs	r1, #1
 8000f0c:	4858      	ldr	r0, [pc, #352]	@ (8001070 <main+0xf00>)
 8000f0e:	f006 ff7c 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 8000f12:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8000f16:	3301      	adds	r3, #1
 8000f18:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8000f1c:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8000f20:	461a      	mov	r2, r3
 8000f22:	2101      	movs	r1, #1
 8000f24:	4852      	ldr	r0, [pc, #328]	@ (8001070 <main+0xf00>)
 8000f26:	f006 ff34 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8000f2a:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8000f2e:	2301      	movs	r3, #1
 8000f30:	2101      	movs	r1, #1
 8000f32:	484f      	ldr	r0, [pc, #316]	@ (8001070 <main+0xf00>)
 8000f34:	f006 ff93 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8000f38:	f007 f93a 	bl	80081b0 <HAL_GetTick>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	33fa      	adds	r3, #250	@ 0xfa
 8000f40:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000f42:	e197      	b.n	8001274 <main+0x1104>
			}

			//if 6 is pressed
			else if (Keypad_Get_Key(&kp, kp_button_6)
 8000f44:	2106      	movs	r1, #6
 8000f46:	4849      	ldr	r0, [pc, #292]	@ (800106c <main+0xefc>)
 8000f48:	f007 f8c2 	bl	80080d0 <Keypad_Get_Key>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d042      	beq.n	8000fd8 <main+0xe68>
					&& (current_tick >= general_delay)) {
 8000f52:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000f54:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000f56:	429a      	cmp	r2, r3
 8000f58:	d33e      	bcc.n	8000fd8 <main+0xe68>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	2101      	movs	r1, #1
 8000f60:	4843      	ldr	r0, [pc, #268]	@ (8001070 <main+0xf00>)
 8000f62:	f006 ff7c 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered password
				if (input_index < 4) {
 8000f66:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8000f6a:	2b03      	cmp	r3, #3
 8000f6c:	d827      	bhi.n	8000fbe <main+0xe4e>
					entered_password[input_index] = '6';
 8000f6e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8000f72:	3368      	adds	r3, #104	@ 0x68
 8000f74:	443b      	add	r3, r7
 8000f76:	2236      	movs	r2, #54	@ 0x36
 8000f78:	f803 2c5c 	strb.w	r2, [r3, #-92]
					entered_password[input_index + 1] = '\0'; // Null-terminate the string
 8000f7c:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8000f80:	3301      	adds	r3, #1
 8000f82:	3368      	adds	r3, #104	@ 0x68
 8000f84:	443b      	add	r3, r7
 8000f86:	2200      	movs	r2, #0
 8000f88:	f803 2c5c 	strb.w	r2, [r3, #-92]
					Alcd_PutAt(&lcd, 1, input_index, "*");
 8000f8c:	4839      	ldr	r0, [pc, #228]	@ (8001074 <main+0xf04>)
 8000f8e:	f006 ffa9 	bl	8007ee4 <Str_Len>
 8000f92:	4603      	mov	r3, r0
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8000f9a:	9300      	str	r3, [sp, #0]
 8000f9c:	4b35      	ldr	r3, [pc, #212]	@ (8001074 <main+0xf04>)
 8000f9e:	2101      	movs	r1, #1
 8000fa0:	4833      	ldr	r0, [pc, #204]	@ (8001070 <main+0xf00>)
 8000fa2:	f006 ff32 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 8000fa6:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8000faa:	3301      	adds	r3, #1
 8000fac:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8000fb0:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	2101      	movs	r1, #1
 8000fb8:	482d      	ldr	r0, [pc, #180]	@ (8001070 <main+0xf00>)
 8000fba:	f006 feea 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8000fbe:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	2101      	movs	r1, #1
 8000fc6:	482a      	ldr	r0, [pc, #168]	@ (8001070 <main+0xf00>)
 8000fc8:	f006 ff49 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8000fcc:	f007 f8f0 	bl	80081b0 <HAL_GetTick>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	33fa      	adds	r3, #250	@ 0xfa
 8000fd4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000fd6:	e14d      	b.n	8001274 <main+0x1104>
			}
			//if 7 is pressed
			else if (Keypad_Get_Key(&kp, kp_button_7)
 8000fd8:	2108      	movs	r1, #8
 8000fda:	4824      	ldr	r0, [pc, #144]	@ (800106c <main+0xefc>)
 8000fdc:	f007 f878 	bl	80080d0 <Keypad_Get_Key>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d048      	beq.n	8001078 <main+0xf08>
					&& (current_tick >= general_delay)) {
 8000fe6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000fe8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000fea:	429a      	cmp	r2, r3
 8000fec:	d344      	bcc.n	8001078 <main+0xf08>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8000fee:	2300      	movs	r3, #0
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	2101      	movs	r1, #1
 8000ff4:	481e      	ldr	r0, [pc, #120]	@ (8001070 <main+0xf00>)
 8000ff6:	f006 ff32 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered password
				if (input_index < 4) {
 8000ffa:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8000ffe:	2b03      	cmp	r3, #3
 8001000:	d827      	bhi.n	8001052 <main+0xee2>
					entered_password[input_index] = '7';
 8001002:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001006:	3368      	adds	r3, #104	@ 0x68
 8001008:	443b      	add	r3, r7
 800100a:	2237      	movs	r2, #55	@ 0x37
 800100c:	f803 2c5c 	strb.w	r2, [r3, #-92]
					entered_password[input_index + 1] = '\0'; // Null-terminate the string
 8001010:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001014:	3301      	adds	r3, #1
 8001016:	3368      	adds	r3, #104	@ 0x68
 8001018:	443b      	add	r3, r7
 800101a:	2200      	movs	r2, #0
 800101c:	f803 2c5c 	strb.w	r2, [r3, #-92]
					Alcd_PutAt(&lcd, 1, input_index, "*");
 8001020:	4814      	ldr	r0, [pc, #80]	@ (8001074 <main+0xf04>)
 8001022:	f006 ff5f 	bl	8007ee4 <Str_Len>
 8001026:	4603      	mov	r3, r0
 8001028:	b2db      	uxtb	r3, r3
 800102a:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 800102e:	9300      	str	r3, [sp, #0]
 8001030:	4b10      	ldr	r3, [pc, #64]	@ (8001074 <main+0xf04>)
 8001032:	2101      	movs	r1, #1
 8001034:	480e      	ldr	r0, [pc, #56]	@ (8001070 <main+0xf00>)
 8001036:	f006 fee8 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 800103a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800103e:	3301      	adds	r3, #1
 8001040:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8001044:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001048:	461a      	mov	r2, r3
 800104a:	2101      	movs	r1, #1
 800104c:	4808      	ldr	r0, [pc, #32]	@ (8001070 <main+0xf00>)
 800104e:	f006 fea0 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8001052:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8001056:	2301      	movs	r3, #1
 8001058:	2101      	movs	r1, #1
 800105a:	4805      	ldr	r0, [pc, #20]	@ (8001070 <main+0xf00>)
 800105c:	f006 feff 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8001060:	f007 f8a6 	bl	80081b0 <HAL_GetTick>
 8001064:	4603      	mov	r3, r0
 8001066:	33fa      	adds	r3, #250	@ 0xfa
 8001068:	65bb      	str	r3, [r7, #88]	@ 0x58
 800106a:	e103      	b.n	8001274 <main+0x1104>
 800106c:	20000000 	.word	0x20000000
 8001070:	2000001c 	.word	0x2000001c
 8001074:	0800be10 	.word	0x0800be10
			}
			//if 8 is pressed
			else if (Keypad_Get_Key(&kp, kp_button_8)
 8001078:	2109      	movs	r1, #9
 800107a:	48b7      	ldr	r0, [pc, #732]	@ (8001358 <main+0x11e8>)
 800107c:	f007 f828 	bl	80080d0 <Keypad_Get_Key>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d042      	beq.n	800110c <main+0xf9c>
					&& (current_tick >= general_delay)) {
 8001086:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001088:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800108a:	429a      	cmp	r2, r3
 800108c:	d33e      	bcc.n	800110c <main+0xf9c>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 800108e:	2300      	movs	r3, #0
 8001090:	2200      	movs	r2, #0
 8001092:	2101      	movs	r1, #1
 8001094:	48b1      	ldr	r0, [pc, #708]	@ (800135c <main+0x11ec>)
 8001096:	f006 fee2 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered password
				if (input_index < 4) {
 800109a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800109e:	2b03      	cmp	r3, #3
 80010a0:	d827      	bhi.n	80010f2 <main+0xf82>
					entered_password[input_index] = '8';
 80010a2:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80010a6:	3368      	adds	r3, #104	@ 0x68
 80010a8:	443b      	add	r3, r7
 80010aa:	2238      	movs	r2, #56	@ 0x38
 80010ac:	f803 2c5c 	strb.w	r2, [r3, #-92]
					entered_password[input_index + 1] = '\0'; // Null-terminate the string
 80010b0:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80010b4:	3301      	adds	r3, #1
 80010b6:	3368      	adds	r3, #104	@ 0x68
 80010b8:	443b      	add	r3, r7
 80010ba:	2200      	movs	r2, #0
 80010bc:	f803 2c5c 	strb.w	r2, [r3, #-92]
					Alcd_PutAt(&lcd, 1, input_index, "*");
 80010c0:	48a7      	ldr	r0, [pc, #668]	@ (8001360 <main+0x11f0>)
 80010c2:	f006 ff0f 	bl	8007ee4 <Str_Len>
 80010c6:	4603      	mov	r3, r0
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 80010ce:	9300      	str	r3, [sp, #0]
 80010d0:	4ba3      	ldr	r3, [pc, #652]	@ (8001360 <main+0x11f0>)
 80010d2:	2101      	movs	r1, #1
 80010d4:	48a1      	ldr	r0, [pc, #644]	@ (800135c <main+0x11ec>)
 80010d6:	f006 fe98 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 80010da:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80010de:	3301      	adds	r3, #1
 80010e0:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 80010e4:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80010e8:	461a      	mov	r2, r3
 80010ea:	2101      	movs	r1, #1
 80010ec:	489b      	ldr	r0, [pc, #620]	@ (800135c <main+0x11ec>)
 80010ee:	f006 fe50 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 80010f2:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 80010f6:	2301      	movs	r3, #1
 80010f8:	2101      	movs	r1, #1
 80010fa:	4898      	ldr	r0, [pc, #608]	@ (800135c <main+0x11ec>)
 80010fc:	f006 feaf 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8001100:	f007 f856 	bl	80081b0 <HAL_GetTick>
 8001104:	4603      	mov	r3, r0
 8001106:	33fa      	adds	r3, #250	@ 0xfa
 8001108:	65bb      	str	r3, [r7, #88]	@ 0x58
 800110a:	e0b3      	b.n	8001274 <main+0x1104>
			}
			//if 9 is pressed
			else if (Keypad_Get_Key(&kp, kp_button_9)
 800110c:	210a      	movs	r1, #10
 800110e:	4892      	ldr	r0, [pc, #584]	@ (8001358 <main+0x11e8>)
 8001110:	f006 ffde 	bl	80080d0 <Keypad_Get_Key>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d042      	beq.n	80011a0 <main+0x1030>
					&& (current_tick >= general_delay)) {
 800111a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800111c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800111e:	429a      	cmp	r2, r3
 8001120:	d33e      	bcc.n	80011a0 <main+0x1030>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8001122:	2300      	movs	r3, #0
 8001124:	2200      	movs	r2, #0
 8001126:	2101      	movs	r1, #1
 8001128:	488c      	ldr	r0, [pc, #560]	@ (800135c <main+0x11ec>)
 800112a:	f006 fe98 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered password
				if (input_index < 4) {
 800112e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001132:	2b03      	cmp	r3, #3
 8001134:	d827      	bhi.n	8001186 <main+0x1016>
					entered_password[input_index] = '9';
 8001136:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800113a:	3368      	adds	r3, #104	@ 0x68
 800113c:	443b      	add	r3, r7
 800113e:	2239      	movs	r2, #57	@ 0x39
 8001140:	f803 2c5c 	strb.w	r2, [r3, #-92]
					entered_password[input_index + 1] = '\0'; // Null-terminate the string
 8001144:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001148:	3301      	adds	r3, #1
 800114a:	3368      	adds	r3, #104	@ 0x68
 800114c:	443b      	add	r3, r7
 800114e:	2200      	movs	r2, #0
 8001150:	f803 2c5c 	strb.w	r2, [r3, #-92]
					Alcd_PutAt(&lcd, 1, input_index, "*");
 8001154:	4882      	ldr	r0, [pc, #520]	@ (8001360 <main+0x11f0>)
 8001156:	f006 fec5 	bl	8007ee4 <Str_Len>
 800115a:	4603      	mov	r3, r0
 800115c:	b2db      	uxtb	r3, r3
 800115e:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8001162:	9300      	str	r3, [sp, #0]
 8001164:	4b7e      	ldr	r3, [pc, #504]	@ (8001360 <main+0x11f0>)
 8001166:	2101      	movs	r1, #1
 8001168:	487c      	ldr	r0, [pc, #496]	@ (800135c <main+0x11ec>)
 800116a:	f006 fe4e 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 800116e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001172:	3301      	adds	r3, #1
 8001174:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8001178:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800117c:	461a      	mov	r2, r3
 800117e:	2101      	movs	r1, #1
 8001180:	4876      	ldr	r0, [pc, #472]	@ (800135c <main+0x11ec>)
 8001182:	f006 fe06 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8001186:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 800118a:	2301      	movs	r3, #1
 800118c:	2101      	movs	r1, #1
 800118e:	4873      	ldr	r0, [pc, #460]	@ (800135c <main+0x11ec>)
 8001190:	f006 fe65 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8001194:	f007 f80c 	bl	80081b0 <HAL_GetTick>
 8001198:	4603      	mov	r3, r0
 800119a:	33fa      	adds	r3, #250	@ 0xfa
 800119c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800119e:	e069      	b.n	8001274 <main+0x1104>
			}

			//if yes is pressed
			else if (Keypad_Get_Key(&kp, kp_button_yes)
 80011a0:	210f      	movs	r1, #15
 80011a2:	486d      	ldr	r0, [pc, #436]	@ (8001358 <main+0x11e8>)
 80011a4:	f006 ff94 	bl	80080d0 <Keypad_Get_Key>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d062      	beq.n	8001274 <main+0x1104>
					&& (current_tick >= general_delay)) {
 80011ae:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80011b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d35e      	bcc.n	8001274 <main+0x1104>
				// Compare entered password with the saved password (menu_pass)
				if (strcmp(entered_password, menu_pass) == 0) {
 80011b6:	f107 0214 	add.w	r2, r7, #20
 80011ba:	f107 030c 	add.w	r3, r7, #12
 80011be:	4611      	mov	r1, r2
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7fe ffc3 	bl	800014c <strcmp>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d124      	bne.n	8001216 <main+0x10a6>

					// Password is correct, proceed to the next menu or operation
					Alcd_Clear(&lcd);
 80011cc:	4863      	ldr	r0, [pc, #396]	@ (800135c <main+0x11ec>)
 80011ce:	f006 fe35 	bl	8007e3c <Alcd_Clear>
					Alcd_PutAt(&lcd, 0, 0, "Access Granted");
 80011d2:	4864      	ldr	r0, [pc, #400]	@ (8001364 <main+0x11f4>)
 80011d4:	f006 fe86 	bl	8007ee4 <Str_Len>
 80011d8:	4603      	mov	r3, r0
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	9300      	str	r3, [sp, #0]
 80011de:	4b61      	ldr	r3, [pc, #388]	@ (8001364 <main+0x11f4>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	2100      	movs	r1, #0
 80011e4:	485d      	ldr	r0, [pc, #372]	@ (800135c <main+0x11ec>)
 80011e6:	f006 fe10 	bl	8007e0a <Alcd_PutAt_n>
					//HAL_Delay(2000);

					//raise the password compare flag
					password_comp_flag = 1;
 80011ea:	2301      	movs	r3, #1
 80011ec:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

					Alcd_Display_Control(&lcd, 1, 0, 0);
 80011f0:	2300      	movs	r3, #0
 80011f2:	2200      	movs	r2, #0
 80011f4:	2101      	movs	r1, #1
 80011f6:	4859      	ldr	r0, [pc, #356]	@ (800135c <main+0x11ec>)
 80011f8:	f006 fe31 	bl	8007e5e <Alcd_Display_Control>

					status = 21;
 80011fc:	2315      	movs	r3, #21
 80011fe:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

					input_index = 0; //reset the input index
 8001202:	2300      	movs	r3, #0
 8001204:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					general_delay = HAL_GetTick() + 1500;
 8001208:	f006 ffd2 	bl	80081b0 <HAL_GetTick>
 800120c:	4603      	mov	r3, r0
 800120e:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 8001212:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001214:	e023      	b.n	800125e <main+0x10ee>
				}

				else {
					// Password is incorrect, display error message
					Alcd_Clear(&lcd);
 8001216:	4851      	ldr	r0, [pc, #324]	@ (800135c <main+0x11ec>)
 8001218:	f006 fe10 	bl	8007e3c <Alcd_Clear>
					Alcd_PutAt(&lcd, 0, 0, "Wrong Password");
 800121c:	4852      	ldr	r0, [pc, #328]	@ (8001368 <main+0x11f8>)
 800121e:	f006 fe61 	bl	8007ee4 <Str_Len>
 8001222:	4603      	mov	r3, r0
 8001224:	b2db      	uxtb	r3, r3
 8001226:	9300      	str	r3, [sp, #0]
 8001228:	4b4f      	ldr	r3, [pc, #316]	@ (8001368 <main+0x11f8>)
 800122a:	2200      	movs	r2, #0
 800122c:	2100      	movs	r1, #0
 800122e:	484b      	ldr	r0, [pc, #300]	@ (800135c <main+0x11ec>)
 8001230:	f006 fdeb 	bl	8007e0a <Alcd_PutAt_n>

					//raise the password compare flag
					password_comp_flag = 1;
 8001234:	2301      	movs	r3, #1
 8001236:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

					input_index = 0; //reset the input index
 800123a:	2300      	movs	r3, #0
 800123c:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_Display_Control(&lcd, 1, 0, 0);
 8001240:	2300      	movs	r3, #0
 8001242:	2200      	movs	r2, #0
 8001244:	2101      	movs	r1, #1
 8001246:	4845      	ldr	r0, [pc, #276]	@ (800135c <main+0x11ec>)
 8001248:	f006 fe09 	bl	8007e5e <Alcd_Display_Control>

					status = 10;
 800124c:	230a      	movs	r3, #10
 800124e:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

					general_delay = HAL_GetTick() + 1500;
 8001252:	f006 ffad 	bl	80081b0 <HAL_GetTick>
 8001256:	4603      	mov	r3, r0
 8001258:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 800125c:	65bb      	str	r3, [r7, #88]	@ 0x58

				}

				//create a delay
				if ((password_comp_flag == 1)
 800125e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001262:	2b01      	cmp	r3, #1
 8001264:	d106      	bne.n	8001274 <main+0x1104>
						&& (current_tick >= general_delay)) {
 8001266:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001268:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800126a:	429a      	cmp	r2, r3
 800126c:	d302      	bcc.n	8001274 <main+0x1104>

					password_comp_flag = 0;
 800126e:	2300      	movs	r3, #0
 8001270:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		while ((status == 20) && (current_tick >= general_delay)) {
 8001274:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8001278:	2b14      	cmp	r3, #20
 800127a:	f040 8090 	bne.w	800139e <main+0x122e>
 800127e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001280:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001282:	429a      	cmp	r2, r3
 8001284:	f4bf ac48 	bcs.w	8000b18 <main+0x9a8>
			}

		}

		//view the edit menu -> status 21
		while ((status == 21) && (current_tick >= general_delay)) {
 8001288:	e089      	b.n	800139e <main+0x122e>

			//get the current tick number
			current_tick = HAL_GetTick();
 800128a:	f006 ff91 	bl	80081b0 <HAL_GetTick>
 800128e:	6638      	str	r0, [r7, #96]	@ 0x60

			Alcd_Clear(&lcd);
 8001290:	4832      	ldr	r0, [pc, #200]	@ (800135c <main+0x11ec>)
 8001292:	f006 fdd3 	bl	8007e3c <Alcd_Clear>
			Alcd_PutAt(&lcd, 0, 0, "1: parameters");
 8001296:	4835      	ldr	r0, [pc, #212]	@ (800136c <main+0x11fc>)
 8001298:	f006 fe24 	bl	8007ee4 <Str_Len>
 800129c:	4603      	mov	r3, r0
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	9300      	str	r3, [sp, #0]
 80012a2:	4b32      	ldr	r3, [pc, #200]	@ (800136c <main+0x11fc>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	2100      	movs	r1, #0
 80012a8:	482c      	ldr	r0, [pc, #176]	@ (800135c <main+0x11ec>)
 80012aa:	f006 fdae 	bl	8007e0a <Alcd_PutAt_n>
			Alcd_PutAt(&lcd, 1, 0, "2: calibration");
 80012ae:	4830      	ldr	r0, [pc, #192]	@ (8001370 <main+0x1200>)
 80012b0:	f006 fe18 	bl	8007ee4 <Str_Len>
 80012b4:	4603      	mov	r3, r0
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	9300      	str	r3, [sp, #0]
 80012ba:	4b2d      	ldr	r3, [pc, #180]	@ (8001370 <main+0x1200>)
 80012bc:	2200      	movs	r2, #0
 80012be:	2101      	movs	r1, #1
 80012c0:	4826      	ldr	r0, [pc, #152]	@ (800135c <main+0x11ec>)
 80012c2:	f006 fda2 	bl	8007e0a <Alcd_PutAt_n>
			snprintf(timeString, sizeof(timeString), "%02d", status);
 80012c6:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 80012ca:	f107 001c 	add.w	r0, r7, #28
 80012ce:	4a29      	ldr	r2, [pc, #164]	@ (8001374 <main+0x1204>)
 80012d0:	2132      	movs	r1, #50	@ 0x32
 80012d2:	f00a f887 	bl	800b3e4 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 80012d6:	f107 031c 	add.w	r3, r7, #28
 80012da:	4618      	mov	r0, r3
 80012dc:	f7fe ff40 	bl	8000160 <strlen>
 80012e0:	4603      	mov	r3, r0
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	f107 021c 	add.w	r2, r7, #28
 80012e8:	9300      	str	r3, [sp, #0]
 80012ea:	4613      	mov	r3, r2
 80012ec:	220e      	movs	r2, #14
 80012ee:	2100      	movs	r1, #0
 80012f0:	481a      	ldr	r0, [pc, #104]	@ (800135c <main+0x11ec>)
 80012f2:	f006 fd8a 	bl	8007e0a <Alcd_PutAt_n>

			//check if any button is pressed
			//check for any keypad input
			Keypad_Refresh(&kp);
 80012f6:	4818      	ldr	r0, [pc, #96]	@ (8001358 <main+0x11e8>)
 80012f8:	f006 fe4e 	bl	8007f98 <Keypad_Refresh>

			//in case 1 is selected -> edit parameters (status 23)
			if (Keypad_Get_Key(&kp, kp_button_1)
 80012fc:	2100      	movs	r1, #0
 80012fe:	4816      	ldr	r0, [pc, #88]	@ (8001358 <main+0x11e8>)
 8001300:	f006 fee6 	bl	80080d0 <Keypad_Get_Key>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d007      	beq.n	800131a <main+0x11aa>
					&& (current_tick >= general_delay)) {
 800130a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800130c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800130e:	429a      	cmp	r2, r3
 8001310:	d303      	bcc.n	800131a <main+0x11aa>

				status = 23;
 8001312:	2317      	movs	r3, #23
 8001314:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 8001318:	e03c      	b.n	8001394 <main+0x1224>

			}

			//2 is selected -> calibrate dosing time (status 24)
			else if (Keypad_Get_Key(&kp, kp_button_2)
 800131a:	2101      	movs	r1, #1
 800131c:	480e      	ldr	r0, [pc, #56]	@ (8001358 <main+0x11e8>)
 800131e:	f006 fed7 	bl	80080d0 <Keypad_Get_Key>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d007      	beq.n	8001338 <main+0x11c8>
					&& (current_tick >= general_delay)) {
 8001328:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800132a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800132c:	429a      	cmp	r2, r3
 800132e:	d303      	bcc.n	8001338 <main+0x11c8>

				status = 24;
 8001330:	2318      	movs	r3, #24
 8001332:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 8001336:	e02d      	b.n	8001394 <main+0x1224>

			}

			//back is selected
			else if (Keypad_Get_Key(&kp, kp_button_no_back)
 8001338:	210e      	movs	r1, #14
 800133a:	4807      	ldr	r0, [pc, #28]	@ (8001358 <main+0x11e8>)
 800133c:	f006 fec8 	bl	80080d0 <Keypad_Get_Key>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d018      	beq.n	8001378 <main+0x1208>
					&& (current_tick >= general_delay)) {
 8001346:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001348:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800134a:	429a      	cmp	r2, r3
 800134c:	d314      	bcc.n	8001378 <main+0x1208>

				//back to previous menu
				status = 10;
 800134e:	230a      	movs	r3, #10
 8001350:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 8001354:	e01e      	b.n	8001394 <main+0x1224>
 8001356:	bf00      	nop
 8001358:	20000000 	.word	0x20000000
 800135c:	2000001c 	.word	0x2000001c
 8001360:	0800be10 	.word	0x0800be10
 8001364:	0800be14 	.word	0x0800be14
 8001368:	0800be24 	.word	0x0800be24
 800136c:	0800be34 	.word	0x0800be34
 8001370:	0800be44 	.word	0x0800be44
 8001374:	0800bdac 	.word	0x0800bdac

			}
			//next is selected
			else if (Keypad_Get_Key(&kp, kp_button_next)
 8001378:	2103      	movs	r1, #3
 800137a:	4899      	ldr	r0, [pc, #612]	@ (80015e0 <main+0x1470>)
 800137c:	f006 fea8 	bl	80080d0 <Keypad_Get_Key>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d006      	beq.n	8001394 <main+0x1224>
					&& (current_tick >= general_delay)) {
 8001386:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001388:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800138a:	429a      	cmp	r2, r3
 800138c:	d302      	bcc.n	8001394 <main+0x1224>

				//go to next state
				status = 22;
 800138e:	2316      	movs	r3, #22
 8001390:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

			}

			general_delay = HAL_GetTick() + 250;
 8001394:	f006 ff0c 	bl	80081b0 <HAL_GetTick>
 8001398:	4603      	mov	r3, r0
 800139a:	33fa      	adds	r3, #250	@ 0xfa
 800139c:	65bb      	str	r3, [r7, #88]	@ 0x58
		while ((status == 21) && (current_tick >= general_delay)) {
 800139e:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 80013a2:	2b15      	cmp	r3, #21
 80013a4:	f040 8094 	bne.w	80014d0 <main+0x1360>
 80013a8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80013aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80013ac:	429a      	cmp	r2, r3
 80013ae:	f4bf af6c 	bcs.w	800128a <main+0x111a>
		}

		//view the extended edit menu -> status 22
		while ((status == 22) && (current_tick >= general_delay)) {
 80013b2:	e08d      	b.n	80014d0 <main+0x1360>

			//get the current tick number
			current_tick = HAL_GetTick();
 80013b4:	f006 fefc 	bl	80081b0 <HAL_GetTick>
 80013b8:	6638      	str	r0, [r7, #96]	@ 0x60

			Alcd_Clear(&lcd);
 80013ba:	488a      	ldr	r0, [pc, #552]	@ (80015e4 <main+0x1474>)
 80013bc:	f006 fd3e 	bl	8007e3c <Alcd_Clear>
			Alcd_PutAt(&lcd, 0, 0, "3: time");
 80013c0:	4889      	ldr	r0, [pc, #548]	@ (80015e8 <main+0x1478>)
 80013c2:	f006 fd8f 	bl	8007ee4 <Str_Len>
 80013c6:	4603      	mov	r3, r0
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	9300      	str	r3, [sp, #0]
 80013cc:	4b86      	ldr	r3, [pc, #536]	@ (80015e8 <main+0x1478>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	2100      	movs	r1, #0
 80013d2:	4884      	ldr	r0, [pc, #528]	@ (80015e4 <main+0x1474>)
 80013d4:	f006 fd19 	bl	8007e0a <Alcd_PutAt_n>
			Alcd_PutAt(&lcd, 1, 0, "4: date");
 80013d8:	4884      	ldr	r0, [pc, #528]	@ (80015ec <main+0x147c>)
 80013da:	f006 fd83 	bl	8007ee4 <Str_Len>
 80013de:	4603      	mov	r3, r0
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	9300      	str	r3, [sp, #0]
 80013e4:	4b81      	ldr	r3, [pc, #516]	@ (80015ec <main+0x147c>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	2101      	movs	r1, #1
 80013ea:	487e      	ldr	r0, [pc, #504]	@ (80015e4 <main+0x1474>)
 80013ec:	f006 fd0d 	bl	8007e0a <Alcd_PutAt_n>
			snprintf(timeString, sizeof(timeString), "%02d", status);
 80013f0:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 80013f4:	f107 001c 	add.w	r0, r7, #28
 80013f8:	4a7d      	ldr	r2, [pc, #500]	@ (80015f0 <main+0x1480>)
 80013fa:	2132      	movs	r1, #50	@ 0x32
 80013fc:	f009 fff2 	bl	800b3e4 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 8001400:	f107 031c 	add.w	r3, r7, #28
 8001404:	4618      	mov	r0, r3
 8001406:	f7fe feab 	bl	8000160 <strlen>
 800140a:	4603      	mov	r3, r0
 800140c:	b2db      	uxtb	r3, r3
 800140e:	f107 021c 	add.w	r2, r7, #28
 8001412:	9300      	str	r3, [sp, #0]
 8001414:	4613      	mov	r3, r2
 8001416:	220e      	movs	r2, #14
 8001418:	2100      	movs	r1, #0
 800141a:	4872      	ldr	r0, [pc, #456]	@ (80015e4 <main+0x1474>)
 800141c:	f006 fcf5 	bl	8007e0a <Alcd_PutAt_n>

			//check if any button is pressed
			//check for any keypad input
			Keypad_Refresh(&kp);
 8001420:	486f      	ldr	r0, [pc, #444]	@ (80015e0 <main+0x1470>)
 8001422:	f006 fdb9 	bl	8007f98 <Keypad_Refresh>

			//in case 3 is selected -> edit time (status 25)
			if (Keypad_Get_Key(&kp, kp_button_3)
 8001426:	2102      	movs	r1, #2
 8001428:	486d      	ldr	r0, [pc, #436]	@ (80015e0 <main+0x1470>)
 800142a:	f006 fe51 	bl	80080d0 <Keypad_Get_Key>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d00a      	beq.n	800144a <main+0x12da>
					&& (current_tick >= general_delay)) {
 8001434:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001436:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001438:	429a      	cmp	r2, r3
 800143a:	d306      	bcc.n	800144a <main+0x12da>
				Alcd_Clear(&lcd);
 800143c:	4869      	ldr	r0, [pc, #420]	@ (80015e4 <main+0x1474>)
 800143e:	f006 fcfd 	bl	8007e3c <Alcd_Clear>
				status = 25;
 8001442:	2319      	movs	r3, #25
 8001444:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 8001448:	e03d      	b.n	80014c6 <main+0x1356>

			}

			//4 is selected -> edit date (status 26)
			else if (Keypad_Get_Key(&kp, kp_button_4)
 800144a:	2104      	movs	r1, #4
 800144c:	4864      	ldr	r0, [pc, #400]	@ (80015e0 <main+0x1470>)
 800144e:	f006 fe3f 	bl	80080d0 <Keypad_Get_Key>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d00a      	beq.n	800146e <main+0x12fe>
					&& (current_tick >= general_delay)) {
 8001458:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800145a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800145c:	429a      	cmp	r2, r3
 800145e:	d306      	bcc.n	800146e <main+0x12fe>

				Alcd_Clear(&lcd);
 8001460:	4860      	ldr	r0, [pc, #384]	@ (80015e4 <main+0x1474>)
 8001462:	f006 fceb 	bl	8007e3c <Alcd_Clear>
				status = 26;
 8001466:	231a      	movs	r3, #26
 8001468:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 800146c:	e02b      	b.n	80014c6 <main+0x1356>

			}

			//back is selected
			else if (Keypad_Get_Key(&kp, kp_button_no_back)
 800146e:	210e      	movs	r1, #14
 8001470:	485b      	ldr	r0, [pc, #364]	@ (80015e0 <main+0x1470>)
 8001472:	f006 fe2d 	bl	80080d0 <Keypad_Get_Key>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d007      	beq.n	800148c <main+0x131c>
					&& (current_tick >= general_delay)) {
 800147c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800147e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001480:	429a      	cmp	r2, r3
 8001482:	d303      	bcc.n	800148c <main+0x131c>

				//back to previous menu
				status = 10;
 8001484:	230a      	movs	r3, #10
 8001486:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 800148a:	e01c      	b.n	80014c6 <main+0x1356>

			}
			//previous is selected
			else if (Keypad_Get_Key(&kp, kp_button_previous)
 800148c:	2107      	movs	r1, #7
 800148e:	4854      	ldr	r0, [pc, #336]	@ (80015e0 <main+0x1470>)
 8001490:	f006 fe1e 	bl	80080d0 <Keypad_Get_Key>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d007      	beq.n	80014aa <main+0x133a>
					&& (current_tick >= general_delay)) {
 800149a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800149c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800149e:	429a      	cmp	r2, r3
 80014a0:	d303      	bcc.n	80014aa <main+0x133a>

				//go to previous state
				status = 21;
 80014a2:	2315      	movs	r3, #21
 80014a4:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 80014a8:	e00d      	b.n	80014c6 <main+0x1356>

			}

			//next is selected
			else if (Keypad_Get_Key(&kp, kp_button_next)
 80014aa:	2103      	movs	r1, #3
 80014ac:	484c      	ldr	r0, [pc, #304]	@ (80015e0 <main+0x1470>)
 80014ae:	f006 fe0f 	bl	80080d0 <Keypad_Get_Key>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d006      	beq.n	80014c6 <main+0x1356>
					&& (current_tick >= general_delay)) {
 80014b8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80014ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80014bc:	429a      	cmp	r2, r3
 80014be:	d302      	bcc.n	80014c6 <main+0x1356>

				//go to next state
				status = 27;
 80014c0:	231b      	movs	r3, #27
 80014c2:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

			}

			general_delay = HAL_GetTick() + 250;
 80014c6:	f006 fe73 	bl	80081b0 <HAL_GetTick>
 80014ca:	4603      	mov	r3, r0
 80014cc:	33fa      	adds	r3, #250	@ 0xfa
 80014ce:	65bb      	str	r3, [r7, #88]	@ 0x58
		while ((status == 22) && (current_tick >= general_delay)) {
 80014d0:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 80014d4:	2b16      	cmp	r3, #22
 80014d6:	d179      	bne.n	80015cc <main+0x145c>
 80014d8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80014da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80014dc:	429a      	cmp	r2, r3
 80014de:	f4bf af69 	bcs.w	80013b4 <main+0x1244>
		}

		//edit the time
		while ((status == 25) && (current_tick >= general_delay)) {
 80014e2:	e073      	b.n	80015cc <main+0x145c>

			//get the current tick number
			current_tick = HAL_GetTick();
 80014e4:	f006 fe64 	bl	80081b0 <HAL_GetTick>
 80014e8:	6638      	str	r0, [r7, #96]	@ 0x60

			Alcd_Clear(&lcd);
 80014ea:	483e      	ldr	r0, [pc, #248]	@ (80015e4 <main+0x1474>)
 80014ec:	f006 fca6 	bl	8007e3c <Alcd_Clear>
			Alcd_PutAt(&lcd, 0, 0, "format");
 80014f0:	4840      	ldr	r0, [pc, #256]	@ (80015f4 <main+0x1484>)
 80014f2:	f006 fcf7 	bl	8007ee4 <Str_Len>
 80014f6:	4603      	mov	r3, r0
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	9300      	str	r3, [sp, #0]
 80014fc:	4b3d      	ldr	r3, [pc, #244]	@ (80015f4 <main+0x1484>)
 80014fe:	2200      	movs	r2, #0
 8001500:	2100      	movs	r1, #0
 8001502:	4838      	ldr	r0, [pc, #224]	@ (80015e4 <main+0x1474>)
 8001504:	f006 fc81 	bl	8007e0a <Alcd_PutAt_n>
			Alcd_PutAt(&lcd, 1, 0, "1: 12h    2: 24h");
 8001508:	483b      	ldr	r0, [pc, #236]	@ (80015f8 <main+0x1488>)
 800150a:	f006 fceb 	bl	8007ee4 <Str_Len>
 800150e:	4603      	mov	r3, r0
 8001510:	b2db      	uxtb	r3, r3
 8001512:	9300      	str	r3, [sp, #0]
 8001514:	4b38      	ldr	r3, [pc, #224]	@ (80015f8 <main+0x1488>)
 8001516:	2200      	movs	r2, #0
 8001518:	2101      	movs	r1, #1
 800151a:	4832      	ldr	r0, [pc, #200]	@ (80015e4 <main+0x1474>)
 800151c:	f006 fc75 	bl	8007e0a <Alcd_PutAt_n>
			snprintf(timeString, sizeof(timeString), "%02d", status);
 8001520:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8001524:	f107 001c 	add.w	r0, r7, #28
 8001528:	4a31      	ldr	r2, [pc, #196]	@ (80015f0 <main+0x1480>)
 800152a:	2132      	movs	r1, #50	@ 0x32
 800152c:	f009 ff5a 	bl	800b3e4 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 8001530:	f107 031c 	add.w	r3, r7, #28
 8001534:	4618      	mov	r0, r3
 8001536:	f7fe fe13 	bl	8000160 <strlen>
 800153a:	4603      	mov	r3, r0
 800153c:	b2db      	uxtb	r3, r3
 800153e:	f107 021c 	add.w	r2, r7, #28
 8001542:	9300      	str	r3, [sp, #0]
 8001544:	4613      	mov	r3, r2
 8001546:	220e      	movs	r2, #14
 8001548:	2100      	movs	r1, #0
 800154a:	4826      	ldr	r0, [pc, #152]	@ (80015e4 <main+0x1474>)
 800154c:	f006 fc5d 	bl	8007e0a <Alcd_PutAt_n>

			//check if any button is pressed
			//check for any keypad input
			Keypad_Refresh(&kp);
 8001550:	4823      	ldr	r0, [pc, #140]	@ (80015e0 <main+0x1470>)
 8001552:	f006 fd21 	bl	8007f98 <Keypad_Refresh>

			//in case 1 is selected -> 12h format (status 28)
			if (Keypad_Get_Key(&kp, kp_button_1)
 8001556:	2100      	movs	r1, #0
 8001558:	4821      	ldr	r0, [pc, #132]	@ (80015e0 <main+0x1470>)
 800155a:	f006 fdb9 	bl	80080d0 <Keypad_Get_Key>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d00c      	beq.n	800157e <main+0x140e>
					&& (current_tick >= general_delay)) {
 8001564:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001566:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001568:	429a      	cmp	r2, r3
 800156a:	d308      	bcc.n	800157e <main+0x140e>

				//set 12h format
				CLK.format = 1;
 800156c:	4a23      	ldr	r2, [pc, #140]	@ (80015fc <main+0x148c>)
 800156e:	7c53      	ldrb	r3, [r2, #17]
 8001570:	f043 0301 	orr.w	r3, r3, #1
 8001574:	7453      	strb	r3, [r2, #17]
				status = 28;
 8001576:	231c      	movs	r3, #28
 8001578:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 800157c:	e021      	b.n	80015c2 <main+0x1452>

			}

			//2 is selected -> 24h format (status 29)
			else if (Keypad_Get_Key(&kp, kp_button_2)
 800157e:	2101      	movs	r1, #1
 8001580:	4817      	ldr	r0, [pc, #92]	@ (80015e0 <main+0x1470>)
 8001582:	f006 fda5 	bl	80080d0 <Keypad_Get_Key>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d00c      	beq.n	80015a6 <main+0x1436>
					&& (current_tick >= general_delay)) {
 800158c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800158e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001590:	429a      	cmp	r2, r3
 8001592:	d308      	bcc.n	80015a6 <main+0x1436>

				//set 24h format
				CLK.format = 0;
 8001594:	4a19      	ldr	r2, [pc, #100]	@ (80015fc <main+0x148c>)
 8001596:	7c53      	ldrb	r3, [r2, #17]
 8001598:	f36f 0300 	bfc	r3, #0, #1
 800159c:	7453      	strb	r3, [r2, #17]

				status = 17;
 800159e:	2311      	movs	r3, #17
 80015a0:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 80015a4:	e00d      	b.n	80015c2 <main+0x1452>

			}

			//back is selected
			else if (Keypad_Get_Key(&kp, kp_button_no_back)
 80015a6:	210e      	movs	r1, #14
 80015a8:	480d      	ldr	r0, [pc, #52]	@ (80015e0 <main+0x1470>)
 80015aa:	f006 fd91 	bl	80080d0 <Keypad_Get_Key>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d006      	beq.n	80015c2 <main+0x1452>
					&& (current_tick >= general_delay)) {
 80015b4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80015b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d302      	bcc.n	80015c2 <main+0x1452>

				//back to previous menu
				status = 22;
 80015bc:	2316      	movs	r3, #22
 80015be:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

			}

			general_delay = HAL_GetTick() + 250;
 80015c2:	f006 fdf5 	bl	80081b0 <HAL_GetTick>
 80015c6:	4603      	mov	r3, r0
 80015c8:	33fa      	adds	r3, #250	@ 0xfa
 80015ca:	65bb      	str	r3, [r7, #88]	@ 0x58
		while ((status == 25) && (current_tick >= general_delay)) {
 80015cc:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 80015d0:	2b19      	cmp	r3, #25
 80015d2:	f040 808f 	bne.w	80016f4 <main+0x1584>
 80015d6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80015d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80015da:	429a      	cmp	r2, r3
 80015dc:	d282      	bcs.n	80014e4 <main+0x1374>
		}

		//12h time format
		while ((status == 28) && (current_tick >= general_delay)) {
 80015de:	e089      	b.n	80016f4 <main+0x1584>
 80015e0:	20000000 	.word	0x20000000
 80015e4:	2000001c 	.word	0x2000001c
 80015e8:	0800be54 	.word	0x0800be54
 80015ec:	0800be5c 	.word	0x0800be5c
 80015f0:	0800bdac 	.word	0x0800bdac
 80015f4:	0800be64 	.word	0x0800be64
 80015f8:	0800be6c 	.word	0x0800be6c
 80015fc:	20000150 	.word	0x20000150

			//get the current tick number
			current_tick = HAL_GetTick();
 8001600:	f006 fdd6 	bl	80081b0 <HAL_GetTick>
 8001604:	6638      	str	r0, [r7, #96]	@ 0x60

			Alcd_Clear(&lcd);
 8001606:	48b9      	ldr	r0, [pc, #740]	@ (80018ec <main+0x177c>)
 8001608:	f006 fc18 	bl	8007e3c <Alcd_Clear>
			Alcd_PutAt(&lcd, 0, 0, "format");
 800160c:	48b8      	ldr	r0, [pc, #736]	@ (80018f0 <main+0x1780>)
 800160e:	f006 fc69 	bl	8007ee4 <Str_Len>
 8001612:	4603      	mov	r3, r0
 8001614:	b2db      	uxtb	r3, r3
 8001616:	9300      	str	r3, [sp, #0]
 8001618:	4bb5      	ldr	r3, [pc, #724]	@ (80018f0 <main+0x1780>)
 800161a:	2200      	movs	r2, #0
 800161c:	2100      	movs	r1, #0
 800161e:	48b3      	ldr	r0, [pc, #716]	@ (80018ec <main+0x177c>)
 8001620:	f006 fbf3 	bl	8007e0a <Alcd_PutAt_n>
			Alcd_PutAt(&lcd, 1, 0, "1: AM    2: 2PM");
 8001624:	48b3      	ldr	r0, [pc, #716]	@ (80018f4 <main+0x1784>)
 8001626:	f006 fc5d 	bl	8007ee4 <Str_Len>
 800162a:	4603      	mov	r3, r0
 800162c:	b2db      	uxtb	r3, r3
 800162e:	9300      	str	r3, [sp, #0]
 8001630:	4bb0      	ldr	r3, [pc, #704]	@ (80018f4 <main+0x1784>)
 8001632:	2200      	movs	r2, #0
 8001634:	2101      	movs	r1, #1
 8001636:	48ad      	ldr	r0, [pc, #692]	@ (80018ec <main+0x177c>)
 8001638:	f006 fbe7 	bl	8007e0a <Alcd_PutAt_n>
			snprintf(timeString, sizeof(timeString), "%02d", status);
 800163c:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8001640:	f107 001c 	add.w	r0, r7, #28
 8001644:	4aac      	ldr	r2, [pc, #688]	@ (80018f8 <main+0x1788>)
 8001646:	2132      	movs	r1, #50	@ 0x32
 8001648:	f009 fecc 	bl	800b3e4 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 800164c:	f107 031c 	add.w	r3, r7, #28
 8001650:	4618      	mov	r0, r3
 8001652:	f7fe fd85 	bl	8000160 <strlen>
 8001656:	4603      	mov	r3, r0
 8001658:	b2db      	uxtb	r3, r3
 800165a:	f107 021c 	add.w	r2, r7, #28
 800165e:	9300      	str	r3, [sp, #0]
 8001660:	4613      	mov	r3, r2
 8001662:	220e      	movs	r2, #14
 8001664:	2100      	movs	r1, #0
 8001666:	48a1      	ldr	r0, [pc, #644]	@ (80018ec <main+0x177c>)
 8001668:	f006 fbcf 	bl	8007e0a <Alcd_PutAt_n>

			//check if any button is pressed
			//check for any keypad input
			Keypad_Refresh(&kp);
 800166c:	48a3      	ldr	r0, [pc, #652]	@ (80018fc <main+0x178c>)
 800166e:	f006 fc93 	bl	8007f98 <Keypad_Refresh>

			//in case 1 is selected -> AM (status 29)
			if (Keypad_Get_Key(&kp, kp_button_1)
 8001672:	2100      	movs	r1, #0
 8001674:	48a1      	ldr	r0, [pc, #644]	@ (80018fc <main+0x178c>)
 8001676:	f006 fd2b 	bl	80080d0 <Keypad_Get_Key>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d00f      	beq.n	80016a0 <main+0x1530>
					&& (current_tick >= general_delay)) {
 8001680:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001682:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001684:	429a      	cmp	r2, r3
 8001686:	d30b      	bcc.n	80016a0 <main+0x1530>

				//set to AM
				CLK.AM_PM = 0;
 8001688:	4a9d      	ldr	r2, [pc, #628]	@ (8001900 <main+0x1790>)
 800168a:	7c53      	ldrb	r3, [r2, #17]
 800168c:	f36f 0341 	bfc	r3, #1, #1
 8001690:	7453      	strb	r3, [r2, #17]
				Alcd_Clear(&lcd);
 8001692:	4896      	ldr	r0, [pc, #600]	@ (80018ec <main+0x177c>)
 8001694:	f006 fbd2 	bl	8007e3c <Alcd_Clear>

				status = 17;
 8001698:	2311      	movs	r3, #17
 800169a:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 800169e:	e024      	b.n	80016ea <main+0x157a>

			}

			//2 is selected -> PM (status 29)
			else if (Keypad_Get_Key(&kp, kp_button_2)
 80016a0:	2101      	movs	r1, #1
 80016a2:	4896      	ldr	r0, [pc, #600]	@ (80018fc <main+0x178c>)
 80016a4:	f006 fd14 	bl	80080d0 <Keypad_Get_Key>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d00f      	beq.n	80016ce <main+0x155e>
					&& (current_tick >= general_delay)) {
 80016ae:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80016b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80016b2:	429a      	cmp	r2, r3
 80016b4:	d30b      	bcc.n	80016ce <main+0x155e>

				//set to pm
				CLK.AM_PM = 1;
 80016b6:	4a92      	ldr	r2, [pc, #584]	@ (8001900 <main+0x1790>)
 80016b8:	7c53      	ldrb	r3, [r2, #17]
 80016ba:	f043 0302 	orr.w	r3, r3, #2
 80016be:	7453      	strb	r3, [r2, #17]
				Alcd_Clear(&lcd);
 80016c0:	488a      	ldr	r0, [pc, #552]	@ (80018ec <main+0x177c>)
 80016c2:	f006 fbbb 	bl	8007e3c <Alcd_Clear>

				status = 17;
 80016c6:	2311      	movs	r3, #17
 80016c8:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 80016cc:	e00d      	b.n	80016ea <main+0x157a>

			}

			//back is selected
			else if (Keypad_Get_Key(&kp, kp_button_no_back)
 80016ce:	210e      	movs	r1, #14
 80016d0:	488a      	ldr	r0, [pc, #552]	@ (80018fc <main+0x178c>)
 80016d2:	f006 fcfd 	bl	80080d0 <Keypad_Get_Key>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d006      	beq.n	80016ea <main+0x157a>
					&& (current_tick >= general_delay)) {
 80016dc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80016de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d302      	bcc.n	80016ea <main+0x157a>

				//back to previous menu
				status = 25;
 80016e4:	2319      	movs	r3, #25
 80016e6:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

			}

			general_delay = HAL_GetTick() + 250;
 80016ea:	f006 fd61 	bl	80081b0 <HAL_GetTick>
 80016ee:	4603      	mov	r3, r0
 80016f0:	33fa      	adds	r3, #250	@ 0xfa
 80016f2:	65bb      	str	r3, [r7, #88]	@ 0x58
		while ((status == 28) && (current_tick >= general_delay)) {
 80016f4:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 80016f8:	2b1c      	cmp	r3, #28
 80016fa:	d113      	bne.n	8001724 <main+0x15b4>
 80016fc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80016fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001700:	429a      	cmp	r2, r3
 8001702:	f4bf af7d 	bcs.w	8001600 <main+0x1490>
		}

		//transition state to clear the display
		while ((status == 17) && (current_tick >= general_delay)) {
 8001706:	e00d      	b.n	8001724 <main+0x15b4>

			//get the current tick number
			current_tick = HAL_GetTick();
 8001708:	f006 fd52 	bl	80081b0 <HAL_GetTick>
 800170c:	6638      	str	r0, [r7, #96]	@ 0x60

			Alcd_Clear(&lcd);
 800170e:	4877      	ldr	r0, [pc, #476]	@ (80018ec <main+0x177c>)
 8001710:	f006 fb94 	bl	8007e3c <Alcd_Clear>
			status = 29;
 8001714:	231d      	movs	r3, #29
 8001716:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
			general_delay = HAL_GetTick() + 50;
 800171a:	f006 fd49 	bl	80081b0 <HAL_GetTick>
 800171e:	4603      	mov	r3, r0
 8001720:	3332      	adds	r3, #50	@ 0x32
 8001722:	65bb      	str	r3, [r7, #88]	@ 0x58
		while ((status == 17) && (current_tick >= general_delay)) {
 8001724:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8001728:	2b11      	cmp	r3, #17
 800172a:	f040 837c 	bne.w	8001e26 <main+0x1cb6>
 800172e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001730:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001732:	429a      	cmp	r2, r3
 8001734:	d2e8      	bcs.n	8001708 <main+0x1598>
		}

		//entering the hours state (29)
		while ((status == 29) && (current_tick >= general_delay)) {
 8001736:	e376      	b.n	8001e26 <main+0x1cb6>

			//get the current tick number
			current_tick = HAL_GetTick();
 8001738:	f006 fd3a 	bl	80081b0 <HAL_GetTick>
 800173c:	6638      	str	r0, [r7, #96]	@ 0x60

			//Alcd_Clear(&lcd);
			Alcd_PutAt(&lcd, 0, 0, "Enter hours");
 800173e:	4871      	ldr	r0, [pc, #452]	@ (8001904 <main+0x1794>)
 8001740:	f006 fbd0 	bl	8007ee4 <Str_Len>
 8001744:	4603      	mov	r3, r0
 8001746:	b2db      	uxtb	r3, r3
 8001748:	9300      	str	r3, [sp, #0]
 800174a:	4b6e      	ldr	r3, [pc, #440]	@ (8001904 <main+0x1794>)
 800174c:	2200      	movs	r2, #0
 800174e:	2100      	movs	r1, #0
 8001750:	4866      	ldr	r0, [pc, #408]	@ (80018ec <main+0x177c>)
 8001752:	f006 fb5a 	bl	8007e0a <Alcd_PutAt_n>

			snprintf(timeString, sizeof(timeString), "%02d", status);
 8001756:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 800175a:	f107 001c 	add.w	r0, r7, #28
 800175e:	4a66      	ldr	r2, [pc, #408]	@ (80018f8 <main+0x1788>)
 8001760:	2132      	movs	r1, #50	@ 0x32
 8001762:	f009 fe3f 	bl	800b3e4 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 8001766:	f107 031c 	add.w	r3, r7, #28
 800176a:	4618      	mov	r0, r3
 800176c:	f7fe fcf8 	bl	8000160 <strlen>
 8001770:	4603      	mov	r3, r0
 8001772:	b2db      	uxtb	r3, r3
 8001774:	f107 021c 	add.w	r2, r7, #28
 8001778:	9300      	str	r3, [sp, #0]
 800177a:	4613      	mov	r3, r2
 800177c:	220e      	movs	r2, #14
 800177e:	2100      	movs	r1, #0
 8001780:	485a      	ldr	r0, [pc, #360]	@ (80018ec <main+0x177c>)
 8001782:	f006 fb42 	bl	8007e0a <Alcd_PutAt_n>

			Alcd_CursorAt(&lcd, 1, input_index);
 8001786:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800178a:	461a      	mov	r2, r3
 800178c:	2101      	movs	r1, #1
 800178e:	4857      	ldr	r0, [pc, #348]	@ (80018ec <main+0x177c>)
 8001790:	f006 faff 	bl	8007d92 <Alcd_CursorAt>
			Alcd_Display_Control(&lcd, 1, 1, 1);
 8001794:	2301      	movs	r3, #1
 8001796:	2201      	movs	r2, #1
 8001798:	2101      	movs	r1, #1
 800179a:	4854      	ldr	r0, [pc, #336]	@ (80018ec <main+0x177c>)
 800179c:	f006 fb5f 	bl	8007e5e <Alcd_Display_Control>

			//check if any button is pressed
			//check for any keypad input
			Keypad_Refresh(&kp);
 80017a0:	4856      	ldr	r0, [pc, #344]	@ (80018fc <main+0x178c>)
 80017a2:	f006 fbf9 	bl	8007f98 <Keypad_Refresh>

			//if back is entered
			if (Keypad_Get_Key(&kp, kp_button_no_back)
 80017a6:	210e      	movs	r1, #14
 80017a8:	4854      	ldr	r0, [pc, #336]	@ (80018fc <main+0x178c>)
 80017aa:	f006 fc91 	bl	80080d0 <Keypad_Get_Key>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d007      	beq.n	80017c4 <main+0x1654>
					&& (current_tick >= general_delay)) {
 80017b4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80017b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d303      	bcc.n	80017c4 <main+0x1654>

				//back to previous menu
				status = 25;
 80017bc:	2319      	movs	r3, #25
 80017be:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 80017c2:	e302      	b.n	8001dca <main+0x1c5a>

			}

			//0 is entered
			else if (Keypad_Get_Key(&kp, kp_button_0)
 80017c4:	210d      	movs	r1, #13
 80017c6:	484d      	ldr	r0, [pc, #308]	@ (80018fc <main+0x178c>)
 80017c8:	f006 fc82 	bl	80080d0 <Keypad_Get_Key>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d042      	beq.n	8001858 <main+0x16e8>
					&& (current_tick >= general_delay)) {
 80017d2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80017d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d33e      	bcc.n	8001858 <main+0x16e8>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80017da:	2300      	movs	r3, #0
 80017dc:	2200      	movs	r2, #0
 80017de:	2101      	movs	r1, #1
 80017e0:	4842      	ldr	r0, [pc, #264]	@ (80018ec <main+0x177c>)
 80017e2:	f006 fb3c 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 80017e6:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d827      	bhi.n	800183e <main+0x16ce>
					time_date_buffer[input_index] = '0';
 80017ee:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80017f2:	3368      	adds	r3, #104	@ 0x68
 80017f4:	443b      	add	r3, r7
 80017f6:	2230      	movs	r2, #48	@ 0x30
 80017f8:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 80017fc:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001800:	3301      	adds	r3, #1
 8001802:	3368      	adds	r3, #104	@ 0x68
 8001804:	443b      	add	r3, r7
 8001806:	2200      	movs	r2, #0
 8001808:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "0");
 800180c:	483e      	ldr	r0, [pc, #248]	@ (8001908 <main+0x1798>)
 800180e:	f006 fb69 	bl	8007ee4 <Str_Len>
 8001812:	4603      	mov	r3, r0
 8001814:	b2db      	uxtb	r3, r3
 8001816:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 800181a:	9300      	str	r3, [sp, #0]
 800181c:	4b3a      	ldr	r3, [pc, #232]	@ (8001908 <main+0x1798>)
 800181e:	2101      	movs	r1, #1
 8001820:	4832      	ldr	r0, [pc, #200]	@ (80018ec <main+0x177c>)
 8001822:	f006 faf2 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 8001826:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800182a:	3301      	adds	r3, #1
 800182c:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8001830:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001834:	461a      	mov	r2, r3
 8001836:	2101      	movs	r1, #1
 8001838:	482c      	ldr	r0, [pc, #176]	@ (80018ec <main+0x177c>)
 800183a:	f006 faaa 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 800183e:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8001842:	2301      	movs	r3, #1
 8001844:	2101      	movs	r1, #1
 8001846:	4829      	ldr	r0, [pc, #164]	@ (80018ec <main+0x177c>)
 8001848:	f006 fb09 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 800184c:	f006 fcb0 	bl	80081b0 <HAL_GetTick>
 8001850:	4603      	mov	r3, r0
 8001852:	33fa      	adds	r3, #250	@ 0xfa
 8001854:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001856:	e2b8      	b.n	8001dca <main+0x1c5a>

			}
			//1 is entered
			else if (Keypad_Get_Key(&kp, kp_button_1)
 8001858:	2100      	movs	r1, #0
 800185a:	4828      	ldr	r0, [pc, #160]	@ (80018fc <main+0x178c>)
 800185c:	f006 fc38 	bl	80080d0 <Keypad_Get_Key>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d054      	beq.n	8001910 <main+0x17a0>
					&& (current_tick >= general_delay)) {
 8001866:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001868:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800186a:	429a      	cmp	r2, r3
 800186c:	d350      	bcc.n	8001910 <main+0x17a0>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 800186e:	2300      	movs	r3, #0
 8001870:	2200      	movs	r2, #0
 8001872:	2101      	movs	r1, #1
 8001874:	481d      	ldr	r0, [pc, #116]	@ (80018ec <main+0x177c>)
 8001876:	f006 faf2 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 800187a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800187e:	2b01      	cmp	r3, #1
 8001880:	d827      	bhi.n	80018d2 <main+0x1762>
					time_date_buffer[input_index] = '1';
 8001882:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001886:	3368      	adds	r3, #104	@ 0x68
 8001888:	443b      	add	r3, r7
 800188a:	2231      	movs	r2, #49	@ 0x31
 800188c:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8001890:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001894:	3301      	adds	r3, #1
 8001896:	3368      	adds	r3, #104	@ 0x68
 8001898:	443b      	add	r3, r7
 800189a:	2200      	movs	r2, #0
 800189c:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "1");
 80018a0:	481a      	ldr	r0, [pc, #104]	@ (800190c <main+0x179c>)
 80018a2:	f006 fb1f 	bl	8007ee4 <Str_Len>
 80018a6:	4603      	mov	r3, r0
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 80018ae:	9300      	str	r3, [sp, #0]
 80018b0:	4b16      	ldr	r3, [pc, #88]	@ (800190c <main+0x179c>)
 80018b2:	2101      	movs	r1, #1
 80018b4:	480d      	ldr	r0, [pc, #52]	@ (80018ec <main+0x177c>)
 80018b6:	f006 faa8 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 80018ba:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80018be:	3301      	adds	r3, #1
 80018c0:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 80018c4:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80018c8:	461a      	mov	r2, r3
 80018ca:	2101      	movs	r1, #1
 80018cc:	4807      	ldr	r0, [pc, #28]	@ (80018ec <main+0x177c>)
 80018ce:	f006 fa60 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 80018d2:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 80018d6:	2301      	movs	r3, #1
 80018d8:	2101      	movs	r1, #1
 80018da:	4804      	ldr	r0, [pc, #16]	@ (80018ec <main+0x177c>)
 80018dc:	f006 fabf 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 80018e0:	f006 fc66 	bl	80081b0 <HAL_GetTick>
 80018e4:	4603      	mov	r3, r0
 80018e6:	33fa      	adds	r3, #250	@ 0xfa
 80018e8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80018ea:	e26e      	b.n	8001dca <main+0x1c5a>
 80018ec:	2000001c 	.word	0x2000001c
 80018f0:	0800be64 	.word	0x0800be64
 80018f4:	0800be80 	.word	0x0800be80
 80018f8:	0800bdac 	.word	0x0800bdac
 80018fc:	20000000 	.word	0x20000000
 8001900:	20000150 	.word	0x20000150
 8001904:	0800be90 	.word	0x0800be90
 8001908:	0800be9c 	.word	0x0800be9c
 800190c:	0800bea0 	.word	0x0800bea0

			}
			//2 is entered
			else if (Keypad_Get_Key(&kp, kp_button_2)
 8001910:	2101      	movs	r1, #1
 8001912:	48b8      	ldr	r0, [pc, #736]	@ (8001bf4 <main+0x1a84>)
 8001914:	f006 fbdc 	bl	80080d0 <Keypad_Get_Key>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d042      	beq.n	80019a4 <main+0x1834>
					&& (current_tick >= general_delay)) {
 800191e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001920:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001922:	429a      	cmp	r2, r3
 8001924:	d33e      	bcc.n	80019a4 <main+0x1834>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8001926:	2300      	movs	r3, #0
 8001928:	2200      	movs	r2, #0
 800192a:	2101      	movs	r1, #1
 800192c:	48b2      	ldr	r0, [pc, #712]	@ (8001bf8 <main+0x1a88>)
 800192e:	f006 fa96 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8001932:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001936:	2b01      	cmp	r3, #1
 8001938:	d827      	bhi.n	800198a <main+0x181a>
					time_date_buffer[input_index] = '2';
 800193a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800193e:	3368      	adds	r3, #104	@ 0x68
 8001940:	443b      	add	r3, r7
 8001942:	2232      	movs	r2, #50	@ 0x32
 8001944:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8001948:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800194c:	3301      	adds	r3, #1
 800194e:	3368      	adds	r3, #104	@ 0x68
 8001950:	443b      	add	r3, r7
 8001952:	2200      	movs	r2, #0
 8001954:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "2");
 8001958:	48a8      	ldr	r0, [pc, #672]	@ (8001bfc <main+0x1a8c>)
 800195a:	f006 fac3 	bl	8007ee4 <Str_Len>
 800195e:	4603      	mov	r3, r0
 8001960:	b2db      	uxtb	r3, r3
 8001962:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8001966:	9300      	str	r3, [sp, #0]
 8001968:	4ba4      	ldr	r3, [pc, #656]	@ (8001bfc <main+0x1a8c>)
 800196a:	2101      	movs	r1, #1
 800196c:	48a2      	ldr	r0, [pc, #648]	@ (8001bf8 <main+0x1a88>)
 800196e:	f006 fa4c 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 8001972:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001976:	3301      	adds	r3, #1
 8001978:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 800197c:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001980:	461a      	mov	r2, r3
 8001982:	2101      	movs	r1, #1
 8001984:	489c      	ldr	r0, [pc, #624]	@ (8001bf8 <main+0x1a88>)
 8001986:	f006 fa04 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 800198a:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 800198e:	2301      	movs	r3, #1
 8001990:	2101      	movs	r1, #1
 8001992:	4899      	ldr	r0, [pc, #612]	@ (8001bf8 <main+0x1a88>)
 8001994:	f006 fa63 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8001998:	f006 fc0a 	bl	80081b0 <HAL_GetTick>
 800199c:	4603      	mov	r3, r0
 800199e:	33fa      	adds	r3, #250	@ 0xfa
 80019a0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80019a2:	e212      	b.n	8001dca <main+0x1c5a>

			}
			//3 is entered
			else if (Keypad_Get_Key(&kp, kp_button_3)
 80019a4:	2102      	movs	r1, #2
 80019a6:	4893      	ldr	r0, [pc, #588]	@ (8001bf4 <main+0x1a84>)
 80019a8:	f006 fb92 	bl	80080d0 <Keypad_Get_Key>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d042      	beq.n	8001a38 <main+0x18c8>
					&& (current_tick >= general_delay)) {
 80019b2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80019b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d33e      	bcc.n	8001a38 <main+0x18c8>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80019ba:	2300      	movs	r3, #0
 80019bc:	2200      	movs	r2, #0
 80019be:	2101      	movs	r1, #1
 80019c0:	488d      	ldr	r0, [pc, #564]	@ (8001bf8 <main+0x1a88>)
 80019c2:	f006 fa4c 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 80019c6:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d827      	bhi.n	8001a1e <main+0x18ae>
					time_date_buffer[input_index] = '3';
 80019ce:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80019d2:	3368      	adds	r3, #104	@ 0x68
 80019d4:	443b      	add	r3, r7
 80019d6:	2233      	movs	r2, #51	@ 0x33
 80019d8:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 80019dc:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80019e0:	3301      	adds	r3, #1
 80019e2:	3368      	adds	r3, #104	@ 0x68
 80019e4:	443b      	add	r3, r7
 80019e6:	2200      	movs	r2, #0
 80019e8:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "3");
 80019ec:	4884      	ldr	r0, [pc, #528]	@ (8001c00 <main+0x1a90>)
 80019ee:	f006 fa79 	bl	8007ee4 <Str_Len>
 80019f2:	4603      	mov	r3, r0
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 80019fa:	9300      	str	r3, [sp, #0]
 80019fc:	4b80      	ldr	r3, [pc, #512]	@ (8001c00 <main+0x1a90>)
 80019fe:	2101      	movs	r1, #1
 8001a00:	487d      	ldr	r0, [pc, #500]	@ (8001bf8 <main+0x1a88>)
 8001a02:	f006 fa02 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 8001a06:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8001a10:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001a14:	461a      	mov	r2, r3
 8001a16:	2101      	movs	r1, #1
 8001a18:	4877      	ldr	r0, [pc, #476]	@ (8001bf8 <main+0x1a88>)
 8001a1a:	f006 f9ba 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8001a1e:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8001a22:	2301      	movs	r3, #1
 8001a24:	2101      	movs	r1, #1
 8001a26:	4874      	ldr	r0, [pc, #464]	@ (8001bf8 <main+0x1a88>)
 8001a28:	f006 fa19 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8001a2c:	f006 fbc0 	bl	80081b0 <HAL_GetTick>
 8001a30:	4603      	mov	r3, r0
 8001a32:	33fa      	adds	r3, #250	@ 0xfa
 8001a34:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001a36:	e1c8      	b.n	8001dca <main+0x1c5a>

			}

			//4 is entered
			else if (Keypad_Get_Key(&kp, kp_button_4)
 8001a38:	2104      	movs	r1, #4
 8001a3a:	486e      	ldr	r0, [pc, #440]	@ (8001bf4 <main+0x1a84>)
 8001a3c:	f006 fb48 	bl	80080d0 <Keypad_Get_Key>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d042      	beq.n	8001acc <main+0x195c>
					&& (current_tick >= general_delay)) {
 8001a46:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001a48:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d33e      	bcc.n	8001acc <main+0x195c>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8001a4e:	2300      	movs	r3, #0
 8001a50:	2200      	movs	r2, #0
 8001a52:	2101      	movs	r1, #1
 8001a54:	4868      	ldr	r0, [pc, #416]	@ (8001bf8 <main+0x1a88>)
 8001a56:	f006 fa02 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8001a5a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d827      	bhi.n	8001ab2 <main+0x1942>
					time_date_buffer[input_index] = '4';
 8001a62:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001a66:	3368      	adds	r3, #104	@ 0x68
 8001a68:	443b      	add	r3, r7
 8001a6a:	2234      	movs	r2, #52	@ 0x34
 8001a6c:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8001a70:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001a74:	3301      	adds	r3, #1
 8001a76:	3368      	adds	r3, #104	@ 0x68
 8001a78:	443b      	add	r3, r7
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "4");
 8001a80:	4860      	ldr	r0, [pc, #384]	@ (8001c04 <main+0x1a94>)
 8001a82:	f006 fa2f 	bl	8007ee4 <Str_Len>
 8001a86:	4603      	mov	r3, r0
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8001a8e:	9300      	str	r3, [sp, #0]
 8001a90:	4b5c      	ldr	r3, [pc, #368]	@ (8001c04 <main+0x1a94>)
 8001a92:	2101      	movs	r1, #1
 8001a94:	4858      	ldr	r0, [pc, #352]	@ (8001bf8 <main+0x1a88>)
 8001a96:	f006 f9b8 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 8001a9a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8001aa4:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	2101      	movs	r1, #1
 8001aac:	4852      	ldr	r0, [pc, #328]	@ (8001bf8 <main+0x1a88>)
 8001aae:	f006 f970 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8001ab2:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	2101      	movs	r1, #1
 8001aba:	484f      	ldr	r0, [pc, #316]	@ (8001bf8 <main+0x1a88>)
 8001abc:	f006 f9cf 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8001ac0:	f006 fb76 	bl	80081b0 <HAL_GetTick>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	33fa      	adds	r3, #250	@ 0xfa
 8001ac8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001aca:	e17e      	b.n	8001dca <main+0x1c5a>

			}
			//5 is entered
			else if (Keypad_Get_Key(&kp, kp_button_5)
 8001acc:	2105      	movs	r1, #5
 8001ace:	4849      	ldr	r0, [pc, #292]	@ (8001bf4 <main+0x1a84>)
 8001ad0:	f006 fafe 	bl	80080d0 <Keypad_Get_Key>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d042      	beq.n	8001b60 <main+0x19f0>
					&& (current_tick >= general_delay)) {
 8001ada:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001adc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d33e      	bcc.n	8001b60 <main+0x19f0>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	2101      	movs	r1, #1
 8001ae8:	4843      	ldr	r0, [pc, #268]	@ (8001bf8 <main+0x1a88>)
 8001aea:	f006 f9b8 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8001aee:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d827      	bhi.n	8001b46 <main+0x19d6>
					time_date_buffer[input_index] = '5';
 8001af6:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001afa:	3368      	adds	r3, #104	@ 0x68
 8001afc:	443b      	add	r3, r7
 8001afe:	2235      	movs	r2, #53	@ 0x35
 8001b00:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8001b04:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001b08:	3301      	adds	r3, #1
 8001b0a:	3368      	adds	r3, #104	@ 0x68
 8001b0c:	443b      	add	r3, r7
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "5");
 8001b14:	483c      	ldr	r0, [pc, #240]	@ (8001c08 <main+0x1a98>)
 8001b16:	f006 f9e5 	bl	8007ee4 <Str_Len>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8001b22:	9300      	str	r3, [sp, #0]
 8001b24:	4b38      	ldr	r3, [pc, #224]	@ (8001c08 <main+0x1a98>)
 8001b26:	2101      	movs	r1, #1
 8001b28:	4833      	ldr	r0, [pc, #204]	@ (8001bf8 <main+0x1a88>)
 8001b2a:	f006 f96e 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 8001b2e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001b32:	3301      	adds	r3, #1
 8001b34:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8001b38:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	2101      	movs	r1, #1
 8001b40:	482d      	ldr	r0, [pc, #180]	@ (8001bf8 <main+0x1a88>)
 8001b42:	f006 f926 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8001b46:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	2101      	movs	r1, #1
 8001b4e:	482a      	ldr	r0, [pc, #168]	@ (8001bf8 <main+0x1a88>)
 8001b50:	f006 f985 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8001b54:	f006 fb2c 	bl	80081b0 <HAL_GetTick>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	33fa      	adds	r3, #250	@ 0xfa
 8001b5c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001b5e:	e134      	b.n	8001dca <main+0x1c5a>

			}

			//6 is entered
			else if (Keypad_Get_Key(&kp, kp_button_6)
 8001b60:	2106      	movs	r1, #6
 8001b62:	4824      	ldr	r0, [pc, #144]	@ (8001bf4 <main+0x1a84>)
 8001b64:	f006 fab4 	bl	80080d0 <Keypad_Get_Key>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d050      	beq.n	8001c10 <main+0x1aa0>
					&& (current_tick >= general_delay)) {
 8001b6e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001b70:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d34c      	bcc.n	8001c10 <main+0x1aa0>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8001b76:	2300      	movs	r3, #0
 8001b78:	2200      	movs	r2, #0
 8001b7a:	2101      	movs	r1, #1
 8001b7c:	481e      	ldr	r0, [pc, #120]	@ (8001bf8 <main+0x1a88>)
 8001b7e:	f006 f96e 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8001b82:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d827      	bhi.n	8001bda <main+0x1a6a>
					time_date_buffer[input_index] = '6';
 8001b8a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001b8e:	3368      	adds	r3, #104	@ 0x68
 8001b90:	443b      	add	r3, r7
 8001b92:	2236      	movs	r2, #54	@ 0x36
 8001b94:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8001b98:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	3368      	adds	r3, #104	@ 0x68
 8001ba0:	443b      	add	r3, r7
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "6");
 8001ba8:	4818      	ldr	r0, [pc, #96]	@ (8001c0c <main+0x1a9c>)
 8001baa:	f006 f99b 	bl	8007ee4 <Str_Len>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8001bb6:	9300      	str	r3, [sp, #0]
 8001bb8:	4b14      	ldr	r3, [pc, #80]	@ (8001c0c <main+0x1a9c>)
 8001bba:	2101      	movs	r1, #1
 8001bbc:	480e      	ldr	r0, [pc, #56]	@ (8001bf8 <main+0x1a88>)
 8001bbe:	f006 f924 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 8001bc2:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8001bcc:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	2101      	movs	r1, #1
 8001bd4:	4808      	ldr	r0, [pc, #32]	@ (8001bf8 <main+0x1a88>)
 8001bd6:	f006 f8dc 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8001bda:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8001bde:	2301      	movs	r3, #1
 8001be0:	2101      	movs	r1, #1
 8001be2:	4805      	ldr	r0, [pc, #20]	@ (8001bf8 <main+0x1a88>)
 8001be4:	f006 f93b 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8001be8:	f006 fae2 	bl	80081b0 <HAL_GetTick>
 8001bec:	4603      	mov	r3, r0
 8001bee:	33fa      	adds	r3, #250	@ 0xfa
 8001bf0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001bf2:	e0ea      	b.n	8001dca <main+0x1c5a>
 8001bf4:	20000000 	.word	0x20000000
 8001bf8:	2000001c 	.word	0x2000001c
 8001bfc:	0800bea4 	.word	0x0800bea4
 8001c00:	0800bea8 	.word	0x0800bea8
 8001c04:	0800beac 	.word	0x0800beac
 8001c08:	0800beb0 	.word	0x0800beb0
 8001c0c:	0800beb4 	.word	0x0800beb4

			}

			//7 is entered
			else if (Keypad_Get_Key(&kp, kp_button_7)
 8001c10:	2108      	movs	r1, #8
 8001c12:	48b1      	ldr	r0, [pc, #708]	@ (8001ed8 <main+0x1d68>)
 8001c14:	f006 fa5c 	bl	80080d0 <Keypad_Get_Key>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d042      	beq.n	8001ca4 <main+0x1b34>
					&& (current_tick >= general_delay)) {
 8001c1e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001c20:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d33e      	bcc.n	8001ca4 <main+0x1b34>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8001c26:	2300      	movs	r3, #0
 8001c28:	2200      	movs	r2, #0
 8001c2a:	2101      	movs	r1, #1
 8001c2c:	48ab      	ldr	r0, [pc, #684]	@ (8001edc <main+0x1d6c>)
 8001c2e:	f006 f916 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8001c32:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d827      	bhi.n	8001c8a <main+0x1b1a>
					time_date_buffer[input_index] = '7';
 8001c3a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001c3e:	3368      	adds	r3, #104	@ 0x68
 8001c40:	443b      	add	r3, r7
 8001c42:	2237      	movs	r2, #55	@ 0x37
 8001c44:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8001c48:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	3368      	adds	r3, #104	@ 0x68
 8001c50:	443b      	add	r3, r7
 8001c52:	2200      	movs	r2, #0
 8001c54:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "7");
 8001c58:	48a1      	ldr	r0, [pc, #644]	@ (8001ee0 <main+0x1d70>)
 8001c5a:	f006 f943 	bl	8007ee4 <Str_Len>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8001c66:	9300      	str	r3, [sp, #0]
 8001c68:	4b9d      	ldr	r3, [pc, #628]	@ (8001ee0 <main+0x1d70>)
 8001c6a:	2101      	movs	r1, #1
 8001c6c:	489b      	ldr	r0, [pc, #620]	@ (8001edc <main+0x1d6c>)
 8001c6e:	f006 f8cc 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 8001c72:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001c76:	3301      	adds	r3, #1
 8001c78:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8001c7c:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001c80:	461a      	mov	r2, r3
 8001c82:	2101      	movs	r1, #1
 8001c84:	4895      	ldr	r0, [pc, #596]	@ (8001edc <main+0x1d6c>)
 8001c86:	f006 f884 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8001c8a:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8001c8e:	2301      	movs	r3, #1
 8001c90:	2101      	movs	r1, #1
 8001c92:	4892      	ldr	r0, [pc, #584]	@ (8001edc <main+0x1d6c>)
 8001c94:	f006 f8e3 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8001c98:	f006 fa8a 	bl	80081b0 <HAL_GetTick>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	33fa      	adds	r3, #250	@ 0xfa
 8001ca0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001ca2:	e092      	b.n	8001dca <main+0x1c5a>

			}

			//8 is entered
			else if (Keypad_Get_Key(&kp, kp_button_8)
 8001ca4:	2109      	movs	r1, #9
 8001ca6:	488c      	ldr	r0, [pc, #560]	@ (8001ed8 <main+0x1d68>)
 8001ca8:	f006 fa12 	bl	80080d0 <Keypad_Get_Key>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d042      	beq.n	8001d38 <main+0x1bc8>
					&& (current_tick >= general_delay)) {
 8001cb2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001cb4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d33e      	bcc.n	8001d38 <main+0x1bc8>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8001cba:	2300      	movs	r3, #0
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	2101      	movs	r1, #1
 8001cc0:	4886      	ldr	r0, [pc, #536]	@ (8001edc <main+0x1d6c>)
 8001cc2:	f006 f8cc 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8001cc6:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d827      	bhi.n	8001d1e <main+0x1bae>
					time_date_buffer[input_index] = '8';
 8001cce:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001cd2:	3368      	adds	r3, #104	@ 0x68
 8001cd4:	443b      	add	r3, r7
 8001cd6:	2238      	movs	r2, #56	@ 0x38
 8001cd8:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8001cdc:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	3368      	adds	r3, #104	@ 0x68
 8001ce4:	443b      	add	r3, r7
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "8");
 8001cec:	487d      	ldr	r0, [pc, #500]	@ (8001ee4 <main+0x1d74>)
 8001cee:	f006 f8f9 	bl	8007ee4 <Str_Len>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8001cfa:	9300      	str	r3, [sp, #0]
 8001cfc:	4b79      	ldr	r3, [pc, #484]	@ (8001ee4 <main+0x1d74>)
 8001cfe:	2101      	movs	r1, #1
 8001d00:	4876      	ldr	r0, [pc, #472]	@ (8001edc <main+0x1d6c>)
 8001d02:	f006 f882 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 8001d06:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8001d10:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001d14:	461a      	mov	r2, r3
 8001d16:	2101      	movs	r1, #1
 8001d18:	4870      	ldr	r0, [pc, #448]	@ (8001edc <main+0x1d6c>)
 8001d1a:	f006 f83a 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8001d1e:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8001d22:	2301      	movs	r3, #1
 8001d24:	2101      	movs	r1, #1
 8001d26:	486d      	ldr	r0, [pc, #436]	@ (8001edc <main+0x1d6c>)
 8001d28:	f006 f899 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8001d2c:	f006 fa40 	bl	80081b0 <HAL_GetTick>
 8001d30:	4603      	mov	r3, r0
 8001d32:	33fa      	adds	r3, #250	@ 0xfa
 8001d34:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001d36:	e048      	b.n	8001dca <main+0x1c5a>

			}

			//9 is entered
			else if (Keypad_Get_Key(&kp, kp_button_9)
 8001d38:	210a      	movs	r1, #10
 8001d3a:	4867      	ldr	r0, [pc, #412]	@ (8001ed8 <main+0x1d68>)
 8001d3c:	f006 f9c8 	bl	80080d0 <Keypad_Get_Key>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d041      	beq.n	8001dca <main+0x1c5a>
					&& (current_tick >= general_delay)) {
 8001d46:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001d48:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d33d      	bcc.n	8001dca <main+0x1c5a>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8001d4e:	2300      	movs	r3, #0
 8001d50:	2200      	movs	r2, #0
 8001d52:	2101      	movs	r1, #1
 8001d54:	4861      	ldr	r0, [pc, #388]	@ (8001edc <main+0x1d6c>)
 8001d56:	f006 f882 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8001d5a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d827      	bhi.n	8001db2 <main+0x1c42>
					time_date_buffer[input_index] = '9';
 8001d62:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001d66:	3368      	adds	r3, #104	@ 0x68
 8001d68:	443b      	add	r3, r7
 8001d6a:	2239      	movs	r2, #57	@ 0x39
 8001d6c:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8001d70:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001d74:	3301      	adds	r3, #1
 8001d76:	3368      	adds	r3, #104	@ 0x68
 8001d78:	443b      	add	r3, r7
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "9");
 8001d80:	4859      	ldr	r0, [pc, #356]	@ (8001ee8 <main+0x1d78>)
 8001d82:	f006 f8af 	bl	8007ee4 <Str_Len>
 8001d86:	4603      	mov	r3, r0
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8001d8e:	9300      	str	r3, [sp, #0]
 8001d90:	4b55      	ldr	r3, [pc, #340]	@ (8001ee8 <main+0x1d78>)
 8001d92:	2101      	movs	r1, #1
 8001d94:	4851      	ldr	r0, [pc, #324]	@ (8001edc <main+0x1d6c>)
 8001d96:	f006 f838 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 8001d9a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001d9e:	3301      	adds	r3, #1
 8001da0:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8001da4:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001da8:	461a      	mov	r2, r3
 8001daa:	2101      	movs	r1, #1
 8001dac:	484b      	ldr	r0, [pc, #300]	@ (8001edc <main+0x1d6c>)
 8001dae:	f005 fff0 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8001db2:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8001db6:	2301      	movs	r3, #1
 8001db8:	2101      	movs	r1, #1
 8001dba:	4848      	ldr	r0, [pc, #288]	@ (8001edc <main+0x1d6c>)
 8001dbc:	f006 f84f 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8001dc0:	f006 f9f6 	bl	80081b0 <HAL_GetTick>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	33fa      	adds	r3, #250	@ 0xfa
 8001dc8:	65bb      	str	r3, [r7, #88]	@ 0x58

			}

			//when yes is entered -> check for hour validity (state 30)
			if (Keypad_Get_Key(&kp, kp_button_yes)
 8001dca:	210f      	movs	r1, #15
 8001dcc:	4842      	ldr	r0, [pc, #264]	@ (8001ed8 <main+0x1d68>)
 8001dce:	f006 f97f 	bl	80080d0 <Keypad_Get_Key>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d021      	beq.n	8001e1c <main+0x1cac>
					&& (current_tick >= general_delay)) {
 8001dd8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001dda:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d31d      	bcc.n	8001e1c <main+0x1cac>

				Alcd_Clear(&lcd);
 8001de0:	483e      	ldr	r0, [pc, #248]	@ (8001edc <main+0x1d6c>)
 8001de2:	f006 f82b 	bl	8007e3c <Alcd_Clear>

				snprintf(timeString, sizeof(timeString), "%02d", buffer);
 8001de6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8001dea:	f107 001c 	add.w	r0, r7, #28
 8001dee:	4a3f      	ldr	r2, [pc, #252]	@ (8001eec <main+0x1d7c>)
 8001df0:	2132      	movs	r1, #50	@ 0x32
 8001df2:	f009 faf7 	bl	800b3e4 <sniprintf>
				Alcd_PutAt_n(&lcd, 1, 0, timeString, strlen(timeString));
 8001df6:	f107 031c 	add.w	r3, r7, #28
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7fe f9b0 	bl	8000160 <strlen>
 8001e00:	4603      	mov	r3, r0
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	f107 021c 	add.w	r2, r7, #28
 8001e08:	9300      	str	r3, [sp, #0]
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	2101      	movs	r1, #1
 8001e10:	4832      	ldr	r0, [pc, #200]	@ (8001edc <main+0x1d6c>)
 8001e12:	f005 fffa 	bl	8007e0a <Alcd_PutAt_n>

				status = 30;
 8001e16:	231e      	movs	r3, #30
 8001e18:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

			}

			//
			general_delay = HAL_GetTick() + 250;
 8001e1c:	f006 f9c8 	bl	80081b0 <HAL_GetTick>
 8001e20:	4603      	mov	r3, r0
 8001e22:	33fa      	adds	r3, #250	@ 0xfa
 8001e24:	65bb      	str	r3, [r7, #88]	@ 0x58
		while ((status == 29) && (current_tick >= general_delay)) {
 8001e26:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8001e2a:	2b1d      	cmp	r3, #29
 8001e2c:	f040 80e3 	bne.w	8001ff6 <main+0x1e86>
 8001e30:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001e32:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001e34:	429a      	cmp	r2, r3
 8001e36:	f4bf ac7f 	bcs.w	8001738 <main+0x15c8>
		}

		//hours validation phase
		while ((status == 30) && (current_tick >= general_delay)) {
 8001e3a:	e0dc      	b.n	8001ff6 <main+0x1e86>

			//get the current tick number
			current_tick = HAL_GetTick();
 8001e3c:	f006 f9b8 	bl	80081b0 <HAL_GetTick>
 8001e40:	6638      	str	r0, [r7, #96]	@ 0x60

			Alcd_Clear(&lcd);
 8001e42:	4826      	ldr	r0, [pc, #152]	@ (8001edc <main+0x1d6c>)
 8001e44:	f005 fffa 	bl	8007e3c <Alcd_Clear>

			snprintf(timeString, sizeof(timeString), "%02d", status);
 8001e48:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8001e4c:	f107 001c 	add.w	r0, r7, #28
 8001e50:	4a26      	ldr	r2, [pc, #152]	@ (8001eec <main+0x1d7c>)
 8001e52:	2132      	movs	r1, #50	@ 0x32
 8001e54:	f009 fac6 	bl	800b3e4 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 8001e58:	f107 031c 	add.w	r3, r7, #28
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7fe f97f 	bl	8000160 <strlen>
 8001e62:	4603      	mov	r3, r0
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	f107 021c 	add.w	r2, r7, #28
 8001e6a:	9300      	str	r3, [sp, #0]
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	220e      	movs	r2, #14
 8001e70:	2100      	movs	r1, #0
 8001e72:	481a      	ldr	r0, [pc, #104]	@ (8001edc <main+0x1d6c>)
 8001e74:	f005 ffc9 	bl	8007e0a <Alcd_PutAt_n>

			buffer = atoi(time_date_buffer);
 8001e78:	1d3b      	adds	r3, r7, #4
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f009 fa29 	bl	800b2d2 <atoi>
 8001e80:	4603      	mov	r3, r0
 8001e82:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56

			//in case of 12h format
			if (CLK.format == 1) {
 8001e86:	4b1a      	ldr	r3, [pc, #104]	@ (8001ef0 <main+0x1d80>)
 8001e88:	7c5b      	ldrb	r3, [r3, #17]
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d057      	beq.n	8001f44 <main+0x1dd4>

				//check if time is within rang 1 to 12
				if (buffer > 0 && buffer < 13) {
 8001e94:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d02b      	beq.n	8001ef4 <main+0x1d84>
 8001e9c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8001ea0:	2b0c      	cmp	r3, #12
 8001ea2:	d827      	bhi.n	8001ef4 <main+0x1d84>

					//move to the minutes state
					status = 31;
 8001ea4:	231f      	movs	r3, #31
 8001ea6:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

					//set the hours to the value
					CLK.hour = buffer;
 8001eaa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8001eae:	b2da      	uxtb	r2, r3
 8001eb0:	4b0f      	ldr	r3, [pc, #60]	@ (8001ef0 <main+0x1d80>)
 8001eb2:	729a      	strb	r2, [r3, #10]

					input_index = 0;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					//turn off the blinking
					Alcd_Display_Control(&lcd, 1, 0, 0);
 8001eba:	2300      	movs	r3, #0
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	4806      	ldr	r0, [pc, #24]	@ (8001edc <main+0x1d6c>)
 8001ec2:	f005 ffcc 	bl	8007e5e <Alcd_Display_Control>
					//turn on the blinking again
					Alcd_Display_Control(&lcd, 1, input_index, 1);
 8001ec6:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8001eca:	2301      	movs	r3, #1
 8001ecc:	2101      	movs	r1, #1
 8001ece:	4803      	ldr	r0, [pc, #12]	@ (8001edc <main+0x1d6c>)
 8001ed0:	f005 ffc5 	bl	8007e5e <Alcd_Display_Control>
 8001ed4:	e036      	b.n	8001f44 <main+0x1dd4>
 8001ed6:	bf00      	nop
 8001ed8:	20000000 	.word	0x20000000
 8001edc:	2000001c 	.word	0x2000001c
 8001ee0:	0800beb8 	.word	0x0800beb8
 8001ee4:	0800bebc 	.word	0x0800bebc
 8001ee8:	0800bec0 	.word	0x0800bec0
 8001eec:	0800bdac 	.word	0x0800bdac
 8001ef0:	20000150 	.word	0x20000150

				} else {
					Alcd_PutAt(&lcd, 0, 0, "invalid");
 8001ef4:	48b2      	ldr	r0, [pc, #712]	@ (80021c0 <main+0x2050>)
 8001ef6:	f005 fff5 	bl	8007ee4 <Str_Len>
 8001efa:	4603      	mov	r3, r0
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	9300      	str	r3, [sp, #0]
 8001f00:	4baf      	ldr	r3, [pc, #700]	@ (80021c0 <main+0x2050>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	2100      	movs	r1, #0
 8001f06:	48af      	ldr	r0, [pc, #700]	@ (80021c4 <main+0x2054>)
 8001f08:	f005 ff7f 	bl	8007e0a <Alcd_PutAt_n>
					delay_flag = 1;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
					input_index = 0;
 8001f12:	2300      	movs	r3, #0
 8001f14:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55

					//turn off the blinking
					Alcd_Display_Control(&lcd, 1, 0, 0);
 8001f18:	2300      	movs	r3, #0
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	2101      	movs	r1, #1
 8001f1e:	48a9      	ldr	r0, [pc, #676]	@ (80021c4 <main+0x2054>)
 8001f20:	f005 ff9d 	bl	8007e5e <Alcd_Display_Control>
					//turn on the blinking again
					Alcd_Display_Control(&lcd, 1, input_index, 1);
 8001f24:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8001f28:	2301      	movs	r3, #1
 8001f2a:	2101      	movs	r1, #1
 8001f2c:	48a5      	ldr	r0, [pc, #660]	@ (80021c4 <main+0x2054>)
 8001f2e:	f005 ff96 	bl	8007e5e <Alcd_Display_Control>

					//return to entering hours
					status = 29;
 8001f32:	231d      	movs	r3, #29
 8001f34:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

					general_delay = HAL_GetTick() + 1000;
 8001f38:	f006 f93a 	bl	80081b0 <HAL_GetTick>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001f42:	65bb      	str	r3, [r7, #88]	@ 0x58
				}
			}

			//in case of 24h format
			if (CLK.format == 0) {
 8001f44:	4ba0      	ldr	r3, [pc, #640]	@ (80021c8 <main+0x2058>)
 8001f46:	7c5b      	ldrb	r3, [r3, #17]
 8001f48:	f003 0301 	and.w	r3, r3, #1
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d146      	bne.n	8001fe0 <main+0x1e70>

				//check if time is within rang 0 to 24
				if (buffer >= 0 && buffer < 25) {
 8001f52:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8001f56:	2b18      	cmp	r3, #24
 8001f58:	d81a      	bhi.n	8001f90 <main+0x1e20>

					//move to the minutes state
					status = 31;
 8001f5a:	231f      	movs	r3, #31
 8001f5c:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

					//set the hours to the value
					CLK.hour = buffer - 20;
 8001f60:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	3b14      	subs	r3, #20
 8001f68:	b2da      	uxtb	r2, r3
 8001f6a:	4b97      	ldr	r3, [pc, #604]	@ (80021c8 <main+0x2058>)
 8001f6c:	729a      	strb	r2, [r3, #10]

					input_index = 0;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					//turn off the blinking
					Alcd_Display_Control(&lcd, 1, 0, 0);
 8001f74:	2300      	movs	r3, #0
 8001f76:	2200      	movs	r2, #0
 8001f78:	2101      	movs	r1, #1
 8001f7a:	4892      	ldr	r0, [pc, #584]	@ (80021c4 <main+0x2054>)
 8001f7c:	f005 ff6f 	bl	8007e5e <Alcd_Display_Control>
					//turn on the blinking again
					Alcd_Display_Control(&lcd, 1, input_index, 1);
 8001f80:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8001f84:	2301      	movs	r3, #1
 8001f86:	2101      	movs	r1, #1
 8001f88:	488e      	ldr	r0, [pc, #568]	@ (80021c4 <main+0x2054>)
 8001f8a:	f005 ff68 	bl	8007e5e <Alcd_Display_Control>
 8001f8e:	e027      	b.n	8001fe0 <main+0x1e70>
				} else {
					Alcd_PutAt(&lcd, 0, 0, "invalid");
 8001f90:	488b      	ldr	r0, [pc, #556]	@ (80021c0 <main+0x2050>)
 8001f92:	f005 ffa7 	bl	8007ee4 <Str_Len>
 8001f96:	4603      	mov	r3, r0
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	9300      	str	r3, [sp, #0]
 8001f9c:	4b88      	ldr	r3, [pc, #544]	@ (80021c0 <main+0x2050>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	4888      	ldr	r0, [pc, #544]	@ (80021c4 <main+0x2054>)
 8001fa4:	f005 ff31 	bl	8007e0a <Alcd_PutAt_n>
					delay_flag = 1;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

					input_index = 0;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					//turn off the blinking
					Alcd_Display_Control(&lcd, 1, 0, 0);
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	2101      	movs	r1, #1
 8001fba:	4882      	ldr	r0, [pc, #520]	@ (80021c4 <main+0x2054>)
 8001fbc:	f005 ff4f 	bl	8007e5e <Alcd_Display_Control>
					//turn on the blinking again
					Alcd_Display_Control(&lcd, 1, input_index, 1);
 8001fc0:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	2101      	movs	r1, #1
 8001fc8:	487e      	ldr	r0, [pc, #504]	@ (80021c4 <main+0x2054>)
 8001fca:	f005 ff48 	bl	8007e5e <Alcd_Display_Control>
					//return to entering hours
					status = 29;
 8001fce:	231d      	movs	r3, #29
 8001fd0:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

					general_delay = HAL_GetTick() + 1000;
 8001fd4:	f006 f8ec 	bl	80081b0 <HAL_GetTick>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001fde:	65bb      	str	r3, [r7, #88]	@ 0x58
				}
			}

			//create a delay
			if ((delay_flag == 1) && (current_tick >= general_delay)) {
 8001fe0:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d106      	bne.n	8001ff6 <main+0x1e86>
 8001fe8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001fea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d302      	bcc.n	8001ff6 <main+0x1e86>

				delay_flag = 0;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
		while ((status == 30) && (current_tick >= general_delay)) {
 8001ff6:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8001ffa:	2b1e      	cmp	r3, #30
 8001ffc:	f040 837b 	bne.w	80026f6 <main+0x2586>
 8002000:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002002:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002004:	429a      	cmp	r2, r3
 8002006:	f4bf af19 	bcs.w	8001e3c <main+0x1ccc>
			}

		}

		//entering the minutes state (31)
		while ((status == 31) && (current_tick >= general_delay)) {
 800200a:	e374      	b.n	80026f6 <main+0x2586>

			//get the current tick number
			current_tick = HAL_GetTick();
 800200c:	f006 f8d0 	bl	80081b0 <HAL_GetTick>
 8002010:	6638      	str	r0, [r7, #96]	@ 0x60

			//Alcd_Clear(&lcd);
			Alcd_PutAt(&lcd, 0, 0, "Enter minutes");
 8002012:	486e      	ldr	r0, [pc, #440]	@ (80021cc <main+0x205c>)
 8002014:	f005 ff66 	bl	8007ee4 <Str_Len>
 8002018:	4603      	mov	r3, r0
 800201a:	b2db      	uxtb	r3, r3
 800201c:	9300      	str	r3, [sp, #0]
 800201e:	4b6b      	ldr	r3, [pc, #428]	@ (80021cc <main+0x205c>)
 8002020:	2200      	movs	r2, #0
 8002022:	2100      	movs	r1, #0
 8002024:	4867      	ldr	r0, [pc, #412]	@ (80021c4 <main+0x2054>)
 8002026:	f005 fef0 	bl	8007e0a <Alcd_PutAt_n>

			snprintf(timeString, sizeof(timeString), "%02d", status);
 800202a:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 800202e:	f107 001c 	add.w	r0, r7, #28
 8002032:	4a67      	ldr	r2, [pc, #412]	@ (80021d0 <main+0x2060>)
 8002034:	2132      	movs	r1, #50	@ 0x32
 8002036:	f009 f9d5 	bl	800b3e4 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 800203a:	f107 031c 	add.w	r3, r7, #28
 800203e:	4618      	mov	r0, r3
 8002040:	f7fe f88e 	bl	8000160 <strlen>
 8002044:	4603      	mov	r3, r0
 8002046:	b2db      	uxtb	r3, r3
 8002048:	f107 021c 	add.w	r2, r7, #28
 800204c:	9300      	str	r3, [sp, #0]
 800204e:	4613      	mov	r3, r2
 8002050:	220e      	movs	r2, #14
 8002052:	2100      	movs	r1, #0
 8002054:	485b      	ldr	r0, [pc, #364]	@ (80021c4 <main+0x2054>)
 8002056:	f005 fed8 	bl	8007e0a <Alcd_PutAt_n>

			Alcd_CursorAt(&lcd, 1, input_index);
 800205a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800205e:	461a      	mov	r2, r3
 8002060:	2101      	movs	r1, #1
 8002062:	4858      	ldr	r0, [pc, #352]	@ (80021c4 <main+0x2054>)
 8002064:	f005 fe95 	bl	8007d92 <Alcd_CursorAt>
			Alcd_Display_Control(&lcd, 1, 1, 1);
 8002068:	2301      	movs	r3, #1
 800206a:	2201      	movs	r2, #1
 800206c:	2101      	movs	r1, #1
 800206e:	4855      	ldr	r0, [pc, #340]	@ (80021c4 <main+0x2054>)
 8002070:	f005 fef5 	bl	8007e5e <Alcd_Display_Control>

			//check if any button is pressed
			//check for any keypad input
			Keypad_Refresh(&kp);
 8002074:	4857      	ldr	r0, [pc, #348]	@ (80021d4 <main+0x2064>)
 8002076:	f005 ff8f 	bl	8007f98 <Keypad_Refresh>

			//if back is entered
			if (Keypad_Get_Key(&kp, kp_button_no_back)
 800207a:	210e      	movs	r1, #14
 800207c:	4855      	ldr	r0, [pc, #340]	@ (80021d4 <main+0x2064>)
 800207e:	f006 f827 	bl	80080d0 <Keypad_Get_Key>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d007      	beq.n	8002098 <main+0x1f28>
					&& (current_tick >= general_delay)) {
 8002088:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800208a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800208c:	429a      	cmp	r2, r3
 800208e:	d303      	bcc.n	8002098 <main+0x1f28>

				//back to previous menu
				status = 29;
 8002090:	231d      	movs	r3, #29
 8002092:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 8002096:	e300      	b.n	800269a <main+0x252a>

			}

			//0 is entered
			else if (Keypad_Get_Key(&kp, kp_button_0)
 8002098:	210d      	movs	r1, #13
 800209a:	484e      	ldr	r0, [pc, #312]	@ (80021d4 <main+0x2064>)
 800209c:	f006 f818 	bl	80080d0 <Keypad_Get_Key>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d042      	beq.n	800212c <main+0x1fbc>
					&& (current_tick >= general_delay)) {
 80020a6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80020a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d33e      	bcc.n	800212c <main+0x1fbc>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80020ae:	2300      	movs	r3, #0
 80020b0:	2200      	movs	r2, #0
 80020b2:	2101      	movs	r1, #1
 80020b4:	4843      	ldr	r0, [pc, #268]	@ (80021c4 <main+0x2054>)
 80020b6:	f005 fed2 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 80020ba:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d827      	bhi.n	8002112 <main+0x1fa2>
					time_date_buffer[input_index] = '0';
 80020c2:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80020c6:	3368      	adds	r3, #104	@ 0x68
 80020c8:	443b      	add	r3, r7
 80020ca:	2230      	movs	r2, #48	@ 0x30
 80020cc:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 80020d0:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80020d4:	3301      	adds	r3, #1
 80020d6:	3368      	adds	r3, #104	@ 0x68
 80020d8:	443b      	add	r3, r7
 80020da:	2200      	movs	r2, #0
 80020dc:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "0");
 80020e0:	483d      	ldr	r0, [pc, #244]	@ (80021d8 <main+0x2068>)
 80020e2:	f005 feff 	bl	8007ee4 <Str_Len>
 80020e6:	4603      	mov	r3, r0
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 80020ee:	9300      	str	r3, [sp, #0]
 80020f0:	4b39      	ldr	r3, [pc, #228]	@ (80021d8 <main+0x2068>)
 80020f2:	2101      	movs	r1, #1
 80020f4:	4833      	ldr	r0, [pc, #204]	@ (80021c4 <main+0x2054>)
 80020f6:	f005 fe88 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 80020fa:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80020fe:	3301      	adds	r3, #1
 8002100:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8002104:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8002108:	461a      	mov	r2, r3
 800210a:	2101      	movs	r1, #1
 800210c:	482d      	ldr	r0, [pc, #180]	@ (80021c4 <main+0x2054>)
 800210e:	f005 fe40 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8002112:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8002116:	2301      	movs	r3, #1
 8002118:	2101      	movs	r1, #1
 800211a:	482a      	ldr	r0, [pc, #168]	@ (80021c4 <main+0x2054>)
 800211c:	f005 fe9f 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8002120:	f006 f846 	bl	80081b0 <HAL_GetTick>
 8002124:	4603      	mov	r3, r0
 8002126:	33fa      	adds	r3, #250	@ 0xfa
 8002128:	65bb      	str	r3, [r7, #88]	@ 0x58
 800212a:	e2b6      	b.n	800269a <main+0x252a>

			}
			//1 is entered
			else if (Keypad_Get_Key(&kp, kp_button_1)
 800212c:	2100      	movs	r1, #0
 800212e:	4829      	ldr	r0, [pc, #164]	@ (80021d4 <main+0x2064>)
 8002130:	f005 ffce 	bl	80080d0 <Keypad_Get_Key>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d052      	beq.n	80021e0 <main+0x2070>
					&& (current_tick >= general_delay)) {
 800213a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800213c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800213e:	429a      	cmp	r2, r3
 8002140:	d34e      	bcc.n	80021e0 <main+0x2070>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8002142:	2300      	movs	r3, #0
 8002144:	2200      	movs	r2, #0
 8002146:	2101      	movs	r1, #1
 8002148:	481e      	ldr	r0, [pc, #120]	@ (80021c4 <main+0x2054>)
 800214a:	f005 fe88 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 800214e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8002152:	2b01      	cmp	r3, #1
 8002154:	d827      	bhi.n	80021a6 <main+0x2036>
					time_date_buffer[input_index] = '1';
 8002156:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800215a:	3368      	adds	r3, #104	@ 0x68
 800215c:	443b      	add	r3, r7
 800215e:	2231      	movs	r2, #49	@ 0x31
 8002160:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8002164:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8002168:	3301      	adds	r3, #1
 800216a:	3368      	adds	r3, #104	@ 0x68
 800216c:	443b      	add	r3, r7
 800216e:	2200      	movs	r2, #0
 8002170:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "1");
 8002174:	4819      	ldr	r0, [pc, #100]	@ (80021dc <main+0x206c>)
 8002176:	f005 feb5 	bl	8007ee4 <Str_Len>
 800217a:	4603      	mov	r3, r0
 800217c:	b2db      	uxtb	r3, r3
 800217e:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8002182:	9300      	str	r3, [sp, #0]
 8002184:	4b15      	ldr	r3, [pc, #84]	@ (80021dc <main+0x206c>)
 8002186:	2101      	movs	r1, #1
 8002188:	480e      	ldr	r0, [pc, #56]	@ (80021c4 <main+0x2054>)
 800218a:	f005 fe3e 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 800218e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8002192:	3301      	adds	r3, #1
 8002194:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8002198:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800219c:	461a      	mov	r2, r3
 800219e:	2101      	movs	r1, #1
 80021a0:	4808      	ldr	r0, [pc, #32]	@ (80021c4 <main+0x2054>)
 80021a2:	f005 fdf6 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 80021a6:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 80021aa:	2301      	movs	r3, #1
 80021ac:	2101      	movs	r1, #1
 80021ae:	4805      	ldr	r0, [pc, #20]	@ (80021c4 <main+0x2054>)
 80021b0:	f005 fe55 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 80021b4:	f005 fffc 	bl	80081b0 <HAL_GetTick>
 80021b8:	4603      	mov	r3, r0
 80021ba:	33fa      	adds	r3, #250	@ 0xfa
 80021bc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80021be:	e26c      	b.n	800269a <main+0x252a>
 80021c0:	0800bec4 	.word	0x0800bec4
 80021c4:	2000001c 	.word	0x2000001c
 80021c8:	20000150 	.word	0x20000150
 80021cc:	0800becc 	.word	0x0800becc
 80021d0:	0800bdac 	.word	0x0800bdac
 80021d4:	20000000 	.word	0x20000000
 80021d8:	0800be9c 	.word	0x0800be9c
 80021dc:	0800bea0 	.word	0x0800bea0

			}
			//2 is entered
			else if (Keypad_Get_Key(&kp, kp_button_2)
 80021e0:	2101      	movs	r1, #1
 80021e2:	48b8      	ldr	r0, [pc, #736]	@ (80024c4 <main+0x2354>)
 80021e4:	f005 ff74 	bl	80080d0 <Keypad_Get_Key>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d042      	beq.n	8002274 <main+0x2104>
					&& (current_tick >= general_delay)) {
 80021ee:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80021f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d33e      	bcc.n	8002274 <main+0x2104>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80021f6:	2300      	movs	r3, #0
 80021f8:	2200      	movs	r2, #0
 80021fa:	2101      	movs	r1, #1
 80021fc:	48b2      	ldr	r0, [pc, #712]	@ (80024c8 <main+0x2358>)
 80021fe:	f005 fe2e 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8002202:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8002206:	2b01      	cmp	r3, #1
 8002208:	d827      	bhi.n	800225a <main+0x20ea>
					time_date_buffer[input_index] = '2';
 800220a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800220e:	3368      	adds	r3, #104	@ 0x68
 8002210:	443b      	add	r3, r7
 8002212:	2232      	movs	r2, #50	@ 0x32
 8002214:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8002218:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800221c:	3301      	adds	r3, #1
 800221e:	3368      	adds	r3, #104	@ 0x68
 8002220:	443b      	add	r3, r7
 8002222:	2200      	movs	r2, #0
 8002224:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "2");
 8002228:	48a8      	ldr	r0, [pc, #672]	@ (80024cc <main+0x235c>)
 800222a:	f005 fe5b 	bl	8007ee4 <Str_Len>
 800222e:	4603      	mov	r3, r0
 8002230:	b2db      	uxtb	r3, r3
 8002232:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8002236:	9300      	str	r3, [sp, #0]
 8002238:	4ba4      	ldr	r3, [pc, #656]	@ (80024cc <main+0x235c>)
 800223a:	2101      	movs	r1, #1
 800223c:	48a2      	ldr	r0, [pc, #648]	@ (80024c8 <main+0x2358>)
 800223e:	f005 fde4 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 8002242:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8002246:	3301      	adds	r3, #1
 8002248:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 800224c:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8002250:	461a      	mov	r2, r3
 8002252:	2101      	movs	r1, #1
 8002254:	489c      	ldr	r0, [pc, #624]	@ (80024c8 <main+0x2358>)
 8002256:	f005 fd9c 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 800225a:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 800225e:	2301      	movs	r3, #1
 8002260:	2101      	movs	r1, #1
 8002262:	4899      	ldr	r0, [pc, #612]	@ (80024c8 <main+0x2358>)
 8002264:	f005 fdfb 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8002268:	f005 ffa2 	bl	80081b0 <HAL_GetTick>
 800226c:	4603      	mov	r3, r0
 800226e:	33fa      	adds	r3, #250	@ 0xfa
 8002270:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002272:	e212      	b.n	800269a <main+0x252a>

			}
			//3 is entered
			else if (Keypad_Get_Key(&kp, kp_button_3)
 8002274:	2102      	movs	r1, #2
 8002276:	4893      	ldr	r0, [pc, #588]	@ (80024c4 <main+0x2354>)
 8002278:	f005 ff2a 	bl	80080d0 <Keypad_Get_Key>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d042      	beq.n	8002308 <main+0x2198>
					&& (current_tick >= general_delay)) {
 8002282:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002284:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002286:	429a      	cmp	r2, r3
 8002288:	d33e      	bcc.n	8002308 <main+0x2198>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 800228a:	2300      	movs	r3, #0
 800228c:	2200      	movs	r2, #0
 800228e:	2101      	movs	r1, #1
 8002290:	488d      	ldr	r0, [pc, #564]	@ (80024c8 <main+0x2358>)
 8002292:	f005 fde4 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8002296:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800229a:	2b01      	cmp	r3, #1
 800229c:	d827      	bhi.n	80022ee <main+0x217e>
					time_date_buffer[input_index] = '3';
 800229e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80022a2:	3368      	adds	r3, #104	@ 0x68
 80022a4:	443b      	add	r3, r7
 80022a6:	2233      	movs	r2, #51	@ 0x33
 80022a8:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 80022ac:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80022b0:	3301      	adds	r3, #1
 80022b2:	3368      	adds	r3, #104	@ 0x68
 80022b4:	443b      	add	r3, r7
 80022b6:	2200      	movs	r2, #0
 80022b8:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "3");
 80022bc:	4884      	ldr	r0, [pc, #528]	@ (80024d0 <main+0x2360>)
 80022be:	f005 fe11 	bl	8007ee4 <Str_Len>
 80022c2:	4603      	mov	r3, r0
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 80022ca:	9300      	str	r3, [sp, #0]
 80022cc:	4b80      	ldr	r3, [pc, #512]	@ (80024d0 <main+0x2360>)
 80022ce:	2101      	movs	r1, #1
 80022d0:	487d      	ldr	r0, [pc, #500]	@ (80024c8 <main+0x2358>)
 80022d2:	f005 fd9a 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 80022d6:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80022da:	3301      	adds	r3, #1
 80022dc:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 80022e0:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80022e4:	461a      	mov	r2, r3
 80022e6:	2101      	movs	r1, #1
 80022e8:	4877      	ldr	r0, [pc, #476]	@ (80024c8 <main+0x2358>)
 80022ea:	f005 fd52 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 80022ee:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 80022f2:	2301      	movs	r3, #1
 80022f4:	2101      	movs	r1, #1
 80022f6:	4874      	ldr	r0, [pc, #464]	@ (80024c8 <main+0x2358>)
 80022f8:	f005 fdb1 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 80022fc:	f005 ff58 	bl	80081b0 <HAL_GetTick>
 8002300:	4603      	mov	r3, r0
 8002302:	33fa      	adds	r3, #250	@ 0xfa
 8002304:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002306:	e1c8      	b.n	800269a <main+0x252a>

			}

			//4 is entered
			else if (Keypad_Get_Key(&kp, kp_button_4)
 8002308:	2104      	movs	r1, #4
 800230a:	486e      	ldr	r0, [pc, #440]	@ (80024c4 <main+0x2354>)
 800230c:	f005 fee0 	bl	80080d0 <Keypad_Get_Key>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d042      	beq.n	800239c <main+0x222c>
					&& (current_tick >= general_delay)) {
 8002316:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002318:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800231a:	429a      	cmp	r2, r3
 800231c:	d33e      	bcc.n	800239c <main+0x222c>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 800231e:	2300      	movs	r3, #0
 8002320:	2200      	movs	r2, #0
 8002322:	2101      	movs	r1, #1
 8002324:	4868      	ldr	r0, [pc, #416]	@ (80024c8 <main+0x2358>)
 8002326:	f005 fd9a 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 800232a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800232e:	2b01      	cmp	r3, #1
 8002330:	d827      	bhi.n	8002382 <main+0x2212>
					time_date_buffer[input_index] = '4';
 8002332:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8002336:	3368      	adds	r3, #104	@ 0x68
 8002338:	443b      	add	r3, r7
 800233a:	2234      	movs	r2, #52	@ 0x34
 800233c:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8002340:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8002344:	3301      	adds	r3, #1
 8002346:	3368      	adds	r3, #104	@ 0x68
 8002348:	443b      	add	r3, r7
 800234a:	2200      	movs	r2, #0
 800234c:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "4");
 8002350:	4860      	ldr	r0, [pc, #384]	@ (80024d4 <main+0x2364>)
 8002352:	f005 fdc7 	bl	8007ee4 <Str_Len>
 8002356:	4603      	mov	r3, r0
 8002358:	b2db      	uxtb	r3, r3
 800235a:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 800235e:	9300      	str	r3, [sp, #0]
 8002360:	4b5c      	ldr	r3, [pc, #368]	@ (80024d4 <main+0x2364>)
 8002362:	2101      	movs	r1, #1
 8002364:	4858      	ldr	r0, [pc, #352]	@ (80024c8 <main+0x2358>)
 8002366:	f005 fd50 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 800236a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800236e:	3301      	adds	r3, #1
 8002370:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8002374:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8002378:	461a      	mov	r2, r3
 800237a:	2101      	movs	r1, #1
 800237c:	4852      	ldr	r0, [pc, #328]	@ (80024c8 <main+0x2358>)
 800237e:	f005 fd08 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8002382:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8002386:	2301      	movs	r3, #1
 8002388:	2101      	movs	r1, #1
 800238a:	484f      	ldr	r0, [pc, #316]	@ (80024c8 <main+0x2358>)
 800238c:	f005 fd67 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8002390:	f005 ff0e 	bl	80081b0 <HAL_GetTick>
 8002394:	4603      	mov	r3, r0
 8002396:	33fa      	adds	r3, #250	@ 0xfa
 8002398:	65bb      	str	r3, [r7, #88]	@ 0x58
 800239a:	e17e      	b.n	800269a <main+0x252a>

			}
			//5 is entered
			else if (Keypad_Get_Key(&kp, kp_button_5)
 800239c:	2105      	movs	r1, #5
 800239e:	4849      	ldr	r0, [pc, #292]	@ (80024c4 <main+0x2354>)
 80023a0:	f005 fe96 	bl	80080d0 <Keypad_Get_Key>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d042      	beq.n	8002430 <main+0x22c0>
					&& (current_tick >= general_delay)) {
 80023aa:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80023ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d33e      	bcc.n	8002430 <main+0x22c0>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80023b2:	2300      	movs	r3, #0
 80023b4:	2200      	movs	r2, #0
 80023b6:	2101      	movs	r1, #1
 80023b8:	4843      	ldr	r0, [pc, #268]	@ (80024c8 <main+0x2358>)
 80023ba:	f005 fd50 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 80023be:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d827      	bhi.n	8002416 <main+0x22a6>
					time_date_buffer[input_index] = '5';
 80023c6:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80023ca:	3368      	adds	r3, #104	@ 0x68
 80023cc:	443b      	add	r3, r7
 80023ce:	2235      	movs	r2, #53	@ 0x35
 80023d0:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 80023d4:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80023d8:	3301      	adds	r3, #1
 80023da:	3368      	adds	r3, #104	@ 0x68
 80023dc:	443b      	add	r3, r7
 80023de:	2200      	movs	r2, #0
 80023e0:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "5");
 80023e4:	483c      	ldr	r0, [pc, #240]	@ (80024d8 <main+0x2368>)
 80023e6:	f005 fd7d 	bl	8007ee4 <Str_Len>
 80023ea:	4603      	mov	r3, r0
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 80023f2:	9300      	str	r3, [sp, #0]
 80023f4:	4b38      	ldr	r3, [pc, #224]	@ (80024d8 <main+0x2368>)
 80023f6:	2101      	movs	r1, #1
 80023f8:	4833      	ldr	r0, [pc, #204]	@ (80024c8 <main+0x2358>)
 80023fa:	f005 fd06 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 80023fe:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8002402:	3301      	adds	r3, #1
 8002404:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8002408:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800240c:	461a      	mov	r2, r3
 800240e:	2101      	movs	r1, #1
 8002410:	482d      	ldr	r0, [pc, #180]	@ (80024c8 <main+0x2358>)
 8002412:	f005 fcbe 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8002416:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 800241a:	2301      	movs	r3, #1
 800241c:	2101      	movs	r1, #1
 800241e:	482a      	ldr	r0, [pc, #168]	@ (80024c8 <main+0x2358>)
 8002420:	f005 fd1d 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8002424:	f005 fec4 	bl	80081b0 <HAL_GetTick>
 8002428:	4603      	mov	r3, r0
 800242a:	33fa      	adds	r3, #250	@ 0xfa
 800242c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800242e:	e134      	b.n	800269a <main+0x252a>

			}

			//6 is entered
			else if (Keypad_Get_Key(&kp, kp_button_6)
 8002430:	2106      	movs	r1, #6
 8002432:	4824      	ldr	r0, [pc, #144]	@ (80024c4 <main+0x2354>)
 8002434:	f005 fe4c 	bl	80080d0 <Keypad_Get_Key>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d050      	beq.n	80024e0 <main+0x2370>
					&& (current_tick >= general_delay)) {
 800243e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002440:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002442:	429a      	cmp	r2, r3
 8002444:	d34c      	bcc.n	80024e0 <main+0x2370>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8002446:	2300      	movs	r3, #0
 8002448:	2200      	movs	r2, #0
 800244a:	2101      	movs	r1, #1
 800244c:	481e      	ldr	r0, [pc, #120]	@ (80024c8 <main+0x2358>)
 800244e:	f005 fd06 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8002452:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8002456:	2b01      	cmp	r3, #1
 8002458:	d827      	bhi.n	80024aa <main+0x233a>
					time_date_buffer[input_index] = '6';
 800245a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800245e:	3368      	adds	r3, #104	@ 0x68
 8002460:	443b      	add	r3, r7
 8002462:	2236      	movs	r2, #54	@ 0x36
 8002464:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8002468:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800246c:	3301      	adds	r3, #1
 800246e:	3368      	adds	r3, #104	@ 0x68
 8002470:	443b      	add	r3, r7
 8002472:	2200      	movs	r2, #0
 8002474:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "6");
 8002478:	4818      	ldr	r0, [pc, #96]	@ (80024dc <main+0x236c>)
 800247a:	f005 fd33 	bl	8007ee4 <Str_Len>
 800247e:	4603      	mov	r3, r0
 8002480:	b2db      	uxtb	r3, r3
 8002482:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8002486:	9300      	str	r3, [sp, #0]
 8002488:	4b14      	ldr	r3, [pc, #80]	@ (80024dc <main+0x236c>)
 800248a:	2101      	movs	r1, #1
 800248c:	480e      	ldr	r0, [pc, #56]	@ (80024c8 <main+0x2358>)
 800248e:	f005 fcbc 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 8002492:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8002496:	3301      	adds	r3, #1
 8002498:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 800249c:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80024a0:	461a      	mov	r2, r3
 80024a2:	2101      	movs	r1, #1
 80024a4:	4808      	ldr	r0, [pc, #32]	@ (80024c8 <main+0x2358>)
 80024a6:	f005 fc74 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 80024aa:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 80024ae:	2301      	movs	r3, #1
 80024b0:	2101      	movs	r1, #1
 80024b2:	4805      	ldr	r0, [pc, #20]	@ (80024c8 <main+0x2358>)
 80024b4:	f005 fcd3 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 80024b8:	f005 fe7a 	bl	80081b0 <HAL_GetTick>
 80024bc:	4603      	mov	r3, r0
 80024be:	33fa      	adds	r3, #250	@ 0xfa
 80024c0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80024c2:	e0ea      	b.n	800269a <main+0x252a>
 80024c4:	20000000 	.word	0x20000000
 80024c8:	2000001c 	.word	0x2000001c
 80024cc:	0800bea4 	.word	0x0800bea4
 80024d0:	0800bea8 	.word	0x0800bea8
 80024d4:	0800beac 	.word	0x0800beac
 80024d8:	0800beb0 	.word	0x0800beb0
 80024dc:	0800beb4 	.word	0x0800beb4

			}

			//7 is entered
			else if (Keypad_Get_Key(&kp, kp_button_7)
 80024e0:	2108      	movs	r1, #8
 80024e2:	48ab      	ldr	r0, [pc, #684]	@ (8002790 <main+0x2620>)
 80024e4:	f005 fdf4 	bl	80080d0 <Keypad_Get_Key>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d042      	beq.n	8002574 <main+0x2404>
					&& (current_tick >= general_delay)) {
 80024ee:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80024f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d33e      	bcc.n	8002574 <main+0x2404>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80024f6:	2300      	movs	r3, #0
 80024f8:	2200      	movs	r2, #0
 80024fa:	2101      	movs	r1, #1
 80024fc:	48a5      	ldr	r0, [pc, #660]	@ (8002794 <main+0x2624>)
 80024fe:	f005 fcae 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8002502:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8002506:	2b01      	cmp	r3, #1
 8002508:	d827      	bhi.n	800255a <main+0x23ea>
					time_date_buffer[input_index] = '7';
 800250a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800250e:	3368      	adds	r3, #104	@ 0x68
 8002510:	443b      	add	r3, r7
 8002512:	2237      	movs	r2, #55	@ 0x37
 8002514:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8002518:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800251c:	3301      	adds	r3, #1
 800251e:	3368      	adds	r3, #104	@ 0x68
 8002520:	443b      	add	r3, r7
 8002522:	2200      	movs	r2, #0
 8002524:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "7");
 8002528:	489b      	ldr	r0, [pc, #620]	@ (8002798 <main+0x2628>)
 800252a:	f005 fcdb 	bl	8007ee4 <Str_Len>
 800252e:	4603      	mov	r3, r0
 8002530:	b2db      	uxtb	r3, r3
 8002532:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8002536:	9300      	str	r3, [sp, #0]
 8002538:	4b97      	ldr	r3, [pc, #604]	@ (8002798 <main+0x2628>)
 800253a:	2101      	movs	r1, #1
 800253c:	4895      	ldr	r0, [pc, #596]	@ (8002794 <main+0x2624>)
 800253e:	f005 fc64 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 8002542:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8002546:	3301      	adds	r3, #1
 8002548:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 800254c:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8002550:	461a      	mov	r2, r3
 8002552:	2101      	movs	r1, #1
 8002554:	488f      	ldr	r0, [pc, #572]	@ (8002794 <main+0x2624>)
 8002556:	f005 fc1c 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 800255a:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 800255e:	2301      	movs	r3, #1
 8002560:	2101      	movs	r1, #1
 8002562:	488c      	ldr	r0, [pc, #560]	@ (8002794 <main+0x2624>)
 8002564:	f005 fc7b 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8002568:	f005 fe22 	bl	80081b0 <HAL_GetTick>
 800256c:	4603      	mov	r3, r0
 800256e:	33fa      	adds	r3, #250	@ 0xfa
 8002570:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002572:	e092      	b.n	800269a <main+0x252a>

			}

			//8 is entered
			else if (Keypad_Get_Key(&kp, kp_button_8)
 8002574:	2109      	movs	r1, #9
 8002576:	4886      	ldr	r0, [pc, #536]	@ (8002790 <main+0x2620>)
 8002578:	f005 fdaa 	bl	80080d0 <Keypad_Get_Key>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d042      	beq.n	8002608 <main+0x2498>
					&& (current_tick >= general_delay)) {
 8002582:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002584:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002586:	429a      	cmp	r2, r3
 8002588:	d33e      	bcc.n	8002608 <main+0x2498>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 800258a:	2300      	movs	r3, #0
 800258c:	2200      	movs	r2, #0
 800258e:	2101      	movs	r1, #1
 8002590:	4880      	ldr	r0, [pc, #512]	@ (8002794 <main+0x2624>)
 8002592:	f005 fc64 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8002596:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800259a:	2b01      	cmp	r3, #1
 800259c:	d827      	bhi.n	80025ee <main+0x247e>
					time_date_buffer[input_index] = '8';
 800259e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80025a2:	3368      	adds	r3, #104	@ 0x68
 80025a4:	443b      	add	r3, r7
 80025a6:	2238      	movs	r2, #56	@ 0x38
 80025a8:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 80025ac:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80025b0:	3301      	adds	r3, #1
 80025b2:	3368      	adds	r3, #104	@ 0x68
 80025b4:	443b      	add	r3, r7
 80025b6:	2200      	movs	r2, #0
 80025b8:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "8");
 80025bc:	4877      	ldr	r0, [pc, #476]	@ (800279c <main+0x262c>)
 80025be:	f005 fc91 	bl	8007ee4 <Str_Len>
 80025c2:	4603      	mov	r3, r0
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 80025ca:	9300      	str	r3, [sp, #0]
 80025cc:	4b73      	ldr	r3, [pc, #460]	@ (800279c <main+0x262c>)
 80025ce:	2101      	movs	r1, #1
 80025d0:	4870      	ldr	r0, [pc, #448]	@ (8002794 <main+0x2624>)
 80025d2:	f005 fc1a 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 80025d6:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80025da:	3301      	adds	r3, #1
 80025dc:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 80025e0:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80025e4:	461a      	mov	r2, r3
 80025e6:	2101      	movs	r1, #1
 80025e8:	486a      	ldr	r0, [pc, #424]	@ (8002794 <main+0x2624>)
 80025ea:	f005 fbd2 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 80025ee:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 80025f2:	2301      	movs	r3, #1
 80025f4:	2101      	movs	r1, #1
 80025f6:	4867      	ldr	r0, [pc, #412]	@ (8002794 <main+0x2624>)
 80025f8:	f005 fc31 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 80025fc:	f005 fdd8 	bl	80081b0 <HAL_GetTick>
 8002600:	4603      	mov	r3, r0
 8002602:	33fa      	adds	r3, #250	@ 0xfa
 8002604:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002606:	e048      	b.n	800269a <main+0x252a>

			}

			//9 is entered
			else if (Keypad_Get_Key(&kp, kp_button_9)
 8002608:	210a      	movs	r1, #10
 800260a:	4861      	ldr	r0, [pc, #388]	@ (8002790 <main+0x2620>)
 800260c:	f005 fd60 	bl	80080d0 <Keypad_Get_Key>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d041      	beq.n	800269a <main+0x252a>
					&& (current_tick >= general_delay)) {
 8002616:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002618:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800261a:	429a      	cmp	r2, r3
 800261c:	d33d      	bcc.n	800269a <main+0x252a>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 800261e:	2300      	movs	r3, #0
 8002620:	2200      	movs	r2, #0
 8002622:	2101      	movs	r1, #1
 8002624:	485b      	ldr	r0, [pc, #364]	@ (8002794 <main+0x2624>)
 8002626:	f005 fc1a 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 800262a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800262e:	2b01      	cmp	r3, #1
 8002630:	d827      	bhi.n	8002682 <main+0x2512>
					time_date_buffer[input_index] = '9';
 8002632:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8002636:	3368      	adds	r3, #104	@ 0x68
 8002638:	443b      	add	r3, r7
 800263a:	2239      	movs	r2, #57	@ 0x39
 800263c:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8002640:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8002644:	3301      	adds	r3, #1
 8002646:	3368      	adds	r3, #104	@ 0x68
 8002648:	443b      	add	r3, r7
 800264a:	2200      	movs	r2, #0
 800264c:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "9");
 8002650:	4853      	ldr	r0, [pc, #332]	@ (80027a0 <main+0x2630>)
 8002652:	f005 fc47 	bl	8007ee4 <Str_Len>
 8002656:	4603      	mov	r3, r0
 8002658:	b2db      	uxtb	r3, r3
 800265a:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 800265e:	9300      	str	r3, [sp, #0]
 8002660:	4b4f      	ldr	r3, [pc, #316]	@ (80027a0 <main+0x2630>)
 8002662:	2101      	movs	r1, #1
 8002664:	484b      	ldr	r0, [pc, #300]	@ (8002794 <main+0x2624>)
 8002666:	f005 fbd0 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 800266a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800266e:	3301      	adds	r3, #1
 8002670:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8002674:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8002678:	461a      	mov	r2, r3
 800267a:	2101      	movs	r1, #1
 800267c:	4845      	ldr	r0, [pc, #276]	@ (8002794 <main+0x2624>)
 800267e:	f005 fb88 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8002682:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8002686:	2301      	movs	r3, #1
 8002688:	2101      	movs	r1, #1
 800268a:	4842      	ldr	r0, [pc, #264]	@ (8002794 <main+0x2624>)
 800268c:	f005 fbe7 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8002690:	f005 fd8e 	bl	80081b0 <HAL_GetTick>
 8002694:	4603      	mov	r3, r0
 8002696:	33fa      	adds	r3, #250	@ 0xfa
 8002698:	65bb      	str	r3, [r7, #88]	@ 0x58

			}

			//when yes is entered -> check for miinutes validity (state 32)
			if (Keypad_Get_Key(&kp, kp_button_yes)
 800269a:	210f      	movs	r1, #15
 800269c:	483c      	ldr	r0, [pc, #240]	@ (8002790 <main+0x2620>)
 800269e:	f005 fd17 	bl	80080d0 <Keypad_Get_Key>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d021      	beq.n	80026ec <main+0x257c>
					&& (current_tick >= general_delay)) {
 80026a8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80026aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d31d      	bcc.n	80026ec <main+0x257c>

				Alcd_Clear(&lcd);
 80026b0:	4838      	ldr	r0, [pc, #224]	@ (8002794 <main+0x2624>)
 80026b2:	f005 fbc3 	bl	8007e3c <Alcd_Clear>

				snprintf(timeString, sizeof(timeString), "%02d", buffer);
 80026b6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80026ba:	f107 001c 	add.w	r0, r7, #28
 80026be:	4a39      	ldr	r2, [pc, #228]	@ (80027a4 <main+0x2634>)
 80026c0:	2132      	movs	r1, #50	@ 0x32
 80026c2:	f008 fe8f 	bl	800b3e4 <sniprintf>
				Alcd_PutAt_n(&lcd, 1, 0, timeString, strlen(timeString));
 80026c6:	f107 031c 	add.w	r3, r7, #28
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7fd fd48 	bl	8000160 <strlen>
 80026d0:	4603      	mov	r3, r0
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	f107 021c 	add.w	r2, r7, #28
 80026d8:	9300      	str	r3, [sp, #0]
 80026da:	4613      	mov	r3, r2
 80026dc:	2200      	movs	r2, #0
 80026de:	2101      	movs	r1, #1
 80026e0:	482c      	ldr	r0, [pc, #176]	@ (8002794 <main+0x2624>)
 80026e2:	f005 fb92 	bl	8007e0a <Alcd_PutAt_n>

				status = 32;
 80026e6:	2320      	movs	r3, #32
 80026e8:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

			}

			//
			general_delay = HAL_GetTick() + 250;
 80026ec:	f005 fd60 	bl	80081b0 <HAL_GetTick>
 80026f0:	4603      	mov	r3, r0
 80026f2:	33fa      	adds	r3, #250	@ 0xfa
 80026f4:	65bb      	str	r3, [r7, #88]	@ 0x58
		while ((status == 31) && (current_tick >= general_delay)) {
 80026f6:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 80026fa:	2b1f      	cmp	r3, #31
 80026fc:	f040 8089 	bne.w	8002812 <main+0x26a2>
 8002700:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002702:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002704:	429a      	cmp	r2, r3
 8002706:	f4bf ac81 	bcs.w	800200c <main+0x1e9c>
		}

		//minutes validation phase
		while ((status == 32) && (current_tick >= general_delay)) {
 800270a:	e082      	b.n	8002812 <main+0x26a2>

			//get the current tick number
			current_tick = HAL_GetTick();
 800270c:	f005 fd50 	bl	80081b0 <HAL_GetTick>
 8002710:	6638      	str	r0, [r7, #96]	@ 0x60

			Alcd_Clear(&lcd);
 8002712:	4820      	ldr	r0, [pc, #128]	@ (8002794 <main+0x2624>)
 8002714:	f005 fb92 	bl	8007e3c <Alcd_Clear>

			snprintf(timeString, sizeof(timeString), "%02d", status);
 8002718:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 800271c:	f107 001c 	add.w	r0, r7, #28
 8002720:	4a20      	ldr	r2, [pc, #128]	@ (80027a4 <main+0x2634>)
 8002722:	2132      	movs	r1, #50	@ 0x32
 8002724:	f008 fe5e 	bl	800b3e4 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 8002728:	f107 031c 	add.w	r3, r7, #28
 800272c:	4618      	mov	r0, r3
 800272e:	f7fd fd17 	bl	8000160 <strlen>
 8002732:	4603      	mov	r3, r0
 8002734:	b2db      	uxtb	r3, r3
 8002736:	f107 021c 	add.w	r2, r7, #28
 800273a:	9300      	str	r3, [sp, #0]
 800273c:	4613      	mov	r3, r2
 800273e:	220e      	movs	r2, #14
 8002740:	2100      	movs	r1, #0
 8002742:	4814      	ldr	r0, [pc, #80]	@ (8002794 <main+0x2624>)
 8002744:	f005 fb61 	bl	8007e0a <Alcd_PutAt_n>

			buffer = atoi(time_date_buffer);
 8002748:	1d3b      	adds	r3, r7, #4
 800274a:	4618      	mov	r0, r3
 800274c:	f008 fdc1 	bl	800b2d2 <atoi>
 8002750:	4603      	mov	r3, r0
 8002752:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56

			//check if minutes is within the range 0 to 60
			if (buffer >= 0 && buffer < 61) {
 8002756:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800275a:	2b3c      	cmp	r3, #60	@ 0x3c
 800275c:	d826      	bhi.n	80027ac <main+0x263c>

				//move to the seconds state
				status = 33;
 800275e:	2321      	movs	r3, #33	@ 0x21
 8002760:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

				//set the minutes to the value
				CLK.min = buffer;
 8002764:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8002768:	b2da      	uxtb	r2, r3
 800276a:	4b0f      	ldr	r3, [pc, #60]	@ (80027a8 <main+0x2638>)
 800276c:	725a      	strb	r2, [r3, #9]

				input_index = 0;
 800276e:	2300      	movs	r3, #0
 8002770:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8002774:	2300      	movs	r3, #0
 8002776:	2200      	movs	r2, #0
 8002778:	2101      	movs	r1, #1
 800277a:	4806      	ldr	r0, [pc, #24]	@ (8002794 <main+0x2624>)
 800277c:	f005 fb6f 	bl	8007e5e <Alcd_Display_Control>
				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8002780:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8002784:	2301      	movs	r3, #1
 8002786:	2101      	movs	r1, #1
 8002788:	4802      	ldr	r0, [pc, #8]	@ (8002794 <main+0x2624>)
 800278a:	f005 fb68 	bl	8007e5e <Alcd_Display_Control>
 800278e:	e035      	b.n	80027fc <main+0x268c>
 8002790:	20000000 	.word	0x20000000
 8002794:	2000001c 	.word	0x2000001c
 8002798:	0800beb8 	.word	0x0800beb8
 800279c:	0800bebc 	.word	0x0800bebc
 80027a0:	0800bec0 	.word	0x0800bec0
 80027a4:	0800bdac 	.word	0x0800bdac
 80027a8:	20000150 	.word	0x20000150
			} else {
				Alcd_PutAt(&lcd, 0, 0, "invalid");
 80027ac:	48b0      	ldr	r0, [pc, #704]	@ (8002a70 <main+0x2900>)
 80027ae:	f005 fb99 	bl	8007ee4 <Str_Len>
 80027b2:	4603      	mov	r3, r0
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	9300      	str	r3, [sp, #0]
 80027b8:	4bad      	ldr	r3, [pc, #692]	@ (8002a70 <main+0x2900>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	2100      	movs	r1, #0
 80027be:	48ad      	ldr	r0, [pc, #692]	@ (8002a74 <main+0x2904>)
 80027c0:	f005 fb23 	bl	8007e0a <Alcd_PutAt_n>
				delay_flag = 1;
 80027c4:	2301      	movs	r3, #1
 80027c6:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

				input_index = 0;
 80027ca:	2300      	movs	r3, #0
 80027cc:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80027d0:	2300      	movs	r3, #0
 80027d2:	2200      	movs	r2, #0
 80027d4:	2101      	movs	r1, #1
 80027d6:	48a7      	ldr	r0, [pc, #668]	@ (8002a74 <main+0x2904>)
 80027d8:	f005 fb41 	bl	8007e5e <Alcd_Display_Control>
				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 80027dc:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 80027e0:	2301      	movs	r3, #1
 80027e2:	2101      	movs	r1, #1
 80027e4:	48a3      	ldr	r0, [pc, #652]	@ (8002a74 <main+0x2904>)
 80027e6:	f005 fb3a 	bl	8007e5e <Alcd_Display_Control>
				//return to entering hours
				status = 31;
 80027ea:	231f      	movs	r3, #31
 80027ec:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

				general_delay = HAL_GetTick() + 1000;
 80027f0:	f005 fcde 	bl	80081b0 <HAL_GetTick>
 80027f4:	4603      	mov	r3, r0
 80027f6:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80027fa:	65bb      	str	r3, [r7, #88]	@ 0x58
			}

			//create a delay
			if ((delay_flag == 1) && (current_tick >= general_delay)) {
 80027fc:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8002800:	2b01      	cmp	r3, #1
 8002802:	d106      	bne.n	8002812 <main+0x26a2>
 8002804:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002806:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002808:	429a      	cmp	r2, r3
 800280a:	d302      	bcc.n	8002812 <main+0x26a2>

				delay_flag = 0;
 800280c:	2300      	movs	r3, #0
 800280e:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
		while ((status == 32) && (current_tick >= general_delay)) {
 8002812:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8002816:	2b20      	cmp	r3, #32
 8002818:	f040 837b 	bne.w	8002f12 <main+0x2da2>
 800281c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800281e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002820:	429a      	cmp	r2, r3
 8002822:	f4bf af73 	bcs.w	800270c <main+0x259c>
			}

		}

		//entering the seconds state (31)
		while ((status == 33) && (current_tick >= general_delay)) {
 8002826:	e374      	b.n	8002f12 <main+0x2da2>

			//get the current tick number
			current_tick = HAL_GetTick();
 8002828:	f005 fcc2 	bl	80081b0 <HAL_GetTick>
 800282c:	6638      	str	r0, [r7, #96]	@ 0x60

			//Alcd_Clear(&lcd);
			Alcd_PutAt(&lcd, 0, 0, "Enter seconds");
 800282e:	4892      	ldr	r0, [pc, #584]	@ (8002a78 <main+0x2908>)
 8002830:	f005 fb58 	bl	8007ee4 <Str_Len>
 8002834:	4603      	mov	r3, r0
 8002836:	b2db      	uxtb	r3, r3
 8002838:	9300      	str	r3, [sp, #0]
 800283a:	4b8f      	ldr	r3, [pc, #572]	@ (8002a78 <main+0x2908>)
 800283c:	2200      	movs	r2, #0
 800283e:	2100      	movs	r1, #0
 8002840:	488c      	ldr	r0, [pc, #560]	@ (8002a74 <main+0x2904>)
 8002842:	f005 fae2 	bl	8007e0a <Alcd_PutAt_n>

			snprintf(timeString, sizeof(timeString), "%02d", status);
 8002846:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 800284a:	f107 001c 	add.w	r0, r7, #28
 800284e:	4a8b      	ldr	r2, [pc, #556]	@ (8002a7c <main+0x290c>)
 8002850:	2132      	movs	r1, #50	@ 0x32
 8002852:	f008 fdc7 	bl	800b3e4 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 8002856:	f107 031c 	add.w	r3, r7, #28
 800285a:	4618      	mov	r0, r3
 800285c:	f7fd fc80 	bl	8000160 <strlen>
 8002860:	4603      	mov	r3, r0
 8002862:	b2db      	uxtb	r3, r3
 8002864:	f107 021c 	add.w	r2, r7, #28
 8002868:	9300      	str	r3, [sp, #0]
 800286a:	4613      	mov	r3, r2
 800286c:	220e      	movs	r2, #14
 800286e:	2100      	movs	r1, #0
 8002870:	4880      	ldr	r0, [pc, #512]	@ (8002a74 <main+0x2904>)
 8002872:	f005 faca 	bl	8007e0a <Alcd_PutAt_n>

			Alcd_CursorAt(&lcd, 1, input_index);
 8002876:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800287a:	461a      	mov	r2, r3
 800287c:	2101      	movs	r1, #1
 800287e:	487d      	ldr	r0, [pc, #500]	@ (8002a74 <main+0x2904>)
 8002880:	f005 fa87 	bl	8007d92 <Alcd_CursorAt>
			Alcd_Display_Control(&lcd, 1, 1, 1);
 8002884:	2301      	movs	r3, #1
 8002886:	2201      	movs	r2, #1
 8002888:	2101      	movs	r1, #1
 800288a:	487a      	ldr	r0, [pc, #488]	@ (8002a74 <main+0x2904>)
 800288c:	f005 fae7 	bl	8007e5e <Alcd_Display_Control>

			//check if any button is pressed
			//check for any keypad input
			Keypad_Refresh(&kp);
 8002890:	487b      	ldr	r0, [pc, #492]	@ (8002a80 <main+0x2910>)
 8002892:	f005 fb81 	bl	8007f98 <Keypad_Refresh>

			//if back is entered
			if (Keypad_Get_Key(&kp, kp_button_no_back)
 8002896:	210e      	movs	r1, #14
 8002898:	4879      	ldr	r0, [pc, #484]	@ (8002a80 <main+0x2910>)
 800289a:	f005 fc19 	bl	80080d0 <Keypad_Get_Key>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d007      	beq.n	80028b4 <main+0x2744>
					&& (current_tick >= general_delay)) {
 80028a4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80028a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d303      	bcc.n	80028b4 <main+0x2744>

				//back to previous menu
				status = 31;
 80028ac:	231f      	movs	r3, #31
 80028ae:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 80028b2:	e300      	b.n	8002eb6 <main+0x2d46>

			}

			//0 is entered
			else if (Keypad_Get_Key(&kp, kp_button_0)
 80028b4:	210d      	movs	r1, #13
 80028b6:	4872      	ldr	r0, [pc, #456]	@ (8002a80 <main+0x2910>)
 80028b8:	f005 fc0a 	bl	80080d0 <Keypad_Get_Key>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d042      	beq.n	8002948 <main+0x27d8>
					&& (current_tick >= general_delay)) {
 80028c2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80028c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d33e      	bcc.n	8002948 <main+0x27d8>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80028ca:	2300      	movs	r3, #0
 80028cc:	2200      	movs	r2, #0
 80028ce:	2101      	movs	r1, #1
 80028d0:	4868      	ldr	r0, [pc, #416]	@ (8002a74 <main+0x2904>)
 80028d2:	f005 fac4 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 80028d6:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d827      	bhi.n	800292e <main+0x27be>
					time_date_buffer[input_index] = '0';
 80028de:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80028e2:	3368      	adds	r3, #104	@ 0x68
 80028e4:	443b      	add	r3, r7
 80028e6:	2230      	movs	r2, #48	@ 0x30
 80028e8:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 80028ec:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80028f0:	3301      	adds	r3, #1
 80028f2:	3368      	adds	r3, #104	@ 0x68
 80028f4:	443b      	add	r3, r7
 80028f6:	2200      	movs	r2, #0
 80028f8:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "0");
 80028fc:	4861      	ldr	r0, [pc, #388]	@ (8002a84 <main+0x2914>)
 80028fe:	f005 faf1 	bl	8007ee4 <Str_Len>
 8002902:	4603      	mov	r3, r0
 8002904:	b2db      	uxtb	r3, r3
 8002906:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 800290a:	9300      	str	r3, [sp, #0]
 800290c:	4b5d      	ldr	r3, [pc, #372]	@ (8002a84 <main+0x2914>)
 800290e:	2101      	movs	r1, #1
 8002910:	4858      	ldr	r0, [pc, #352]	@ (8002a74 <main+0x2904>)
 8002912:	f005 fa7a 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 8002916:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800291a:	3301      	adds	r3, #1
 800291c:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8002920:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8002924:	461a      	mov	r2, r3
 8002926:	2101      	movs	r1, #1
 8002928:	4852      	ldr	r0, [pc, #328]	@ (8002a74 <main+0x2904>)
 800292a:	f005 fa32 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 800292e:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8002932:	2301      	movs	r3, #1
 8002934:	2101      	movs	r1, #1
 8002936:	484f      	ldr	r0, [pc, #316]	@ (8002a74 <main+0x2904>)
 8002938:	f005 fa91 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 800293c:	f005 fc38 	bl	80081b0 <HAL_GetTick>
 8002940:	4603      	mov	r3, r0
 8002942:	33fa      	adds	r3, #250	@ 0xfa
 8002944:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002946:	e2b6      	b.n	8002eb6 <main+0x2d46>

			}
			//1 is entered
			else if (Keypad_Get_Key(&kp, kp_button_1)
 8002948:	2100      	movs	r1, #0
 800294a:	484d      	ldr	r0, [pc, #308]	@ (8002a80 <main+0x2910>)
 800294c:	f005 fbc0 	bl	80080d0 <Keypad_Get_Key>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d042      	beq.n	80029dc <main+0x286c>
					&& (current_tick >= general_delay)) {
 8002956:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002958:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800295a:	429a      	cmp	r2, r3
 800295c:	d33e      	bcc.n	80029dc <main+0x286c>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 800295e:	2300      	movs	r3, #0
 8002960:	2200      	movs	r2, #0
 8002962:	2101      	movs	r1, #1
 8002964:	4843      	ldr	r0, [pc, #268]	@ (8002a74 <main+0x2904>)
 8002966:	f005 fa7a 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 800296a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800296e:	2b01      	cmp	r3, #1
 8002970:	d827      	bhi.n	80029c2 <main+0x2852>
					time_date_buffer[input_index] = '1';
 8002972:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8002976:	3368      	adds	r3, #104	@ 0x68
 8002978:	443b      	add	r3, r7
 800297a:	2231      	movs	r2, #49	@ 0x31
 800297c:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8002980:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8002984:	3301      	adds	r3, #1
 8002986:	3368      	adds	r3, #104	@ 0x68
 8002988:	443b      	add	r3, r7
 800298a:	2200      	movs	r2, #0
 800298c:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "1");
 8002990:	483d      	ldr	r0, [pc, #244]	@ (8002a88 <main+0x2918>)
 8002992:	f005 faa7 	bl	8007ee4 <Str_Len>
 8002996:	4603      	mov	r3, r0
 8002998:	b2db      	uxtb	r3, r3
 800299a:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 800299e:	9300      	str	r3, [sp, #0]
 80029a0:	4b39      	ldr	r3, [pc, #228]	@ (8002a88 <main+0x2918>)
 80029a2:	2101      	movs	r1, #1
 80029a4:	4833      	ldr	r0, [pc, #204]	@ (8002a74 <main+0x2904>)
 80029a6:	f005 fa30 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 80029aa:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80029ae:	3301      	adds	r3, #1
 80029b0:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 80029b4:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80029b8:	461a      	mov	r2, r3
 80029ba:	2101      	movs	r1, #1
 80029bc:	482d      	ldr	r0, [pc, #180]	@ (8002a74 <main+0x2904>)
 80029be:	f005 f9e8 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 80029c2:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 80029c6:	2301      	movs	r3, #1
 80029c8:	2101      	movs	r1, #1
 80029ca:	482a      	ldr	r0, [pc, #168]	@ (8002a74 <main+0x2904>)
 80029cc:	f005 fa47 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 80029d0:	f005 fbee 	bl	80081b0 <HAL_GetTick>
 80029d4:	4603      	mov	r3, r0
 80029d6:	33fa      	adds	r3, #250	@ 0xfa
 80029d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80029da:	e26c      	b.n	8002eb6 <main+0x2d46>

			}
			//2 is entered
			else if (Keypad_Get_Key(&kp, kp_button_2)
 80029dc:	2101      	movs	r1, #1
 80029de:	4828      	ldr	r0, [pc, #160]	@ (8002a80 <main+0x2910>)
 80029e0:	f005 fb76 	bl	80080d0 <Keypad_Get_Key>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d052      	beq.n	8002a90 <main+0x2920>
					&& (current_tick >= general_delay)) {
 80029ea:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80029ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d34e      	bcc.n	8002a90 <main+0x2920>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80029f2:	2300      	movs	r3, #0
 80029f4:	2200      	movs	r2, #0
 80029f6:	2101      	movs	r1, #1
 80029f8:	481e      	ldr	r0, [pc, #120]	@ (8002a74 <main+0x2904>)
 80029fa:	f005 fa30 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 80029fe:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d827      	bhi.n	8002a56 <main+0x28e6>
					time_date_buffer[input_index] = '2';
 8002a06:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8002a0a:	3368      	adds	r3, #104	@ 0x68
 8002a0c:	443b      	add	r3, r7
 8002a0e:	2232      	movs	r2, #50	@ 0x32
 8002a10:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8002a14:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8002a18:	3301      	adds	r3, #1
 8002a1a:	3368      	adds	r3, #104	@ 0x68
 8002a1c:	443b      	add	r3, r7
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "2");
 8002a24:	4819      	ldr	r0, [pc, #100]	@ (8002a8c <main+0x291c>)
 8002a26:	f005 fa5d 	bl	8007ee4 <Str_Len>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8002a32:	9300      	str	r3, [sp, #0]
 8002a34:	4b15      	ldr	r3, [pc, #84]	@ (8002a8c <main+0x291c>)
 8002a36:	2101      	movs	r1, #1
 8002a38:	480e      	ldr	r0, [pc, #56]	@ (8002a74 <main+0x2904>)
 8002a3a:	f005 f9e6 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 8002a3e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8002a42:	3301      	adds	r3, #1
 8002a44:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8002a48:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	2101      	movs	r1, #1
 8002a50:	4808      	ldr	r0, [pc, #32]	@ (8002a74 <main+0x2904>)
 8002a52:	f005 f99e 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8002a56:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	2101      	movs	r1, #1
 8002a5e:	4805      	ldr	r0, [pc, #20]	@ (8002a74 <main+0x2904>)
 8002a60:	f005 f9fd 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8002a64:	f005 fba4 	bl	80081b0 <HAL_GetTick>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	33fa      	adds	r3, #250	@ 0xfa
 8002a6c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002a6e:	e222      	b.n	8002eb6 <main+0x2d46>
 8002a70:	0800bec4 	.word	0x0800bec4
 8002a74:	2000001c 	.word	0x2000001c
 8002a78:	0800bedc 	.word	0x0800bedc
 8002a7c:	0800bdac 	.word	0x0800bdac
 8002a80:	20000000 	.word	0x20000000
 8002a84:	0800be9c 	.word	0x0800be9c
 8002a88:	0800bea0 	.word	0x0800bea0
 8002a8c:	0800bea4 	.word	0x0800bea4

			}
			//3 is entered
			else if (Keypad_Get_Key(&kp, kp_button_3)
 8002a90:	2102      	movs	r1, #2
 8002a92:	48b8      	ldr	r0, [pc, #736]	@ (8002d74 <main+0x2c04>)
 8002a94:	f005 fb1c 	bl	80080d0 <Keypad_Get_Key>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d042      	beq.n	8002b24 <main+0x29b4>
					&& (current_tick >= general_delay)) {
 8002a9e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002aa0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d33e      	bcc.n	8002b24 <main+0x29b4>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	2101      	movs	r1, #1
 8002aac:	48b2      	ldr	r0, [pc, #712]	@ (8002d78 <main+0x2c08>)
 8002aae:	f005 f9d6 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8002ab2:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d827      	bhi.n	8002b0a <main+0x299a>
					time_date_buffer[input_index] = '3';
 8002aba:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8002abe:	3368      	adds	r3, #104	@ 0x68
 8002ac0:	443b      	add	r3, r7
 8002ac2:	2233      	movs	r2, #51	@ 0x33
 8002ac4:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8002ac8:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8002acc:	3301      	adds	r3, #1
 8002ace:	3368      	adds	r3, #104	@ 0x68
 8002ad0:	443b      	add	r3, r7
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "3");
 8002ad8:	48a8      	ldr	r0, [pc, #672]	@ (8002d7c <main+0x2c0c>)
 8002ada:	f005 fa03 	bl	8007ee4 <Str_Len>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8002ae6:	9300      	str	r3, [sp, #0]
 8002ae8:	4ba4      	ldr	r3, [pc, #656]	@ (8002d7c <main+0x2c0c>)
 8002aea:	2101      	movs	r1, #1
 8002aec:	48a2      	ldr	r0, [pc, #648]	@ (8002d78 <main+0x2c08>)
 8002aee:	f005 f98c 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 8002af2:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8002af6:	3301      	adds	r3, #1
 8002af8:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8002afc:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8002b00:	461a      	mov	r2, r3
 8002b02:	2101      	movs	r1, #1
 8002b04:	489c      	ldr	r0, [pc, #624]	@ (8002d78 <main+0x2c08>)
 8002b06:	f005 f944 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8002b0a:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8002b0e:	2301      	movs	r3, #1
 8002b10:	2101      	movs	r1, #1
 8002b12:	4899      	ldr	r0, [pc, #612]	@ (8002d78 <main+0x2c08>)
 8002b14:	f005 f9a3 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8002b18:	f005 fb4a 	bl	80081b0 <HAL_GetTick>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	33fa      	adds	r3, #250	@ 0xfa
 8002b20:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002b22:	e1c8      	b.n	8002eb6 <main+0x2d46>

			}

			//4 is entered
			else if (Keypad_Get_Key(&kp, kp_button_4)
 8002b24:	2104      	movs	r1, #4
 8002b26:	4893      	ldr	r0, [pc, #588]	@ (8002d74 <main+0x2c04>)
 8002b28:	f005 fad2 	bl	80080d0 <Keypad_Get_Key>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d042      	beq.n	8002bb8 <main+0x2a48>
					&& (current_tick >= general_delay)) {
 8002b32:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002b34:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d33e      	bcc.n	8002bb8 <main+0x2a48>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	2101      	movs	r1, #1
 8002b40:	488d      	ldr	r0, [pc, #564]	@ (8002d78 <main+0x2c08>)
 8002b42:	f005 f98c 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8002b46:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d827      	bhi.n	8002b9e <main+0x2a2e>
					time_date_buffer[input_index] = '4';
 8002b4e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8002b52:	3368      	adds	r3, #104	@ 0x68
 8002b54:	443b      	add	r3, r7
 8002b56:	2234      	movs	r2, #52	@ 0x34
 8002b58:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8002b5c:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8002b60:	3301      	adds	r3, #1
 8002b62:	3368      	adds	r3, #104	@ 0x68
 8002b64:	443b      	add	r3, r7
 8002b66:	2200      	movs	r2, #0
 8002b68:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "4");
 8002b6c:	4884      	ldr	r0, [pc, #528]	@ (8002d80 <main+0x2c10>)
 8002b6e:	f005 f9b9 	bl	8007ee4 <Str_Len>
 8002b72:	4603      	mov	r3, r0
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8002b7a:	9300      	str	r3, [sp, #0]
 8002b7c:	4b80      	ldr	r3, [pc, #512]	@ (8002d80 <main+0x2c10>)
 8002b7e:	2101      	movs	r1, #1
 8002b80:	487d      	ldr	r0, [pc, #500]	@ (8002d78 <main+0x2c08>)
 8002b82:	f005 f942 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 8002b86:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8002b90:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8002b94:	461a      	mov	r2, r3
 8002b96:	2101      	movs	r1, #1
 8002b98:	4877      	ldr	r0, [pc, #476]	@ (8002d78 <main+0x2c08>)
 8002b9a:	f005 f8fa 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8002b9e:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	2101      	movs	r1, #1
 8002ba6:	4874      	ldr	r0, [pc, #464]	@ (8002d78 <main+0x2c08>)
 8002ba8:	f005 f959 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8002bac:	f005 fb00 	bl	80081b0 <HAL_GetTick>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	33fa      	adds	r3, #250	@ 0xfa
 8002bb4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002bb6:	e17e      	b.n	8002eb6 <main+0x2d46>

			}
			//5 is entered
			else if (Keypad_Get_Key(&kp, kp_button_5)
 8002bb8:	2105      	movs	r1, #5
 8002bba:	486e      	ldr	r0, [pc, #440]	@ (8002d74 <main+0x2c04>)
 8002bbc:	f005 fa88 	bl	80080d0 <Keypad_Get_Key>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d042      	beq.n	8002c4c <main+0x2adc>
					&& (current_tick >= general_delay)) {
 8002bc6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002bc8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d33e      	bcc.n	8002c4c <main+0x2adc>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8002bce:	2300      	movs	r3, #0
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	2101      	movs	r1, #1
 8002bd4:	4868      	ldr	r0, [pc, #416]	@ (8002d78 <main+0x2c08>)
 8002bd6:	f005 f942 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8002bda:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d827      	bhi.n	8002c32 <main+0x2ac2>
					time_date_buffer[input_index] = '5';
 8002be2:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8002be6:	3368      	adds	r3, #104	@ 0x68
 8002be8:	443b      	add	r3, r7
 8002bea:	2235      	movs	r2, #53	@ 0x35
 8002bec:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8002bf0:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	3368      	adds	r3, #104	@ 0x68
 8002bf8:	443b      	add	r3, r7
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "5");
 8002c00:	4860      	ldr	r0, [pc, #384]	@ (8002d84 <main+0x2c14>)
 8002c02:	f005 f96f 	bl	8007ee4 <Str_Len>
 8002c06:	4603      	mov	r3, r0
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8002c0e:	9300      	str	r3, [sp, #0]
 8002c10:	4b5c      	ldr	r3, [pc, #368]	@ (8002d84 <main+0x2c14>)
 8002c12:	2101      	movs	r1, #1
 8002c14:	4858      	ldr	r0, [pc, #352]	@ (8002d78 <main+0x2c08>)
 8002c16:	f005 f8f8 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 8002c1a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8002c1e:	3301      	adds	r3, #1
 8002c20:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8002c24:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8002c28:	461a      	mov	r2, r3
 8002c2a:	2101      	movs	r1, #1
 8002c2c:	4852      	ldr	r0, [pc, #328]	@ (8002d78 <main+0x2c08>)
 8002c2e:	f005 f8b0 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8002c32:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8002c36:	2301      	movs	r3, #1
 8002c38:	2101      	movs	r1, #1
 8002c3a:	484f      	ldr	r0, [pc, #316]	@ (8002d78 <main+0x2c08>)
 8002c3c:	f005 f90f 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8002c40:	f005 fab6 	bl	80081b0 <HAL_GetTick>
 8002c44:	4603      	mov	r3, r0
 8002c46:	33fa      	adds	r3, #250	@ 0xfa
 8002c48:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002c4a:	e134      	b.n	8002eb6 <main+0x2d46>

			}

			//6 is entered
			else if (Keypad_Get_Key(&kp, kp_button_6)
 8002c4c:	2106      	movs	r1, #6
 8002c4e:	4849      	ldr	r0, [pc, #292]	@ (8002d74 <main+0x2c04>)
 8002c50:	f005 fa3e 	bl	80080d0 <Keypad_Get_Key>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d042      	beq.n	8002ce0 <main+0x2b70>
					&& (current_tick >= general_delay)) {
 8002c5a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002c5c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d33e      	bcc.n	8002ce0 <main+0x2b70>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8002c62:	2300      	movs	r3, #0
 8002c64:	2200      	movs	r2, #0
 8002c66:	2101      	movs	r1, #1
 8002c68:	4843      	ldr	r0, [pc, #268]	@ (8002d78 <main+0x2c08>)
 8002c6a:	f005 f8f8 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8002c6e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d827      	bhi.n	8002cc6 <main+0x2b56>
					time_date_buffer[input_index] = '6';
 8002c76:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8002c7a:	3368      	adds	r3, #104	@ 0x68
 8002c7c:	443b      	add	r3, r7
 8002c7e:	2236      	movs	r2, #54	@ 0x36
 8002c80:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8002c84:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8002c88:	3301      	adds	r3, #1
 8002c8a:	3368      	adds	r3, #104	@ 0x68
 8002c8c:	443b      	add	r3, r7
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "6");
 8002c94:	483c      	ldr	r0, [pc, #240]	@ (8002d88 <main+0x2c18>)
 8002c96:	f005 f925 	bl	8007ee4 <Str_Len>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8002ca2:	9300      	str	r3, [sp, #0]
 8002ca4:	4b38      	ldr	r3, [pc, #224]	@ (8002d88 <main+0x2c18>)
 8002ca6:	2101      	movs	r1, #1
 8002ca8:	4833      	ldr	r0, [pc, #204]	@ (8002d78 <main+0x2c08>)
 8002caa:	f005 f8ae 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 8002cae:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8002cb8:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	2101      	movs	r1, #1
 8002cc0:	482d      	ldr	r0, [pc, #180]	@ (8002d78 <main+0x2c08>)
 8002cc2:	f005 f866 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8002cc6:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8002cca:	2301      	movs	r3, #1
 8002ccc:	2101      	movs	r1, #1
 8002cce:	482a      	ldr	r0, [pc, #168]	@ (8002d78 <main+0x2c08>)
 8002cd0:	f005 f8c5 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8002cd4:	f005 fa6c 	bl	80081b0 <HAL_GetTick>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	33fa      	adds	r3, #250	@ 0xfa
 8002cdc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002cde:	e0ea      	b.n	8002eb6 <main+0x2d46>

			}

			//7 is entered
			else if (Keypad_Get_Key(&kp, kp_button_7)
 8002ce0:	2108      	movs	r1, #8
 8002ce2:	4824      	ldr	r0, [pc, #144]	@ (8002d74 <main+0x2c04>)
 8002ce4:	f005 f9f4 	bl	80080d0 <Keypad_Get_Key>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d050      	beq.n	8002d90 <main+0x2c20>
					&& (current_tick >= general_delay)) {
 8002cee:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002cf0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d34c      	bcc.n	8002d90 <main+0x2c20>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	2101      	movs	r1, #1
 8002cfc:	481e      	ldr	r0, [pc, #120]	@ (8002d78 <main+0x2c08>)
 8002cfe:	f005 f8ae 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8002d02:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d827      	bhi.n	8002d5a <main+0x2bea>
					time_date_buffer[input_index] = '7';
 8002d0a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8002d0e:	3368      	adds	r3, #104	@ 0x68
 8002d10:	443b      	add	r3, r7
 8002d12:	2237      	movs	r2, #55	@ 0x37
 8002d14:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8002d18:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	3368      	adds	r3, #104	@ 0x68
 8002d20:	443b      	add	r3, r7
 8002d22:	2200      	movs	r2, #0
 8002d24:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "7");
 8002d28:	4818      	ldr	r0, [pc, #96]	@ (8002d8c <main+0x2c1c>)
 8002d2a:	f005 f8db 	bl	8007ee4 <Str_Len>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8002d36:	9300      	str	r3, [sp, #0]
 8002d38:	4b14      	ldr	r3, [pc, #80]	@ (8002d8c <main+0x2c1c>)
 8002d3a:	2101      	movs	r1, #1
 8002d3c:	480e      	ldr	r0, [pc, #56]	@ (8002d78 <main+0x2c08>)
 8002d3e:	f005 f864 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 8002d42:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8002d46:	3301      	adds	r3, #1
 8002d48:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8002d4c:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8002d50:	461a      	mov	r2, r3
 8002d52:	2101      	movs	r1, #1
 8002d54:	4808      	ldr	r0, [pc, #32]	@ (8002d78 <main+0x2c08>)
 8002d56:	f005 f81c 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8002d5a:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8002d5e:	2301      	movs	r3, #1
 8002d60:	2101      	movs	r1, #1
 8002d62:	4805      	ldr	r0, [pc, #20]	@ (8002d78 <main+0x2c08>)
 8002d64:	f005 f87b 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8002d68:	f005 fa22 	bl	80081b0 <HAL_GetTick>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	33fa      	adds	r3, #250	@ 0xfa
 8002d70:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002d72:	e0a0      	b.n	8002eb6 <main+0x2d46>
 8002d74:	20000000 	.word	0x20000000
 8002d78:	2000001c 	.word	0x2000001c
 8002d7c:	0800bea8 	.word	0x0800bea8
 8002d80:	0800beac 	.word	0x0800beac
 8002d84:	0800beb0 	.word	0x0800beb0
 8002d88:	0800beb4 	.word	0x0800beb4
 8002d8c:	0800beb8 	.word	0x0800beb8

			}

			//8 is entered
			else if (Keypad_Get_Key(&kp, kp_button_8)
 8002d90:	2109      	movs	r1, #9
 8002d92:	48c3      	ldr	r0, [pc, #780]	@ (80030a0 <main+0x2f30>)
 8002d94:	f005 f99c 	bl	80080d0 <Keypad_Get_Key>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d042      	beq.n	8002e24 <main+0x2cb4>
					&& (current_tick >= general_delay)) {
 8002d9e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002da0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d33e      	bcc.n	8002e24 <main+0x2cb4>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8002da6:	2300      	movs	r3, #0
 8002da8:	2200      	movs	r2, #0
 8002daa:	2101      	movs	r1, #1
 8002dac:	48bd      	ldr	r0, [pc, #756]	@ (80030a4 <main+0x2f34>)
 8002dae:	f005 f856 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8002db2:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d827      	bhi.n	8002e0a <main+0x2c9a>
					time_date_buffer[input_index] = '8';
 8002dba:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8002dbe:	3368      	adds	r3, #104	@ 0x68
 8002dc0:	443b      	add	r3, r7
 8002dc2:	2238      	movs	r2, #56	@ 0x38
 8002dc4:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8002dc8:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8002dcc:	3301      	adds	r3, #1
 8002dce:	3368      	adds	r3, #104	@ 0x68
 8002dd0:	443b      	add	r3, r7
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "8");
 8002dd8:	48b3      	ldr	r0, [pc, #716]	@ (80030a8 <main+0x2f38>)
 8002dda:	f005 f883 	bl	8007ee4 <Str_Len>
 8002dde:	4603      	mov	r3, r0
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8002de6:	9300      	str	r3, [sp, #0]
 8002de8:	4baf      	ldr	r3, [pc, #700]	@ (80030a8 <main+0x2f38>)
 8002dea:	2101      	movs	r1, #1
 8002dec:	48ad      	ldr	r0, [pc, #692]	@ (80030a4 <main+0x2f34>)
 8002dee:	f005 f80c 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 8002df2:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8002df6:	3301      	adds	r3, #1
 8002df8:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8002dfc:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8002e00:	461a      	mov	r2, r3
 8002e02:	2101      	movs	r1, #1
 8002e04:	48a7      	ldr	r0, [pc, #668]	@ (80030a4 <main+0x2f34>)
 8002e06:	f004 ffc4 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8002e0a:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8002e0e:	2301      	movs	r3, #1
 8002e10:	2101      	movs	r1, #1
 8002e12:	48a4      	ldr	r0, [pc, #656]	@ (80030a4 <main+0x2f34>)
 8002e14:	f005 f823 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8002e18:	f005 f9ca 	bl	80081b0 <HAL_GetTick>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	33fa      	adds	r3, #250	@ 0xfa
 8002e20:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002e22:	e048      	b.n	8002eb6 <main+0x2d46>

			}

			//9 is entered
			else if (Keypad_Get_Key(&kp, kp_button_9)
 8002e24:	210a      	movs	r1, #10
 8002e26:	489e      	ldr	r0, [pc, #632]	@ (80030a0 <main+0x2f30>)
 8002e28:	f005 f952 	bl	80080d0 <Keypad_Get_Key>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d041      	beq.n	8002eb6 <main+0x2d46>
					&& (current_tick >= general_delay)) {
 8002e32:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002e34:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d33d      	bcc.n	8002eb6 <main+0x2d46>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	2101      	movs	r1, #1
 8002e40:	4898      	ldr	r0, [pc, #608]	@ (80030a4 <main+0x2f34>)
 8002e42:	f005 f80c 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8002e46:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d827      	bhi.n	8002e9e <main+0x2d2e>
					time_date_buffer[input_index] = '9';
 8002e4e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8002e52:	3368      	adds	r3, #104	@ 0x68
 8002e54:	443b      	add	r3, r7
 8002e56:	2239      	movs	r2, #57	@ 0x39
 8002e58:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8002e5c:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8002e60:	3301      	adds	r3, #1
 8002e62:	3368      	adds	r3, #104	@ 0x68
 8002e64:	443b      	add	r3, r7
 8002e66:	2200      	movs	r2, #0
 8002e68:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "9");
 8002e6c:	488f      	ldr	r0, [pc, #572]	@ (80030ac <main+0x2f3c>)
 8002e6e:	f005 f839 	bl	8007ee4 <Str_Len>
 8002e72:	4603      	mov	r3, r0
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8002e7a:	9300      	str	r3, [sp, #0]
 8002e7c:	4b8b      	ldr	r3, [pc, #556]	@ (80030ac <main+0x2f3c>)
 8002e7e:	2101      	movs	r1, #1
 8002e80:	4888      	ldr	r0, [pc, #544]	@ (80030a4 <main+0x2f34>)
 8002e82:	f004 ffc2 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 8002e86:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8002e90:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8002e94:	461a      	mov	r2, r3
 8002e96:	2101      	movs	r1, #1
 8002e98:	4882      	ldr	r0, [pc, #520]	@ (80030a4 <main+0x2f34>)
 8002e9a:	f004 ff7a 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8002e9e:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	2101      	movs	r1, #1
 8002ea6:	487f      	ldr	r0, [pc, #508]	@ (80030a4 <main+0x2f34>)
 8002ea8:	f004 ffd9 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8002eac:	f005 f980 	bl	80081b0 <HAL_GetTick>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	33fa      	adds	r3, #250	@ 0xfa
 8002eb4:	65bb      	str	r3, [r7, #88]	@ 0x58

			}

			//when yes is entered -> check for seconds validity (state 34)
			if (Keypad_Get_Key(&kp, kp_button_yes)
 8002eb6:	210f      	movs	r1, #15
 8002eb8:	4879      	ldr	r0, [pc, #484]	@ (80030a0 <main+0x2f30>)
 8002eba:	f005 f909 	bl	80080d0 <Keypad_Get_Key>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d021      	beq.n	8002f08 <main+0x2d98>
					&& (current_tick >= general_delay)) {
 8002ec4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002ec6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d31d      	bcc.n	8002f08 <main+0x2d98>

				Alcd_Clear(&lcd);
 8002ecc:	4875      	ldr	r0, [pc, #468]	@ (80030a4 <main+0x2f34>)
 8002ece:	f004 ffb5 	bl	8007e3c <Alcd_Clear>

				snprintf(timeString, sizeof(timeString), "%02d", buffer);
 8002ed2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8002ed6:	f107 001c 	add.w	r0, r7, #28
 8002eda:	4a75      	ldr	r2, [pc, #468]	@ (80030b0 <main+0x2f40>)
 8002edc:	2132      	movs	r1, #50	@ 0x32
 8002ede:	f008 fa81 	bl	800b3e4 <sniprintf>
				Alcd_PutAt_n(&lcd, 1, 0, timeString, strlen(timeString));
 8002ee2:	f107 031c 	add.w	r3, r7, #28
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7fd f93a 	bl	8000160 <strlen>
 8002eec:	4603      	mov	r3, r0
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	f107 021c 	add.w	r2, r7, #28
 8002ef4:	9300      	str	r3, [sp, #0]
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	2200      	movs	r2, #0
 8002efa:	2101      	movs	r1, #1
 8002efc:	4869      	ldr	r0, [pc, #420]	@ (80030a4 <main+0x2f34>)
 8002efe:	f004 ff84 	bl	8007e0a <Alcd_PutAt_n>

				status = 34;
 8002f02:	2322      	movs	r3, #34	@ 0x22
 8002f04:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

			}

			//
			general_delay = HAL_GetTick() + 250;
 8002f08:	f005 f952 	bl	80081b0 <HAL_GetTick>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	33fa      	adds	r3, #250	@ 0xfa
 8002f10:	65bb      	str	r3, [r7, #88]	@ 0x58
		while ((status == 33) && (current_tick >= general_delay)) {
 8002f12:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8002f16:	2b21      	cmp	r3, #33	@ 0x21
 8002f18:	d17a      	bne.n	8003010 <main+0x2ea0>
 8002f1a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002f1c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	f4bf ac82 	bcs.w	8002828 <main+0x26b8>
		}

		//seconds validation phase
		while ((status == 34) && (current_tick >= general_delay)) {
 8002f24:	e074      	b.n	8003010 <main+0x2ea0>

			//get the current tick number
			current_tick = HAL_GetTick();
 8002f26:	f005 f943 	bl	80081b0 <HAL_GetTick>
 8002f2a:	6638      	str	r0, [r7, #96]	@ 0x60

			Alcd_Clear(&lcd);
 8002f2c:	485d      	ldr	r0, [pc, #372]	@ (80030a4 <main+0x2f34>)
 8002f2e:	f004 ff85 	bl	8007e3c <Alcd_Clear>

			snprintf(timeString, sizeof(timeString), "%02d", status);
 8002f32:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8002f36:	f107 001c 	add.w	r0, r7, #28
 8002f3a:	4a5d      	ldr	r2, [pc, #372]	@ (80030b0 <main+0x2f40>)
 8002f3c:	2132      	movs	r1, #50	@ 0x32
 8002f3e:	f008 fa51 	bl	800b3e4 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 8002f42:	f107 031c 	add.w	r3, r7, #28
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7fd f90a 	bl	8000160 <strlen>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	f107 021c 	add.w	r2, r7, #28
 8002f54:	9300      	str	r3, [sp, #0]
 8002f56:	4613      	mov	r3, r2
 8002f58:	220e      	movs	r2, #14
 8002f5a:	2100      	movs	r1, #0
 8002f5c:	4851      	ldr	r0, [pc, #324]	@ (80030a4 <main+0x2f34>)
 8002f5e:	f004 ff54 	bl	8007e0a <Alcd_PutAt_n>

			buffer = atoi(time_date_buffer);
 8002f62:	1d3b      	adds	r3, r7, #4
 8002f64:	4618      	mov	r0, r3
 8002f66:	f008 f9b4 	bl	800b2d2 <atoi>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56

			//check if minutes is within the range 0 to 60
			if (buffer >= 0 && buffer < 61) {
 8002f70:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8002f74:	2b3c      	cmp	r3, #60	@ 0x3c
 8002f76:	d818      	bhi.n	8002faa <main+0x2e3a>

				//move to the confirmation state
				status = 35;
 8002f78:	2323      	movs	r3, #35	@ 0x23
 8002f7a:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

				//set the minutes to the value
				CLK.sec = buffer;
 8002f7e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8002f82:	b2da      	uxtb	r2, r3
 8002f84:	4b4b      	ldr	r3, [pc, #300]	@ (80030b4 <main+0x2f44>)
 8002f86:	721a      	strb	r2, [r3, #8]

				input_index = 0;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8002f8e:	2300      	movs	r3, #0
 8002f90:	2200      	movs	r2, #0
 8002f92:	2101      	movs	r1, #1
 8002f94:	4843      	ldr	r0, [pc, #268]	@ (80030a4 <main+0x2f34>)
 8002f96:	f004 ff62 	bl	8007e5e <Alcd_Display_Control>
				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8002f9a:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	2101      	movs	r1, #1
 8002fa2:	4840      	ldr	r0, [pc, #256]	@ (80030a4 <main+0x2f34>)
 8002fa4:	f004 ff5b 	bl	8007e5e <Alcd_Display_Control>
 8002fa8:	e027      	b.n	8002ffa <main+0x2e8a>
			} else {
				Alcd_PutAt(&lcd, 0, 0, "invalid");
 8002faa:	4843      	ldr	r0, [pc, #268]	@ (80030b8 <main+0x2f48>)
 8002fac:	f004 ff9a 	bl	8007ee4 <Str_Len>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	9300      	str	r3, [sp, #0]
 8002fb6:	4b40      	ldr	r3, [pc, #256]	@ (80030b8 <main+0x2f48>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	2100      	movs	r1, #0
 8002fbc:	4839      	ldr	r0, [pc, #228]	@ (80030a4 <main+0x2f34>)
 8002fbe:	f004 ff24 	bl	8007e0a <Alcd_PutAt_n>
				delay_flag = 1;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

				input_index = 0;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8002fce:	2300      	movs	r3, #0
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	2101      	movs	r1, #1
 8002fd4:	4833      	ldr	r0, [pc, #204]	@ (80030a4 <main+0x2f34>)
 8002fd6:	f004 ff42 	bl	8007e5e <Alcd_Display_Control>
				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8002fda:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8002fde:	2301      	movs	r3, #1
 8002fe0:	2101      	movs	r1, #1
 8002fe2:	4830      	ldr	r0, [pc, #192]	@ (80030a4 <main+0x2f34>)
 8002fe4:	f004 ff3b 	bl	8007e5e <Alcd_Display_Control>
				//return to entering hours
				status = 33;
 8002fe8:	2321      	movs	r3, #33	@ 0x21
 8002fea:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

				general_delay = HAL_GetTick() + 1000;
 8002fee:	f005 f8df 	bl	80081b0 <HAL_GetTick>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002ff8:	65bb      	str	r3, [r7, #88]	@ 0x58
			}

			//create a delay
			if ((delay_flag == 1) && (current_tick >= general_delay)) {
 8002ffa:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d106      	bne.n	8003010 <main+0x2ea0>
 8003002:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003004:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003006:	429a      	cmp	r2, r3
 8003008:	d302      	bcc.n	8003010 <main+0x2ea0>

				delay_flag = 0;
 800300a:	2300      	movs	r3, #0
 800300c:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
		while ((status == 34) && (current_tick >= general_delay)) {
 8003010:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8003014:	2b22      	cmp	r3, #34	@ 0x22
 8003016:	d166      	bne.n	80030e6 <main+0x2f76>
 8003018:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800301a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800301c:	429a      	cmp	r2, r3
 800301e:	d282      	bcs.n	8002f26 <main+0x2db6>
			}

		}

		//time confirmation menu (state 35)
		while ((status == 35) && (current_tick >= general_delay)) {
 8003020:	e061      	b.n	80030e6 <main+0x2f76>

			//get the current tick number
			current_tick = HAL_GetTick();
 8003022:	f005 f8c5 	bl	80081b0 <HAL_GetTick>
 8003026:	6638      	str	r0, [r7, #96]	@ 0x60

			Alcd_Clear(&lcd);
 8003028:	481e      	ldr	r0, [pc, #120]	@ (80030a4 <main+0x2f34>)
 800302a:	f004 ff07 	bl	8007e3c <Alcd_Clear>
			Alcd_PutAt(&lcd, 0, 0, "confirm?");
 800302e:	4823      	ldr	r0, [pc, #140]	@ (80030bc <main+0x2f4c>)
 8003030:	f004 ff58 	bl	8007ee4 <Str_Len>
 8003034:	4603      	mov	r3, r0
 8003036:	b2db      	uxtb	r3, r3
 8003038:	9300      	str	r3, [sp, #0]
 800303a:	4b20      	ldr	r3, [pc, #128]	@ (80030bc <main+0x2f4c>)
 800303c:	2200      	movs	r2, #0
 800303e:	2100      	movs	r1, #0
 8003040:	4818      	ldr	r0, [pc, #96]	@ (80030a4 <main+0x2f34>)
 8003042:	f004 fee2 	bl	8007e0a <Alcd_PutAt_n>

			snprintf(timeString, sizeof(timeString), "%02d", status);
 8003046:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 800304a:	f107 001c 	add.w	r0, r7, #28
 800304e:	4a18      	ldr	r2, [pc, #96]	@ (80030b0 <main+0x2f40>)
 8003050:	2132      	movs	r1, #50	@ 0x32
 8003052:	f008 f9c7 	bl	800b3e4 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 8003056:	f107 031c 	add.w	r3, r7, #28
 800305a:	4618      	mov	r0, r3
 800305c:	f7fd f880 	bl	8000160 <strlen>
 8003060:	4603      	mov	r3, r0
 8003062:	b2db      	uxtb	r3, r3
 8003064:	f107 021c 	add.w	r2, r7, #28
 8003068:	9300      	str	r3, [sp, #0]
 800306a:	4613      	mov	r3, r2
 800306c:	220e      	movs	r2, #14
 800306e:	2100      	movs	r1, #0
 8003070:	480c      	ldr	r0, [pc, #48]	@ (80030a4 <main+0x2f34>)
 8003072:	f004 feca 	bl	8007e0a <Alcd_PutAt_n>

			//check if any button is pressed
			//check for any keypad input
			Keypad_Refresh(&kp);
 8003076:	480a      	ldr	r0, [pc, #40]	@ (80030a0 <main+0x2f30>)
 8003078:	f004 ff8e 	bl	8007f98 <Keypad_Refresh>

			//yes is selected
			if (Keypad_Get_Key(&kp, kp_button_yes)
 800307c:	210f      	movs	r1, #15
 800307e:	4808      	ldr	r0, [pc, #32]	@ (80030a0 <main+0x2f30>)
 8003080:	f005 f826 	bl	80080d0 <Keypad_Get_Key>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d01a      	beq.n	80030c0 <main+0x2f50>
					&& (current_tick >= general_delay)) {
 800308a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800308c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800308e:	429a      	cmp	r2, r3
 8003090:	d316      	bcc.n	80030c0 <main+0x2f50>

				Ds1307_set(&CLK);
 8003092:	4808      	ldr	r0, [pc, #32]	@ (80030b4 <main+0x2f44>)
 8003094:	f004 fbe9 	bl	800786a <Ds1307_set>

				//return to edit menu
				status = 21;
 8003098:	2315      	movs	r3, #21
 800309a:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 800309e:	e01d      	b.n	80030dc <main+0x2f6c>
 80030a0:	20000000 	.word	0x20000000
 80030a4:	2000001c 	.word	0x2000001c
 80030a8:	0800bebc 	.word	0x0800bebc
 80030ac:	0800bec0 	.word	0x0800bec0
 80030b0:	0800bdac 	.word	0x0800bdac
 80030b4:	20000150 	.word	0x20000150
 80030b8:	0800bec4 	.word	0x0800bec4
 80030bc:	0800beec 	.word	0x0800beec

			}

			//back is selected -> back to seconds state
			else if (Keypad_Get_Key(&kp, kp_button_no_back)
 80030c0:	210e      	movs	r1, #14
 80030c2:	48c6      	ldr	r0, [pc, #792]	@ (80033dc <main+0x326c>)
 80030c4:	f005 f804 	bl	80080d0 <Keypad_Get_Key>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d006      	beq.n	80030dc <main+0x2f6c>
					&& (current_tick >= general_delay)) {
 80030ce:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80030d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d302      	bcc.n	80030dc <main+0x2f6c>

				status = 33;
 80030d6:	2321      	movs	r3, #33	@ 0x21
 80030d8:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

			}

			general_delay = HAL_GetTick() + 250;
 80030dc:	f005 f868 	bl	80081b0 <HAL_GetTick>
 80030e0:	4603      	mov	r3, r0
 80030e2:	33fa      	adds	r3, #250	@ 0xfa
 80030e4:	65bb      	str	r3, [r7, #88]	@ 0x58
		while ((status == 35) && (current_tick >= general_delay)) {
 80030e6:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 80030ea:	2b23      	cmp	r3, #35	@ 0x23
 80030ec:	f040 837d 	bne.w	80037ea <main+0x367a>
 80030f0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80030f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d294      	bcs.n	8003022 <main+0x2eb2>
		}

		//date edit menu -> enter day(state 26)
		while ((status == 26) && (current_tick >= general_delay)) {
 80030f8:	e377      	b.n	80037ea <main+0x367a>

			//get the current tick number
			current_tick = HAL_GetTick();
 80030fa:	f005 f859 	bl	80081b0 <HAL_GetTick>
 80030fe:	6638      	str	r0, [r7, #96]	@ 0x60

			//Alcd_Clear(&lcd);
			Alcd_PutAt(&lcd, 0, 0, "Enter day");
 8003100:	48b7      	ldr	r0, [pc, #732]	@ (80033e0 <main+0x3270>)
 8003102:	f004 feef 	bl	8007ee4 <Str_Len>
 8003106:	4603      	mov	r3, r0
 8003108:	b2db      	uxtb	r3, r3
 800310a:	9300      	str	r3, [sp, #0]
 800310c:	4bb4      	ldr	r3, [pc, #720]	@ (80033e0 <main+0x3270>)
 800310e:	2200      	movs	r2, #0
 8003110:	2100      	movs	r1, #0
 8003112:	48b4      	ldr	r0, [pc, #720]	@ (80033e4 <main+0x3274>)
 8003114:	f004 fe79 	bl	8007e0a <Alcd_PutAt_n>

			snprintf(timeString, sizeof(timeString), "%02d", status);
 8003118:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 800311c:	f107 001c 	add.w	r0, r7, #28
 8003120:	4ab1      	ldr	r2, [pc, #708]	@ (80033e8 <main+0x3278>)
 8003122:	2132      	movs	r1, #50	@ 0x32
 8003124:	f008 f95e 	bl	800b3e4 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 8003128:	f107 031c 	add.w	r3, r7, #28
 800312c:	4618      	mov	r0, r3
 800312e:	f7fd f817 	bl	8000160 <strlen>
 8003132:	4603      	mov	r3, r0
 8003134:	b2db      	uxtb	r3, r3
 8003136:	f107 021c 	add.w	r2, r7, #28
 800313a:	9300      	str	r3, [sp, #0]
 800313c:	4613      	mov	r3, r2
 800313e:	220e      	movs	r2, #14
 8003140:	2100      	movs	r1, #0
 8003142:	48a8      	ldr	r0, [pc, #672]	@ (80033e4 <main+0x3274>)
 8003144:	f004 fe61 	bl	8007e0a <Alcd_PutAt_n>

			Alcd_CursorAt(&lcd, 1, input_index);
 8003148:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800314c:	461a      	mov	r2, r3
 800314e:	2101      	movs	r1, #1
 8003150:	48a4      	ldr	r0, [pc, #656]	@ (80033e4 <main+0x3274>)
 8003152:	f004 fe1e 	bl	8007d92 <Alcd_CursorAt>
			Alcd_Display_Control(&lcd, 1, 1, 1);
 8003156:	2301      	movs	r3, #1
 8003158:	2201      	movs	r2, #1
 800315a:	2101      	movs	r1, #1
 800315c:	48a1      	ldr	r0, [pc, #644]	@ (80033e4 <main+0x3274>)
 800315e:	f004 fe7e 	bl	8007e5e <Alcd_Display_Control>

			//check if any button is pressed
			//check for any keypad input
			Keypad_Refresh(&kp);
 8003162:	489e      	ldr	r0, [pc, #632]	@ (80033dc <main+0x326c>)
 8003164:	f004 ff18 	bl	8007f98 <Keypad_Refresh>

			//if back is entered
			if (Keypad_Get_Key(&kp, kp_button_no_back)
 8003168:	210e      	movs	r1, #14
 800316a:	489c      	ldr	r0, [pc, #624]	@ (80033dc <main+0x326c>)
 800316c:	f004 ffb0 	bl	80080d0 <Keypad_Get_Key>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d00a      	beq.n	800318c <main+0x301c>
					&& (current_tick >= general_delay)) {
 8003176:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003178:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800317a:	429a      	cmp	r2, r3
 800317c:	d306      	bcc.n	800318c <main+0x301c>

				input_index = 0;
 800317e:	2300      	movs	r3, #0
 8003180:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55

				//back to previous menu
				status = 22;
 8003184:	2316      	movs	r3, #22
 8003186:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 800318a:	e300      	b.n	800378e <main+0x361e>

			}

			//0 is entered
			else if (Keypad_Get_Key(&kp, kp_button_0)
 800318c:	210d      	movs	r1, #13
 800318e:	4893      	ldr	r0, [pc, #588]	@ (80033dc <main+0x326c>)
 8003190:	f004 ff9e 	bl	80080d0 <Keypad_Get_Key>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d042      	beq.n	8003220 <main+0x30b0>
					&& (current_tick >= general_delay)) {
 800319a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800319c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800319e:	429a      	cmp	r2, r3
 80031a0:	d33e      	bcc.n	8003220 <main+0x30b0>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80031a2:	2300      	movs	r3, #0
 80031a4:	2200      	movs	r2, #0
 80031a6:	2101      	movs	r1, #1
 80031a8:	488e      	ldr	r0, [pc, #568]	@ (80033e4 <main+0x3274>)
 80031aa:	f004 fe58 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 80031ae:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d827      	bhi.n	8003206 <main+0x3096>
					time_date_buffer[input_index] = '0';
 80031b6:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80031ba:	3368      	adds	r3, #104	@ 0x68
 80031bc:	443b      	add	r3, r7
 80031be:	2230      	movs	r2, #48	@ 0x30
 80031c0:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 80031c4:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80031c8:	3301      	adds	r3, #1
 80031ca:	3368      	adds	r3, #104	@ 0x68
 80031cc:	443b      	add	r3, r7
 80031ce:	2200      	movs	r2, #0
 80031d0:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "0");
 80031d4:	4885      	ldr	r0, [pc, #532]	@ (80033ec <main+0x327c>)
 80031d6:	f004 fe85 	bl	8007ee4 <Str_Len>
 80031da:	4603      	mov	r3, r0
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 80031e2:	9300      	str	r3, [sp, #0]
 80031e4:	4b81      	ldr	r3, [pc, #516]	@ (80033ec <main+0x327c>)
 80031e6:	2101      	movs	r1, #1
 80031e8:	487e      	ldr	r0, [pc, #504]	@ (80033e4 <main+0x3274>)
 80031ea:	f004 fe0e 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 80031ee:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80031f2:	3301      	adds	r3, #1
 80031f4:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 80031f8:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80031fc:	461a      	mov	r2, r3
 80031fe:	2101      	movs	r1, #1
 8003200:	4878      	ldr	r0, [pc, #480]	@ (80033e4 <main+0x3274>)
 8003202:	f004 fdc6 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8003206:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 800320a:	2301      	movs	r3, #1
 800320c:	2101      	movs	r1, #1
 800320e:	4875      	ldr	r0, [pc, #468]	@ (80033e4 <main+0x3274>)
 8003210:	f004 fe25 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8003214:	f004 ffcc 	bl	80081b0 <HAL_GetTick>
 8003218:	4603      	mov	r3, r0
 800321a:	33fa      	adds	r3, #250	@ 0xfa
 800321c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800321e:	e2b6      	b.n	800378e <main+0x361e>

			}
			//1 is entered
			else if (Keypad_Get_Key(&kp, kp_button_1)
 8003220:	2100      	movs	r1, #0
 8003222:	486e      	ldr	r0, [pc, #440]	@ (80033dc <main+0x326c>)
 8003224:	f004 ff54 	bl	80080d0 <Keypad_Get_Key>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d042      	beq.n	80032b4 <main+0x3144>
					&& (current_tick >= general_delay)) {
 800322e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003230:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003232:	429a      	cmp	r2, r3
 8003234:	d33e      	bcc.n	80032b4 <main+0x3144>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8003236:	2300      	movs	r3, #0
 8003238:	2200      	movs	r2, #0
 800323a:	2101      	movs	r1, #1
 800323c:	4869      	ldr	r0, [pc, #420]	@ (80033e4 <main+0x3274>)
 800323e:	f004 fe0e 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8003242:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8003246:	2b01      	cmp	r3, #1
 8003248:	d827      	bhi.n	800329a <main+0x312a>
					time_date_buffer[input_index] = '1';
 800324a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800324e:	3368      	adds	r3, #104	@ 0x68
 8003250:	443b      	add	r3, r7
 8003252:	2231      	movs	r2, #49	@ 0x31
 8003254:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8003258:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800325c:	3301      	adds	r3, #1
 800325e:	3368      	adds	r3, #104	@ 0x68
 8003260:	443b      	add	r3, r7
 8003262:	2200      	movs	r2, #0
 8003264:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "1");
 8003268:	4861      	ldr	r0, [pc, #388]	@ (80033f0 <main+0x3280>)
 800326a:	f004 fe3b 	bl	8007ee4 <Str_Len>
 800326e:	4603      	mov	r3, r0
 8003270:	b2db      	uxtb	r3, r3
 8003272:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8003276:	9300      	str	r3, [sp, #0]
 8003278:	4b5d      	ldr	r3, [pc, #372]	@ (80033f0 <main+0x3280>)
 800327a:	2101      	movs	r1, #1
 800327c:	4859      	ldr	r0, [pc, #356]	@ (80033e4 <main+0x3274>)
 800327e:	f004 fdc4 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 8003282:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8003286:	3301      	adds	r3, #1
 8003288:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 800328c:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8003290:	461a      	mov	r2, r3
 8003292:	2101      	movs	r1, #1
 8003294:	4853      	ldr	r0, [pc, #332]	@ (80033e4 <main+0x3274>)
 8003296:	f004 fd7c 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 800329a:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 800329e:	2301      	movs	r3, #1
 80032a0:	2101      	movs	r1, #1
 80032a2:	4850      	ldr	r0, [pc, #320]	@ (80033e4 <main+0x3274>)
 80032a4:	f004 fddb 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 80032a8:	f004 ff82 	bl	80081b0 <HAL_GetTick>
 80032ac:	4603      	mov	r3, r0
 80032ae:	33fa      	adds	r3, #250	@ 0xfa
 80032b0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80032b2:	e26c      	b.n	800378e <main+0x361e>

			}
			//2 is entered
			else if (Keypad_Get_Key(&kp, kp_button_2)
 80032b4:	2101      	movs	r1, #1
 80032b6:	4849      	ldr	r0, [pc, #292]	@ (80033dc <main+0x326c>)
 80032b8:	f004 ff0a 	bl	80080d0 <Keypad_Get_Key>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d042      	beq.n	8003348 <main+0x31d8>
					&& (current_tick >= general_delay)) {
 80032c2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80032c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d33e      	bcc.n	8003348 <main+0x31d8>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80032ca:	2300      	movs	r3, #0
 80032cc:	2200      	movs	r2, #0
 80032ce:	2101      	movs	r1, #1
 80032d0:	4844      	ldr	r0, [pc, #272]	@ (80033e4 <main+0x3274>)
 80032d2:	f004 fdc4 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 80032d6:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d827      	bhi.n	800332e <main+0x31be>
					time_date_buffer[input_index] = '2';
 80032de:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80032e2:	3368      	adds	r3, #104	@ 0x68
 80032e4:	443b      	add	r3, r7
 80032e6:	2232      	movs	r2, #50	@ 0x32
 80032e8:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 80032ec:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80032f0:	3301      	adds	r3, #1
 80032f2:	3368      	adds	r3, #104	@ 0x68
 80032f4:	443b      	add	r3, r7
 80032f6:	2200      	movs	r2, #0
 80032f8:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "2");
 80032fc:	483d      	ldr	r0, [pc, #244]	@ (80033f4 <main+0x3284>)
 80032fe:	f004 fdf1 	bl	8007ee4 <Str_Len>
 8003302:	4603      	mov	r3, r0
 8003304:	b2db      	uxtb	r3, r3
 8003306:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 800330a:	9300      	str	r3, [sp, #0]
 800330c:	4b39      	ldr	r3, [pc, #228]	@ (80033f4 <main+0x3284>)
 800330e:	2101      	movs	r1, #1
 8003310:	4834      	ldr	r0, [pc, #208]	@ (80033e4 <main+0x3274>)
 8003312:	f004 fd7a 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 8003316:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800331a:	3301      	adds	r3, #1
 800331c:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8003320:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8003324:	461a      	mov	r2, r3
 8003326:	2101      	movs	r1, #1
 8003328:	482e      	ldr	r0, [pc, #184]	@ (80033e4 <main+0x3274>)
 800332a:	f004 fd32 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 800332e:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8003332:	2301      	movs	r3, #1
 8003334:	2101      	movs	r1, #1
 8003336:	482b      	ldr	r0, [pc, #172]	@ (80033e4 <main+0x3274>)
 8003338:	f004 fd91 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 800333c:	f004 ff38 	bl	80081b0 <HAL_GetTick>
 8003340:	4603      	mov	r3, r0
 8003342:	33fa      	adds	r3, #250	@ 0xfa
 8003344:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003346:	e222      	b.n	800378e <main+0x361e>

			}
			//3 is entered
			else if (Keypad_Get_Key(&kp, kp_button_3)
 8003348:	2102      	movs	r1, #2
 800334a:	4824      	ldr	r0, [pc, #144]	@ (80033dc <main+0x326c>)
 800334c:	f004 fec0 	bl	80080d0 <Keypad_Get_Key>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d052      	beq.n	80033fc <main+0x328c>
					&& (current_tick >= general_delay)) {
 8003356:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003358:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800335a:	429a      	cmp	r2, r3
 800335c:	d34e      	bcc.n	80033fc <main+0x328c>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 800335e:	2300      	movs	r3, #0
 8003360:	2200      	movs	r2, #0
 8003362:	2101      	movs	r1, #1
 8003364:	481f      	ldr	r0, [pc, #124]	@ (80033e4 <main+0x3274>)
 8003366:	f004 fd7a 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 800336a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800336e:	2b01      	cmp	r3, #1
 8003370:	d827      	bhi.n	80033c2 <main+0x3252>
					time_date_buffer[input_index] = '3';
 8003372:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8003376:	3368      	adds	r3, #104	@ 0x68
 8003378:	443b      	add	r3, r7
 800337a:	2233      	movs	r2, #51	@ 0x33
 800337c:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8003380:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8003384:	3301      	adds	r3, #1
 8003386:	3368      	adds	r3, #104	@ 0x68
 8003388:	443b      	add	r3, r7
 800338a:	2200      	movs	r2, #0
 800338c:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "3");
 8003390:	4819      	ldr	r0, [pc, #100]	@ (80033f8 <main+0x3288>)
 8003392:	f004 fda7 	bl	8007ee4 <Str_Len>
 8003396:	4603      	mov	r3, r0
 8003398:	b2db      	uxtb	r3, r3
 800339a:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 800339e:	9300      	str	r3, [sp, #0]
 80033a0:	4b15      	ldr	r3, [pc, #84]	@ (80033f8 <main+0x3288>)
 80033a2:	2101      	movs	r1, #1
 80033a4:	480f      	ldr	r0, [pc, #60]	@ (80033e4 <main+0x3274>)
 80033a6:	f004 fd30 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 80033aa:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80033ae:	3301      	adds	r3, #1
 80033b0:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 80033b4:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80033b8:	461a      	mov	r2, r3
 80033ba:	2101      	movs	r1, #1
 80033bc:	4809      	ldr	r0, [pc, #36]	@ (80033e4 <main+0x3274>)
 80033be:	f004 fce8 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 80033c2:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 80033c6:	2301      	movs	r3, #1
 80033c8:	2101      	movs	r1, #1
 80033ca:	4806      	ldr	r0, [pc, #24]	@ (80033e4 <main+0x3274>)
 80033cc:	f004 fd47 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 80033d0:	f004 feee 	bl	80081b0 <HAL_GetTick>
 80033d4:	4603      	mov	r3, r0
 80033d6:	33fa      	adds	r3, #250	@ 0xfa
 80033d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80033da:	e1d8      	b.n	800378e <main+0x361e>
 80033dc:	20000000 	.word	0x20000000
 80033e0:	0800bef8 	.word	0x0800bef8
 80033e4:	2000001c 	.word	0x2000001c
 80033e8:	0800bdac 	.word	0x0800bdac
 80033ec:	0800be9c 	.word	0x0800be9c
 80033f0:	0800bea0 	.word	0x0800bea0
 80033f4:	0800bea4 	.word	0x0800bea4
 80033f8:	0800bea8 	.word	0x0800bea8

			}

			//4 is entered
			else if (Keypad_Get_Key(&kp, kp_button_4)
 80033fc:	2104      	movs	r1, #4
 80033fe:	48b8      	ldr	r0, [pc, #736]	@ (80036e0 <main+0x3570>)
 8003400:	f004 fe66 	bl	80080d0 <Keypad_Get_Key>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d042      	beq.n	8003490 <main+0x3320>
					&& (current_tick >= general_delay)) {
 800340a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800340c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800340e:	429a      	cmp	r2, r3
 8003410:	d33e      	bcc.n	8003490 <main+0x3320>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8003412:	2300      	movs	r3, #0
 8003414:	2200      	movs	r2, #0
 8003416:	2101      	movs	r1, #1
 8003418:	48b2      	ldr	r0, [pc, #712]	@ (80036e4 <main+0x3574>)
 800341a:	f004 fd20 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 800341e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8003422:	2b01      	cmp	r3, #1
 8003424:	d827      	bhi.n	8003476 <main+0x3306>
					time_date_buffer[input_index] = '4';
 8003426:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800342a:	3368      	adds	r3, #104	@ 0x68
 800342c:	443b      	add	r3, r7
 800342e:	2234      	movs	r2, #52	@ 0x34
 8003430:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8003434:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8003438:	3301      	adds	r3, #1
 800343a:	3368      	adds	r3, #104	@ 0x68
 800343c:	443b      	add	r3, r7
 800343e:	2200      	movs	r2, #0
 8003440:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "4");
 8003444:	48a8      	ldr	r0, [pc, #672]	@ (80036e8 <main+0x3578>)
 8003446:	f004 fd4d 	bl	8007ee4 <Str_Len>
 800344a:	4603      	mov	r3, r0
 800344c:	b2db      	uxtb	r3, r3
 800344e:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8003452:	9300      	str	r3, [sp, #0]
 8003454:	4ba4      	ldr	r3, [pc, #656]	@ (80036e8 <main+0x3578>)
 8003456:	2101      	movs	r1, #1
 8003458:	48a2      	ldr	r0, [pc, #648]	@ (80036e4 <main+0x3574>)
 800345a:	f004 fcd6 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 800345e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8003462:	3301      	adds	r3, #1
 8003464:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8003468:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800346c:	461a      	mov	r2, r3
 800346e:	2101      	movs	r1, #1
 8003470:	489c      	ldr	r0, [pc, #624]	@ (80036e4 <main+0x3574>)
 8003472:	f004 fc8e 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8003476:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 800347a:	2301      	movs	r3, #1
 800347c:	2101      	movs	r1, #1
 800347e:	4899      	ldr	r0, [pc, #612]	@ (80036e4 <main+0x3574>)
 8003480:	f004 fced 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8003484:	f004 fe94 	bl	80081b0 <HAL_GetTick>
 8003488:	4603      	mov	r3, r0
 800348a:	33fa      	adds	r3, #250	@ 0xfa
 800348c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800348e:	e17e      	b.n	800378e <main+0x361e>

			}
			//5 is entered
			else if (Keypad_Get_Key(&kp, kp_button_5)
 8003490:	2105      	movs	r1, #5
 8003492:	4893      	ldr	r0, [pc, #588]	@ (80036e0 <main+0x3570>)
 8003494:	f004 fe1c 	bl	80080d0 <Keypad_Get_Key>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d042      	beq.n	8003524 <main+0x33b4>
					&& (current_tick >= general_delay)) {
 800349e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80034a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d33e      	bcc.n	8003524 <main+0x33b4>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80034a6:	2300      	movs	r3, #0
 80034a8:	2200      	movs	r2, #0
 80034aa:	2101      	movs	r1, #1
 80034ac:	488d      	ldr	r0, [pc, #564]	@ (80036e4 <main+0x3574>)
 80034ae:	f004 fcd6 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 80034b2:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d827      	bhi.n	800350a <main+0x339a>
					time_date_buffer[input_index] = '5';
 80034ba:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80034be:	3368      	adds	r3, #104	@ 0x68
 80034c0:	443b      	add	r3, r7
 80034c2:	2235      	movs	r2, #53	@ 0x35
 80034c4:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 80034c8:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80034cc:	3301      	adds	r3, #1
 80034ce:	3368      	adds	r3, #104	@ 0x68
 80034d0:	443b      	add	r3, r7
 80034d2:	2200      	movs	r2, #0
 80034d4:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "5");
 80034d8:	4884      	ldr	r0, [pc, #528]	@ (80036ec <main+0x357c>)
 80034da:	f004 fd03 	bl	8007ee4 <Str_Len>
 80034de:	4603      	mov	r3, r0
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 80034e6:	9300      	str	r3, [sp, #0]
 80034e8:	4b80      	ldr	r3, [pc, #512]	@ (80036ec <main+0x357c>)
 80034ea:	2101      	movs	r1, #1
 80034ec:	487d      	ldr	r0, [pc, #500]	@ (80036e4 <main+0x3574>)
 80034ee:	f004 fc8c 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 80034f2:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80034f6:	3301      	adds	r3, #1
 80034f8:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 80034fc:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8003500:	461a      	mov	r2, r3
 8003502:	2101      	movs	r1, #1
 8003504:	4877      	ldr	r0, [pc, #476]	@ (80036e4 <main+0x3574>)
 8003506:	f004 fc44 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 800350a:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 800350e:	2301      	movs	r3, #1
 8003510:	2101      	movs	r1, #1
 8003512:	4874      	ldr	r0, [pc, #464]	@ (80036e4 <main+0x3574>)
 8003514:	f004 fca3 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8003518:	f004 fe4a 	bl	80081b0 <HAL_GetTick>
 800351c:	4603      	mov	r3, r0
 800351e:	33fa      	adds	r3, #250	@ 0xfa
 8003520:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003522:	e134      	b.n	800378e <main+0x361e>

			}

			//6 is entered
			else if (Keypad_Get_Key(&kp, kp_button_6)
 8003524:	2106      	movs	r1, #6
 8003526:	486e      	ldr	r0, [pc, #440]	@ (80036e0 <main+0x3570>)
 8003528:	f004 fdd2 	bl	80080d0 <Keypad_Get_Key>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d042      	beq.n	80035b8 <main+0x3448>
					&& (current_tick >= general_delay)) {
 8003532:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003534:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003536:	429a      	cmp	r2, r3
 8003538:	d33e      	bcc.n	80035b8 <main+0x3448>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 800353a:	2300      	movs	r3, #0
 800353c:	2200      	movs	r2, #0
 800353e:	2101      	movs	r1, #1
 8003540:	4868      	ldr	r0, [pc, #416]	@ (80036e4 <main+0x3574>)
 8003542:	f004 fc8c 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8003546:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800354a:	2b01      	cmp	r3, #1
 800354c:	d827      	bhi.n	800359e <main+0x342e>
					time_date_buffer[input_index] = '6';
 800354e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8003552:	3368      	adds	r3, #104	@ 0x68
 8003554:	443b      	add	r3, r7
 8003556:	2236      	movs	r2, #54	@ 0x36
 8003558:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 800355c:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8003560:	3301      	adds	r3, #1
 8003562:	3368      	adds	r3, #104	@ 0x68
 8003564:	443b      	add	r3, r7
 8003566:	2200      	movs	r2, #0
 8003568:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "6");
 800356c:	4860      	ldr	r0, [pc, #384]	@ (80036f0 <main+0x3580>)
 800356e:	f004 fcb9 	bl	8007ee4 <Str_Len>
 8003572:	4603      	mov	r3, r0
 8003574:	b2db      	uxtb	r3, r3
 8003576:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 800357a:	9300      	str	r3, [sp, #0]
 800357c:	4b5c      	ldr	r3, [pc, #368]	@ (80036f0 <main+0x3580>)
 800357e:	2101      	movs	r1, #1
 8003580:	4858      	ldr	r0, [pc, #352]	@ (80036e4 <main+0x3574>)
 8003582:	f004 fc42 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 8003586:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800358a:	3301      	adds	r3, #1
 800358c:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8003590:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8003594:	461a      	mov	r2, r3
 8003596:	2101      	movs	r1, #1
 8003598:	4852      	ldr	r0, [pc, #328]	@ (80036e4 <main+0x3574>)
 800359a:	f004 fbfa 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 800359e:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 80035a2:	2301      	movs	r3, #1
 80035a4:	2101      	movs	r1, #1
 80035a6:	484f      	ldr	r0, [pc, #316]	@ (80036e4 <main+0x3574>)
 80035a8:	f004 fc59 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 80035ac:	f004 fe00 	bl	80081b0 <HAL_GetTick>
 80035b0:	4603      	mov	r3, r0
 80035b2:	33fa      	adds	r3, #250	@ 0xfa
 80035b4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80035b6:	e0ea      	b.n	800378e <main+0x361e>

			}

			//7 is entered
			else if (Keypad_Get_Key(&kp, kp_button_7)
 80035b8:	2108      	movs	r1, #8
 80035ba:	4849      	ldr	r0, [pc, #292]	@ (80036e0 <main+0x3570>)
 80035bc:	f004 fd88 	bl	80080d0 <Keypad_Get_Key>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d042      	beq.n	800364c <main+0x34dc>
					&& (current_tick >= general_delay)) {
 80035c6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80035c8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d33e      	bcc.n	800364c <main+0x34dc>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80035ce:	2300      	movs	r3, #0
 80035d0:	2200      	movs	r2, #0
 80035d2:	2101      	movs	r1, #1
 80035d4:	4843      	ldr	r0, [pc, #268]	@ (80036e4 <main+0x3574>)
 80035d6:	f004 fc42 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 80035da:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d827      	bhi.n	8003632 <main+0x34c2>
					time_date_buffer[input_index] = '7';
 80035e2:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80035e6:	3368      	adds	r3, #104	@ 0x68
 80035e8:	443b      	add	r3, r7
 80035ea:	2237      	movs	r2, #55	@ 0x37
 80035ec:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 80035f0:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80035f4:	3301      	adds	r3, #1
 80035f6:	3368      	adds	r3, #104	@ 0x68
 80035f8:	443b      	add	r3, r7
 80035fa:	2200      	movs	r2, #0
 80035fc:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "7");
 8003600:	483c      	ldr	r0, [pc, #240]	@ (80036f4 <main+0x3584>)
 8003602:	f004 fc6f 	bl	8007ee4 <Str_Len>
 8003606:	4603      	mov	r3, r0
 8003608:	b2db      	uxtb	r3, r3
 800360a:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 800360e:	9300      	str	r3, [sp, #0]
 8003610:	4b38      	ldr	r3, [pc, #224]	@ (80036f4 <main+0x3584>)
 8003612:	2101      	movs	r1, #1
 8003614:	4833      	ldr	r0, [pc, #204]	@ (80036e4 <main+0x3574>)
 8003616:	f004 fbf8 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 800361a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800361e:	3301      	adds	r3, #1
 8003620:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8003624:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8003628:	461a      	mov	r2, r3
 800362a:	2101      	movs	r1, #1
 800362c:	482d      	ldr	r0, [pc, #180]	@ (80036e4 <main+0x3574>)
 800362e:	f004 fbb0 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8003632:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8003636:	2301      	movs	r3, #1
 8003638:	2101      	movs	r1, #1
 800363a:	482a      	ldr	r0, [pc, #168]	@ (80036e4 <main+0x3574>)
 800363c:	f004 fc0f 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8003640:	f004 fdb6 	bl	80081b0 <HAL_GetTick>
 8003644:	4603      	mov	r3, r0
 8003646:	33fa      	adds	r3, #250	@ 0xfa
 8003648:	65bb      	str	r3, [r7, #88]	@ 0x58
 800364a:	e0a0      	b.n	800378e <main+0x361e>

			}

			//8 is entered
			else if (Keypad_Get_Key(&kp, kp_button_8)
 800364c:	2109      	movs	r1, #9
 800364e:	4824      	ldr	r0, [pc, #144]	@ (80036e0 <main+0x3570>)
 8003650:	f004 fd3e 	bl	80080d0 <Keypad_Get_Key>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d050      	beq.n	80036fc <main+0x358c>
					&& (current_tick >= general_delay)) {
 800365a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800365c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800365e:	429a      	cmp	r2, r3
 8003660:	d34c      	bcc.n	80036fc <main+0x358c>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8003662:	2300      	movs	r3, #0
 8003664:	2200      	movs	r2, #0
 8003666:	2101      	movs	r1, #1
 8003668:	481e      	ldr	r0, [pc, #120]	@ (80036e4 <main+0x3574>)
 800366a:	f004 fbf8 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 800366e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8003672:	2b01      	cmp	r3, #1
 8003674:	d827      	bhi.n	80036c6 <main+0x3556>
					time_date_buffer[input_index] = '8';
 8003676:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800367a:	3368      	adds	r3, #104	@ 0x68
 800367c:	443b      	add	r3, r7
 800367e:	2238      	movs	r2, #56	@ 0x38
 8003680:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8003684:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8003688:	3301      	adds	r3, #1
 800368a:	3368      	adds	r3, #104	@ 0x68
 800368c:	443b      	add	r3, r7
 800368e:	2200      	movs	r2, #0
 8003690:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "8");
 8003694:	4818      	ldr	r0, [pc, #96]	@ (80036f8 <main+0x3588>)
 8003696:	f004 fc25 	bl	8007ee4 <Str_Len>
 800369a:	4603      	mov	r3, r0
 800369c:	b2db      	uxtb	r3, r3
 800369e:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 80036a2:	9300      	str	r3, [sp, #0]
 80036a4:	4b14      	ldr	r3, [pc, #80]	@ (80036f8 <main+0x3588>)
 80036a6:	2101      	movs	r1, #1
 80036a8:	480e      	ldr	r0, [pc, #56]	@ (80036e4 <main+0x3574>)
 80036aa:	f004 fbae 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 80036ae:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80036b2:	3301      	adds	r3, #1
 80036b4:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 80036b8:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80036bc:	461a      	mov	r2, r3
 80036be:	2101      	movs	r1, #1
 80036c0:	4808      	ldr	r0, [pc, #32]	@ (80036e4 <main+0x3574>)
 80036c2:	f004 fb66 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 80036c6:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 80036ca:	2301      	movs	r3, #1
 80036cc:	2101      	movs	r1, #1
 80036ce:	4805      	ldr	r0, [pc, #20]	@ (80036e4 <main+0x3574>)
 80036d0:	f004 fbc5 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 80036d4:	f004 fd6c 	bl	80081b0 <HAL_GetTick>
 80036d8:	4603      	mov	r3, r0
 80036da:	33fa      	adds	r3, #250	@ 0xfa
 80036dc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80036de:	e056      	b.n	800378e <main+0x361e>
 80036e0:	20000000 	.word	0x20000000
 80036e4:	2000001c 	.word	0x2000001c
 80036e8:	0800beac 	.word	0x0800beac
 80036ec:	0800beb0 	.word	0x0800beb0
 80036f0:	0800beb4 	.word	0x0800beb4
 80036f4:	0800beb8 	.word	0x0800beb8
 80036f8:	0800bebc 	.word	0x0800bebc

			}

			//9 is entered
			else if (Keypad_Get_Key(&kp, kp_button_9)
 80036fc:	210a      	movs	r1, #10
 80036fe:	48a6      	ldr	r0, [pc, #664]	@ (8003998 <main+0x3828>)
 8003700:	f004 fce6 	bl	80080d0 <Keypad_Get_Key>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d041      	beq.n	800378e <main+0x361e>
					&& (current_tick >= general_delay)) {
 800370a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800370c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800370e:	429a      	cmp	r2, r3
 8003710:	d33d      	bcc.n	800378e <main+0x361e>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8003712:	2300      	movs	r3, #0
 8003714:	2200      	movs	r2, #0
 8003716:	2101      	movs	r1, #1
 8003718:	48a0      	ldr	r0, [pc, #640]	@ (800399c <main+0x382c>)
 800371a:	f004 fba0 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 800371e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8003722:	2b01      	cmp	r3, #1
 8003724:	d827      	bhi.n	8003776 <main+0x3606>
					time_date_buffer[input_index] = '9';
 8003726:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800372a:	3368      	adds	r3, #104	@ 0x68
 800372c:	443b      	add	r3, r7
 800372e:	2239      	movs	r2, #57	@ 0x39
 8003730:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8003734:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8003738:	3301      	adds	r3, #1
 800373a:	3368      	adds	r3, #104	@ 0x68
 800373c:	443b      	add	r3, r7
 800373e:	2200      	movs	r2, #0
 8003740:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "9");
 8003744:	4896      	ldr	r0, [pc, #600]	@ (80039a0 <main+0x3830>)
 8003746:	f004 fbcd 	bl	8007ee4 <Str_Len>
 800374a:	4603      	mov	r3, r0
 800374c:	b2db      	uxtb	r3, r3
 800374e:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8003752:	9300      	str	r3, [sp, #0]
 8003754:	4b92      	ldr	r3, [pc, #584]	@ (80039a0 <main+0x3830>)
 8003756:	2101      	movs	r1, #1
 8003758:	4890      	ldr	r0, [pc, #576]	@ (800399c <main+0x382c>)
 800375a:	f004 fb56 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 800375e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8003762:	3301      	adds	r3, #1
 8003764:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8003768:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800376c:	461a      	mov	r2, r3
 800376e:	2101      	movs	r1, #1
 8003770:	488a      	ldr	r0, [pc, #552]	@ (800399c <main+0x382c>)
 8003772:	f004 fb0e 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8003776:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 800377a:	2301      	movs	r3, #1
 800377c:	2101      	movs	r1, #1
 800377e:	4887      	ldr	r0, [pc, #540]	@ (800399c <main+0x382c>)
 8003780:	f004 fb6d 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8003784:	f004 fd14 	bl	80081b0 <HAL_GetTick>
 8003788:	4603      	mov	r3, r0
 800378a:	33fa      	adds	r3, #250	@ 0xfa
 800378c:	65bb      	str	r3, [r7, #88]	@ 0x58

			}

			//when yes is entered -> check for day validation (state 36)
			if (Keypad_Get_Key(&kp, kp_button_yes)
 800378e:	210f      	movs	r1, #15
 8003790:	4881      	ldr	r0, [pc, #516]	@ (8003998 <main+0x3828>)
 8003792:	f004 fc9d 	bl	80080d0 <Keypad_Get_Key>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d021      	beq.n	80037e0 <main+0x3670>
					&& (current_tick >= general_delay)) {
 800379c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800379e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d31d      	bcc.n	80037e0 <main+0x3670>

				Alcd_Clear(&lcd);
 80037a4:	487d      	ldr	r0, [pc, #500]	@ (800399c <main+0x382c>)
 80037a6:	f004 fb49 	bl	8007e3c <Alcd_Clear>

				snprintf(timeString, sizeof(timeString), "%02d", buffer);
 80037aa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80037ae:	f107 001c 	add.w	r0, r7, #28
 80037b2:	4a7c      	ldr	r2, [pc, #496]	@ (80039a4 <main+0x3834>)
 80037b4:	2132      	movs	r1, #50	@ 0x32
 80037b6:	f007 fe15 	bl	800b3e4 <sniprintf>
				Alcd_PutAt_n(&lcd, 1, 0, timeString, strlen(timeString));
 80037ba:	f107 031c 	add.w	r3, r7, #28
 80037be:	4618      	mov	r0, r3
 80037c0:	f7fc fcce 	bl	8000160 <strlen>
 80037c4:	4603      	mov	r3, r0
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	f107 021c 	add.w	r2, r7, #28
 80037cc:	9300      	str	r3, [sp, #0]
 80037ce:	4613      	mov	r3, r2
 80037d0:	2200      	movs	r2, #0
 80037d2:	2101      	movs	r1, #1
 80037d4:	4871      	ldr	r0, [pc, #452]	@ (800399c <main+0x382c>)
 80037d6:	f004 fb18 	bl	8007e0a <Alcd_PutAt_n>

				status = 36;
 80037da:	2324      	movs	r3, #36	@ 0x24
 80037dc:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

			}

			//
			general_delay = HAL_GetTick() + 250;
 80037e0:	f004 fce6 	bl	80081b0 <HAL_GetTick>
 80037e4:	4603      	mov	r3, r0
 80037e6:	33fa      	adds	r3, #250	@ 0xfa
 80037e8:	65bb      	str	r3, [r7, #88]	@ 0x58
		while ((status == 26) && (current_tick >= general_delay)) {
 80037ea:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 80037ee:	2b1a      	cmp	r3, #26
 80037f0:	d17e      	bne.n	80038f0 <main+0x3780>
 80037f2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80037f4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80037f6:	429a      	cmp	r2, r3
 80037f8:	f4bf ac7f 	bcs.w	80030fa <main+0x2f8a>
		}

//date validation phase
		while ((status == 36) && (current_tick >= general_delay)) {
 80037fc:	e078      	b.n	80038f0 <main+0x3780>

			//get the current tick number
			current_tick = HAL_GetTick();
 80037fe:	f004 fcd7 	bl	80081b0 <HAL_GetTick>
 8003802:	6638      	str	r0, [r7, #96]	@ 0x60

			Alcd_Clear(&lcd);
 8003804:	4865      	ldr	r0, [pc, #404]	@ (800399c <main+0x382c>)
 8003806:	f004 fb19 	bl	8007e3c <Alcd_Clear>

			snprintf(timeString, sizeof(timeString), "%02d", status);
 800380a:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 800380e:	f107 001c 	add.w	r0, r7, #28
 8003812:	4a64      	ldr	r2, [pc, #400]	@ (80039a4 <main+0x3834>)
 8003814:	2132      	movs	r1, #50	@ 0x32
 8003816:	f007 fde5 	bl	800b3e4 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 800381a:	f107 031c 	add.w	r3, r7, #28
 800381e:	4618      	mov	r0, r3
 8003820:	f7fc fc9e 	bl	8000160 <strlen>
 8003824:	4603      	mov	r3, r0
 8003826:	b2db      	uxtb	r3, r3
 8003828:	f107 021c 	add.w	r2, r7, #28
 800382c:	9300      	str	r3, [sp, #0]
 800382e:	4613      	mov	r3, r2
 8003830:	220e      	movs	r2, #14
 8003832:	2100      	movs	r1, #0
 8003834:	4859      	ldr	r0, [pc, #356]	@ (800399c <main+0x382c>)
 8003836:	f004 fae8 	bl	8007e0a <Alcd_PutAt_n>

			buffer = atoi(time_date_buffer);
 800383a:	1d3b      	adds	r3, r7, #4
 800383c:	4618      	mov	r0, r3
 800383e:	f007 fd48 	bl	800b2d2 <atoi>
 8003842:	4603      	mov	r3, r0
 8003844:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56

			//check if day is within the range 1 to 31
			if (buffer > 0 && buffer < 32) {
 8003848:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800384c:	2b00      	cmp	r3, #0
 800384e:	d01c      	beq.n	800388a <main+0x371a>
 8003850:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8003854:	2b1f      	cmp	r3, #31
 8003856:	d818      	bhi.n	800388a <main+0x371a>

				//move to the month state
				status = 37;
 8003858:	2325      	movs	r3, #37	@ 0x25
 800385a:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

				//set the day value
				CLK.date = buffer;
 800385e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8003862:	b2da      	uxtb	r2, r3
 8003864:	4b50      	ldr	r3, [pc, #320]	@ (80039a8 <main+0x3838>)
 8003866:	731a      	strb	r2, [r3, #12]

				input_index = 0;
 8003868:	2300      	movs	r3, #0
 800386a:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 800386e:	2300      	movs	r3, #0
 8003870:	2200      	movs	r2, #0
 8003872:	2101      	movs	r1, #1
 8003874:	4849      	ldr	r0, [pc, #292]	@ (800399c <main+0x382c>)
 8003876:	f004 faf2 	bl	8007e5e <Alcd_Display_Control>
				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 800387a:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 800387e:	2301      	movs	r3, #1
 8003880:	2101      	movs	r1, #1
 8003882:	4846      	ldr	r0, [pc, #280]	@ (800399c <main+0x382c>)
 8003884:	f004 faeb 	bl	8007e5e <Alcd_Display_Control>
 8003888:	e027      	b.n	80038da <main+0x376a>
			} else {
				Alcd_PutAt(&lcd, 0, 0, "invalid");
 800388a:	4848      	ldr	r0, [pc, #288]	@ (80039ac <main+0x383c>)
 800388c:	f004 fb2a 	bl	8007ee4 <Str_Len>
 8003890:	4603      	mov	r3, r0
 8003892:	b2db      	uxtb	r3, r3
 8003894:	9300      	str	r3, [sp, #0]
 8003896:	4b45      	ldr	r3, [pc, #276]	@ (80039ac <main+0x383c>)
 8003898:	2200      	movs	r2, #0
 800389a:	2100      	movs	r1, #0
 800389c:	483f      	ldr	r0, [pc, #252]	@ (800399c <main+0x382c>)
 800389e:	f004 fab4 	bl	8007e0a <Alcd_PutAt_n>
				delay_flag = 1;
 80038a2:	2301      	movs	r3, #1
 80038a4:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

				input_index = 0;
 80038a8:	2300      	movs	r3, #0
 80038aa:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80038ae:	2300      	movs	r3, #0
 80038b0:	2200      	movs	r2, #0
 80038b2:	2101      	movs	r1, #1
 80038b4:	4839      	ldr	r0, [pc, #228]	@ (800399c <main+0x382c>)
 80038b6:	f004 fad2 	bl	8007e5e <Alcd_Display_Control>
				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 80038ba:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 80038be:	2301      	movs	r3, #1
 80038c0:	2101      	movs	r1, #1
 80038c2:	4836      	ldr	r0, [pc, #216]	@ (800399c <main+0x382c>)
 80038c4:	f004 facb 	bl	8007e5e <Alcd_Display_Control>
				//return to entering day
				status = 26;
 80038c8:	231a      	movs	r3, #26
 80038ca:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

				general_delay = HAL_GetTick() + 1000;
 80038ce:	f004 fc6f 	bl	80081b0 <HAL_GetTick>
 80038d2:	4603      	mov	r3, r0
 80038d4:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80038d8:	65bb      	str	r3, [r7, #88]	@ 0x58
			}

			//create a delay
			if ((delay_flag == 1) && (current_tick >= general_delay)) {
 80038da:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d106      	bne.n	80038f0 <main+0x3780>
 80038e2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80038e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d302      	bcc.n	80038f0 <main+0x3780>

				delay_flag = 0;
 80038ea:	2300      	movs	r3, #0
 80038ec:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
		while ((status == 36) && (current_tick >= general_delay)) {
 80038f0:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 80038f4:	2b24      	cmp	r3, #36	@ 0x24
 80038f6:	f040 8388 	bne.w	800400a <main+0x3e9a>
 80038fa:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80038fc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80038fe:	429a      	cmp	r2, r3
 8003900:	f4bf af7d 	bcs.w	80037fe <main+0x368e>
			}

		}

		//month edit menu -> enter month(state 37)
		while ((status == 37) && (current_tick >= general_delay)) {
 8003904:	e381      	b.n	800400a <main+0x3e9a>

			//get the current tick number
			current_tick = HAL_GetTick();
 8003906:	f004 fc53 	bl	80081b0 <HAL_GetTick>
 800390a:	6638      	str	r0, [r7, #96]	@ 0x60

			//Alcd_Clear(&lcd);
			Alcd_PutAt(&lcd, 0, 0, "Enter month");
 800390c:	4828      	ldr	r0, [pc, #160]	@ (80039b0 <main+0x3840>)
 800390e:	f004 fae9 	bl	8007ee4 <Str_Len>
 8003912:	4603      	mov	r3, r0
 8003914:	b2db      	uxtb	r3, r3
 8003916:	9300      	str	r3, [sp, #0]
 8003918:	4b25      	ldr	r3, [pc, #148]	@ (80039b0 <main+0x3840>)
 800391a:	2200      	movs	r2, #0
 800391c:	2100      	movs	r1, #0
 800391e:	481f      	ldr	r0, [pc, #124]	@ (800399c <main+0x382c>)
 8003920:	f004 fa73 	bl	8007e0a <Alcd_PutAt_n>

			snprintf(timeString, sizeof(timeString), "%02d", status);
 8003924:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8003928:	f107 001c 	add.w	r0, r7, #28
 800392c:	4a1d      	ldr	r2, [pc, #116]	@ (80039a4 <main+0x3834>)
 800392e:	2132      	movs	r1, #50	@ 0x32
 8003930:	f007 fd58 	bl	800b3e4 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 8003934:	f107 031c 	add.w	r3, r7, #28
 8003938:	4618      	mov	r0, r3
 800393a:	f7fc fc11 	bl	8000160 <strlen>
 800393e:	4603      	mov	r3, r0
 8003940:	b2db      	uxtb	r3, r3
 8003942:	f107 021c 	add.w	r2, r7, #28
 8003946:	9300      	str	r3, [sp, #0]
 8003948:	4613      	mov	r3, r2
 800394a:	220e      	movs	r2, #14
 800394c:	2100      	movs	r1, #0
 800394e:	4813      	ldr	r0, [pc, #76]	@ (800399c <main+0x382c>)
 8003950:	f004 fa5b 	bl	8007e0a <Alcd_PutAt_n>

			Alcd_CursorAt(&lcd, 1, input_index);
 8003954:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8003958:	461a      	mov	r2, r3
 800395a:	2101      	movs	r1, #1
 800395c:	480f      	ldr	r0, [pc, #60]	@ (800399c <main+0x382c>)
 800395e:	f004 fa18 	bl	8007d92 <Alcd_CursorAt>
			Alcd_Display_Control(&lcd, 1, 1, 1);
 8003962:	2301      	movs	r3, #1
 8003964:	2201      	movs	r2, #1
 8003966:	2101      	movs	r1, #1
 8003968:	480c      	ldr	r0, [pc, #48]	@ (800399c <main+0x382c>)
 800396a:	f004 fa78 	bl	8007e5e <Alcd_Display_Control>

			//check if any button is pressed
			//check for any keypad input
			Keypad_Refresh(&kp);
 800396e:	480a      	ldr	r0, [pc, #40]	@ (8003998 <main+0x3828>)
 8003970:	f004 fb12 	bl	8007f98 <Keypad_Refresh>

			//if back is entered
			if (Keypad_Get_Key(&kp, kp_button_no_back)
 8003974:	210e      	movs	r1, #14
 8003976:	4808      	ldr	r0, [pc, #32]	@ (8003998 <main+0x3828>)
 8003978:	f004 fbaa 	bl	80080d0 <Keypad_Get_Key>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d018      	beq.n	80039b4 <main+0x3844>
					&& (current_tick >= general_delay)) {
 8003982:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003984:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003986:	429a      	cmp	r2, r3
 8003988:	d314      	bcc.n	80039b4 <main+0x3844>

				input_index = 0;
 800398a:	2300      	movs	r3, #0
 800398c:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55

				//back to previous menu
				status = 26;
 8003990:	231a      	movs	r3, #26
 8003992:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 8003996:	e30a      	b.n	8003fae <main+0x3e3e>
 8003998:	20000000 	.word	0x20000000
 800399c:	2000001c 	.word	0x2000001c
 80039a0:	0800bec0 	.word	0x0800bec0
 80039a4:	0800bdac 	.word	0x0800bdac
 80039a8:	20000150 	.word	0x20000150
 80039ac:	0800bec4 	.word	0x0800bec4
 80039b0:	0800bf04 	.word	0x0800bf04

			}

			//0 is entered
			else if (Keypad_Get_Key(&kp, kp_button_0)
 80039b4:	210d      	movs	r1, #13
 80039b6:	48b8      	ldr	r0, [pc, #736]	@ (8003c98 <main+0x3b28>)
 80039b8:	f004 fb8a 	bl	80080d0 <Keypad_Get_Key>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d042      	beq.n	8003a48 <main+0x38d8>
					&& (current_tick >= general_delay)) {
 80039c2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80039c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d33e      	bcc.n	8003a48 <main+0x38d8>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80039ca:	2300      	movs	r3, #0
 80039cc:	2200      	movs	r2, #0
 80039ce:	2101      	movs	r1, #1
 80039d0:	48b2      	ldr	r0, [pc, #712]	@ (8003c9c <main+0x3b2c>)
 80039d2:	f004 fa44 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 80039d6:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d827      	bhi.n	8003a2e <main+0x38be>
					time_date_buffer[input_index] = '0';
 80039de:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80039e2:	3368      	adds	r3, #104	@ 0x68
 80039e4:	443b      	add	r3, r7
 80039e6:	2230      	movs	r2, #48	@ 0x30
 80039e8:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 80039ec:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80039f0:	3301      	adds	r3, #1
 80039f2:	3368      	adds	r3, #104	@ 0x68
 80039f4:	443b      	add	r3, r7
 80039f6:	2200      	movs	r2, #0
 80039f8:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "0");
 80039fc:	48a8      	ldr	r0, [pc, #672]	@ (8003ca0 <main+0x3b30>)
 80039fe:	f004 fa71 	bl	8007ee4 <Str_Len>
 8003a02:	4603      	mov	r3, r0
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8003a0a:	9300      	str	r3, [sp, #0]
 8003a0c:	4ba4      	ldr	r3, [pc, #656]	@ (8003ca0 <main+0x3b30>)
 8003a0e:	2101      	movs	r1, #1
 8003a10:	48a2      	ldr	r0, [pc, #648]	@ (8003c9c <main+0x3b2c>)
 8003a12:	f004 f9fa 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 8003a16:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8003a20:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8003a24:	461a      	mov	r2, r3
 8003a26:	2101      	movs	r1, #1
 8003a28:	489c      	ldr	r0, [pc, #624]	@ (8003c9c <main+0x3b2c>)
 8003a2a:	f004 f9b2 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8003a2e:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8003a32:	2301      	movs	r3, #1
 8003a34:	2101      	movs	r1, #1
 8003a36:	4899      	ldr	r0, [pc, #612]	@ (8003c9c <main+0x3b2c>)
 8003a38:	f004 fa11 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8003a3c:	f004 fbb8 	bl	80081b0 <HAL_GetTick>
 8003a40:	4603      	mov	r3, r0
 8003a42:	33fa      	adds	r3, #250	@ 0xfa
 8003a44:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003a46:	e2b2      	b.n	8003fae <main+0x3e3e>

			}
			//1 is entered
			else if (Keypad_Get_Key(&kp, kp_button_1)
 8003a48:	2100      	movs	r1, #0
 8003a4a:	4893      	ldr	r0, [pc, #588]	@ (8003c98 <main+0x3b28>)
 8003a4c:	f004 fb40 	bl	80080d0 <Keypad_Get_Key>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d042      	beq.n	8003adc <main+0x396c>
					&& (current_tick >= general_delay)) {
 8003a56:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003a58:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d33e      	bcc.n	8003adc <main+0x396c>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8003a5e:	2300      	movs	r3, #0
 8003a60:	2200      	movs	r2, #0
 8003a62:	2101      	movs	r1, #1
 8003a64:	488d      	ldr	r0, [pc, #564]	@ (8003c9c <main+0x3b2c>)
 8003a66:	f004 f9fa 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8003a6a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d827      	bhi.n	8003ac2 <main+0x3952>
					time_date_buffer[input_index] = '1';
 8003a72:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8003a76:	3368      	adds	r3, #104	@ 0x68
 8003a78:	443b      	add	r3, r7
 8003a7a:	2231      	movs	r2, #49	@ 0x31
 8003a7c:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8003a80:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8003a84:	3301      	adds	r3, #1
 8003a86:	3368      	adds	r3, #104	@ 0x68
 8003a88:	443b      	add	r3, r7
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "1");
 8003a90:	4884      	ldr	r0, [pc, #528]	@ (8003ca4 <main+0x3b34>)
 8003a92:	f004 fa27 	bl	8007ee4 <Str_Len>
 8003a96:	4603      	mov	r3, r0
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8003a9e:	9300      	str	r3, [sp, #0]
 8003aa0:	4b80      	ldr	r3, [pc, #512]	@ (8003ca4 <main+0x3b34>)
 8003aa2:	2101      	movs	r1, #1
 8003aa4:	487d      	ldr	r0, [pc, #500]	@ (8003c9c <main+0x3b2c>)
 8003aa6:	f004 f9b0 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 8003aaa:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8003aae:	3301      	adds	r3, #1
 8003ab0:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8003ab4:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8003ab8:	461a      	mov	r2, r3
 8003aba:	2101      	movs	r1, #1
 8003abc:	4877      	ldr	r0, [pc, #476]	@ (8003c9c <main+0x3b2c>)
 8003abe:	f004 f968 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8003ac2:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	2101      	movs	r1, #1
 8003aca:	4874      	ldr	r0, [pc, #464]	@ (8003c9c <main+0x3b2c>)
 8003acc:	f004 f9c7 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8003ad0:	f004 fb6e 	bl	80081b0 <HAL_GetTick>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	33fa      	adds	r3, #250	@ 0xfa
 8003ad8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003ada:	e268      	b.n	8003fae <main+0x3e3e>

			}
			//2 is entered
			else if (Keypad_Get_Key(&kp, kp_button_2)
 8003adc:	2101      	movs	r1, #1
 8003ade:	486e      	ldr	r0, [pc, #440]	@ (8003c98 <main+0x3b28>)
 8003ae0:	f004 faf6 	bl	80080d0 <Keypad_Get_Key>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d042      	beq.n	8003b70 <main+0x3a00>
					&& (current_tick >= general_delay)) {
 8003aea:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003aec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d33e      	bcc.n	8003b70 <main+0x3a00>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8003af2:	2300      	movs	r3, #0
 8003af4:	2200      	movs	r2, #0
 8003af6:	2101      	movs	r1, #1
 8003af8:	4868      	ldr	r0, [pc, #416]	@ (8003c9c <main+0x3b2c>)
 8003afa:	f004 f9b0 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8003afe:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d827      	bhi.n	8003b56 <main+0x39e6>
					time_date_buffer[input_index] = '2';
 8003b06:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8003b0a:	3368      	adds	r3, #104	@ 0x68
 8003b0c:	443b      	add	r3, r7
 8003b0e:	2232      	movs	r2, #50	@ 0x32
 8003b10:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8003b14:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8003b18:	3301      	adds	r3, #1
 8003b1a:	3368      	adds	r3, #104	@ 0x68
 8003b1c:	443b      	add	r3, r7
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "2");
 8003b24:	4860      	ldr	r0, [pc, #384]	@ (8003ca8 <main+0x3b38>)
 8003b26:	f004 f9dd 	bl	8007ee4 <Str_Len>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8003b32:	9300      	str	r3, [sp, #0]
 8003b34:	4b5c      	ldr	r3, [pc, #368]	@ (8003ca8 <main+0x3b38>)
 8003b36:	2101      	movs	r1, #1
 8003b38:	4858      	ldr	r0, [pc, #352]	@ (8003c9c <main+0x3b2c>)
 8003b3a:	f004 f966 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 8003b3e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8003b42:	3301      	adds	r3, #1
 8003b44:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8003b48:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	2101      	movs	r1, #1
 8003b50:	4852      	ldr	r0, [pc, #328]	@ (8003c9c <main+0x3b2c>)
 8003b52:	f004 f91e 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8003b56:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	2101      	movs	r1, #1
 8003b5e:	484f      	ldr	r0, [pc, #316]	@ (8003c9c <main+0x3b2c>)
 8003b60:	f004 f97d 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8003b64:	f004 fb24 	bl	80081b0 <HAL_GetTick>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	33fa      	adds	r3, #250	@ 0xfa
 8003b6c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003b6e:	e21e      	b.n	8003fae <main+0x3e3e>

			}
			//3 is entered
			else if (Keypad_Get_Key(&kp, kp_button_3)
 8003b70:	2102      	movs	r1, #2
 8003b72:	4849      	ldr	r0, [pc, #292]	@ (8003c98 <main+0x3b28>)
 8003b74:	f004 faac 	bl	80080d0 <Keypad_Get_Key>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d042      	beq.n	8003c04 <main+0x3a94>
					&& (current_tick >= general_delay)) {
 8003b7e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003b80:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d33e      	bcc.n	8003c04 <main+0x3a94>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8003b86:	2300      	movs	r3, #0
 8003b88:	2200      	movs	r2, #0
 8003b8a:	2101      	movs	r1, #1
 8003b8c:	4843      	ldr	r0, [pc, #268]	@ (8003c9c <main+0x3b2c>)
 8003b8e:	f004 f966 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8003b92:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d827      	bhi.n	8003bea <main+0x3a7a>
					time_date_buffer[input_index] = '3';
 8003b9a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8003b9e:	3368      	adds	r3, #104	@ 0x68
 8003ba0:	443b      	add	r3, r7
 8003ba2:	2233      	movs	r2, #51	@ 0x33
 8003ba4:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8003ba8:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8003bac:	3301      	adds	r3, #1
 8003bae:	3368      	adds	r3, #104	@ 0x68
 8003bb0:	443b      	add	r3, r7
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "3");
 8003bb8:	483c      	ldr	r0, [pc, #240]	@ (8003cac <main+0x3b3c>)
 8003bba:	f004 f993 	bl	8007ee4 <Str_Len>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8003bc6:	9300      	str	r3, [sp, #0]
 8003bc8:	4b38      	ldr	r3, [pc, #224]	@ (8003cac <main+0x3b3c>)
 8003bca:	2101      	movs	r1, #1
 8003bcc:	4833      	ldr	r0, [pc, #204]	@ (8003c9c <main+0x3b2c>)
 8003bce:	f004 f91c 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 8003bd2:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8003bdc:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8003be0:	461a      	mov	r2, r3
 8003be2:	2101      	movs	r1, #1
 8003be4:	482d      	ldr	r0, [pc, #180]	@ (8003c9c <main+0x3b2c>)
 8003be6:	f004 f8d4 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8003bea:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8003bee:	2301      	movs	r3, #1
 8003bf0:	2101      	movs	r1, #1
 8003bf2:	482a      	ldr	r0, [pc, #168]	@ (8003c9c <main+0x3b2c>)
 8003bf4:	f004 f933 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8003bf8:	f004 fada 	bl	80081b0 <HAL_GetTick>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	33fa      	adds	r3, #250	@ 0xfa
 8003c00:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003c02:	e1d4      	b.n	8003fae <main+0x3e3e>

			}

			//4 is entered
			else if (Keypad_Get_Key(&kp, kp_button_4)
 8003c04:	2104      	movs	r1, #4
 8003c06:	4824      	ldr	r0, [pc, #144]	@ (8003c98 <main+0x3b28>)
 8003c08:	f004 fa62 	bl	80080d0 <Keypad_Get_Key>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d050      	beq.n	8003cb4 <main+0x3b44>
					&& (current_tick >= general_delay)) {
 8003c12:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003c14:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d34c      	bcc.n	8003cb4 <main+0x3b44>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	2101      	movs	r1, #1
 8003c20:	481e      	ldr	r0, [pc, #120]	@ (8003c9c <main+0x3b2c>)
 8003c22:	f004 f91c 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8003c26:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d827      	bhi.n	8003c7e <main+0x3b0e>
					time_date_buffer[input_index] = '4';
 8003c2e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8003c32:	3368      	adds	r3, #104	@ 0x68
 8003c34:	443b      	add	r3, r7
 8003c36:	2234      	movs	r2, #52	@ 0x34
 8003c38:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8003c3c:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8003c40:	3301      	adds	r3, #1
 8003c42:	3368      	adds	r3, #104	@ 0x68
 8003c44:	443b      	add	r3, r7
 8003c46:	2200      	movs	r2, #0
 8003c48:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "4");
 8003c4c:	4818      	ldr	r0, [pc, #96]	@ (8003cb0 <main+0x3b40>)
 8003c4e:	f004 f949 	bl	8007ee4 <Str_Len>
 8003c52:	4603      	mov	r3, r0
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8003c5a:	9300      	str	r3, [sp, #0]
 8003c5c:	4b14      	ldr	r3, [pc, #80]	@ (8003cb0 <main+0x3b40>)
 8003c5e:	2101      	movs	r1, #1
 8003c60:	480e      	ldr	r0, [pc, #56]	@ (8003c9c <main+0x3b2c>)
 8003c62:	f004 f8d2 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 8003c66:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8003c70:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8003c74:	461a      	mov	r2, r3
 8003c76:	2101      	movs	r1, #1
 8003c78:	4808      	ldr	r0, [pc, #32]	@ (8003c9c <main+0x3b2c>)
 8003c7a:	f004 f88a 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8003c7e:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8003c82:	2301      	movs	r3, #1
 8003c84:	2101      	movs	r1, #1
 8003c86:	4805      	ldr	r0, [pc, #20]	@ (8003c9c <main+0x3b2c>)
 8003c88:	f004 f8e9 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8003c8c:	f004 fa90 	bl	80081b0 <HAL_GetTick>
 8003c90:	4603      	mov	r3, r0
 8003c92:	33fa      	adds	r3, #250	@ 0xfa
 8003c94:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003c96:	e18a      	b.n	8003fae <main+0x3e3e>
 8003c98:	20000000 	.word	0x20000000
 8003c9c:	2000001c 	.word	0x2000001c
 8003ca0:	0800be9c 	.word	0x0800be9c
 8003ca4:	0800bea0 	.word	0x0800bea0
 8003ca8:	0800bea4 	.word	0x0800bea4
 8003cac:	0800bea8 	.word	0x0800bea8
 8003cb0:	0800beac 	.word	0x0800beac

			}
			//5 is entered
			else if (Keypad_Get_Key(&kp, kp_button_5)
 8003cb4:	2105      	movs	r1, #5
 8003cb6:	4893      	ldr	r0, [pc, #588]	@ (8003f04 <main+0x3d94>)
 8003cb8:	f004 fa0a 	bl	80080d0 <Keypad_Get_Key>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d042      	beq.n	8003d48 <main+0x3bd8>
					&& (current_tick >= general_delay)) {
 8003cc2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003cc4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d33e      	bcc.n	8003d48 <main+0x3bd8>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8003cca:	2300      	movs	r3, #0
 8003ccc:	2200      	movs	r2, #0
 8003cce:	2101      	movs	r1, #1
 8003cd0:	488d      	ldr	r0, [pc, #564]	@ (8003f08 <main+0x3d98>)
 8003cd2:	f004 f8c4 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8003cd6:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d827      	bhi.n	8003d2e <main+0x3bbe>
					time_date_buffer[input_index] = '5';
 8003cde:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8003ce2:	3368      	adds	r3, #104	@ 0x68
 8003ce4:	443b      	add	r3, r7
 8003ce6:	2235      	movs	r2, #53	@ 0x35
 8003ce8:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8003cec:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	3368      	adds	r3, #104	@ 0x68
 8003cf4:	443b      	add	r3, r7
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "5");
 8003cfc:	4883      	ldr	r0, [pc, #524]	@ (8003f0c <main+0x3d9c>)
 8003cfe:	f004 f8f1 	bl	8007ee4 <Str_Len>
 8003d02:	4603      	mov	r3, r0
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8003d0a:	9300      	str	r3, [sp, #0]
 8003d0c:	4b7f      	ldr	r3, [pc, #508]	@ (8003f0c <main+0x3d9c>)
 8003d0e:	2101      	movs	r1, #1
 8003d10:	487d      	ldr	r0, [pc, #500]	@ (8003f08 <main+0x3d98>)
 8003d12:	f004 f87a 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 8003d16:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8003d20:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8003d24:	461a      	mov	r2, r3
 8003d26:	2101      	movs	r1, #1
 8003d28:	4877      	ldr	r0, [pc, #476]	@ (8003f08 <main+0x3d98>)
 8003d2a:	f004 f832 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8003d2e:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8003d32:	2301      	movs	r3, #1
 8003d34:	2101      	movs	r1, #1
 8003d36:	4874      	ldr	r0, [pc, #464]	@ (8003f08 <main+0x3d98>)
 8003d38:	f004 f891 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8003d3c:	f004 fa38 	bl	80081b0 <HAL_GetTick>
 8003d40:	4603      	mov	r3, r0
 8003d42:	33fa      	adds	r3, #250	@ 0xfa
 8003d44:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003d46:	e132      	b.n	8003fae <main+0x3e3e>

			}

			//6 is entered
			else if (Keypad_Get_Key(&kp, kp_button_6)
 8003d48:	2106      	movs	r1, #6
 8003d4a:	486e      	ldr	r0, [pc, #440]	@ (8003f04 <main+0x3d94>)
 8003d4c:	f004 f9c0 	bl	80080d0 <Keypad_Get_Key>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d042      	beq.n	8003ddc <main+0x3c6c>
					&& (current_tick >= general_delay)) {
 8003d56:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003d58:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d33e      	bcc.n	8003ddc <main+0x3c6c>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8003d5e:	2300      	movs	r3, #0
 8003d60:	2200      	movs	r2, #0
 8003d62:	2101      	movs	r1, #1
 8003d64:	4868      	ldr	r0, [pc, #416]	@ (8003f08 <main+0x3d98>)
 8003d66:	f004 f87a 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8003d6a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d827      	bhi.n	8003dc2 <main+0x3c52>
					time_date_buffer[input_index] = '6';
 8003d72:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8003d76:	3368      	adds	r3, #104	@ 0x68
 8003d78:	443b      	add	r3, r7
 8003d7a:	2236      	movs	r2, #54	@ 0x36
 8003d7c:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8003d80:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8003d84:	3301      	adds	r3, #1
 8003d86:	3368      	adds	r3, #104	@ 0x68
 8003d88:	443b      	add	r3, r7
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "6");
 8003d90:	485f      	ldr	r0, [pc, #380]	@ (8003f10 <main+0x3da0>)
 8003d92:	f004 f8a7 	bl	8007ee4 <Str_Len>
 8003d96:	4603      	mov	r3, r0
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8003d9e:	9300      	str	r3, [sp, #0]
 8003da0:	4b5b      	ldr	r3, [pc, #364]	@ (8003f10 <main+0x3da0>)
 8003da2:	2101      	movs	r1, #1
 8003da4:	4858      	ldr	r0, [pc, #352]	@ (8003f08 <main+0x3d98>)
 8003da6:	f004 f830 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 8003daa:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8003dae:	3301      	adds	r3, #1
 8003db0:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8003db4:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8003db8:	461a      	mov	r2, r3
 8003dba:	2101      	movs	r1, #1
 8003dbc:	4852      	ldr	r0, [pc, #328]	@ (8003f08 <main+0x3d98>)
 8003dbe:	f003 ffe8 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8003dc2:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	2101      	movs	r1, #1
 8003dca:	484f      	ldr	r0, [pc, #316]	@ (8003f08 <main+0x3d98>)
 8003dcc:	f004 f847 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8003dd0:	f004 f9ee 	bl	80081b0 <HAL_GetTick>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	33fa      	adds	r3, #250	@ 0xfa
 8003dd8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003dda:	e0e8      	b.n	8003fae <main+0x3e3e>

			}

			//7 is entered
			else if (Keypad_Get_Key(&kp, kp_button_7)
 8003ddc:	2108      	movs	r1, #8
 8003dde:	4849      	ldr	r0, [pc, #292]	@ (8003f04 <main+0x3d94>)
 8003de0:	f004 f976 	bl	80080d0 <Keypad_Get_Key>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d042      	beq.n	8003e70 <main+0x3d00>
					&& (current_tick >= general_delay)) {
 8003dea:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003dec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d33e      	bcc.n	8003e70 <main+0x3d00>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8003df2:	2300      	movs	r3, #0
 8003df4:	2200      	movs	r2, #0
 8003df6:	2101      	movs	r1, #1
 8003df8:	4843      	ldr	r0, [pc, #268]	@ (8003f08 <main+0x3d98>)
 8003dfa:	f004 f830 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8003dfe:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d827      	bhi.n	8003e56 <main+0x3ce6>
					time_date_buffer[input_index] = '7';
 8003e06:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8003e0a:	3368      	adds	r3, #104	@ 0x68
 8003e0c:	443b      	add	r3, r7
 8003e0e:	2237      	movs	r2, #55	@ 0x37
 8003e10:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8003e14:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8003e18:	3301      	adds	r3, #1
 8003e1a:	3368      	adds	r3, #104	@ 0x68
 8003e1c:	443b      	add	r3, r7
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "7");
 8003e24:	483b      	ldr	r0, [pc, #236]	@ (8003f14 <main+0x3da4>)
 8003e26:	f004 f85d 	bl	8007ee4 <Str_Len>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8003e32:	9300      	str	r3, [sp, #0]
 8003e34:	4b37      	ldr	r3, [pc, #220]	@ (8003f14 <main+0x3da4>)
 8003e36:	2101      	movs	r1, #1
 8003e38:	4833      	ldr	r0, [pc, #204]	@ (8003f08 <main+0x3d98>)
 8003e3a:	f003 ffe6 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 8003e3e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8003e42:	3301      	adds	r3, #1
 8003e44:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8003e48:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	2101      	movs	r1, #1
 8003e50:	482d      	ldr	r0, [pc, #180]	@ (8003f08 <main+0x3d98>)
 8003e52:	f003 ff9e 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8003e56:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	2101      	movs	r1, #1
 8003e5e:	482a      	ldr	r0, [pc, #168]	@ (8003f08 <main+0x3d98>)
 8003e60:	f003 fffd 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8003e64:	f004 f9a4 	bl	80081b0 <HAL_GetTick>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	33fa      	adds	r3, #250	@ 0xfa
 8003e6c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003e6e:	e09e      	b.n	8003fae <main+0x3e3e>

			}

			//8 is entered
			else if (Keypad_Get_Key(&kp, kp_button_8)
 8003e70:	2109      	movs	r1, #9
 8003e72:	4824      	ldr	r0, [pc, #144]	@ (8003f04 <main+0x3d94>)
 8003e74:	f004 f92c 	bl	80080d0 <Keypad_Get_Key>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d04e      	beq.n	8003f1c <main+0x3dac>
					&& (current_tick >= general_delay)) {
 8003e7e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003e80:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d34a      	bcc.n	8003f1c <main+0x3dac>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8003e86:	2300      	movs	r3, #0
 8003e88:	2200      	movs	r2, #0
 8003e8a:	2101      	movs	r1, #1
 8003e8c:	481e      	ldr	r0, [pc, #120]	@ (8003f08 <main+0x3d98>)
 8003e8e:	f003 ffe6 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8003e92:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d827      	bhi.n	8003eea <main+0x3d7a>
					time_date_buffer[input_index] = '8';
 8003e9a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8003e9e:	3368      	adds	r3, #104	@ 0x68
 8003ea0:	443b      	add	r3, r7
 8003ea2:	2238      	movs	r2, #56	@ 0x38
 8003ea4:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8003ea8:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8003eac:	3301      	adds	r3, #1
 8003eae:	3368      	adds	r3, #104	@ 0x68
 8003eb0:	443b      	add	r3, r7
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "8");
 8003eb8:	4817      	ldr	r0, [pc, #92]	@ (8003f18 <main+0x3da8>)
 8003eba:	f004 f813 	bl	8007ee4 <Str_Len>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8003ec6:	9300      	str	r3, [sp, #0]
 8003ec8:	4b13      	ldr	r3, [pc, #76]	@ (8003f18 <main+0x3da8>)
 8003eca:	2101      	movs	r1, #1
 8003ecc:	480e      	ldr	r0, [pc, #56]	@ (8003f08 <main+0x3d98>)
 8003ece:	f003 ff9c 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 8003ed2:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8003edc:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	2101      	movs	r1, #1
 8003ee4:	4808      	ldr	r0, [pc, #32]	@ (8003f08 <main+0x3d98>)
 8003ee6:	f003 ff54 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8003eea:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8003eee:	2301      	movs	r3, #1
 8003ef0:	2101      	movs	r1, #1
 8003ef2:	4805      	ldr	r0, [pc, #20]	@ (8003f08 <main+0x3d98>)
 8003ef4:	f003 ffb3 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8003ef8:	f004 f95a 	bl	80081b0 <HAL_GetTick>
 8003efc:	4603      	mov	r3, r0
 8003efe:	33fa      	adds	r3, #250	@ 0xfa
 8003f00:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003f02:	e054      	b.n	8003fae <main+0x3e3e>
 8003f04:	20000000 	.word	0x20000000
 8003f08:	2000001c 	.word	0x2000001c
 8003f0c:	0800beb0 	.word	0x0800beb0
 8003f10:	0800beb4 	.word	0x0800beb4
 8003f14:	0800beb8 	.word	0x0800beb8
 8003f18:	0800bebc 	.word	0x0800bebc

			}

			//9 is entered
			else if (Keypad_Get_Key(&kp, kp_button_9)
 8003f1c:	210a      	movs	r1, #10
 8003f1e:	48a6      	ldr	r0, [pc, #664]	@ (80041b8 <main+0x4048>)
 8003f20:	f004 f8d6 	bl	80080d0 <Keypad_Get_Key>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d041      	beq.n	8003fae <main+0x3e3e>
					&& (current_tick >= general_delay)) {
 8003f2a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003f2c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d33d      	bcc.n	8003fae <main+0x3e3e>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8003f32:	2300      	movs	r3, #0
 8003f34:	2200      	movs	r2, #0
 8003f36:	2101      	movs	r1, #1
 8003f38:	48a0      	ldr	r0, [pc, #640]	@ (80041bc <main+0x404c>)
 8003f3a:	f003 ff90 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8003f3e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d827      	bhi.n	8003f96 <main+0x3e26>
					time_date_buffer[input_index] = '9';
 8003f46:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8003f4a:	3368      	adds	r3, #104	@ 0x68
 8003f4c:	443b      	add	r3, r7
 8003f4e:	2239      	movs	r2, #57	@ 0x39
 8003f50:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8003f54:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8003f58:	3301      	adds	r3, #1
 8003f5a:	3368      	adds	r3, #104	@ 0x68
 8003f5c:	443b      	add	r3, r7
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "9");
 8003f64:	4896      	ldr	r0, [pc, #600]	@ (80041c0 <main+0x4050>)
 8003f66:	f003 ffbd 	bl	8007ee4 <Str_Len>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8003f72:	9300      	str	r3, [sp, #0]
 8003f74:	4b92      	ldr	r3, [pc, #584]	@ (80041c0 <main+0x4050>)
 8003f76:	2101      	movs	r1, #1
 8003f78:	4890      	ldr	r0, [pc, #576]	@ (80041bc <main+0x404c>)
 8003f7a:	f003 ff46 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 8003f7e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8003f82:	3301      	adds	r3, #1
 8003f84:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8003f88:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	2101      	movs	r1, #1
 8003f90:	488a      	ldr	r0, [pc, #552]	@ (80041bc <main+0x404c>)
 8003f92:	f003 fefe 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8003f96:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	2101      	movs	r1, #1
 8003f9e:	4887      	ldr	r0, [pc, #540]	@ (80041bc <main+0x404c>)
 8003fa0:	f003 ff5d 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8003fa4:	f004 f904 	bl	80081b0 <HAL_GetTick>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	33fa      	adds	r3, #250	@ 0xfa
 8003fac:	65bb      	str	r3, [r7, #88]	@ 0x58

			}

			//when yes is entered -> check for month validation (state 38)
			if (Keypad_Get_Key(&kp, kp_button_yes)
 8003fae:	210f      	movs	r1, #15
 8003fb0:	4881      	ldr	r0, [pc, #516]	@ (80041b8 <main+0x4048>)
 8003fb2:	f004 f88d 	bl	80080d0 <Keypad_Get_Key>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d021      	beq.n	8004000 <main+0x3e90>
					&& (current_tick >= general_delay)) {
 8003fbc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003fbe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d31d      	bcc.n	8004000 <main+0x3e90>

				Alcd_Clear(&lcd);
 8003fc4:	487d      	ldr	r0, [pc, #500]	@ (80041bc <main+0x404c>)
 8003fc6:	f003 ff39 	bl	8007e3c <Alcd_Clear>

				snprintf(timeString, sizeof(timeString), "%02d", buffer);
 8003fca:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8003fce:	f107 001c 	add.w	r0, r7, #28
 8003fd2:	4a7c      	ldr	r2, [pc, #496]	@ (80041c4 <main+0x4054>)
 8003fd4:	2132      	movs	r1, #50	@ 0x32
 8003fd6:	f007 fa05 	bl	800b3e4 <sniprintf>
				Alcd_PutAt_n(&lcd, 1, 0, timeString, strlen(timeString));
 8003fda:	f107 031c 	add.w	r3, r7, #28
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f7fc f8be 	bl	8000160 <strlen>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	f107 021c 	add.w	r2, r7, #28
 8003fec:	9300      	str	r3, [sp, #0]
 8003fee:	4613      	mov	r3, r2
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	2101      	movs	r1, #1
 8003ff4:	4871      	ldr	r0, [pc, #452]	@ (80041bc <main+0x404c>)
 8003ff6:	f003 ff08 	bl	8007e0a <Alcd_PutAt_n>

				status = 38;
 8003ffa:	2326      	movs	r3, #38	@ 0x26
 8003ffc:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

			}

			//
			general_delay = HAL_GetTick() + 250;
 8004000:	f004 f8d6 	bl	80081b0 <HAL_GetTick>
 8004004:	4603      	mov	r3, r0
 8004006:	33fa      	adds	r3, #250	@ 0xfa
 8004008:	65bb      	str	r3, [r7, #88]	@ 0x58
		while ((status == 37) && (current_tick >= general_delay)) {
 800400a:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 800400e:	2b25      	cmp	r3, #37	@ 0x25
 8004010:	d17e      	bne.n	8004110 <main+0x3fa0>
 8004012:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004014:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004016:	429a      	cmp	r2, r3
 8004018:	f4bf ac75 	bcs.w	8003906 <main+0x3796>
		}

//month validation phase
		while ((status == 38) && (current_tick >= general_delay)) {
 800401c:	e078      	b.n	8004110 <main+0x3fa0>

			//get the current tick number
			current_tick = HAL_GetTick();
 800401e:	f004 f8c7 	bl	80081b0 <HAL_GetTick>
 8004022:	6638      	str	r0, [r7, #96]	@ 0x60

			Alcd_Clear(&lcd);
 8004024:	4865      	ldr	r0, [pc, #404]	@ (80041bc <main+0x404c>)
 8004026:	f003 ff09 	bl	8007e3c <Alcd_Clear>

			snprintf(timeString, sizeof(timeString), "%02d", status);
 800402a:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 800402e:	f107 001c 	add.w	r0, r7, #28
 8004032:	4a64      	ldr	r2, [pc, #400]	@ (80041c4 <main+0x4054>)
 8004034:	2132      	movs	r1, #50	@ 0x32
 8004036:	f007 f9d5 	bl	800b3e4 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 800403a:	f107 031c 	add.w	r3, r7, #28
 800403e:	4618      	mov	r0, r3
 8004040:	f7fc f88e 	bl	8000160 <strlen>
 8004044:	4603      	mov	r3, r0
 8004046:	b2db      	uxtb	r3, r3
 8004048:	f107 021c 	add.w	r2, r7, #28
 800404c:	9300      	str	r3, [sp, #0]
 800404e:	4613      	mov	r3, r2
 8004050:	220e      	movs	r2, #14
 8004052:	2100      	movs	r1, #0
 8004054:	4859      	ldr	r0, [pc, #356]	@ (80041bc <main+0x404c>)
 8004056:	f003 fed8 	bl	8007e0a <Alcd_PutAt_n>

			buffer = atoi(time_date_buffer);
 800405a:	1d3b      	adds	r3, r7, #4
 800405c:	4618      	mov	r0, r3
 800405e:	f007 f938 	bl	800b2d2 <atoi>
 8004062:	4603      	mov	r3, r0
 8004064:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56

			//check if month is within the range 1 to 12
			if (buffer > 0 && buffer < 13) {
 8004068:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800406c:	2b00      	cmp	r3, #0
 800406e:	d01c      	beq.n	80040aa <main+0x3f3a>
 8004070:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8004074:	2b0c      	cmp	r3, #12
 8004076:	d818      	bhi.n	80040aa <main+0x3f3a>

				//move to the month state
				status = 39;
 8004078:	2327      	movs	r3, #39	@ 0x27
 800407a:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

				//set the month value
				CLK.month = buffer;
 800407e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8004082:	b2da      	uxtb	r2, r3
 8004084:	4b50      	ldr	r3, [pc, #320]	@ (80041c8 <main+0x4058>)
 8004086:	735a      	strb	r2, [r3, #13]

				input_index = 0;
 8004088:	2300      	movs	r3, #0
 800408a:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 800408e:	2300      	movs	r3, #0
 8004090:	2200      	movs	r2, #0
 8004092:	2101      	movs	r1, #1
 8004094:	4849      	ldr	r0, [pc, #292]	@ (80041bc <main+0x404c>)
 8004096:	f003 fee2 	bl	8007e5e <Alcd_Display_Control>
				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 800409a:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 800409e:	2301      	movs	r3, #1
 80040a0:	2101      	movs	r1, #1
 80040a2:	4846      	ldr	r0, [pc, #280]	@ (80041bc <main+0x404c>)
 80040a4:	f003 fedb 	bl	8007e5e <Alcd_Display_Control>
 80040a8:	e027      	b.n	80040fa <main+0x3f8a>
			} else {
				Alcd_PutAt(&lcd, 0, 0, "invalid");
 80040aa:	4848      	ldr	r0, [pc, #288]	@ (80041cc <main+0x405c>)
 80040ac:	f003 ff1a 	bl	8007ee4 <Str_Len>
 80040b0:	4603      	mov	r3, r0
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	9300      	str	r3, [sp, #0]
 80040b6:	4b45      	ldr	r3, [pc, #276]	@ (80041cc <main+0x405c>)
 80040b8:	2200      	movs	r2, #0
 80040ba:	2100      	movs	r1, #0
 80040bc:	483f      	ldr	r0, [pc, #252]	@ (80041bc <main+0x404c>)
 80040be:	f003 fea4 	bl	8007e0a <Alcd_PutAt_n>
				delay_flag = 1;
 80040c2:	2301      	movs	r3, #1
 80040c4:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

				input_index = 0;
 80040c8:	2300      	movs	r3, #0
 80040ca:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80040ce:	2300      	movs	r3, #0
 80040d0:	2200      	movs	r2, #0
 80040d2:	2101      	movs	r1, #1
 80040d4:	4839      	ldr	r0, [pc, #228]	@ (80041bc <main+0x404c>)
 80040d6:	f003 fec2 	bl	8007e5e <Alcd_Display_Control>
				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 80040da:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 80040de:	2301      	movs	r3, #1
 80040e0:	2101      	movs	r1, #1
 80040e2:	4836      	ldr	r0, [pc, #216]	@ (80041bc <main+0x404c>)
 80040e4:	f003 febb 	bl	8007e5e <Alcd_Display_Control>
				//return to entering month
				status = 37;
 80040e8:	2325      	movs	r3, #37	@ 0x25
 80040ea:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

				general_delay = HAL_GetTick() + 1000;
 80040ee:	f004 f85f 	bl	80081b0 <HAL_GetTick>
 80040f2:	4603      	mov	r3, r0
 80040f4:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80040f8:	65bb      	str	r3, [r7, #88]	@ 0x58
			}

			//create a delay
			if ((delay_flag == 1) && (current_tick >= general_delay)) {
 80040fa:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d106      	bne.n	8004110 <main+0x3fa0>
 8004102:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004104:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004106:	429a      	cmp	r2, r3
 8004108:	d302      	bcc.n	8004110 <main+0x3fa0>

				delay_flag = 0;
 800410a:	2300      	movs	r3, #0
 800410c:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
		while ((status == 38) && (current_tick >= general_delay)) {
 8004110:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8004114:	2b26      	cmp	r3, #38	@ 0x26
 8004116:	f040 8388 	bne.w	800482a <main+0x46ba>
 800411a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800411c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800411e:	429a      	cmp	r2, r3
 8004120:	f4bf af7d 	bcs.w	800401e <main+0x3eae>
			}

		}

		//year edit menu -> enter month(state 39)
		while ((status == 39) && (current_tick >= general_delay)) {
 8004124:	e381      	b.n	800482a <main+0x46ba>

			//get the current tick number
			current_tick = HAL_GetTick();
 8004126:	f004 f843 	bl	80081b0 <HAL_GetTick>
 800412a:	6638      	str	r0, [r7, #96]	@ 0x60

			//Alcd_Clear(&lcd);
			Alcd_PutAt(&lcd, 0, 0, "Enter year");
 800412c:	4828      	ldr	r0, [pc, #160]	@ (80041d0 <main+0x4060>)
 800412e:	f003 fed9 	bl	8007ee4 <Str_Len>
 8004132:	4603      	mov	r3, r0
 8004134:	b2db      	uxtb	r3, r3
 8004136:	9300      	str	r3, [sp, #0]
 8004138:	4b25      	ldr	r3, [pc, #148]	@ (80041d0 <main+0x4060>)
 800413a:	2200      	movs	r2, #0
 800413c:	2100      	movs	r1, #0
 800413e:	481f      	ldr	r0, [pc, #124]	@ (80041bc <main+0x404c>)
 8004140:	f003 fe63 	bl	8007e0a <Alcd_PutAt_n>

			snprintf(timeString, sizeof(timeString), "%02d", status);
 8004144:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8004148:	f107 001c 	add.w	r0, r7, #28
 800414c:	4a1d      	ldr	r2, [pc, #116]	@ (80041c4 <main+0x4054>)
 800414e:	2132      	movs	r1, #50	@ 0x32
 8004150:	f007 f948 	bl	800b3e4 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 8004154:	f107 031c 	add.w	r3, r7, #28
 8004158:	4618      	mov	r0, r3
 800415a:	f7fc f801 	bl	8000160 <strlen>
 800415e:	4603      	mov	r3, r0
 8004160:	b2db      	uxtb	r3, r3
 8004162:	f107 021c 	add.w	r2, r7, #28
 8004166:	9300      	str	r3, [sp, #0]
 8004168:	4613      	mov	r3, r2
 800416a:	220e      	movs	r2, #14
 800416c:	2100      	movs	r1, #0
 800416e:	4813      	ldr	r0, [pc, #76]	@ (80041bc <main+0x404c>)
 8004170:	f003 fe4b 	bl	8007e0a <Alcd_PutAt_n>

			Alcd_CursorAt(&lcd, 1, input_index);
 8004174:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8004178:	461a      	mov	r2, r3
 800417a:	2101      	movs	r1, #1
 800417c:	480f      	ldr	r0, [pc, #60]	@ (80041bc <main+0x404c>)
 800417e:	f003 fe08 	bl	8007d92 <Alcd_CursorAt>
			Alcd_Display_Control(&lcd, 1, 1, 1);
 8004182:	2301      	movs	r3, #1
 8004184:	2201      	movs	r2, #1
 8004186:	2101      	movs	r1, #1
 8004188:	480c      	ldr	r0, [pc, #48]	@ (80041bc <main+0x404c>)
 800418a:	f003 fe68 	bl	8007e5e <Alcd_Display_Control>

			//check if any button is pressed
			//check for any keypad input
			Keypad_Refresh(&kp);
 800418e:	480a      	ldr	r0, [pc, #40]	@ (80041b8 <main+0x4048>)
 8004190:	f003 ff02 	bl	8007f98 <Keypad_Refresh>

			//if back is entered
			if (Keypad_Get_Key(&kp, kp_button_no_back)
 8004194:	210e      	movs	r1, #14
 8004196:	4808      	ldr	r0, [pc, #32]	@ (80041b8 <main+0x4048>)
 8004198:	f003 ff9a 	bl	80080d0 <Keypad_Get_Key>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d018      	beq.n	80041d4 <main+0x4064>
					&& (current_tick >= general_delay)) {
 80041a2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80041a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d314      	bcc.n	80041d4 <main+0x4064>

				input_index = 0;
 80041aa:	2300      	movs	r3, #0
 80041ac:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55

				//back to previous menu
				status = 37;
 80041b0:	2325      	movs	r3, #37	@ 0x25
 80041b2:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 80041b6:	e30a      	b.n	80047ce <main+0x465e>
 80041b8:	20000000 	.word	0x20000000
 80041bc:	2000001c 	.word	0x2000001c
 80041c0:	0800bec0 	.word	0x0800bec0
 80041c4:	0800bdac 	.word	0x0800bdac
 80041c8:	20000150 	.word	0x20000150
 80041cc:	0800bec4 	.word	0x0800bec4
 80041d0:	0800bf10 	.word	0x0800bf10

			}

			//0 is entered
			else if (Keypad_Get_Key(&kp, kp_button_0)
 80041d4:	210d      	movs	r1, #13
 80041d6:	48b8      	ldr	r0, [pc, #736]	@ (80044b8 <main+0x4348>)
 80041d8:	f003 ff7a 	bl	80080d0 <Keypad_Get_Key>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d042      	beq.n	8004268 <main+0x40f8>
					&& (current_tick >= general_delay)) {
 80041e2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80041e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d33e      	bcc.n	8004268 <main+0x40f8>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80041ea:	2300      	movs	r3, #0
 80041ec:	2200      	movs	r2, #0
 80041ee:	2101      	movs	r1, #1
 80041f0:	48b2      	ldr	r0, [pc, #712]	@ (80044bc <main+0x434c>)
 80041f2:	f003 fe34 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 4) {
 80041f6:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80041fa:	2b03      	cmp	r3, #3
 80041fc:	d827      	bhi.n	800424e <main+0x40de>
					time_date_buffer[input_index] = '0';
 80041fe:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8004202:	3368      	adds	r3, #104	@ 0x68
 8004204:	443b      	add	r3, r7
 8004206:	2230      	movs	r2, #48	@ 0x30
 8004208:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 800420c:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8004210:	3301      	adds	r3, #1
 8004212:	3368      	adds	r3, #104	@ 0x68
 8004214:	443b      	add	r3, r7
 8004216:	2200      	movs	r2, #0
 8004218:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "0");
 800421c:	48a8      	ldr	r0, [pc, #672]	@ (80044c0 <main+0x4350>)
 800421e:	f003 fe61 	bl	8007ee4 <Str_Len>
 8004222:	4603      	mov	r3, r0
 8004224:	b2db      	uxtb	r3, r3
 8004226:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 800422a:	9300      	str	r3, [sp, #0]
 800422c:	4ba4      	ldr	r3, [pc, #656]	@ (80044c0 <main+0x4350>)
 800422e:	2101      	movs	r1, #1
 8004230:	48a2      	ldr	r0, [pc, #648]	@ (80044bc <main+0x434c>)
 8004232:	f003 fdea 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 8004236:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800423a:	3301      	adds	r3, #1
 800423c:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8004240:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8004244:	461a      	mov	r2, r3
 8004246:	2101      	movs	r1, #1
 8004248:	489c      	ldr	r0, [pc, #624]	@ (80044bc <main+0x434c>)
 800424a:	f003 fda2 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 800424e:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8004252:	2301      	movs	r3, #1
 8004254:	2101      	movs	r1, #1
 8004256:	4899      	ldr	r0, [pc, #612]	@ (80044bc <main+0x434c>)
 8004258:	f003 fe01 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 800425c:	f003 ffa8 	bl	80081b0 <HAL_GetTick>
 8004260:	4603      	mov	r3, r0
 8004262:	33fa      	adds	r3, #250	@ 0xfa
 8004264:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004266:	e2b2      	b.n	80047ce <main+0x465e>

			}
			//1 is entered
			else if (Keypad_Get_Key(&kp, kp_button_1)
 8004268:	2100      	movs	r1, #0
 800426a:	4893      	ldr	r0, [pc, #588]	@ (80044b8 <main+0x4348>)
 800426c:	f003 ff30 	bl	80080d0 <Keypad_Get_Key>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d042      	beq.n	80042fc <main+0x418c>
					&& (current_tick >= general_delay)) {
 8004276:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004278:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800427a:	429a      	cmp	r2, r3
 800427c:	d33e      	bcc.n	80042fc <main+0x418c>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 800427e:	2300      	movs	r3, #0
 8004280:	2200      	movs	r2, #0
 8004282:	2101      	movs	r1, #1
 8004284:	488d      	ldr	r0, [pc, #564]	@ (80044bc <main+0x434c>)
 8004286:	f003 fdea 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 4) {
 800428a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800428e:	2b03      	cmp	r3, #3
 8004290:	d827      	bhi.n	80042e2 <main+0x4172>
					time_date_buffer[input_index] = '1';
 8004292:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8004296:	3368      	adds	r3, #104	@ 0x68
 8004298:	443b      	add	r3, r7
 800429a:	2231      	movs	r2, #49	@ 0x31
 800429c:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 80042a0:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80042a4:	3301      	adds	r3, #1
 80042a6:	3368      	adds	r3, #104	@ 0x68
 80042a8:	443b      	add	r3, r7
 80042aa:	2200      	movs	r2, #0
 80042ac:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "1");
 80042b0:	4884      	ldr	r0, [pc, #528]	@ (80044c4 <main+0x4354>)
 80042b2:	f003 fe17 	bl	8007ee4 <Str_Len>
 80042b6:	4603      	mov	r3, r0
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 80042be:	9300      	str	r3, [sp, #0]
 80042c0:	4b80      	ldr	r3, [pc, #512]	@ (80044c4 <main+0x4354>)
 80042c2:	2101      	movs	r1, #1
 80042c4:	487d      	ldr	r0, [pc, #500]	@ (80044bc <main+0x434c>)
 80042c6:	f003 fda0 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 80042ca:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80042ce:	3301      	adds	r3, #1
 80042d0:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 80042d4:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80042d8:	461a      	mov	r2, r3
 80042da:	2101      	movs	r1, #1
 80042dc:	4877      	ldr	r0, [pc, #476]	@ (80044bc <main+0x434c>)
 80042de:	f003 fd58 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 80042e2:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 80042e6:	2301      	movs	r3, #1
 80042e8:	2101      	movs	r1, #1
 80042ea:	4874      	ldr	r0, [pc, #464]	@ (80044bc <main+0x434c>)
 80042ec:	f003 fdb7 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 80042f0:	f003 ff5e 	bl	80081b0 <HAL_GetTick>
 80042f4:	4603      	mov	r3, r0
 80042f6:	33fa      	adds	r3, #250	@ 0xfa
 80042f8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80042fa:	e268      	b.n	80047ce <main+0x465e>

			}
			//2 is entered
			else if (Keypad_Get_Key(&kp, kp_button_2)
 80042fc:	2101      	movs	r1, #1
 80042fe:	486e      	ldr	r0, [pc, #440]	@ (80044b8 <main+0x4348>)
 8004300:	f003 fee6 	bl	80080d0 <Keypad_Get_Key>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d042      	beq.n	8004390 <main+0x4220>
					&& (current_tick >= general_delay)) {
 800430a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800430c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800430e:	429a      	cmp	r2, r3
 8004310:	d33e      	bcc.n	8004390 <main+0x4220>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8004312:	2300      	movs	r3, #0
 8004314:	2200      	movs	r2, #0
 8004316:	2101      	movs	r1, #1
 8004318:	4868      	ldr	r0, [pc, #416]	@ (80044bc <main+0x434c>)
 800431a:	f003 fda0 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 4) {
 800431e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8004322:	2b03      	cmp	r3, #3
 8004324:	d827      	bhi.n	8004376 <main+0x4206>
					time_date_buffer[input_index] = '2';
 8004326:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800432a:	3368      	adds	r3, #104	@ 0x68
 800432c:	443b      	add	r3, r7
 800432e:	2232      	movs	r2, #50	@ 0x32
 8004330:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8004334:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8004338:	3301      	adds	r3, #1
 800433a:	3368      	adds	r3, #104	@ 0x68
 800433c:	443b      	add	r3, r7
 800433e:	2200      	movs	r2, #0
 8004340:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "2");
 8004344:	4860      	ldr	r0, [pc, #384]	@ (80044c8 <main+0x4358>)
 8004346:	f003 fdcd 	bl	8007ee4 <Str_Len>
 800434a:	4603      	mov	r3, r0
 800434c:	b2db      	uxtb	r3, r3
 800434e:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8004352:	9300      	str	r3, [sp, #0]
 8004354:	4b5c      	ldr	r3, [pc, #368]	@ (80044c8 <main+0x4358>)
 8004356:	2101      	movs	r1, #1
 8004358:	4858      	ldr	r0, [pc, #352]	@ (80044bc <main+0x434c>)
 800435a:	f003 fd56 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 800435e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8004362:	3301      	adds	r3, #1
 8004364:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8004368:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800436c:	461a      	mov	r2, r3
 800436e:	2101      	movs	r1, #1
 8004370:	4852      	ldr	r0, [pc, #328]	@ (80044bc <main+0x434c>)
 8004372:	f003 fd0e 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8004376:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 800437a:	2301      	movs	r3, #1
 800437c:	2101      	movs	r1, #1
 800437e:	484f      	ldr	r0, [pc, #316]	@ (80044bc <main+0x434c>)
 8004380:	f003 fd6d 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8004384:	f003 ff14 	bl	80081b0 <HAL_GetTick>
 8004388:	4603      	mov	r3, r0
 800438a:	33fa      	adds	r3, #250	@ 0xfa
 800438c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800438e:	e21e      	b.n	80047ce <main+0x465e>

			}
			//3 is entered
			else if (Keypad_Get_Key(&kp, kp_button_3)
 8004390:	2102      	movs	r1, #2
 8004392:	4849      	ldr	r0, [pc, #292]	@ (80044b8 <main+0x4348>)
 8004394:	f003 fe9c 	bl	80080d0 <Keypad_Get_Key>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d042      	beq.n	8004424 <main+0x42b4>
					&& (current_tick >= general_delay)) {
 800439e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80043a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d33e      	bcc.n	8004424 <main+0x42b4>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80043a6:	2300      	movs	r3, #0
 80043a8:	2200      	movs	r2, #0
 80043aa:	2101      	movs	r1, #1
 80043ac:	4843      	ldr	r0, [pc, #268]	@ (80044bc <main+0x434c>)
 80043ae:	f003 fd56 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 4) {
 80043b2:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80043b6:	2b03      	cmp	r3, #3
 80043b8:	d827      	bhi.n	800440a <main+0x429a>
					time_date_buffer[input_index] = '3';
 80043ba:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80043be:	3368      	adds	r3, #104	@ 0x68
 80043c0:	443b      	add	r3, r7
 80043c2:	2233      	movs	r2, #51	@ 0x33
 80043c4:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 80043c8:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80043cc:	3301      	adds	r3, #1
 80043ce:	3368      	adds	r3, #104	@ 0x68
 80043d0:	443b      	add	r3, r7
 80043d2:	2200      	movs	r2, #0
 80043d4:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "3");
 80043d8:	483c      	ldr	r0, [pc, #240]	@ (80044cc <main+0x435c>)
 80043da:	f003 fd83 	bl	8007ee4 <Str_Len>
 80043de:	4603      	mov	r3, r0
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 80043e6:	9300      	str	r3, [sp, #0]
 80043e8:	4b38      	ldr	r3, [pc, #224]	@ (80044cc <main+0x435c>)
 80043ea:	2101      	movs	r1, #1
 80043ec:	4833      	ldr	r0, [pc, #204]	@ (80044bc <main+0x434c>)
 80043ee:	f003 fd0c 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 80043f2:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80043f6:	3301      	adds	r3, #1
 80043f8:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 80043fc:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8004400:	461a      	mov	r2, r3
 8004402:	2101      	movs	r1, #1
 8004404:	482d      	ldr	r0, [pc, #180]	@ (80044bc <main+0x434c>)
 8004406:	f003 fcc4 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 800440a:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 800440e:	2301      	movs	r3, #1
 8004410:	2101      	movs	r1, #1
 8004412:	482a      	ldr	r0, [pc, #168]	@ (80044bc <main+0x434c>)
 8004414:	f003 fd23 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8004418:	f003 feca 	bl	80081b0 <HAL_GetTick>
 800441c:	4603      	mov	r3, r0
 800441e:	33fa      	adds	r3, #250	@ 0xfa
 8004420:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004422:	e1d4      	b.n	80047ce <main+0x465e>

			}

			//4 is entered
			else if (Keypad_Get_Key(&kp, kp_button_4)
 8004424:	2104      	movs	r1, #4
 8004426:	4824      	ldr	r0, [pc, #144]	@ (80044b8 <main+0x4348>)
 8004428:	f003 fe52 	bl	80080d0 <Keypad_Get_Key>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d050      	beq.n	80044d4 <main+0x4364>
					&& (current_tick >= general_delay)) {
 8004432:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004434:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004436:	429a      	cmp	r2, r3
 8004438:	d34c      	bcc.n	80044d4 <main+0x4364>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 800443a:	2300      	movs	r3, #0
 800443c:	2200      	movs	r2, #0
 800443e:	2101      	movs	r1, #1
 8004440:	481e      	ldr	r0, [pc, #120]	@ (80044bc <main+0x434c>)
 8004442:	f003 fd0c 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 4) {
 8004446:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800444a:	2b03      	cmp	r3, #3
 800444c:	d827      	bhi.n	800449e <main+0x432e>
					time_date_buffer[input_index] = '4';
 800444e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8004452:	3368      	adds	r3, #104	@ 0x68
 8004454:	443b      	add	r3, r7
 8004456:	2234      	movs	r2, #52	@ 0x34
 8004458:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 800445c:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8004460:	3301      	adds	r3, #1
 8004462:	3368      	adds	r3, #104	@ 0x68
 8004464:	443b      	add	r3, r7
 8004466:	2200      	movs	r2, #0
 8004468:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "4");
 800446c:	4818      	ldr	r0, [pc, #96]	@ (80044d0 <main+0x4360>)
 800446e:	f003 fd39 	bl	8007ee4 <Str_Len>
 8004472:	4603      	mov	r3, r0
 8004474:	b2db      	uxtb	r3, r3
 8004476:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 800447a:	9300      	str	r3, [sp, #0]
 800447c:	4b14      	ldr	r3, [pc, #80]	@ (80044d0 <main+0x4360>)
 800447e:	2101      	movs	r1, #1
 8004480:	480e      	ldr	r0, [pc, #56]	@ (80044bc <main+0x434c>)
 8004482:	f003 fcc2 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 8004486:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800448a:	3301      	adds	r3, #1
 800448c:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8004490:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8004494:	461a      	mov	r2, r3
 8004496:	2101      	movs	r1, #1
 8004498:	4808      	ldr	r0, [pc, #32]	@ (80044bc <main+0x434c>)
 800449a:	f003 fc7a 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 800449e:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 80044a2:	2301      	movs	r3, #1
 80044a4:	2101      	movs	r1, #1
 80044a6:	4805      	ldr	r0, [pc, #20]	@ (80044bc <main+0x434c>)
 80044a8:	f003 fcd9 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 80044ac:	f003 fe80 	bl	80081b0 <HAL_GetTick>
 80044b0:	4603      	mov	r3, r0
 80044b2:	33fa      	adds	r3, #250	@ 0xfa
 80044b4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80044b6:	e18a      	b.n	80047ce <main+0x465e>
 80044b8:	20000000 	.word	0x20000000
 80044bc:	2000001c 	.word	0x2000001c
 80044c0:	0800be9c 	.word	0x0800be9c
 80044c4:	0800bea0 	.word	0x0800bea0
 80044c8:	0800bea4 	.word	0x0800bea4
 80044cc:	0800bea8 	.word	0x0800bea8
 80044d0:	0800beac 	.word	0x0800beac

			}
			//5 is entered
			else if (Keypad_Get_Key(&kp, kp_button_5)
 80044d4:	2105      	movs	r1, #5
 80044d6:	4893      	ldr	r0, [pc, #588]	@ (8004724 <main+0x45b4>)
 80044d8:	f003 fdfa 	bl	80080d0 <Keypad_Get_Key>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d042      	beq.n	8004568 <main+0x43f8>
					&& (current_tick >= general_delay)) {
 80044e2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80044e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d33e      	bcc.n	8004568 <main+0x43f8>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80044ea:	2300      	movs	r3, #0
 80044ec:	2200      	movs	r2, #0
 80044ee:	2101      	movs	r1, #1
 80044f0:	488d      	ldr	r0, [pc, #564]	@ (8004728 <main+0x45b8>)
 80044f2:	f003 fcb4 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 4) {
 80044f6:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80044fa:	2b03      	cmp	r3, #3
 80044fc:	d827      	bhi.n	800454e <main+0x43de>
					time_date_buffer[input_index] = '5';
 80044fe:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8004502:	3368      	adds	r3, #104	@ 0x68
 8004504:	443b      	add	r3, r7
 8004506:	2235      	movs	r2, #53	@ 0x35
 8004508:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 800450c:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8004510:	3301      	adds	r3, #1
 8004512:	3368      	adds	r3, #104	@ 0x68
 8004514:	443b      	add	r3, r7
 8004516:	2200      	movs	r2, #0
 8004518:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "5");
 800451c:	4883      	ldr	r0, [pc, #524]	@ (800472c <main+0x45bc>)
 800451e:	f003 fce1 	bl	8007ee4 <Str_Len>
 8004522:	4603      	mov	r3, r0
 8004524:	b2db      	uxtb	r3, r3
 8004526:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 800452a:	9300      	str	r3, [sp, #0]
 800452c:	4b7f      	ldr	r3, [pc, #508]	@ (800472c <main+0x45bc>)
 800452e:	2101      	movs	r1, #1
 8004530:	487d      	ldr	r0, [pc, #500]	@ (8004728 <main+0x45b8>)
 8004532:	f003 fc6a 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 8004536:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800453a:	3301      	adds	r3, #1
 800453c:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8004540:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8004544:	461a      	mov	r2, r3
 8004546:	2101      	movs	r1, #1
 8004548:	4877      	ldr	r0, [pc, #476]	@ (8004728 <main+0x45b8>)
 800454a:	f003 fc22 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 800454e:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8004552:	2301      	movs	r3, #1
 8004554:	2101      	movs	r1, #1
 8004556:	4874      	ldr	r0, [pc, #464]	@ (8004728 <main+0x45b8>)
 8004558:	f003 fc81 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 800455c:	f003 fe28 	bl	80081b0 <HAL_GetTick>
 8004560:	4603      	mov	r3, r0
 8004562:	33fa      	adds	r3, #250	@ 0xfa
 8004564:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004566:	e132      	b.n	80047ce <main+0x465e>

			}

			//6 is entered
			else if (Keypad_Get_Key(&kp, kp_button_6)
 8004568:	2106      	movs	r1, #6
 800456a:	486e      	ldr	r0, [pc, #440]	@ (8004724 <main+0x45b4>)
 800456c:	f003 fdb0 	bl	80080d0 <Keypad_Get_Key>
 8004570:	4603      	mov	r3, r0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d042      	beq.n	80045fc <main+0x448c>
					&& (current_tick >= general_delay)) {
 8004576:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004578:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800457a:	429a      	cmp	r2, r3
 800457c:	d33e      	bcc.n	80045fc <main+0x448c>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 800457e:	2300      	movs	r3, #0
 8004580:	2200      	movs	r2, #0
 8004582:	2101      	movs	r1, #1
 8004584:	4868      	ldr	r0, [pc, #416]	@ (8004728 <main+0x45b8>)
 8004586:	f003 fc6a 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 4) {
 800458a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800458e:	2b03      	cmp	r3, #3
 8004590:	d827      	bhi.n	80045e2 <main+0x4472>
					time_date_buffer[input_index] = '6';
 8004592:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8004596:	3368      	adds	r3, #104	@ 0x68
 8004598:	443b      	add	r3, r7
 800459a:	2236      	movs	r2, #54	@ 0x36
 800459c:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 80045a0:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80045a4:	3301      	adds	r3, #1
 80045a6:	3368      	adds	r3, #104	@ 0x68
 80045a8:	443b      	add	r3, r7
 80045aa:	2200      	movs	r2, #0
 80045ac:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "6");
 80045b0:	485f      	ldr	r0, [pc, #380]	@ (8004730 <main+0x45c0>)
 80045b2:	f003 fc97 	bl	8007ee4 <Str_Len>
 80045b6:	4603      	mov	r3, r0
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 80045be:	9300      	str	r3, [sp, #0]
 80045c0:	4b5b      	ldr	r3, [pc, #364]	@ (8004730 <main+0x45c0>)
 80045c2:	2101      	movs	r1, #1
 80045c4:	4858      	ldr	r0, [pc, #352]	@ (8004728 <main+0x45b8>)
 80045c6:	f003 fc20 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 80045ca:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80045ce:	3301      	adds	r3, #1
 80045d0:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 80045d4:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80045d8:	461a      	mov	r2, r3
 80045da:	2101      	movs	r1, #1
 80045dc:	4852      	ldr	r0, [pc, #328]	@ (8004728 <main+0x45b8>)
 80045de:	f003 fbd8 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 80045e2:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 80045e6:	2301      	movs	r3, #1
 80045e8:	2101      	movs	r1, #1
 80045ea:	484f      	ldr	r0, [pc, #316]	@ (8004728 <main+0x45b8>)
 80045ec:	f003 fc37 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 80045f0:	f003 fdde 	bl	80081b0 <HAL_GetTick>
 80045f4:	4603      	mov	r3, r0
 80045f6:	33fa      	adds	r3, #250	@ 0xfa
 80045f8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80045fa:	e0e8      	b.n	80047ce <main+0x465e>

			}

			//7 is entered
			else if (Keypad_Get_Key(&kp, kp_button_7)
 80045fc:	2108      	movs	r1, #8
 80045fe:	4849      	ldr	r0, [pc, #292]	@ (8004724 <main+0x45b4>)
 8004600:	f003 fd66 	bl	80080d0 <Keypad_Get_Key>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d042      	beq.n	8004690 <main+0x4520>
					&& (current_tick >= general_delay)) {
 800460a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800460c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800460e:	429a      	cmp	r2, r3
 8004610:	d33e      	bcc.n	8004690 <main+0x4520>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8004612:	2300      	movs	r3, #0
 8004614:	2200      	movs	r2, #0
 8004616:	2101      	movs	r1, #1
 8004618:	4843      	ldr	r0, [pc, #268]	@ (8004728 <main+0x45b8>)
 800461a:	f003 fc20 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 4) {
 800461e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8004622:	2b03      	cmp	r3, #3
 8004624:	d827      	bhi.n	8004676 <main+0x4506>
					time_date_buffer[input_index] = '7';
 8004626:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800462a:	3368      	adds	r3, #104	@ 0x68
 800462c:	443b      	add	r3, r7
 800462e:	2237      	movs	r2, #55	@ 0x37
 8004630:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8004634:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8004638:	3301      	adds	r3, #1
 800463a:	3368      	adds	r3, #104	@ 0x68
 800463c:	443b      	add	r3, r7
 800463e:	2200      	movs	r2, #0
 8004640:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "7");
 8004644:	483b      	ldr	r0, [pc, #236]	@ (8004734 <main+0x45c4>)
 8004646:	f003 fc4d 	bl	8007ee4 <Str_Len>
 800464a:	4603      	mov	r3, r0
 800464c:	b2db      	uxtb	r3, r3
 800464e:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8004652:	9300      	str	r3, [sp, #0]
 8004654:	4b37      	ldr	r3, [pc, #220]	@ (8004734 <main+0x45c4>)
 8004656:	2101      	movs	r1, #1
 8004658:	4833      	ldr	r0, [pc, #204]	@ (8004728 <main+0x45b8>)
 800465a:	f003 fbd6 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 800465e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8004662:	3301      	adds	r3, #1
 8004664:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8004668:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800466c:	461a      	mov	r2, r3
 800466e:	2101      	movs	r1, #1
 8004670:	482d      	ldr	r0, [pc, #180]	@ (8004728 <main+0x45b8>)
 8004672:	f003 fb8e 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8004676:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 800467a:	2301      	movs	r3, #1
 800467c:	2101      	movs	r1, #1
 800467e:	482a      	ldr	r0, [pc, #168]	@ (8004728 <main+0x45b8>)
 8004680:	f003 fbed 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8004684:	f003 fd94 	bl	80081b0 <HAL_GetTick>
 8004688:	4603      	mov	r3, r0
 800468a:	33fa      	adds	r3, #250	@ 0xfa
 800468c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800468e:	e09e      	b.n	80047ce <main+0x465e>

			}

			//8 is entered
			else if (Keypad_Get_Key(&kp, kp_button_8)
 8004690:	2109      	movs	r1, #9
 8004692:	4824      	ldr	r0, [pc, #144]	@ (8004724 <main+0x45b4>)
 8004694:	f003 fd1c 	bl	80080d0 <Keypad_Get_Key>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d04e      	beq.n	800473c <main+0x45cc>
					&& (current_tick >= general_delay)) {
 800469e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80046a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d34a      	bcc.n	800473c <main+0x45cc>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80046a6:	2300      	movs	r3, #0
 80046a8:	2200      	movs	r2, #0
 80046aa:	2101      	movs	r1, #1
 80046ac:	481e      	ldr	r0, [pc, #120]	@ (8004728 <main+0x45b8>)
 80046ae:	f003 fbd6 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 4) {
 80046b2:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80046b6:	2b03      	cmp	r3, #3
 80046b8:	d827      	bhi.n	800470a <main+0x459a>
					time_date_buffer[input_index] = '8';
 80046ba:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80046be:	3368      	adds	r3, #104	@ 0x68
 80046c0:	443b      	add	r3, r7
 80046c2:	2238      	movs	r2, #56	@ 0x38
 80046c4:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 80046c8:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80046cc:	3301      	adds	r3, #1
 80046ce:	3368      	adds	r3, #104	@ 0x68
 80046d0:	443b      	add	r3, r7
 80046d2:	2200      	movs	r2, #0
 80046d4:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "8");
 80046d8:	4817      	ldr	r0, [pc, #92]	@ (8004738 <main+0x45c8>)
 80046da:	f003 fc03 	bl	8007ee4 <Str_Len>
 80046de:	4603      	mov	r3, r0
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 80046e6:	9300      	str	r3, [sp, #0]
 80046e8:	4b13      	ldr	r3, [pc, #76]	@ (8004738 <main+0x45c8>)
 80046ea:	2101      	movs	r1, #1
 80046ec:	480e      	ldr	r0, [pc, #56]	@ (8004728 <main+0x45b8>)
 80046ee:	f003 fb8c 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 80046f2:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80046f6:	3301      	adds	r3, #1
 80046f8:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 80046fc:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8004700:	461a      	mov	r2, r3
 8004702:	2101      	movs	r1, #1
 8004704:	4808      	ldr	r0, [pc, #32]	@ (8004728 <main+0x45b8>)
 8004706:	f003 fb44 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 800470a:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 800470e:	2301      	movs	r3, #1
 8004710:	2101      	movs	r1, #1
 8004712:	4805      	ldr	r0, [pc, #20]	@ (8004728 <main+0x45b8>)
 8004714:	f003 fba3 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8004718:	f003 fd4a 	bl	80081b0 <HAL_GetTick>
 800471c:	4603      	mov	r3, r0
 800471e:	33fa      	adds	r3, #250	@ 0xfa
 8004720:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004722:	e054      	b.n	80047ce <main+0x465e>
 8004724:	20000000 	.word	0x20000000
 8004728:	2000001c 	.word	0x2000001c
 800472c:	0800beb0 	.word	0x0800beb0
 8004730:	0800beb4 	.word	0x0800beb4
 8004734:	0800beb8 	.word	0x0800beb8
 8004738:	0800bebc 	.word	0x0800bebc

			}

			//9 is entered
			else if (Keypad_Get_Key(&kp, kp_button_9)
 800473c:	210a      	movs	r1, #10
 800473e:	48b1      	ldr	r0, [pc, #708]	@ (8004a04 <main+0x4894>)
 8004740:	f003 fcc6 	bl	80080d0 <Keypad_Get_Key>
 8004744:	4603      	mov	r3, r0
 8004746:	2b00      	cmp	r3, #0
 8004748:	d041      	beq.n	80047ce <main+0x465e>
					&& (current_tick >= general_delay)) {
 800474a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800474c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800474e:	429a      	cmp	r2, r3
 8004750:	d33d      	bcc.n	80047ce <main+0x465e>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8004752:	2300      	movs	r3, #0
 8004754:	2200      	movs	r2, #0
 8004756:	2101      	movs	r1, #1
 8004758:	48ab      	ldr	r0, [pc, #684]	@ (8004a08 <main+0x4898>)
 800475a:	f003 fb80 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 4) {
 800475e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8004762:	2b03      	cmp	r3, #3
 8004764:	d827      	bhi.n	80047b6 <main+0x4646>
					time_date_buffer[input_index] = '9';
 8004766:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800476a:	3368      	adds	r3, #104	@ 0x68
 800476c:	443b      	add	r3, r7
 800476e:	2239      	movs	r2, #57	@ 0x39
 8004770:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8004774:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8004778:	3301      	adds	r3, #1
 800477a:	3368      	adds	r3, #104	@ 0x68
 800477c:	443b      	add	r3, r7
 800477e:	2200      	movs	r2, #0
 8004780:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "9");
 8004784:	48a1      	ldr	r0, [pc, #644]	@ (8004a0c <main+0x489c>)
 8004786:	f003 fbad 	bl	8007ee4 <Str_Len>
 800478a:	4603      	mov	r3, r0
 800478c:	b2db      	uxtb	r3, r3
 800478e:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8004792:	9300      	str	r3, [sp, #0]
 8004794:	4b9d      	ldr	r3, [pc, #628]	@ (8004a0c <main+0x489c>)
 8004796:	2101      	movs	r1, #1
 8004798:	489b      	ldr	r0, [pc, #620]	@ (8004a08 <main+0x4898>)
 800479a:	f003 fb36 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 800479e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80047a2:	3301      	adds	r3, #1
 80047a4:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 80047a8:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80047ac:	461a      	mov	r2, r3
 80047ae:	2101      	movs	r1, #1
 80047b0:	4895      	ldr	r0, [pc, #596]	@ (8004a08 <main+0x4898>)
 80047b2:	f003 faee 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 80047b6:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 80047ba:	2301      	movs	r3, #1
 80047bc:	2101      	movs	r1, #1
 80047be:	4892      	ldr	r0, [pc, #584]	@ (8004a08 <main+0x4898>)
 80047c0:	f003 fb4d 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 80047c4:	f003 fcf4 	bl	80081b0 <HAL_GetTick>
 80047c8:	4603      	mov	r3, r0
 80047ca:	33fa      	adds	r3, #250	@ 0xfa
 80047cc:	65bb      	str	r3, [r7, #88]	@ 0x58

			}

			//when yes is entered -> check for year validation (state 40)
			if (Keypad_Get_Key(&kp, kp_button_yes)
 80047ce:	210f      	movs	r1, #15
 80047d0:	488c      	ldr	r0, [pc, #560]	@ (8004a04 <main+0x4894>)
 80047d2:	f003 fc7d 	bl	80080d0 <Keypad_Get_Key>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d021      	beq.n	8004820 <main+0x46b0>
					&& (current_tick >= general_delay)) {
 80047dc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80047de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d31d      	bcc.n	8004820 <main+0x46b0>

				Alcd_Clear(&lcd);
 80047e4:	4888      	ldr	r0, [pc, #544]	@ (8004a08 <main+0x4898>)
 80047e6:	f003 fb29 	bl	8007e3c <Alcd_Clear>

				snprintf(timeString, sizeof(timeString), "%02d", buffer);
 80047ea:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80047ee:	f107 001c 	add.w	r0, r7, #28
 80047f2:	4a87      	ldr	r2, [pc, #540]	@ (8004a10 <main+0x48a0>)
 80047f4:	2132      	movs	r1, #50	@ 0x32
 80047f6:	f006 fdf5 	bl	800b3e4 <sniprintf>
				Alcd_PutAt_n(&lcd, 1, 0, timeString, strlen(timeString));
 80047fa:	f107 031c 	add.w	r3, r7, #28
 80047fe:	4618      	mov	r0, r3
 8004800:	f7fb fcae 	bl	8000160 <strlen>
 8004804:	4603      	mov	r3, r0
 8004806:	b2db      	uxtb	r3, r3
 8004808:	f107 021c 	add.w	r2, r7, #28
 800480c:	9300      	str	r3, [sp, #0]
 800480e:	4613      	mov	r3, r2
 8004810:	2200      	movs	r2, #0
 8004812:	2101      	movs	r1, #1
 8004814:	487c      	ldr	r0, [pc, #496]	@ (8004a08 <main+0x4898>)
 8004816:	f003 faf8 	bl	8007e0a <Alcd_PutAt_n>

				status = 40;
 800481a:	2328      	movs	r3, #40	@ 0x28
 800481c:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

			}

			//
			general_delay = HAL_GetTick() + 250;
 8004820:	f003 fcc6 	bl	80081b0 <HAL_GetTick>
 8004824:	4603      	mov	r3, r0
 8004826:	33fa      	adds	r3, #250	@ 0xfa
 8004828:	65bb      	str	r3, [r7, #88]	@ 0x58
		while ((status == 39) && (current_tick >= general_delay)) {
 800482a:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 800482e:	2b27      	cmp	r3, #39	@ 0x27
 8004830:	f040 8081 	bne.w	8004936 <main+0x47c6>
 8004834:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004836:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004838:	429a      	cmp	r2, r3
 800483a:	f4bf ac74 	bcs.w	8004126 <main+0x3fb6>
		}

//year validation phase
		while ((status == 40) && (current_tick >= general_delay)) {
 800483e:	e07a      	b.n	8004936 <main+0x47c6>

			//get the current tick number
			current_tick = HAL_GetTick();
 8004840:	f003 fcb6 	bl	80081b0 <HAL_GetTick>
 8004844:	6638      	str	r0, [r7, #96]	@ 0x60

			Alcd_Clear(&lcd);
 8004846:	4870      	ldr	r0, [pc, #448]	@ (8004a08 <main+0x4898>)
 8004848:	f003 faf8 	bl	8007e3c <Alcd_Clear>

			snprintf(timeString, sizeof(timeString), "%02d", status);
 800484c:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8004850:	f107 001c 	add.w	r0, r7, #28
 8004854:	4a6e      	ldr	r2, [pc, #440]	@ (8004a10 <main+0x48a0>)
 8004856:	2132      	movs	r1, #50	@ 0x32
 8004858:	f006 fdc4 	bl	800b3e4 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 800485c:	f107 031c 	add.w	r3, r7, #28
 8004860:	4618      	mov	r0, r3
 8004862:	f7fb fc7d 	bl	8000160 <strlen>
 8004866:	4603      	mov	r3, r0
 8004868:	b2db      	uxtb	r3, r3
 800486a:	f107 021c 	add.w	r2, r7, #28
 800486e:	9300      	str	r3, [sp, #0]
 8004870:	4613      	mov	r3, r2
 8004872:	220e      	movs	r2, #14
 8004874:	2100      	movs	r1, #0
 8004876:	4864      	ldr	r0, [pc, #400]	@ (8004a08 <main+0x4898>)
 8004878:	f003 fac7 	bl	8007e0a <Alcd_PutAt_n>

			buffer = atoi(time_date_buffer);
 800487c:	1d3b      	adds	r3, r7, #4
 800487e:	4618      	mov	r0, r3
 8004880:	f006 fd27 	bl	800b2d2 <atoi>
 8004884:	4603      	mov	r3, r0
 8004886:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56

			//check if year is within the range 2024 to 2099
			if (buffer > 2023 && buffer < 2100) {
 800488a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800488e:	f5b3 6ffd 	cmp.w	r3, #2024	@ 0x7e8
 8004892:	d31d      	bcc.n	80048d0 <main+0x4760>
 8004894:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8004898:	f640 0233 	movw	r2, #2099	@ 0x833
 800489c:	4293      	cmp	r3, r2
 800489e:	d817      	bhi.n	80048d0 <main+0x4760>

				//move to confirm save state
				status = 41;
 80048a0:	2329      	movs	r3, #41	@ 0x29
 80048a2:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

				//set the year value
				CLK.year = buffer;
 80048a6:	4a5b      	ldr	r2, [pc, #364]	@ (8004a14 <main+0x48a4>)
 80048a8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80048ac:	81d3      	strh	r3, [r2, #14]

				input_index = 0;
 80048ae:	2300      	movs	r3, #0
 80048b0:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80048b4:	2300      	movs	r3, #0
 80048b6:	2200      	movs	r2, #0
 80048b8:	2101      	movs	r1, #1
 80048ba:	4853      	ldr	r0, [pc, #332]	@ (8004a08 <main+0x4898>)
 80048bc:	f003 facf 	bl	8007e5e <Alcd_Display_Control>
				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 80048c0:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 80048c4:	2301      	movs	r3, #1
 80048c6:	2101      	movs	r1, #1
 80048c8:	484f      	ldr	r0, [pc, #316]	@ (8004a08 <main+0x4898>)
 80048ca:	f003 fac8 	bl	8007e5e <Alcd_Display_Control>
 80048ce:	e027      	b.n	8004920 <main+0x47b0>
			} else {
				Alcd_PutAt(&lcd, 0, 0, "invalid");
 80048d0:	4851      	ldr	r0, [pc, #324]	@ (8004a18 <main+0x48a8>)
 80048d2:	f003 fb07 	bl	8007ee4 <Str_Len>
 80048d6:	4603      	mov	r3, r0
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	9300      	str	r3, [sp, #0]
 80048dc:	4b4e      	ldr	r3, [pc, #312]	@ (8004a18 <main+0x48a8>)
 80048de:	2200      	movs	r2, #0
 80048e0:	2100      	movs	r1, #0
 80048e2:	4849      	ldr	r0, [pc, #292]	@ (8004a08 <main+0x4898>)
 80048e4:	f003 fa91 	bl	8007e0a <Alcd_PutAt_n>
				delay_flag = 1;
 80048e8:	2301      	movs	r3, #1
 80048ea:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

				input_index = 0;
 80048ee:	2300      	movs	r3, #0
 80048f0:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80048f4:	2300      	movs	r3, #0
 80048f6:	2200      	movs	r2, #0
 80048f8:	2101      	movs	r1, #1
 80048fa:	4843      	ldr	r0, [pc, #268]	@ (8004a08 <main+0x4898>)
 80048fc:	f003 faaf 	bl	8007e5e <Alcd_Display_Control>
				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8004900:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8004904:	2301      	movs	r3, #1
 8004906:	2101      	movs	r1, #1
 8004908:	483f      	ldr	r0, [pc, #252]	@ (8004a08 <main+0x4898>)
 800490a:	f003 faa8 	bl	8007e5e <Alcd_Display_Control>
				//return to entering year
				status = 39;
 800490e:	2327      	movs	r3, #39	@ 0x27
 8004910:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

				general_delay = HAL_GetTick() + 1000;
 8004914:	f003 fc4c 	bl	80081b0 <HAL_GetTick>
 8004918:	4603      	mov	r3, r0
 800491a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800491e:	65bb      	str	r3, [r7, #88]	@ 0x58
			}

			//create a delay
			if ((delay_flag == 1) && (current_tick >= general_delay)) {
 8004920:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8004924:	2b01      	cmp	r3, #1
 8004926:	d106      	bne.n	8004936 <main+0x47c6>
 8004928:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800492a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800492c:	429a      	cmp	r2, r3
 800492e:	d302      	bcc.n	8004936 <main+0x47c6>

				delay_flag = 0;
 8004930:	2300      	movs	r3, #0
 8004932:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
		while ((status == 40) && (current_tick >= general_delay)) {
 8004936:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 800493a:	2b28      	cmp	r3, #40	@ 0x28
 800493c:	d157      	bne.n	80049ee <main+0x487e>
 800493e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004940:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004942:	429a      	cmp	r2, r3
 8004944:	f4bf af7c 	bcs.w	8004840 <main+0x46d0>
			}

		}

//date confirmation menu (state 41)
		while ((status == 41) && (current_tick >= general_delay)) {
 8004948:	e051      	b.n	80049ee <main+0x487e>

			//get the current tick number
			current_tick = HAL_GetTick();
 800494a:	f003 fc31 	bl	80081b0 <HAL_GetTick>
 800494e:	6638      	str	r0, [r7, #96]	@ 0x60

			Alcd_Clear(&lcd);
 8004950:	482d      	ldr	r0, [pc, #180]	@ (8004a08 <main+0x4898>)
 8004952:	f003 fa73 	bl	8007e3c <Alcd_Clear>
			Alcd_PutAt(&lcd, 0, 0, "confirm?");
 8004956:	4831      	ldr	r0, [pc, #196]	@ (8004a1c <main+0x48ac>)
 8004958:	f003 fac4 	bl	8007ee4 <Str_Len>
 800495c:	4603      	mov	r3, r0
 800495e:	b2db      	uxtb	r3, r3
 8004960:	9300      	str	r3, [sp, #0]
 8004962:	4b2e      	ldr	r3, [pc, #184]	@ (8004a1c <main+0x48ac>)
 8004964:	2200      	movs	r2, #0
 8004966:	2100      	movs	r1, #0
 8004968:	4827      	ldr	r0, [pc, #156]	@ (8004a08 <main+0x4898>)
 800496a:	f003 fa4e 	bl	8007e0a <Alcd_PutAt_n>

			snprintf(timeString, sizeof(timeString), "%02d", status);
 800496e:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8004972:	f107 001c 	add.w	r0, r7, #28
 8004976:	4a26      	ldr	r2, [pc, #152]	@ (8004a10 <main+0x48a0>)
 8004978:	2132      	movs	r1, #50	@ 0x32
 800497a:	f006 fd33 	bl	800b3e4 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 800497e:	f107 031c 	add.w	r3, r7, #28
 8004982:	4618      	mov	r0, r3
 8004984:	f7fb fbec 	bl	8000160 <strlen>
 8004988:	4603      	mov	r3, r0
 800498a:	b2db      	uxtb	r3, r3
 800498c:	f107 021c 	add.w	r2, r7, #28
 8004990:	9300      	str	r3, [sp, #0]
 8004992:	4613      	mov	r3, r2
 8004994:	220e      	movs	r2, #14
 8004996:	2100      	movs	r1, #0
 8004998:	481b      	ldr	r0, [pc, #108]	@ (8004a08 <main+0x4898>)
 800499a:	f003 fa36 	bl	8007e0a <Alcd_PutAt_n>

			//check if any button is pressed
			//check for any keypad input
			Keypad_Refresh(&kp);
 800499e:	4819      	ldr	r0, [pc, #100]	@ (8004a04 <main+0x4894>)
 80049a0:	f003 fafa 	bl	8007f98 <Keypad_Refresh>

			//yes is selected
			if (Keypad_Get_Key(&kp, kp_button_yes)
 80049a4:	210f      	movs	r1, #15
 80049a6:	4817      	ldr	r0, [pc, #92]	@ (8004a04 <main+0x4894>)
 80049a8:	f003 fb92 	bl	80080d0 <Keypad_Get_Key>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d00a      	beq.n	80049c8 <main+0x4858>
					&& (current_tick >= general_delay)) {
 80049b2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80049b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d306      	bcc.n	80049c8 <main+0x4858>

				Ds1307_set(&CLK);
 80049ba:	4816      	ldr	r0, [pc, #88]	@ (8004a14 <main+0x48a4>)
 80049bc:	f002 ff55 	bl	800786a <Ds1307_set>

				//return to edit menu
				status = 21;
 80049c0:	2315      	movs	r3, #21
 80049c2:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 80049c6:	e00d      	b.n	80049e4 <main+0x4874>

			}

			//back is selected -> back to enter year state
			else if (Keypad_Get_Key(&kp, kp_button_no_back)
 80049c8:	210e      	movs	r1, #14
 80049ca:	480e      	ldr	r0, [pc, #56]	@ (8004a04 <main+0x4894>)
 80049cc:	f003 fb80 	bl	80080d0 <Keypad_Get_Key>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d006      	beq.n	80049e4 <main+0x4874>
					&& (current_tick >= general_delay)) {
 80049d6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80049d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80049da:	429a      	cmp	r2, r3
 80049dc:	d302      	bcc.n	80049e4 <main+0x4874>

				status = 39;
 80049de:	2327      	movs	r3, #39	@ 0x27
 80049e0:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

			}

			general_delay = HAL_GetTick() + 250;
 80049e4:	f003 fbe4 	bl	80081b0 <HAL_GetTick>
 80049e8:	4603      	mov	r3, r0
 80049ea:	33fa      	adds	r3, #250	@ 0xfa
 80049ec:	65bb      	str	r3, [r7, #88]	@ 0x58
		while ((status == 41) && (current_tick >= general_delay)) {
 80049ee:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 80049f2:	2b29      	cmp	r3, #41	@ 0x29
 80049f4:	f040 8098 	bne.w	8004b28 <main+0x49b8>
 80049f8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80049fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d2a4      	bcs.n	800494a <main+0x47da>
		}

//status 24 -> calibrate dosing
		while ((status == 24) && (current_tick >= general_delay)) {
 8004a00:	e092      	b.n	8004b28 <main+0x49b8>
 8004a02:	bf00      	nop
 8004a04:	20000000 	.word	0x20000000
 8004a08:	2000001c 	.word	0x2000001c
 8004a0c:	0800bec0 	.word	0x0800bec0
 8004a10:	0800bdac 	.word	0x0800bdac
 8004a14:	20000150 	.word	0x20000150
 8004a18:	0800bec4 	.word	0x0800bec4
 8004a1c:	0800beec 	.word	0x0800beec

			//get the current tick number
			current_tick = HAL_GetTick();
 8004a20:	f003 fbc6 	bl	80081b0 <HAL_GetTick>
 8004a24:	6638      	str	r0, [r7, #96]	@ 0x60

			//moving the motor to the 0 position
			TIM1->CCR1 = 999;
 8004a26:	4bad      	ldr	r3, [pc, #692]	@ (8004cdc <main+0x4b6c>)
 8004a28:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004a2c:	635a      	str	r2, [r3, #52]	@ 0x34

			Alcd_Clear(&lcd);
 8004a2e:	48ac      	ldr	r0, [pc, #688]	@ (8004ce0 <main+0x4b70>)
 8004a30:	f003 fa04 	bl	8007e3c <Alcd_Clear>
			Alcd_PutAt(&lcd, 0, 0, "hold feeding");
 8004a34:	48ab      	ldr	r0, [pc, #684]	@ (8004ce4 <main+0x4b74>)
 8004a36:	f003 fa55 	bl	8007ee4 <Str_Len>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	9300      	str	r3, [sp, #0]
 8004a40:	4ba8      	ldr	r3, [pc, #672]	@ (8004ce4 <main+0x4b74>)
 8004a42:	2200      	movs	r2, #0
 8004a44:	2100      	movs	r1, #0
 8004a46:	48a6      	ldr	r0, [pc, #664]	@ (8004ce0 <main+0x4b70>)
 8004a48:	f003 f9df 	bl	8007e0a <Alcd_PutAt_n>
			Alcd_PutAt(&lcd, 1, 0, "till finishing");
 8004a4c:	48a6      	ldr	r0, [pc, #664]	@ (8004ce8 <main+0x4b78>)
 8004a4e:	f003 fa49 	bl	8007ee4 <Str_Len>
 8004a52:	4603      	mov	r3, r0
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	9300      	str	r3, [sp, #0]
 8004a58:	4ba3      	ldr	r3, [pc, #652]	@ (8004ce8 <main+0x4b78>)
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	2101      	movs	r1, #1
 8004a5e:	48a0      	ldr	r0, [pc, #640]	@ (8004ce0 <main+0x4b70>)
 8004a60:	f003 f9d3 	bl	8007e0a <Alcd_PutAt_n>
			snprintf(timeString, sizeof(timeString), "%02d", status);
 8004a64:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8004a68:	f107 001c 	add.w	r0, r7, #28
 8004a6c:	4a9f      	ldr	r2, [pc, #636]	@ (8004cec <main+0x4b7c>)
 8004a6e:	2132      	movs	r1, #50	@ 0x32
 8004a70:	f006 fcb8 	bl	800b3e4 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 8004a74:	f107 031c 	add.w	r3, r7, #28
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f7fb fb71 	bl	8000160 <strlen>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	f107 021c 	add.w	r2, r7, #28
 8004a86:	9300      	str	r3, [sp, #0]
 8004a88:	4613      	mov	r3, r2
 8004a8a:	220e      	movs	r2, #14
 8004a8c:	2100      	movs	r1, #0
 8004a8e:	4894      	ldr	r0, [pc, #592]	@ (8004ce0 <main+0x4b70>)
 8004a90:	f003 f9bb 	bl	8007e0a <Alcd_PutAt_n>

			//check if any button is pressed
			//check for any keypad input
			Keypad_Refresh(&kp);
 8004a94:	4896      	ldr	r0, [pc, #600]	@ (8004cf0 <main+0x4b80>)
 8004a96:	f003 fa7f 	bl	8007f98 <Keypad_Refresh>

			//in case feeding is selected -> start moving the motor
			if (Keypad_Get_Key(&kp, kp_button_force_feed)
 8004a9a:	210b      	movs	r1, #11
 8004a9c:	4894      	ldr	r0, [pc, #592]	@ (8004cf0 <main+0x4b80>)
 8004a9e:	f003 fb17 	bl	80080d0 <Keypad_Get_Key>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d01d      	beq.n	8004ae4 <main+0x4974>
					&& (current_tick >= general_delay)) {
 8004aa8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004aaa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d319      	bcc.n	8004ae4 <main+0x4974>
				Alcd_Clear(&lcd);
 8004ab0:	488b      	ldr	r0, [pc, #556]	@ (8004ce0 <main+0x4b70>)
 8004ab2:	f003 f9c3 	bl	8007e3c <Alcd_Clear>
				Alcd_PutAt(&lcd, 0, 0, "calibrating");
 8004ab6:	488f      	ldr	r0, [pc, #572]	@ (8004cf4 <main+0x4b84>)
 8004ab8:	f003 fa14 	bl	8007ee4 <Str_Len>
 8004abc:	4603      	mov	r3, r0
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	9300      	str	r3, [sp, #0]
 8004ac2:	4b8c      	ldr	r3, [pc, #560]	@ (8004cf4 <main+0x4b84>)
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	2100      	movs	r1, #0
 8004ac8:	4885      	ldr	r0, [pc, #532]	@ (8004ce0 <main+0x4b70>)
 8004aca:	f003 f99e 	bl	8007e0a <Alcd_PutAt_n>

				dosing_tick = dosing_tick + HAL_GetTick();
 8004ace:	f003 fb6f 	bl	80081b0 <HAL_GetTick>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ad6:	4413      	add	r3, r2
 8004ad8:	65fb      	str	r3, [r7, #92]	@ 0x5c

				//moving the motor to the 180 position
				TIM1->CCR1 = 1999;
 8004ada:	4b80      	ldr	r3, [pc, #512]	@ (8004cdc <main+0x4b6c>)
 8004adc:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8004ae0:	635a      	str	r2, [r3, #52]	@ 0x34
 8004ae2:	e01c      	b.n	8004b1e <main+0x49ae>

			}

			//yes is selected
			else if (Keypad_Get_Key(&kp, kp_button_yes)
 8004ae4:	210f      	movs	r1, #15
 8004ae6:	4882      	ldr	r0, [pc, #520]	@ (8004cf0 <main+0x4b80>)
 8004ae8:	f003 faf2 	bl	80080d0 <Keypad_Get_Key>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d007      	beq.n	8004b02 <main+0x4992>
					&& (current_tick >= general_delay)) {
 8004af2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004af4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d303      	bcc.n	8004b02 <main+0x4992>

				status = 42;
 8004afa:	232a      	movs	r3, #42	@ 0x2a
 8004afc:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 8004b00:	e00d      	b.n	8004b1e <main+0x49ae>

			}

			//back is selected
			else if (Keypad_Get_Key(&kp, kp_button_no_back)
 8004b02:	210e      	movs	r1, #14
 8004b04:	487a      	ldr	r0, [pc, #488]	@ (8004cf0 <main+0x4b80>)
 8004b06:	f003 fae3 	bl	80080d0 <Keypad_Get_Key>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d006      	beq.n	8004b1e <main+0x49ae>
					&& (current_tick >= general_delay)) {
 8004b10:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004b12:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d302      	bcc.n	8004b1e <main+0x49ae>

				status = 21;
 8004b18:	2315      	movs	r3, #21
 8004b1a:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

			}

			general_delay = HAL_GetTick() + 250;
 8004b1e:	f003 fb47 	bl	80081b0 <HAL_GetTick>
 8004b22:	4603      	mov	r3, r0
 8004b24:	33fa      	adds	r3, #250	@ 0xfa
 8004b26:	65bb      	str	r3, [r7, #88]	@ 0x58
		while ((status == 24) && (current_tick >= general_delay)) {
 8004b28:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8004b2c:	2b18      	cmp	r3, #24
 8004b2e:	d150      	bne.n	8004bd2 <main+0x4a62>
 8004b30:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004b32:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004b34:	429a      	cmp	r2, r3
 8004b36:	f4bf af73 	bcs.w	8004a20 <main+0x48b0>
		}

		//status 42 -> calibrate saving
		while ((status == 42) && (current_tick >= general_delay)) {
 8004b3a:	e04a      	b.n	8004bd2 <main+0x4a62>

			// Update current_tick to the current time
			current_tick = HAL_GetTick();
 8004b3c:	f003 fb38 	bl	80081b0 <HAL_GetTick>
 8004b40:	6638      	str	r0, [r7, #96]	@ 0x60
			Alcd_Clear(&lcd);
 8004b42:	4867      	ldr	r0, [pc, #412]	@ (8004ce0 <main+0x4b70>)
 8004b44:	f003 f97a 	bl	8007e3c <Alcd_Clear>
			Alcd_PutAt(&lcd, 0, 0, "saved");
 8004b48:	486b      	ldr	r0, [pc, #428]	@ (8004cf8 <main+0x4b88>)
 8004b4a:	f003 f9cb 	bl	8007ee4 <Str_Len>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	9300      	str	r3, [sp, #0]
 8004b54:	4b68      	ldr	r3, [pc, #416]	@ (8004cf8 <main+0x4b88>)
 8004b56:	2200      	movs	r2, #0
 8004b58:	2100      	movs	r1, #0
 8004b5a:	4861      	ldr	r0, [pc, #388]	@ (8004ce0 <main+0x4b70>)
 8004b5c:	f003 f955 	bl	8007e0a <Alcd_PutAt_n>

			// Check if the current tick has passed the general delay time
			if (current_tick >= general_delay) {
 8004b60:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004b62:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d334      	bcc.n	8004bd2 <main+0x4a62>
				Alcd_Clear(&lcd);
 8004b68:	485d      	ldr	r0, [pc, #372]	@ (8004ce0 <main+0x4b70>)
 8004b6a:	f003 f967 	bl	8007e3c <Alcd_Clear>
				Alcd_PutAt(&lcd, 0, 0, "saved");
 8004b6e:	4862      	ldr	r0, [pc, #392]	@ (8004cf8 <main+0x4b88>)
 8004b70:	f003 f9b8 	bl	8007ee4 <Str_Len>
 8004b74:	4603      	mov	r3, r0
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	9300      	str	r3, [sp, #0]
 8004b7a:	4b5f      	ldr	r3, [pc, #380]	@ (8004cf8 <main+0x4b88>)
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	2100      	movs	r1, #0
 8004b80:	4857      	ldr	r0, [pc, #348]	@ (8004ce0 <main+0x4b70>)
 8004b82:	f003 f942 	bl	8007e0a <Alcd_PutAt_n>

				snprintf(timeString, sizeof(timeString), "ticks= %09d",
 8004b86:	f107 001c 	add.w	r0, r7, #28
 8004b8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b8c:	4a5b      	ldr	r2, [pc, #364]	@ (8004cfc <main+0x4b8c>)
 8004b8e:	2132      	movs	r1, #50	@ 0x32
 8004b90:	f006 fc28 	bl	800b3e4 <sniprintf>
						dosing_tick);
				Alcd_PutAt_n(&lcd, 1, 0, timeString, strlen(timeString));
 8004b94:	f107 031c 	add.w	r3, r7, #28
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f7fb fae1 	bl	8000160 <strlen>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	f107 021c 	add.w	r2, r7, #28
 8004ba6:	9300      	str	r3, [sp, #0]
 8004ba8:	4613      	mov	r3, r2
 8004baa:	2200      	movs	r2, #0
 8004bac:	2101      	movs	r1, #1
 8004bae:	484c      	ldr	r0, [pc, #304]	@ (8004ce0 <main+0x4b70>)
 8004bb0:	f003 f92b 	bl	8007e0a <Alcd_PutAt_n>

				// Writing the ticks to the EEPROM
				eeprom24c32_write(&memory, dosing_tick, dosing_period);
 8004bb4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	4a51      	ldr	r2, [pc, #324]	@ (8004d00 <main+0x4b90>)
 8004bba:	b292      	uxth	r2, r2
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	4851      	ldr	r0, [pc, #324]	@ (8004d04 <main+0x4b94>)
 8004bc0:	f002 fd50 	bl	8007664 <eeprom24c32_write>

				// Set general_delay to 1000ms after the current tick
				general_delay = current_tick + 1000;
 8004bc4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004bc6:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8004bca:	65bb      	str	r3, [r7, #88]	@ 0x58

				// Set the status
				status = 21;
 8004bcc:	2315      	movs	r3, #21
 8004bce:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
		while ((status == 42) && (current_tick >= general_delay)) {
 8004bd2:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8004bd6:	2b2a      	cmp	r3, #42	@ 0x2a
 8004bd8:	f040 80b0 	bne.w	8004d3c <main+0x4bcc>
 8004bdc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004bde:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d2ab      	bcs.n	8004b3c <main+0x49cc>
			}
		}

		//edit parameters state 23
		while ((status == 23) && (current_tick >= general_delay)) {
 8004be4:	e0aa      	b.n	8004d3c <main+0x4bcc>

			//get the current tick number
			current_tick = HAL_GetTick();
 8004be6:	f003 fae3 	bl	80081b0 <HAL_GetTick>
 8004bea:	6638      	str	r0, [r7, #96]	@ 0x60

			Alcd_Clear(&lcd);
 8004bec:	483c      	ldr	r0, [pc, #240]	@ (8004ce0 <main+0x4b70>)
 8004bee:	f003 f925 	bl	8007e3c <Alcd_Clear>
			Alcd_PutAt(&lcd, 0, 0, "1: doses no.");
 8004bf2:	4845      	ldr	r0, [pc, #276]	@ (8004d08 <main+0x4b98>)
 8004bf4:	f003 f976 	bl	8007ee4 <Str_Len>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	9300      	str	r3, [sp, #0]
 8004bfe:	4b42      	ldr	r3, [pc, #264]	@ (8004d08 <main+0x4b98>)
 8004c00:	2200      	movs	r2, #0
 8004c02:	2100      	movs	r1, #0
 8004c04:	4836      	ldr	r0, [pc, #216]	@ (8004ce0 <main+0x4b70>)
 8004c06:	f003 f900 	bl	8007e0a <Alcd_PutAt_n>
			Alcd_PutAt(&lcd, 1, 0, "2: dosing hour");
 8004c0a:	4840      	ldr	r0, [pc, #256]	@ (8004d0c <main+0x4b9c>)
 8004c0c:	f003 f96a 	bl	8007ee4 <Str_Len>
 8004c10:	4603      	mov	r3, r0
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	9300      	str	r3, [sp, #0]
 8004c16:	4b3d      	ldr	r3, [pc, #244]	@ (8004d0c <main+0x4b9c>)
 8004c18:	2200      	movs	r2, #0
 8004c1a:	2101      	movs	r1, #1
 8004c1c:	4830      	ldr	r0, [pc, #192]	@ (8004ce0 <main+0x4b70>)
 8004c1e:	f003 f8f4 	bl	8007e0a <Alcd_PutAt_n>
			snprintf(timeString, sizeof(timeString), "%02d", status);
 8004c22:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8004c26:	f107 001c 	add.w	r0, r7, #28
 8004c2a:	4a30      	ldr	r2, [pc, #192]	@ (8004cec <main+0x4b7c>)
 8004c2c:	2132      	movs	r1, #50	@ 0x32
 8004c2e:	f006 fbd9 	bl	800b3e4 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 8004c32:	f107 031c 	add.w	r3, r7, #28
 8004c36:	4618      	mov	r0, r3
 8004c38:	f7fb fa92 	bl	8000160 <strlen>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	f107 021c 	add.w	r2, r7, #28
 8004c44:	9300      	str	r3, [sp, #0]
 8004c46:	4613      	mov	r3, r2
 8004c48:	220e      	movs	r2, #14
 8004c4a:	2100      	movs	r1, #0
 8004c4c:	4824      	ldr	r0, [pc, #144]	@ (8004ce0 <main+0x4b70>)
 8004c4e:	f003 f8dc 	bl	8007e0a <Alcd_PutAt_n>
			Alcd_Display_Control(&lcd, 1, 0, 0);
 8004c52:	2300      	movs	r3, #0
 8004c54:	2200      	movs	r2, #0
 8004c56:	2101      	movs	r1, #1
 8004c58:	4821      	ldr	r0, [pc, #132]	@ (8004ce0 <main+0x4b70>)
 8004c5a:	f003 f900 	bl	8007e5e <Alcd_Display_Control>
			Alcd_CursorAt(&lcd, 1, 0);
 8004c5e:	2200      	movs	r2, #0
 8004c60:	2101      	movs	r1, #1
 8004c62:	481f      	ldr	r0, [pc, #124]	@ (8004ce0 <main+0x4b70>)
 8004c64:	f003 f895 	bl	8007d92 <Alcd_CursorAt>

			//check if any button is pressed
			//check for any keypad input
			Keypad_Refresh(&kp);
 8004c68:	4821      	ldr	r0, [pc, #132]	@ (8004cf0 <main+0x4b80>)
 8004c6a:	f003 f995 	bl	8007f98 <Keypad_Refresh>

			//in case 1 is selected -> no. of doses (status 43)
			if (Keypad_Get_Key(&kp, kp_button_1)
 8004c6e:	2100      	movs	r1, #0
 8004c70:	481f      	ldr	r0, [pc, #124]	@ (8004cf0 <main+0x4b80>)
 8004c72:	f003 fa2d 	bl	80080d0 <Keypad_Get_Key>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d00a      	beq.n	8004c92 <main+0x4b22>
					&& (current_tick >= general_delay)) {
 8004c7c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004c7e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d306      	bcc.n	8004c92 <main+0x4b22>
				Alcd_Clear(&lcd);
 8004c84:	4816      	ldr	r0, [pc, #88]	@ (8004ce0 <main+0x4b70>)
 8004c86:	f003 f8d9 	bl	8007e3c <Alcd_Clear>

				status = 43;
 8004c8a:	232b      	movs	r3, #43	@ 0x2b
 8004c8c:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 8004c90:	e04f      	b.n	8004d32 <main+0x4bc2>

			}

			//2 is selected -> edit hour
			else if (Keypad_Get_Key(&kp, kp_button_2)
 8004c92:	2101      	movs	r1, #1
 8004c94:	4816      	ldr	r0, [pc, #88]	@ (8004cf0 <main+0x4b80>)
 8004c96:	f003 fa1b 	bl	80080d0 <Keypad_Get_Key>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d00a      	beq.n	8004cb6 <main+0x4b46>
					&& (current_tick >= general_delay)) {
 8004ca0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004ca2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d306      	bcc.n	8004cb6 <main+0x4b46>

				Alcd_Clear(&lcd);
 8004ca8:	480d      	ldr	r0, [pc, #52]	@ (8004ce0 <main+0x4b70>)
 8004caa:	f003 f8c7 	bl	8007e3c <Alcd_Clear>
				status = 44;
 8004cae:	232c      	movs	r3, #44	@ 0x2c
 8004cb0:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 8004cb4:	e03d      	b.n	8004d32 <main+0x4bc2>

			}

			//back is selected
			else if (Keypad_Get_Key(&kp, kp_button_no_back)
 8004cb6:	210e      	movs	r1, #14
 8004cb8:	480d      	ldr	r0, [pc, #52]	@ (8004cf0 <main+0x4b80>)
 8004cba:	f003 fa09 	bl	80080d0 <Keypad_Get_Key>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d025      	beq.n	8004d10 <main+0x4ba0>
					&& (current_tick >= general_delay)) {
 8004cc4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004cc6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d321      	bcc.n	8004d10 <main+0x4ba0>

				Alcd_Clear(&lcd);
 8004ccc:	4804      	ldr	r0, [pc, #16]	@ (8004ce0 <main+0x4b70>)
 8004cce:	f003 f8b5 	bl	8007e3c <Alcd_Clear>
				//save? menu
				status = 48;
 8004cd2:	2330      	movs	r3, #48	@ 0x30
 8004cd4:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 8004cd8:	e02b      	b.n	8004d32 <main+0x4bc2>
 8004cda:	bf00      	nop
 8004cdc:	40012c00 	.word	0x40012c00
 8004ce0:	2000001c 	.word	0x2000001c
 8004ce4:	0800bf1c 	.word	0x0800bf1c
 8004ce8:	0800bf2c 	.word	0x0800bf2c
 8004cec:	0800bdac 	.word	0x0800bdac
 8004cf0:	20000000 	.word	0x20000000
 8004cf4:	0800bf3c 	.word	0x0800bf3c
 8004cf8:	0800bf48 	.word	0x0800bf48
 8004cfc:	0800bf50 	.word	0x0800bf50
 8004d00:	20000184 	.word	0x20000184
 8004d04:	20000168 	.word	0x20000168
 8004d08:	0800bf5c 	.word	0x0800bf5c
 8004d0c:	0800bf6c 	.word	0x0800bf6c

			}

			//next is selected
			else if (Keypad_Get_Key(&kp, kp_button_next)
 8004d10:	2103      	movs	r1, #3
 8004d12:	48a3      	ldr	r0, [pc, #652]	@ (8004fa0 <main+0x4e30>)
 8004d14:	f003 f9dc 	bl	80080d0 <Keypad_Get_Key>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d009      	beq.n	8004d32 <main+0x4bc2>
					&& (current_tick >= general_delay)) {
 8004d1e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004d20:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d305      	bcc.n	8004d32 <main+0x4bc2>

				Alcd_Clear(&lcd);
 8004d26:	489f      	ldr	r0, [pc, #636]	@ (8004fa4 <main+0x4e34>)
 8004d28:	f003 f888 	bl	8007e3c <Alcd_Clear>
				//go to extended parameters menu (state 49)
				status = 49;
 8004d2c:	2331      	movs	r3, #49	@ 0x31
 8004d2e:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

			}

			general_delay = HAL_GetTick() + 250;
 8004d32:	f003 fa3d 	bl	80081b0 <HAL_GetTick>
 8004d36:	4603      	mov	r3, r0
 8004d38:	33fa      	adds	r3, #250	@ 0xfa
 8004d3a:	65bb      	str	r3, [r7, #88]	@ 0x58
		while ((status == 23) && (current_tick >= general_delay)) {
 8004d3c:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8004d40:	2b17      	cmp	r3, #23
 8004d42:	f040 8371 	bne.w	8005428 <main+0x52b8>
 8004d46:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004d48:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	f4bf af4b 	bcs.w	8004be6 <main+0x4a76>
		}

		//enter no. of doses (state 43)
		while ((status == 43) && (current_tick >= general_delay)) {
 8004d50:	e36a      	b.n	8005428 <main+0x52b8>

			//get the current tick number
			current_tick = HAL_GetTick();
 8004d52:	f003 fa2d 	bl	80081b0 <HAL_GetTick>
 8004d56:	6638      	str	r0, [r7, #96]	@ 0x60

			Alcd_PutAt(&lcd, 0, 0, "doses no.?");
 8004d58:	4893      	ldr	r0, [pc, #588]	@ (8004fa8 <main+0x4e38>)
 8004d5a:	f003 f8c3 	bl	8007ee4 <Str_Len>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	9300      	str	r3, [sp, #0]
 8004d64:	4b90      	ldr	r3, [pc, #576]	@ (8004fa8 <main+0x4e38>)
 8004d66:	2200      	movs	r2, #0
 8004d68:	2100      	movs	r1, #0
 8004d6a:	488e      	ldr	r0, [pc, #568]	@ (8004fa4 <main+0x4e34>)
 8004d6c:	f003 f84d 	bl	8007e0a <Alcd_PutAt_n>
			snprintf(timeString, sizeof(timeString), "%02d", status);
 8004d70:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8004d74:	f107 001c 	add.w	r0, r7, #28
 8004d78:	4a8c      	ldr	r2, [pc, #560]	@ (8004fac <main+0x4e3c>)
 8004d7a:	2132      	movs	r1, #50	@ 0x32
 8004d7c:	f006 fb32 	bl	800b3e4 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 8004d80:	f107 031c 	add.w	r3, r7, #28
 8004d84:	4618      	mov	r0, r3
 8004d86:	f7fb f9eb 	bl	8000160 <strlen>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	f107 021c 	add.w	r2, r7, #28
 8004d92:	9300      	str	r3, [sp, #0]
 8004d94:	4613      	mov	r3, r2
 8004d96:	220e      	movs	r2, #14
 8004d98:	2100      	movs	r1, #0
 8004d9a:	4882      	ldr	r0, [pc, #520]	@ (8004fa4 <main+0x4e34>)
 8004d9c:	f003 f835 	bl	8007e0a <Alcd_PutAt_n>

			Alcd_CursorAt(&lcd, 1, input_index);
 8004da0:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8004da4:	461a      	mov	r2, r3
 8004da6:	2101      	movs	r1, #1
 8004da8:	487e      	ldr	r0, [pc, #504]	@ (8004fa4 <main+0x4e34>)
 8004daa:	f002 fff2 	bl	8007d92 <Alcd_CursorAt>
			Alcd_Display_Control(&lcd, 1, 1, 1);
 8004dae:	2301      	movs	r3, #1
 8004db0:	2201      	movs	r2, #1
 8004db2:	2101      	movs	r1, #1
 8004db4:	487b      	ldr	r0, [pc, #492]	@ (8004fa4 <main+0x4e34>)
 8004db6:	f003 f852 	bl	8007e5e <Alcd_Display_Control>

			Keypad_Refresh(&kp);
 8004dba:	4879      	ldr	r0, [pc, #484]	@ (8004fa0 <main+0x4e30>)
 8004dbc:	f003 f8ec 	bl	8007f98 <Keypad_Refresh>

			//in case back is selected
			if (Keypad_Get_Key(&kp, kp_button_no_back)
 8004dc0:	210e      	movs	r1, #14
 8004dc2:	4877      	ldr	r0, [pc, #476]	@ (8004fa0 <main+0x4e30>)
 8004dc4:	f003 f984 	bl	80080d0 <Keypad_Get_Key>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00a      	beq.n	8004de4 <main+0x4c74>
					&& (current_tick >= general_delay)) {
 8004dce:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004dd0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d306      	bcc.n	8004de4 <main+0x4c74>

				input_index = 0;  // Reset input index
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55

				//back to previous menu
				status = 23;
 8004ddc:	2317      	movs	r3, #23
 8004dde:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 8004de2:	e321      	b.n	8005428 <main+0x52b8>

			}

			//if 0 is pressed
			else if (Keypad_Get_Key(&kp, kp_button_0)
 8004de4:	210d      	movs	r1, #13
 8004de6:	486e      	ldr	r0, [pc, #440]	@ (8004fa0 <main+0x4e30>)
 8004de8:	f003 f972 	bl	80080d0 <Keypad_Get_Key>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d042      	beq.n	8004e78 <main+0x4d08>
					&& (current_tick >= general_delay)) {
 8004df2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004df4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d33e      	bcc.n	8004e78 <main+0x4d08>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	2101      	movs	r1, #1
 8004e00:	4868      	ldr	r0, [pc, #416]	@ (8004fa4 <main+0x4e34>)
 8004e02:	f003 f82c 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered password
				if (input_index < 2) {
 8004e06:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d827      	bhi.n	8004e5e <main+0x4cee>
					entered_password[input_index] = '0';
 8004e0e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8004e12:	3368      	adds	r3, #104	@ 0x68
 8004e14:	443b      	add	r3, r7
 8004e16:	2230      	movs	r2, #48	@ 0x30
 8004e18:	f803 2c5c 	strb.w	r2, [r3, #-92]
					entered_password[input_index + 1] = '\0'; // Null-terminate the string
 8004e1c:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8004e20:	3301      	adds	r3, #1
 8004e22:	3368      	adds	r3, #104	@ 0x68
 8004e24:	443b      	add	r3, r7
 8004e26:	2200      	movs	r2, #0
 8004e28:	f803 2c5c 	strb.w	r2, [r3, #-92]
					Alcd_PutAt(&lcd, 1, input_index, "0");
 8004e2c:	4860      	ldr	r0, [pc, #384]	@ (8004fb0 <main+0x4e40>)
 8004e2e:	f003 f859 	bl	8007ee4 <Str_Len>
 8004e32:	4603      	mov	r3, r0
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8004e3a:	9300      	str	r3, [sp, #0]
 8004e3c:	4b5c      	ldr	r3, [pc, #368]	@ (8004fb0 <main+0x4e40>)
 8004e3e:	2101      	movs	r1, #1
 8004e40:	4858      	ldr	r0, [pc, #352]	@ (8004fa4 <main+0x4e34>)
 8004e42:	f002 ffe2 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 8004e46:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8004e4a:	3301      	adds	r3, #1
 8004e4c:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8004e50:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8004e54:	461a      	mov	r2, r3
 8004e56:	2101      	movs	r1, #1
 8004e58:	4852      	ldr	r0, [pc, #328]	@ (8004fa4 <main+0x4e34>)
 8004e5a:	f002 ff9a 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8004e5e:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8004e62:	2301      	movs	r3, #1
 8004e64:	2101      	movs	r1, #1
 8004e66:	484f      	ldr	r0, [pc, #316]	@ (8004fa4 <main+0x4e34>)
 8004e68:	f002 fff9 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8004e6c:	f003 f9a0 	bl	80081b0 <HAL_GetTick>
 8004e70:	4603      	mov	r3, r0
 8004e72:	33fa      	adds	r3, #250	@ 0xfa
 8004e74:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004e76:	e2d7      	b.n	8005428 <main+0x52b8>
			}

			//if 1 is pressed
			else if (Keypad_Get_Key(&kp, kp_button_1)
 8004e78:	2100      	movs	r1, #0
 8004e7a:	4849      	ldr	r0, [pc, #292]	@ (8004fa0 <main+0x4e30>)
 8004e7c:	f003 f928 	bl	80080d0 <Keypad_Get_Key>
 8004e80:	4603      	mov	r3, r0
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d042      	beq.n	8004f0c <main+0x4d9c>
					&& (current_tick >= general_delay)) {
 8004e86:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004e88:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d33e      	bcc.n	8004f0c <main+0x4d9c>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8004e8e:	2300      	movs	r3, #0
 8004e90:	2200      	movs	r2, #0
 8004e92:	2101      	movs	r1, #1
 8004e94:	4843      	ldr	r0, [pc, #268]	@ (8004fa4 <main+0x4e34>)
 8004e96:	f002 ffe2 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered password
				if (input_index < 2) {
 8004e9a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d827      	bhi.n	8004ef2 <main+0x4d82>
					entered_password[input_index] = '1';
 8004ea2:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8004ea6:	3368      	adds	r3, #104	@ 0x68
 8004ea8:	443b      	add	r3, r7
 8004eaa:	2231      	movs	r2, #49	@ 0x31
 8004eac:	f803 2c5c 	strb.w	r2, [r3, #-92]
					entered_password[input_index + 1] = '\0'; // Null-terminate the string
 8004eb0:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8004eb4:	3301      	adds	r3, #1
 8004eb6:	3368      	adds	r3, #104	@ 0x68
 8004eb8:	443b      	add	r3, r7
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f803 2c5c 	strb.w	r2, [r3, #-92]
					Alcd_PutAt(&lcd, 1, input_index, "1");
 8004ec0:	483c      	ldr	r0, [pc, #240]	@ (8004fb4 <main+0x4e44>)
 8004ec2:	f003 f80f 	bl	8007ee4 <Str_Len>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8004ece:	9300      	str	r3, [sp, #0]
 8004ed0:	4b38      	ldr	r3, [pc, #224]	@ (8004fb4 <main+0x4e44>)
 8004ed2:	2101      	movs	r1, #1
 8004ed4:	4833      	ldr	r0, [pc, #204]	@ (8004fa4 <main+0x4e34>)
 8004ed6:	f002 ff98 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 8004eda:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8004ede:	3301      	adds	r3, #1
 8004ee0:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8004ee4:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8004ee8:	461a      	mov	r2, r3
 8004eea:	2101      	movs	r1, #1
 8004eec:	482d      	ldr	r0, [pc, #180]	@ (8004fa4 <main+0x4e34>)
 8004eee:	f002 ff50 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8004ef2:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	2101      	movs	r1, #1
 8004efa:	482a      	ldr	r0, [pc, #168]	@ (8004fa4 <main+0x4e34>)
 8004efc:	f002 ffaf 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8004f00:	f003 f956 	bl	80081b0 <HAL_GetTick>
 8004f04:	4603      	mov	r3, r0
 8004f06:	33fa      	adds	r3, #250	@ 0xfa
 8004f08:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004f0a:	e28d      	b.n	8005428 <main+0x52b8>
			}

			//if 2 is pressed
			else if (Keypad_Get_Key(&kp, kp_button_2)
 8004f0c:	2101      	movs	r1, #1
 8004f0e:	4824      	ldr	r0, [pc, #144]	@ (8004fa0 <main+0x4e30>)
 8004f10:	f003 f8de 	bl	80080d0 <Keypad_Get_Key>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d050      	beq.n	8004fbc <main+0x4e4c>
					&& (current_tick >= general_delay)) {
 8004f1a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004f1c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d34c      	bcc.n	8004fbc <main+0x4e4c>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8004f22:	2300      	movs	r3, #0
 8004f24:	2200      	movs	r2, #0
 8004f26:	2101      	movs	r1, #1
 8004f28:	481e      	ldr	r0, [pc, #120]	@ (8004fa4 <main+0x4e34>)
 8004f2a:	f002 ff98 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered password
				if (input_index < 2) {
 8004f2e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d827      	bhi.n	8004f86 <main+0x4e16>
					entered_password[input_index] = '2';
 8004f36:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8004f3a:	3368      	adds	r3, #104	@ 0x68
 8004f3c:	443b      	add	r3, r7
 8004f3e:	2232      	movs	r2, #50	@ 0x32
 8004f40:	f803 2c5c 	strb.w	r2, [r3, #-92]
					entered_password[input_index + 1] = '\0'; // Null-terminate the string
 8004f44:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8004f48:	3301      	adds	r3, #1
 8004f4a:	3368      	adds	r3, #104	@ 0x68
 8004f4c:	443b      	add	r3, r7
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f803 2c5c 	strb.w	r2, [r3, #-92]
					Alcd_PutAt(&lcd, 1, input_index, "2");
 8004f54:	4818      	ldr	r0, [pc, #96]	@ (8004fb8 <main+0x4e48>)
 8004f56:	f002 ffc5 	bl	8007ee4 <Str_Len>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8004f62:	9300      	str	r3, [sp, #0]
 8004f64:	4b14      	ldr	r3, [pc, #80]	@ (8004fb8 <main+0x4e48>)
 8004f66:	2101      	movs	r1, #1
 8004f68:	480e      	ldr	r0, [pc, #56]	@ (8004fa4 <main+0x4e34>)
 8004f6a:	f002 ff4e 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 8004f6e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8004f72:	3301      	adds	r3, #1
 8004f74:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8004f78:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	2101      	movs	r1, #1
 8004f80:	4808      	ldr	r0, [pc, #32]	@ (8004fa4 <main+0x4e34>)
 8004f82:	f002 ff06 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8004f86:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	2101      	movs	r1, #1
 8004f8e:	4805      	ldr	r0, [pc, #20]	@ (8004fa4 <main+0x4e34>)
 8004f90:	f002 ff65 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8004f94:	f003 f90c 	bl	80081b0 <HAL_GetTick>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	33fa      	adds	r3, #250	@ 0xfa
 8004f9c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004f9e:	e243      	b.n	8005428 <main+0x52b8>
 8004fa0:	20000000 	.word	0x20000000
 8004fa4:	2000001c 	.word	0x2000001c
 8004fa8:	0800bf7c 	.word	0x0800bf7c
 8004fac:	0800bdac 	.word	0x0800bdac
 8004fb0:	0800be9c 	.word	0x0800be9c
 8004fb4:	0800bea0 	.word	0x0800bea0
 8004fb8:	0800bea4 	.word	0x0800bea4
			}

			//if 3 is pressed
			else if (Keypad_Get_Key(&kp, kp_button_3)
 8004fbc:	2102      	movs	r1, #2
 8004fbe:	48b8      	ldr	r0, [pc, #736]	@ (80052a0 <main+0x5130>)
 8004fc0:	f003 f886 	bl	80080d0 <Keypad_Get_Key>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d042      	beq.n	8005050 <main+0x4ee0>
					&& (current_tick >= general_delay)) {
 8004fca:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004fcc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d33e      	bcc.n	8005050 <main+0x4ee0>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	2101      	movs	r1, #1
 8004fd8:	48b2      	ldr	r0, [pc, #712]	@ (80052a4 <main+0x5134>)
 8004fda:	f002 ff40 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered password
				if (input_index < 2) {
 8004fde:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d827      	bhi.n	8005036 <main+0x4ec6>
					entered_password[input_index] = '3';
 8004fe6:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8004fea:	3368      	adds	r3, #104	@ 0x68
 8004fec:	443b      	add	r3, r7
 8004fee:	2233      	movs	r2, #51	@ 0x33
 8004ff0:	f803 2c5c 	strb.w	r2, [r3, #-92]
					entered_password[input_index + 1] = '\0'; // Null-terminate the string
 8004ff4:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8004ff8:	3301      	adds	r3, #1
 8004ffa:	3368      	adds	r3, #104	@ 0x68
 8004ffc:	443b      	add	r3, r7
 8004ffe:	2200      	movs	r2, #0
 8005000:	f803 2c5c 	strb.w	r2, [r3, #-92]
					Alcd_PutAt(&lcd, 1, input_index, "3");
 8005004:	48a8      	ldr	r0, [pc, #672]	@ (80052a8 <main+0x5138>)
 8005006:	f002 ff6d 	bl	8007ee4 <Str_Len>
 800500a:	4603      	mov	r3, r0
 800500c:	b2db      	uxtb	r3, r3
 800500e:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8005012:	9300      	str	r3, [sp, #0]
 8005014:	4ba4      	ldr	r3, [pc, #656]	@ (80052a8 <main+0x5138>)
 8005016:	2101      	movs	r1, #1
 8005018:	48a2      	ldr	r0, [pc, #648]	@ (80052a4 <main+0x5134>)
 800501a:	f002 fef6 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 800501e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8005022:	3301      	adds	r3, #1
 8005024:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8005028:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800502c:	461a      	mov	r2, r3
 800502e:	2101      	movs	r1, #1
 8005030:	489c      	ldr	r0, [pc, #624]	@ (80052a4 <main+0x5134>)
 8005032:	f002 feae 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8005036:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 800503a:	2301      	movs	r3, #1
 800503c:	2101      	movs	r1, #1
 800503e:	4899      	ldr	r0, [pc, #612]	@ (80052a4 <main+0x5134>)
 8005040:	f002 ff0d 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8005044:	f003 f8b4 	bl	80081b0 <HAL_GetTick>
 8005048:	4603      	mov	r3, r0
 800504a:	33fa      	adds	r3, #250	@ 0xfa
 800504c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800504e:	e1eb      	b.n	8005428 <main+0x52b8>
			}
			//if 4 is pressed
			else if (Keypad_Get_Key(&kp, kp_button_4)
 8005050:	2104      	movs	r1, #4
 8005052:	4893      	ldr	r0, [pc, #588]	@ (80052a0 <main+0x5130>)
 8005054:	f003 f83c 	bl	80080d0 <Keypad_Get_Key>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d042      	beq.n	80050e4 <main+0x4f74>
					&& (current_tick >= general_delay)) {
 800505e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005060:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005062:	429a      	cmp	r2, r3
 8005064:	d33e      	bcc.n	80050e4 <main+0x4f74>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8005066:	2300      	movs	r3, #0
 8005068:	2200      	movs	r2, #0
 800506a:	2101      	movs	r1, #1
 800506c:	488d      	ldr	r0, [pc, #564]	@ (80052a4 <main+0x5134>)
 800506e:	f002 fef6 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered password
				if (input_index < 2) {
 8005072:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8005076:	2b01      	cmp	r3, #1
 8005078:	d827      	bhi.n	80050ca <main+0x4f5a>
					entered_password[input_index] = '4';
 800507a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800507e:	3368      	adds	r3, #104	@ 0x68
 8005080:	443b      	add	r3, r7
 8005082:	2234      	movs	r2, #52	@ 0x34
 8005084:	f803 2c5c 	strb.w	r2, [r3, #-92]
					entered_password[input_index + 1] = '\0'; // Null-terminate the string
 8005088:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800508c:	3301      	adds	r3, #1
 800508e:	3368      	adds	r3, #104	@ 0x68
 8005090:	443b      	add	r3, r7
 8005092:	2200      	movs	r2, #0
 8005094:	f803 2c5c 	strb.w	r2, [r3, #-92]
					Alcd_PutAt(&lcd, 1, input_index, "4");
 8005098:	4884      	ldr	r0, [pc, #528]	@ (80052ac <main+0x513c>)
 800509a:	f002 ff23 	bl	8007ee4 <Str_Len>
 800509e:	4603      	mov	r3, r0
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 80050a6:	9300      	str	r3, [sp, #0]
 80050a8:	4b80      	ldr	r3, [pc, #512]	@ (80052ac <main+0x513c>)
 80050aa:	2101      	movs	r1, #1
 80050ac:	487d      	ldr	r0, [pc, #500]	@ (80052a4 <main+0x5134>)
 80050ae:	f002 feac 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 80050b2:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80050b6:	3301      	adds	r3, #1
 80050b8:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 80050bc:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80050c0:	461a      	mov	r2, r3
 80050c2:	2101      	movs	r1, #1
 80050c4:	4877      	ldr	r0, [pc, #476]	@ (80052a4 <main+0x5134>)
 80050c6:	f002 fe64 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 80050ca:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 80050ce:	2301      	movs	r3, #1
 80050d0:	2101      	movs	r1, #1
 80050d2:	4874      	ldr	r0, [pc, #464]	@ (80052a4 <main+0x5134>)
 80050d4:	f002 fec3 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 80050d8:	f003 f86a 	bl	80081b0 <HAL_GetTick>
 80050dc:	4603      	mov	r3, r0
 80050de:	33fa      	adds	r3, #250	@ 0xfa
 80050e0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80050e2:	e1a1      	b.n	8005428 <main+0x52b8>
			}

			//if 5 is pressed
			else if (Keypad_Get_Key(&kp, kp_button_5)
 80050e4:	2105      	movs	r1, #5
 80050e6:	486e      	ldr	r0, [pc, #440]	@ (80052a0 <main+0x5130>)
 80050e8:	f002 fff2 	bl	80080d0 <Keypad_Get_Key>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d042      	beq.n	8005178 <main+0x5008>
					&& (current_tick >= general_delay)) {
 80050f2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80050f4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d33e      	bcc.n	8005178 <main+0x5008>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80050fa:	2300      	movs	r3, #0
 80050fc:	2200      	movs	r2, #0
 80050fe:	2101      	movs	r1, #1
 8005100:	4868      	ldr	r0, [pc, #416]	@ (80052a4 <main+0x5134>)
 8005102:	f002 feac 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered password
				if (input_index < 2) {
 8005106:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800510a:	2b01      	cmp	r3, #1
 800510c:	d827      	bhi.n	800515e <main+0x4fee>
					entered_password[input_index] = '5';
 800510e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8005112:	3368      	adds	r3, #104	@ 0x68
 8005114:	443b      	add	r3, r7
 8005116:	2235      	movs	r2, #53	@ 0x35
 8005118:	f803 2c5c 	strb.w	r2, [r3, #-92]
					entered_password[input_index + 1] = '\0'; // Null-terminate the string
 800511c:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8005120:	3301      	adds	r3, #1
 8005122:	3368      	adds	r3, #104	@ 0x68
 8005124:	443b      	add	r3, r7
 8005126:	2200      	movs	r2, #0
 8005128:	f803 2c5c 	strb.w	r2, [r3, #-92]
					Alcd_PutAt(&lcd, 1, input_index, "5");
 800512c:	4860      	ldr	r0, [pc, #384]	@ (80052b0 <main+0x5140>)
 800512e:	f002 fed9 	bl	8007ee4 <Str_Len>
 8005132:	4603      	mov	r3, r0
 8005134:	b2db      	uxtb	r3, r3
 8005136:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 800513a:	9300      	str	r3, [sp, #0]
 800513c:	4b5c      	ldr	r3, [pc, #368]	@ (80052b0 <main+0x5140>)
 800513e:	2101      	movs	r1, #1
 8005140:	4858      	ldr	r0, [pc, #352]	@ (80052a4 <main+0x5134>)
 8005142:	f002 fe62 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 8005146:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800514a:	3301      	adds	r3, #1
 800514c:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8005150:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8005154:	461a      	mov	r2, r3
 8005156:	2101      	movs	r1, #1
 8005158:	4852      	ldr	r0, [pc, #328]	@ (80052a4 <main+0x5134>)
 800515a:	f002 fe1a 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 800515e:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8005162:	2301      	movs	r3, #1
 8005164:	2101      	movs	r1, #1
 8005166:	484f      	ldr	r0, [pc, #316]	@ (80052a4 <main+0x5134>)
 8005168:	f002 fe79 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 800516c:	f003 f820 	bl	80081b0 <HAL_GetTick>
 8005170:	4603      	mov	r3, r0
 8005172:	33fa      	adds	r3, #250	@ 0xfa
 8005174:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005176:	e157      	b.n	8005428 <main+0x52b8>
			}

			//if 6 is pressed
			else if (Keypad_Get_Key(&kp, kp_button_6)
 8005178:	2106      	movs	r1, #6
 800517a:	4849      	ldr	r0, [pc, #292]	@ (80052a0 <main+0x5130>)
 800517c:	f002 ffa8 	bl	80080d0 <Keypad_Get_Key>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d042      	beq.n	800520c <main+0x509c>
					&& (current_tick >= general_delay)) {
 8005186:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005188:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800518a:	429a      	cmp	r2, r3
 800518c:	d33e      	bcc.n	800520c <main+0x509c>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 800518e:	2300      	movs	r3, #0
 8005190:	2200      	movs	r2, #0
 8005192:	2101      	movs	r1, #1
 8005194:	4843      	ldr	r0, [pc, #268]	@ (80052a4 <main+0x5134>)
 8005196:	f002 fe62 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered password
				if (input_index < 2) {
 800519a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d827      	bhi.n	80051f2 <main+0x5082>
					entered_password[input_index] = '6';
 80051a2:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80051a6:	3368      	adds	r3, #104	@ 0x68
 80051a8:	443b      	add	r3, r7
 80051aa:	2236      	movs	r2, #54	@ 0x36
 80051ac:	f803 2c5c 	strb.w	r2, [r3, #-92]
					entered_password[input_index + 1] = '\0'; // Null-terminate the string
 80051b0:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80051b4:	3301      	adds	r3, #1
 80051b6:	3368      	adds	r3, #104	@ 0x68
 80051b8:	443b      	add	r3, r7
 80051ba:	2200      	movs	r2, #0
 80051bc:	f803 2c5c 	strb.w	r2, [r3, #-92]
					Alcd_PutAt(&lcd, 1, input_index, "6");
 80051c0:	483c      	ldr	r0, [pc, #240]	@ (80052b4 <main+0x5144>)
 80051c2:	f002 fe8f 	bl	8007ee4 <Str_Len>
 80051c6:	4603      	mov	r3, r0
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 80051ce:	9300      	str	r3, [sp, #0]
 80051d0:	4b38      	ldr	r3, [pc, #224]	@ (80052b4 <main+0x5144>)
 80051d2:	2101      	movs	r1, #1
 80051d4:	4833      	ldr	r0, [pc, #204]	@ (80052a4 <main+0x5134>)
 80051d6:	f002 fe18 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 80051da:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80051de:	3301      	adds	r3, #1
 80051e0:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 80051e4:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80051e8:	461a      	mov	r2, r3
 80051ea:	2101      	movs	r1, #1
 80051ec:	482d      	ldr	r0, [pc, #180]	@ (80052a4 <main+0x5134>)
 80051ee:	f002 fdd0 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 80051f2:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 80051f6:	2301      	movs	r3, #1
 80051f8:	2101      	movs	r1, #1
 80051fa:	482a      	ldr	r0, [pc, #168]	@ (80052a4 <main+0x5134>)
 80051fc:	f002 fe2f 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8005200:	f002 ffd6 	bl	80081b0 <HAL_GetTick>
 8005204:	4603      	mov	r3, r0
 8005206:	33fa      	adds	r3, #250	@ 0xfa
 8005208:	65bb      	str	r3, [r7, #88]	@ 0x58
 800520a:	e10d      	b.n	8005428 <main+0x52b8>
			}
			//if 7 is pressed
			else if (Keypad_Get_Key(&kp, kp_button_7)
 800520c:	2108      	movs	r1, #8
 800520e:	4824      	ldr	r0, [pc, #144]	@ (80052a0 <main+0x5130>)
 8005210:	f002 ff5e 	bl	80080d0 <Keypad_Get_Key>
 8005214:	4603      	mov	r3, r0
 8005216:	2b00      	cmp	r3, #0
 8005218:	d050      	beq.n	80052bc <main+0x514c>
					&& (current_tick >= general_delay)) {
 800521a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800521c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800521e:	429a      	cmp	r2, r3
 8005220:	d34c      	bcc.n	80052bc <main+0x514c>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8005222:	2300      	movs	r3, #0
 8005224:	2200      	movs	r2, #0
 8005226:	2101      	movs	r1, #1
 8005228:	481e      	ldr	r0, [pc, #120]	@ (80052a4 <main+0x5134>)
 800522a:	f002 fe18 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered password
				if (input_index < 2) {
 800522e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8005232:	2b01      	cmp	r3, #1
 8005234:	d827      	bhi.n	8005286 <main+0x5116>
					entered_password[input_index] = '7';
 8005236:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800523a:	3368      	adds	r3, #104	@ 0x68
 800523c:	443b      	add	r3, r7
 800523e:	2237      	movs	r2, #55	@ 0x37
 8005240:	f803 2c5c 	strb.w	r2, [r3, #-92]
					entered_password[input_index + 1] = '\0'; // Null-terminate the string
 8005244:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8005248:	3301      	adds	r3, #1
 800524a:	3368      	adds	r3, #104	@ 0x68
 800524c:	443b      	add	r3, r7
 800524e:	2200      	movs	r2, #0
 8005250:	f803 2c5c 	strb.w	r2, [r3, #-92]
					Alcd_PutAt(&lcd, 1, input_index, "7");
 8005254:	4818      	ldr	r0, [pc, #96]	@ (80052b8 <main+0x5148>)
 8005256:	f002 fe45 	bl	8007ee4 <Str_Len>
 800525a:	4603      	mov	r3, r0
 800525c:	b2db      	uxtb	r3, r3
 800525e:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8005262:	9300      	str	r3, [sp, #0]
 8005264:	4b14      	ldr	r3, [pc, #80]	@ (80052b8 <main+0x5148>)
 8005266:	2101      	movs	r1, #1
 8005268:	480e      	ldr	r0, [pc, #56]	@ (80052a4 <main+0x5134>)
 800526a:	f002 fdce 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 800526e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8005272:	3301      	adds	r3, #1
 8005274:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8005278:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800527c:	461a      	mov	r2, r3
 800527e:	2101      	movs	r1, #1
 8005280:	4808      	ldr	r0, [pc, #32]	@ (80052a4 <main+0x5134>)
 8005282:	f002 fd86 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8005286:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 800528a:	2301      	movs	r3, #1
 800528c:	2101      	movs	r1, #1
 800528e:	4805      	ldr	r0, [pc, #20]	@ (80052a4 <main+0x5134>)
 8005290:	f002 fde5 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8005294:	f002 ff8c 	bl	80081b0 <HAL_GetTick>
 8005298:	4603      	mov	r3, r0
 800529a:	33fa      	adds	r3, #250	@ 0xfa
 800529c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800529e:	e0c3      	b.n	8005428 <main+0x52b8>
 80052a0:	20000000 	.word	0x20000000
 80052a4:	2000001c 	.word	0x2000001c
 80052a8:	0800bea8 	.word	0x0800bea8
 80052ac:	0800beac 	.word	0x0800beac
 80052b0:	0800beb0 	.word	0x0800beb0
 80052b4:	0800beb4 	.word	0x0800beb4
 80052b8:	0800beb8 	.word	0x0800beb8
			}
			//if 8 is pressed
			else if (Keypad_Get_Key(&kp, kp_button_8)
 80052bc:	2109      	movs	r1, #9
 80052be:	48ad      	ldr	r0, [pc, #692]	@ (8005574 <main+0x5404>)
 80052c0:	f002 ff06 	bl	80080d0 <Keypad_Get_Key>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d042      	beq.n	8005350 <main+0x51e0>
					&& (current_tick >= general_delay)) {
 80052ca:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80052cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d33e      	bcc.n	8005350 <main+0x51e0>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80052d2:	2300      	movs	r3, #0
 80052d4:	2200      	movs	r2, #0
 80052d6:	2101      	movs	r1, #1
 80052d8:	48a7      	ldr	r0, [pc, #668]	@ (8005578 <main+0x5408>)
 80052da:	f002 fdc0 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered password
				if (input_index < 2) {
 80052de:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d827      	bhi.n	8005336 <main+0x51c6>
					entered_password[input_index] = '8';
 80052e6:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80052ea:	3368      	adds	r3, #104	@ 0x68
 80052ec:	443b      	add	r3, r7
 80052ee:	2238      	movs	r2, #56	@ 0x38
 80052f0:	f803 2c5c 	strb.w	r2, [r3, #-92]
					entered_password[input_index + 1] = '\0'; // Null-terminate the string
 80052f4:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80052f8:	3301      	adds	r3, #1
 80052fa:	3368      	adds	r3, #104	@ 0x68
 80052fc:	443b      	add	r3, r7
 80052fe:	2200      	movs	r2, #0
 8005300:	f803 2c5c 	strb.w	r2, [r3, #-92]
					Alcd_PutAt(&lcd, 1, input_index, "8");
 8005304:	489d      	ldr	r0, [pc, #628]	@ (800557c <main+0x540c>)
 8005306:	f002 fded 	bl	8007ee4 <Str_Len>
 800530a:	4603      	mov	r3, r0
 800530c:	b2db      	uxtb	r3, r3
 800530e:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8005312:	9300      	str	r3, [sp, #0]
 8005314:	4b99      	ldr	r3, [pc, #612]	@ (800557c <main+0x540c>)
 8005316:	2101      	movs	r1, #1
 8005318:	4897      	ldr	r0, [pc, #604]	@ (8005578 <main+0x5408>)
 800531a:	f002 fd76 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 800531e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8005322:	3301      	adds	r3, #1
 8005324:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8005328:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800532c:	461a      	mov	r2, r3
 800532e:	2101      	movs	r1, #1
 8005330:	4891      	ldr	r0, [pc, #580]	@ (8005578 <main+0x5408>)
 8005332:	f002 fd2e 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8005336:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 800533a:	2301      	movs	r3, #1
 800533c:	2101      	movs	r1, #1
 800533e:	488e      	ldr	r0, [pc, #568]	@ (8005578 <main+0x5408>)
 8005340:	f002 fd8d 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8005344:	f002 ff34 	bl	80081b0 <HAL_GetTick>
 8005348:	4603      	mov	r3, r0
 800534a:	33fa      	adds	r3, #250	@ 0xfa
 800534c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800534e:	e06b      	b.n	8005428 <main+0x52b8>
			}
			//if 9 is pressed
			else if (Keypad_Get_Key(&kp, kp_button_9)
 8005350:	210a      	movs	r1, #10
 8005352:	4888      	ldr	r0, [pc, #544]	@ (8005574 <main+0x5404>)
 8005354:	f002 febc 	bl	80080d0 <Keypad_Get_Key>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d042      	beq.n	80053e4 <main+0x5274>
					&& (current_tick >= general_delay)) {
 800535e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005360:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005362:	429a      	cmp	r2, r3
 8005364:	d33e      	bcc.n	80053e4 <main+0x5274>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8005366:	2300      	movs	r3, #0
 8005368:	2200      	movs	r2, #0
 800536a:	2101      	movs	r1, #1
 800536c:	4882      	ldr	r0, [pc, #520]	@ (8005578 <main+0x5408>)
 800536e:	f002 fd76 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered password
				if (input_index < 2) {
 8005372:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8005376:	2b01      	cmp	r3, #1
 8005378:	d827      	bhi.n	80053ca <main+0x525a>
					entered_password[input_index] = '9';
 800537a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800537e:	3368      	adds	r3, #104	@ 0x68
 8005380:	443b      	add	r3, r7
 8005382:	2239      	movs	r2, #57	@ 0x39
 8005384:	f803 2c5c 	strb.w	r2, [r3, #-92]
					entered_password[input_index + 1] = '\0'; // Null-terminate the string
 8005388:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800538c:	3301      	adds	r3, #1
 800538e:	3368      	adds	r3, #104	@ 0x68
 8005390:	443b      	add	r3, r7
 8005392:	2200      	movs	r2, #0
 8005394:	f803 2c5c 	strb.w	r2, [r3, #-92]
					Alcd_PutAt(&lcd, 1, input_index, "9");
 8005398:	4879      	ldr	r0, [pc, #484]	@ (8005580 <main+0x5410>)
 800539a:	f002 fda3 	bl	8007ee4 <Str_Len>
 800539e:	4603      	mov	r3, r0
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 80053a6:	9300      	str	r3, [sp, #0]
 80053a8:	4b75      	ldr	r3, [pc, #468]	@ (8005580 <main+0x5410>)
 80053aa:	2101      	movs	r1, #1
 80053ac:	4872      	ldr	r0, [pc, #456]	@ (8005578 <main+0x5408>)
 80053ae:	f002 fd2c 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 80053b2:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80053b6:	3301      	adds	r3, #1
 80053b8:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 80053bc:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80053c0:	461a      	mov	r2, r3
 80053c2:	2101      	movs	r1, #1
 80053c4:	486c      	ldr	r0, [pc, #432]	@ (8005578 <main+0x5408>)
 80053c6:	f002 fce4 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 80053ca:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 80053ce:	2301      	movs	r3, #1
 80053d0:	2101      	movs	r1, #1
 80053d2:	4869      	ldr	r0, [pc, #420]	@ (8005578 <main+0x5408>)
 80053d4:	f002 fd43 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 80053d8:	f002 feea 	bl	80081b0 <HAL_GetTick>
 80053dc:	4603      	mov	r3, r0
 80053de:	33fa      	adds	r3, #250	@ 0xfa
 80053e0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80053e2:	e021      	b.n	8005428 <main+0x52b8>
			}

			//if yes is pressed
			else if (Keypad_Get_Key(&kp, kp_button_yes)
 80053e4:	210f      	movs	r1, #15
 80053e6:	4863      	ldr	r0, [pc, #396]	@ (8005574 <main+0x5404>)
 80053e8:	f002 fe72 	bl	80080d0 <Keypad_Get_Key>
 80053ec:	4603      	mov	r3, r0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d01a      	beq.n	8005428 <main+0x52b8>
					&& (current_tick >= general_delay)) {
 80053f2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80053f4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d316      	bcc.n	8005428 <main+0x52b8>

				//convert the string into integer
				buffer = atoi(entered_password);
 80053fa:	f107 030c 	add.w	r3, r7, #12
 80053fe:	4618      	mov	r0, r3
 8005400:	f005 ff67 	bl	800b2d2 <atoi>
 8005404:	4603      	mov	r3, r0
 8005406:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56

				//write the value to eeprom
				eeprom24c32_write(&memory, buffer, doses_number);
 800540a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800540e:	b2db      	uxtb	r3, r3
 8005410:	4a5c      	ldr	r2, [pc, #368]	@ (8005584 <main+0x5414>)
 8005412:	b292      	uxth	r2, r2
 8005414:	4619      	mov	r1, r3
 8005416:	485c      	ldr	r0, [pc, #368]	@ (8005588 <main+0x5418>)
 8005418:	f002 f924 	bl	8007664 <eeprom24c32_write>

				input_index = 0;
 800541c:	2300      	movs	r3, #0
 800541e:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55

				//return to the previous menu
				status = 23;
 8005422:	2317      	movs	r3, #23
 8005424:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
		while ((status == 43) && (current_tick >= general_delay)) {
 8005428:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 800542c:	2b2b      	cmp	r3, #43	@ 0x2b
 800542e:	f040 8095 	bne.w	800555c <main+0x53ec>
 8005432:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005434:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005436:	429a      	cmp	r2, r3
 8005438:	f4bf ac8b 	bcs.w	8004d52 <main+0x4be2>
			}
		}

		//time entry state 44
		while ((status == 44) && (current_tick >= general_delay)) {
 800543c:	e08e      	b.n	800555c <main+0x53ec>

			//get the current tick number
			current_tick = HAL_GetTick();
 800543e:	f002 feb7 	bl	80081b0 <HAL_GetTick>
 8005442:	6638      	str	r0, [r7, #96]	@ 0x60

			Alcd_Clear(&lcd);
 8005444:	484c      	ldr	r0, [pc, #304]	@ (8005578 <main+0x5408>)
 8005446:	f002 fcf9 	bl	8007e3c <Alcd_Clear>
			snprintf(timeString, sizeof(timeString), "%02d", status);
 800544a:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 800544e:	f107 001c 	add.w	r0, r7, #28
 8005452:	4a4e      	ldr	r2, [pc, #312]	@ (800558c <main+0x541c>)
 8005454:	2132      	movs	r1, #50	@ 0x32
 8005456:	f005 ffc5 	bl	800b3e4 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 800545a:	f107 031c 	add.w	r3, r7, #28
 800545e:	4618      	mov	r0, r3
 8005460:	f7fa fe7e 	bl	8000160 <strlen>
 8005464:	4603      	mov	r3, r0
 8005466:	b2db      	uxtb	r3, r3
 8005468:	f107 021c 	add.w	r2, r7, #28
 800546c:	9300      	str	r3, [sp, #0]
 800546e:	4613      	mov	r3, r2
 8005470:	220e      	movs	r2, #14
 8005472:	2100      	movs	r1, #0
 8005474:	4840      	ldr	r0, [pc, #256]	@ (8005578 <main+0x5408>)
 8005476:	f002 fcc8 	bl	8007e0a <Alcd_PutAt_n>

			//check if the time format is 12h or 24h
			//in case 12h
			if (CLK.format == 1) {
 800547a:	4b45      	ldr	r3, [pc, #276]	@ (8005590 <main+0x5420>)
 800547c:	7c5b      	ldrb	r3, [r3, #17]
 800547e:	f003 0301 	and.w	r3, r3, #1
 8005482:	b2db      	uxtb	r3, r3
 8005484:	2b00      	cmp	r3, #0
 8005486:	d05a      	beq.n	800553e <main+0x53ce>

				Alcd_PutAt(&lcd, 0, 0, "select time");
 8005488:	4842      	ldr	r0, [pc, #264]	@ (8005594 <main+0x5424>)
 800548a:	f002 fd2b 	bl	8007ee4 <Str_Len>
 800548e:	4603      	mov	r3, r0
 8005490:	b2db      	uxtb	r3, r3
 8005492:	9300      	str	r3, [sp, #0]
 8005494:	4b3f      	ldr	r3, [pc, #252]	@ (8005594 <main+0x5424>)
 8005496:	2200      	movs	r2, #0
 8005498:	2100      	movs	r1, #0
 800549a:	4837      	ldr	r0, [pc, #220]	@ (8005578 <main+0x5408>)
 800549c:	f002 fcb5 	bl	8007e0a <Alcd_PutAt_n>
				Alcd_PutAt(&lcd, 1, 0, "1: AM   2: PM");
 80054a0:	483d      	ldr	r0, [pc, #244]	@ (8005598 <main+0x5428>)
 80054a2:	f002 fd1f 	bl	8007ee4 <Str_Len>
 80054a6:	4603      	mov	r3, r0
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	9300      	str	r3, [sp, #0]
 80054ac:	4b3a      	ldr	r3, [pc, #232]	@ (8005598 <main+0x5428>)
 80054ae:	2200      	movs	r2, #0
 80054b0:	2101      	movs	r1, #1
 80054b2:	4831      	ldr	r0, [pc, #196]	@ (8005578 <main+0x5408>)
 80054b4:	f002 fca9 	bl	8007e0a <Alcd_PutAt_n>

				//check for any keypad input
				Keypad_Refresh(&kp);
 80054b8:	482e      	ldr	r0, [pc, #184]	@ (8005574 <main+0x5404>)
 80054ba:	f002 fd6d 	bl	8007f98 <Keypad_Refresh>

				//in case 1 is selected -> AM
				if (Keypad_Get_Key(&kp, kp_button_1)
 80054be:	2100      	movs	r1, #0
 80054c0:	482c      	ldr	r0, [pc, #176]	@ (8005574 <main+0x5404>)
 80054c2:	f002 fe05 	bl	80080d0 <Keypad_Get_Key>
 80054c6:	4603      	mov	r3, r0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d00f      	beq.n	80054ec <main+0x537c>
						&& (current_tick >= general_delay)) {
 80054cc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80054ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d30b      	bcc.n	80054ec <main+0x537c>
					CLK.AM_PM = 0;
 80054d4:	4a2e      	ldr	r2, [pc, #184]	@ (8005590 <main+0x5420>)
 80054d6:	7c53      	ldrb	r3, [r2, #17]
 80054d8:	f36f 0341 	bfc	r3, #1, #1
 80054dc:	7453      	strb	r3, [r2, #17]

					Alcd_Clear(&lcd);
 80054de:	4826      	ldr	r0, [pc, #152]	@ (8005578 <main+0x5408>)
 80054e0:	f002 fcac 	bl	8007e3c <Alcd_Clear>

					status = 46;
 80054e4:	232e      	movs	r3, #46	@ 0x2e
 80054e6:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 80054ea:	e032      	b.n	8005552 <main+0x53e2>

				}

				//2 is selected -> PM
				else if (Keypad_Get_Key(&kp, kp_button_2)
 80054ec:	2101      	movs	r1, #1
 80054ee:	4821      	ldr	r0, [pc, #132]	@ (8005574 <main+0x5404>)
 80054f0:	f002 fdee 	bl	80080d0 <Keypad_Get_Key>
 80054f4:	4603      	mov	r3, r0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d00f      	beq.n	800551a <main+0x53aa>
						&& (current_tick >= general_delay)) {
 80054fa:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80054fc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80054fe:	429a      	cmp	r2, r3
 8005500:	d30b      	bcc.n	800551a <main+0x53aa>

					CLK.AM_PM = 1;
 8005502:	4a23      	ldr	r2, [pc, #140]	@ (8005590 <main+0x5420>)
 8005504:	7c53      	ldrb	r3, [r2, #17]
 8005506:	f043 0302 	orr.w	r3, r3, #2
 800550a:	7453      	strb	r3, [r2, #17]
					Alcd_Clear(&lcd);
 800550c:	481a      	ldr	r0, [pc, #104]	@ (8005578 <main+0x5408>)
 800550e:	f002 fc95 	bl	8007e3c <Alcd_Clear>
					status = 46;
 8005512:	232e      	movs	r3, #46	@ 0x2e
 8005514:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 8005518:	e01b      	b.n	8005552 <main+0x53e2>

				}

				//back is selected
				else if (Keypad_Get_Key(&kp, kp_button_no_back)
 800551a:	210e      	movs	r1, #14
 800551c:	4815      	ldr	r0, [pc, #84]	@ (8005574 <main+0x5404>)
 800551e:	f002 fdd7 	bl	80080d0 <Keypad_Get_Key>
 8005522:	4603      	mov	r3, r0
 8005524:	2b00      	cmp	r3, #0
 8005526:	d014      	beq.n	8005552 <main+0x53e2>
						&& (current_tick >= general_delay)) {
 8005528:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800552a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800552c:	429a      	cmp	r2, r3
 800552e:	d310      	bcc.n	8005552 <main+0x53e2>

					Alcd_Clear(&lcd);
 8005530:	4811      	ldr	r0, [pc, #68]	@ (8005578 <main+0x5408>)
 8005532:	f002 fc83 	bl	8007e3c <Alcd_Clear>
					//go to previous menu
					status = 23;
 8005536:	2317      	movs	r3, #23
 8005538:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 800553c:	e009      	b.n	8005552 <main+0x53e2>

				}

			}

			else if (CLK.format == 0) {
 800553e:	4b14      	ldr	r3, [pc, #80]	@ (8005590 <main+0x5420>)
 8005540:	7c5b      	ldrb	r3, [r3, #17]
 8005542:	f003 0301 	and.w	r3, r3, #1
 8005546:	b2db      	uxtb	r3, r3
 8005548:	2b00      	cmp	r3, #0
 800554a:	d102      	bne.n	8005552 <main+0x53e2>

				status = 46;
 800554c:	232e      	movs	r3, #46	@ 0x2e
 800554e:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

			}

			general_delay = HAL_GetTick() + 250;
 8005552:	f002 fe2d 	bl	80081b0 <HAL_GetTick>
 8005556:	4603      	mov	r3, r0
 8005558:	33fa      	adds	r3, #250	@ 0xfa
 800555a:	65bb      	str	r3, [r7, #88]	@ 0x58
		while ((status == 44) && (current_tick >= general_delay)) {
 800555c:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8005560:	2b2c      	cmp	r3, #44	@ 0x2c
 8005562:	f040 8390 	bne.w	8005c86 <main+0x5b16>
 8005566:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005568:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800556a:	429a      	cmp	r2, r3
 800556c:	f4bf af67 	bcs.w	800543e <main+0x52ce>
		}

		//entering the hours state (46)
		while ((status == 46) && (current_tick >= general_delay)) {
 8005570:	e389      	b.n	8005c86 <main+0x5b16>
 8005572:	bf00      	nop
 8005574:	20000000 	.word	0x20000000
 8005578:	2000001c 	.word	0x2000001c
 800557c:	0800bebc 	.word	0x0800bebc
 8005580:	0800bec0 	.word	0x0800bec0
 8005584:	20000174 	.word	0x20000174
 8005588:	20000168 	.word	0x20000168
 800558c:	0800bdac 	.word	0x0800bdac
 8005590:	20000150 	.word	0x20000150
 8005594:	0800bf88 	.word	0x0800bf88
 8005598:	0800bf94 	.word	0x0800bf94

			//get the current tick number
			current_tick = HAL_GetTick();
 800559c:	f002 fe08 	bl	80081b0 <HAL_GetTick>
 80055a0:	6638      	str	r0, [r7, #96]	@ 0x60

			//Alcd_Clear(&lcd);
			Alcd_PutAt(&lcd, 0, 0, "Enter hours");
 80055a2:	48b5      	ldr	r0, [pc, #724]	@ (8005878 <main+0x5708>)
 80055a4:	f002 fc9e 	bl	8007ee4 <Str_Len>
 80055a8:	4603      	mov	r3, r0
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	9300      	str	r3, [sp, #0]
 80055ae:	4bb2      	ldr	r3, [pc, #712]	@ (8005878 <main+0x5708>)
 80055b0:	2200      	movs	r2, #0
 80055b2:	2100      	movs	r1, #0
 80055b4:	48b1      	ldr	r0, [pc, #708]	@ (800587c <main+0x570c>)
 80055b6:	f002 fc28 	bl	8007e0a <Alcd_PutAt_n>

			snprintf(timeString, sizeof(timeString), "%02d", status);
 80055ba:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 80055be:	f107 001c 	add.w	r0, r7, #28
 80055c2:	4aaf      	ldr	r2, [pc, #700]	@ (8005880 <main+0x5710>)
 80055c4:	2132      	movs	r1, #50	@ 0x32
 80055c6:	f005 ff0d 	bl	800b3e4 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 80055ca:	f107 031c 	add.w	r3, r7, #28
 80055ce:	4618      	mov	r0, r3
 80055d0:	f7fa fdc6 	bl	8000160 <strlen>
 80055d4:	4603      	mov	r3, r0
 80055d6:	b2db      	uxtb	r3, r3
 80055d8:	f107 021c 	add.w	r2, r7, #28
 80055dc:	9300      	str	r3, [sp, #0]
 80055de:	4613      	mov	r3, r2
 80055e0:	220e      	movs	r2, #14
 80055e2:	2100      	movs	r1, #0
 80055e4:	48a5      	ldr	r0, [pc, #660]	@ (800587c <main+0x570c>)
 80055e6:	f002 fc10 	bl	8007e0a <Alcd_PutAt_n>

			Alcd_CursorAt(&lcd, 1, input_index);
 80055ea:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80055ee:	461a      	mov	r2, r3
 80055f0:	2101      	movs	r1, #1
 80055f2:	48a2      	ldr	r0, [pc, #648]	@ (800587c <main+0x570c>)
 80055f4:	f002 fbcd 	bl	8007d92 <Alcd_CursorAt>
			Alcd_Display_Control(&lcd, 1, 1, 1);
 80055f8:	2301      	movs	r3, #1
 80055fa:	2201      	movs	r2, #1
 80055fc:	2101      	movs	r1, #1
 80055fe:	489f      	ldr	r0, [pc, #636]	@ (800587c <main+0x570c>)
 8005600:	f002 fc2d 	bl	8007e5e <Alcd_Display_Control>

			//check if any button is pressed
			//check for any keypad input
			Keypad_Refresh(&kp);
 8005604:	489f      	ldr	r0, [pc, #636]	@ (8005884 <main+0x5714>)
 8005606:	f002 fcc7 	bl	8007f98 <Keypad_Refresh>

			//if back is entered
			if (Keypad_Get_Key(&kp, kp_button_no_back)
 800560a:	210e      	movs	r1, #14
 800560c:	489d      	ldr	r0, [pc, #628]	@ (8005884 <main+0x5714>)
 800560e:	f002 fd5f 	bl	80080d0 <Keypad_Get_Key>
 8005612:	4603      	mov	r3, r0
 8005614:	2b00      	cmp	r3, #0
 8005616:	d007      	beq.n	8005628 <main+0x54b8>
					&& (current_tick >= general_delay)) {
 8005618:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800561a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800561c:	429a      	cmp	r2, r3
 800561e:	d303      	bcc.n	8005628 <main+0x54b8>

				//back to previous menu
				status = 23;
 8005620:	2317      	movs	r3, #23
 8005622:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 8005626:	e300      	b.n	8005c2a <main+0x5aba>

			}

			//0 is entered
			else if (Keypad_Get_Key(&kp, kp_button_0)
 8005628:	210d      	movs	r1, #13
 800562a:	4896      	ldr	r0, [pc, #600]	@ (8005884 <main+0x5714>)
 800562c:	f002 fd50 	bl	80080d0 <Keypad_Get_Key>
 8005630:	4603      	mov	r3, r0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d042      	beq.n	80056bc <main+0x554c>
					&& (current_tick >= general_delay)) {
 8005636:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005638:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800563a:	429a      	cmp	r2, r3
 800563c:	d33e      	bcc.n	80056bc <main+0x554c>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 800563e:	2300      	movs	r3, #0
 8005640:	2200      	movs	r2, #0
 8005642:	2101      	movs	r1, #1
 8005644:	488d      	ldr	r0, [pc, #564]	@ (800587c <main+0x570c>)
 8005646:	f002 fc0a 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 800564a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800564e:	2b01      	cmp	r3, #1
 8005650:	d827      	bhi.n	80056a2 <main+0x5532>
					time_date_buffer[input_index] = '0';
 8005652:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8005656:	3368      	adds	r3, #104	@ 0x68
 8005658:	443b      	add	r3, r7
 800565a:	2230      	movs	r2, #48	@ 0x30
 800565c:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8005660:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8005664:	3301      	adds	r3, #1
 8005666:	3368      	adds	r3, #104	@ 0x68
 8005668:	443b      	add	r3, r7
 800566a:	2200      	movs	r2, #0
 800566c:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "0");
 8005670:	4885      	ldr	r0, [pc, #532]	@ (8005888 <main+0x5718>)
 8005672:	f002 fc37 	bl	8007ee4 <Str_Len>
 8005676:	4603      	mov	r3, r0
 8005678:	b2db      	uxtb	r3, r3
 800567a:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 800567e:	9300      	str	r3, [sp, #0]
 8005680:	4b81      	ldr	r3, [pc, #516]	@ (8005888 <main+0x5718>)
 8005682:	2101      	movs	r1, #1
 8005684:	487d      	ldr	r0, [pc, #500]	@ (800587c <main+0x570c>)
 8005686:	f002 fbc0 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 800568a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800568e:	3301      	adds	r3, #1
 8005690:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8005694:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8005698:	461a      	mov	r2, r3
 800569a:	2101      	movs	r1, #1
 800569c:	4877      	ldr	r0, [pc, #476]	@ (800587c <main+0x570c>)
 800569e:	f002 fb78 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 80056a2:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 80056a6:	2301      	movs	r3, #1
 80056a8:	2101      	movs	r1, #1
 80056aa:	4874      	ldr	r0, [pc, #464]	@ (800587c <main+0x570c>)
 80056ac:	f002 fbd7 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 80056b0:	f002 fd7e 	bl	80081b0 <HAL_GetTick>
 80056b4:	4603      	mov	r3, r0
 80056b6:	33fa      	adds	r3, #250	@ 0xfa
 80056b8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80056ba:	e2b6      	b.n	8005c2a <main+0x5aba>

			}
			//1 is entered
			else if (Keypad_Get_Key(&kp, kp_button_1)
 80056bc:	2100      	movs	r1, #0
 80056be:	4871      	ldr	r0, [pc, #452]	@ (8005884 <main+0x5714>)
 80056c0:	f002 fd06 	bl	80080d0 <Keypad_Get_Key>
 80056c4:	4603      	mov	r3, r0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d042      	beq.n	8005750 <main+0x55e0>
					&& (current_tick >= general_delay)) {
 80056ca:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80056cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d33e      	bcc.n	8005750 <main+0x55e0>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80056d2:	2300      	movs	r3, #0
 80056d4:	2200      	movs	r2, #0
 80056d6:	2101      	movs	r1, #1
 80056d8:	4868      	ldr	r0, [pc, #416]	@ (800587c <main+0x570c>)
 80056da:	f002 fbc0 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 80056de:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d827      	bhi.n	8005736 <main+0x55c6>
					time_date_buffer[input_index] = '1';
 80056e6:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80056ea:	3368      	adds	r3, #104	@ 0x68
 80056ec:	443b      	add	r3, r7
 80056ee:	2231      	movs	r2, #49	@ 0x31
 80056f0:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 80056f4:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80056f8:	3301      	adds	r3, #1
 80056fa:	3368      	adds	r3, #104	@ 0x68
 80056fc:	443b      	add	r3, r7
 80056fe:	2200      	movs	r2, #0
 8005700:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "1");
 8005704:	4861      	ldr	r0, [pc, #388]	@ (800588c <main+0x571c>)
 8005706:	f002 fbed 	bl	8007ee4 <Str_Len>
 800570a:	4603      	mov	r3, r0
 800570c:	b2db      	uxtb	r3, r3
 800570e:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8005712:	9300      	str	r3, [sp, #0]
 8005714:	4b5d      	ldr	r3, [pc, #372]	@ (800588c <main+0x571c>)
 8005716:	2101      	movs	r1, #1
 8005718:	4858      	ldr	r0, [pc, #352]	@ (800587c <main+0x570c>)
 800571a:	f002 fb76 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 800571e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8005722:	3301      	adds	r3, #1
 8005724:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8005728:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800572c:	461a      	mov	r2, r3
 800572e:	2101      	movs	r1, #1
 8005730:	4852      	ldr	r0, [pc, #328]	@ (800587c <main+0x570c>)
 8005732:	f002 fb2e 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8005736:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 800573a:	2301      	movs	r3, #1
 800573c:	2101      	movs	r1, #1
 800573e:	484f      	ldr	r0, [pc, #316]	@ (800587c <main+0x570c>)
 8005740:	f002 fb8d 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8005744:	f002 fd34 	bl	80081b0 <HAL_GetTick>
 8005748:	4603      	mov	r3, r0
 800574a:	33fa      	adds	r3, #250	@ 0xfa
 800574c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800574e:	e26c      	b.n	8005c2a <main+0x5aba>

			}
			//2 is entered
			else if (Keypad_Get_Key(&kp, kp_button_2)
 8005750:	2101      	movs	r1, #1
 8005752:	484c      	ldr	r0, [pc, #304]	@ (8005884 <main+0x5714>)
 8005754:	f002 fcbc 	bl	80080d0 <Keypad_Get_Key>
 8005758:	4603      	mov	r3, r0
 800575a:	2b00      	cmp	r3, #0
 800575c:	d042      	beq.n	80057e4 <main+0x5674>
					&& (current_tick >= general_delay)) {
 800575e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005760:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005762:	429a      	cmp	r2, r3
 8005764:	d33e      	bcc.n	80057e4 <main+0x5674>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8005766:	2300      	movs	r3, #0
 8005768:	2200      	movs	r2, #0
 800576a:	2101      	movs	r1, #1
 800576c:	4843      	ldr	r0, [pc, #268]	@ (800587c <main+0x570c>)
 800576e:	f002 fb76 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8005772:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8005776:	2b01      	cmp	r3, #1
 8005778:	d827      	bhi.n	80057ca <main+0x565a>
					time_date_buffer[input_index] = '2';
 800577a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800577e:	3368      	adds	r3, #104	@ 0x68
 8005780:	443b      	add	r3, r7
 8005782:	2232      	movs	r2, #50	@ 0x32
 8005784:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8005788:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800578c:	3301      	adds	r3, #1
 800578e:	3368      	adds	r3, #104	@ 0x68
 8005790:	443b      	add	r3, r7
 8005792:	2200      	movs	r2, #0
 8005794:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "2");
 8005798:	483d      	ldr	r0, [pc, #244]	@ (8005890 <main+0x5720>)
 800579a:	f002 fba3 	bl	8007ee4 <Str_Len>
 800579e:	4603      	mov	r3, r0
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 80057a6:	9300      	str	r3, [sp, #0]
 80057a8:	4b39      	ldr	r3, [pc, #228]	@ (8005890 <main+0x5720>)
 80057aa:	2101      	movs	r1, #1
 80057ac:	4833      	ldr	r0, [pc, #204]	@ (800587c <main+0x570c>)
 80057ae:	f002 fb2c 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 80057b2:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80057b6:	3301      	adds	r3, #1
 80057b8:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 80057bc:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80057c0:	461a      	mov	r2, r3
 80057c2:	2101      	movs	r1, #1
 80057c4:	482d      	ldr	r0, [pc, #180]	@ (800587c <main+0x570c>)
 80057c6:	f002 fae4 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 80057ca:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 80057ce:	2301      	movs	r3, #1
 80057d0:	2101      	movs	r1, #1
 80057d2:	482a      	ldr	r0, [pc, #168]	@ (800587c <main+0x570c>)
 80057d4:	f002 fb43 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 80057d8:	f002 fcea 	bl	80081b0 <HAL_GetTick>
 80057dc:	4603      	mov	r3, r0
 80057de:	33fa      	adds	r3, #250	@ 0xfa
 80057e0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80057e2:	e222      	b.n	8005c2a <main+0x5aba>

			}
			//3 is entered
			else if (Keypad_Get_Key(&kp, kp_button_3)
 80057e4:	2102      	movs	r1, #2
 80057e6:	4827      	ldr	r0, [pc, #156]	@ (8005884 <main+0x5714>)
 80057e8:	f002 fc72 	bl	80080d0 <Keypad_Get_Key>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d052      	beq.n	8005898 <main+0x5728>
					&& (current_tick >= general_delay)) {
 80057f2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80057f4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d34e      	bcc.n	8005898 <main+0x5728>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80057fa:	2300      	movs	r3, #0
 80057fc:	2200      	movs	r2, #0
 80057fe:	2101      	movs	r1, #1
 8005800:	481e      	ldr	r0, [pc, #120]	@ (800587c <main+0x570c>)
 8005802:	f002 fb2c 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8005806:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800580a:	2b01      	cmp	r3, #1
 800580c:	d827      	bhi.n	800585e <main+0x56ee>
					time_date_buffer[input_index] = '3';
 800580e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8005812:	3368      	adds	r3, #104	@ 0x68
 8005814:	443b      	add	r3, r7
 8005816:	2233      	movs	r2, #51	@ 0x33
 8005818:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 800581c:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8005820:	3301      	adds	r3, #1
 8005822:	3368      	adds	r3, #104	@ 0x68
 8005824:	443b      	add	r3, r7
 8005826:	2200      	movs	r2, #0
 8005828:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "3");
 800582c:	4819      	ldr	r0, [pc, #100]	@ (8005894 <main+0x5724>)
 800582e:	f002 fb59 	bl	8007ee4 <Str_Len>
 8005832:	4603      	mov	r3, r0
 8005834:	b2db      	uxtb	r3, r3
 8005836:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 800583a:	9300      	str	r3, [sp, #0]
 800583c:	4b15      	ldr	r3, [pc, #84]	@ (8005894 <main+0x5724>)
 800583e:	2101      	movs	r1, #1
 8005840:	480e      	ldr	r0, [pc, #56]	@ (800587c <main+0x570c>)
 8005842:	f002 fae2 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 8005846:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800584a:	3301      	adds	r3, #1
 800584c:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8005850:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8005854:	461a      	mov	r2, r3
 8005856:	2101      	movs	r1, #1
 8005858:	4808      	ldr	r0, [pc, #32]	@ (800587c <main+0x570c>)
 800585a:	f002 fa9a 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 800585e:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8005862:	2301      	movs	r3, #1
 8005864:	2101      	movs	r1, #1
 8005866:	4805      	ldr	r0, [pc, #20]	@ (800587c <main+0x570c>)
 8005868:	f002 faf9 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 800586c:	f002 fca0 	bl	80081b0 <HAL_GetTick>
 8005870:	4603      	mov	r3, r0
 8005872:	33fa      	adds	r3, #250	@ 0xfa
 8005874:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005876:	e1d8      	b.n	8005c2a <main+0x5aba>
 8005878:	0800be90 	.word	0x0800be90
 800587c:	2000001c 	.word	0x2000001c
 8005880:	0800bdac 	.word	0x0800bdac
 8005884:	20000000 	.word	0x20000000
 8005888:	0800be9c 	.word	0x0800be9c
 800588c:	0800bea0 	.word	0x0800bea0
 8005890:	0800bea4 	.word	0x0800bea4
 8005894:	0800bea8 	.word	0x0800bea8

			}

			//4 is entered
			else if (Keypad_Get_Key(&kp, kp_button_4)
 8005898:	2104      	movs	r1, #4
 800589a:	48b8      	ldr	r0, [pc, #736]	@ (8005b7c <main+0x5a0c>)
 800589c:	f002 fc18 	bl	80080d0 <Keypad_Get_Key>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d042      	beq.n	800592c <main+0x57bc>
					&& (current_tick >= general_delay)) {
 80058a6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80058a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d33e      	bcc.n	800592c <main+0x57bc>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80058ae:	2300      	movs	r3, #0
 80058b0:	2200      	movs	r2, #0
 80058b2:	2101      	movs	r1, #1
 80058b4:	48b2      	ldr	r0, [pc, #712]	@ (8005b80 <main+0x5a10>)
 80058b6:	f002 fad2 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 80058ba:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d827      	bhi.n	8005912 <main+0x57a2>
					time_date_buffer[input_index] = '4';
 80058c2:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80058c6:	3368      	adds	r3, #104	@ 0x68
 80058c8:	443b      	add	r3, r7
 80058ca:	2234      	movs	r2, #52	@ 0x34
 80058cc:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 80058d0:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80058d4:	3301      	adds	r3, #1
 80058d6:	3368      	adds	r3, #104	@ 0x68
 80058d8:	443b      	add	r3, r7
 80058da:	2200      	movs	r2, #0
 80058dc:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "4");
 80058e0:	48a8      	ldr	r0, [pc, #672]	@ (8005b84 <main+0x5a14>)
 80058e2:	f002 faff 	bl	8007ee4 <Str_Len>
 80058e6:	4603      	mov	r3, r0
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 80058ee:	9300      	str	r3, [sp, #0]
 80058f0:	4ba4      	ldr	r3, [pc, #656]	@ (8005b84 <main+0x5a14>)
 80058f2:	2101      	movs	r1, #1
 80058f4:	48a2      	ldr	r0, [pc, #648]	@ (8005b80 <main+0x5a10>)
 80058f6:	f002 fa88 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 80058fa:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80058fe:	3301      	adds	r3, #1
 8005900:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8005904:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8005908:	461a      	mov	r2, r3
 800590a:	2101      	movs	r1, #1
 800590c:	489c      	ldr	r0, [pc, #624]	@ (8005b80 <main+0x5a10>)
 800590e:	f002 fa40 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8005912:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8005916:	2301      	movs	r3, #1
 8005918:	2101      	movs	r1, #1
 800591a:	4899      	ldr	r0, [pc, #612]	@ (8005b80 <main+0x5a10>)
 800591c:	f002 fa9f 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8005920:	f002 fc46 	bl	80081b0 <HAL_GetTick>
 8005924:	4603      	mov	r3, r0
 8005926:	33fa      	adds	r3, #250	@ 0xfa
 8005928:	65bb      	str	r3, [r7, #88]	@ 0x58
 800592a:	e17e      	b.n	8005c2a <main+0x5aba>

			}
			//5 is entered
			else if (Keypad_Get_Key(&kp, kp_button_5)
 800592c:	2105      	movs	r1, #5
 800592e:	4893      	ldr	r0, [pc, #588]	@ (8005b7c <main+0x5a0c>)
 8005930:	f002 fbce 	bl	80080d0 <Keypad_Get_Key>
 8005934:	4603      	mov	r3, r0
 8005936:	2b00      	cmp	r3, #0
 8005938:	d042      	beq.n	80059c0 <main+0x5850>
					&& (current_tick >= general_delay)) {
 800593a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800593c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800593e:	429a      	cmp	r2, r3
 8005940:	d33e      	bcc.n	80059c0 <main+0x5850>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8005942:	2300      	movs	r3, #0
 8005944:	2200      	movs	r2, #0
 8005946:	2101      	movs	r1, #1
 8005948:	488d      	ldr	r0, [pc, #564]	@ (8005b80 <main+0x5a10>)
 800594a:	f002 fa88 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 800594e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8005952:	2b01      	cmp	r3, #1
 8005954:	d827      	bhi.n	80059a6 <main+0x5836>
					time_date_buffer[input_index] = '5';
 8005956:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800595a:	3368      	adds	r3, #104	@ 0x68
 800595c:	443b      	add	r3, r7
 800595e:	2235      	movs	r2, #53	@ 0x35
 8005960:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8005964:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8005968:	3301      	adds	r3, #1
 800596a:	3368      	adds	r3, #104	@ 0x68
 800596c:	443b      	add	r3, r7
 800596e:	2200      	movs	r2, #0
 8005970:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "5");
 8005974:	4884      	ldr	r0, [pc, #528]	@ (8005b88 <main+0x5a18>)
 8005976:	f002 fab5 	bl	8007ee4 <Str_Len>
 800597a:	4603      	mov	r3, r0
 800597c:	b2db      	uxtb	r3, r3
 800597e:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8005982:	9300      	str	r3, [sp, #0]
 8005984:	4b80      	ldr	r3, [pc, #512]	@ (8005b88 <main+0x5a18>)
 8005986:	2101      	movs	r1, #1
 8005988:	487d      	ldr	r0, [pc, #500]	@ (8005b80 <main+0x5a10>)
 800598a:	f002 fa3e 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 800598e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8005992:	3301      	adds	r3, #1
 8005994:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8005998:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800599c:	461a      	mov	r2, r3
 800599e:	2101      	movs	r1, #1
 80059a0:	4877      	ldr	r0, [pc, #476]	@ (8005b80 <main+0x5a10>)
 80059a2:	f002 f9f6 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 80059a6:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 80059aa:	2301      	movs	r3, #1
 80059ac:	2101      	movs	r1, #1
 80059ae:	4874      	ldr	r0, [pc, #464]	@ (8005b80 <main+0x5a10>)
 80059b0:	f002 fa55 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 80059b4:	f002 fbfc 	bl	80081b0 <HAL_GetTick>
 80059b8:	4603      	mov	r3, r0
 80059ba:	33fa      	adds	r3, #250	@ 0xfa
 80059bc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80059be:	e134      	b.n	8005c2a <main+0x5aba>

			}

			//6 is entered
			else if (Keypad_Get_Key(&kp, kp_button_6)
 80059c0:	2106      	movs	r1, #6
 80059c2:	486e      	ldr	r0, [pc, #440]	@ (8005b7c <main+0x5a0c>)
 80059c4:	f002 fb84 	bl	80080d0 <Keypad_Get_Key>
 80059c8:	4603      	mov	r3, r0
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d042      	beq.n	8005a54 <main+0x58e4>
					&& (current_tick >= general_delay)) {
 80059ce:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80059d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d33e      	bcc.n	8005a54 <main+0x58e4>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80059d6:	2300      	movs	r3, #0
 80059d8:	2200      	movs	r2, #0
 80059da:	2101      	movs	r1, #1
 80059dc:	4868      	ldr	r0, [pc, #416]	@ (8005b80 <main+0x5a10>)
 80059de:	f002 fa3e 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 80059e2:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d827      	bhi.n	8005a3a <main+0x58ca>
					time_date_buffer[input_index] = '6';
 80059ea:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80059ee:	3368      	adds	r3, #104	@ 0x68
 80059f0:	443b      	add	r3, r7
 80059f2:	2236      	movs	r2, #54	@ 0x36
 80059f4:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 80059f8:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80059fc:	3301      	adds	r3, #1
 80059fe:	3368      	adds	r3, #104	@ 0x68
 8005a00:	443b      	add	r3, r7
 8005a02:	2200      	movs	r2, #0
 8005a04:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "6");
 8005a08:	4860      	ldr	r0, [pc, #384]	@ (8005b8c <main+0x5a1c>)
 8005a0a:	f002 fa6b 	bl	8007ee4 <Str_Len>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8005a16:	9300      	str	r3, [sp, #0]
 8005a18:	4b5c      	ldr	r3, [pc, #368]	@ (8005b8c <main+0x5a1c>)
 8005a1a:	2101      	movs	r1, #1
 8005a1c:	4858      	ldr	r0, [pc, #352]	@ (8005b80 <main+0x5a10>)
 8005a1e:	f002 f9f4 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 8005a22:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8005a26:	3301      	adds	r3, #1
 8005a28:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8005a2c:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8005a30:	461a      	mov	r2, r3
 8005a32:	2101      	movs	r1, #1
 8005a34:	4852      	ldr	r0, [pc, #328]	@ (8005b80 <main+0x5a10>)
 8005a36:	f002 f9ac 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8005a3a:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8005a3e:	2301      	movs	r3, #1
 8005a40:	2101      	movs	r1, #1
 8005a42:	484f      	ldr	r0, [pc, #316]	@ (8005b80 <main+0x5a10>)
 8005a44:	f002 fa0b 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8005a48:	f002 fbb2 	bl	80081b0 <HAL_GetTick>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	33fa      	adds	r3, #250	@ 0xfa
 8005a50:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005a52:	e0ea      	b.n	8005c2a <main+0x5aba>

			}

			//7 is entered
			else if (Keypad_Get_Key(&kp, kp_button_7)
 8005a54:	2108      	movs	r1, #8
 8005a56:	4849      	ldr	r0, [pc, #292]	@ (8005b7c <main+0x5a0c>)
 8005a58:	f002 fb3a 	bl	80080d0 <Keypad_Get_Key>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d042      	beq.n	8005ae8 <main+0x5978>
					&& (current_tick >= general_delay)) {
 8005a62:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005a64:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d33e      	bcc.n	8005ae8 <main+0x5978>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	2101      	movs	r1, #1
 8005a70:	4843      	ldr	r0, [pc, #268]	@ (8005b80 <main+0x5a10>)
 8005a72:	f002 f9f4 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8005a76:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	d827      	bhi.n	8005ace <main+0x595e>
					time_date_buffer[input_index] = '7';
 8005a7e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8005a82:	3368      	adds	r3, #104	@ 0x68
 8005a84:	443b      	add	r3, r7
 8005a86:	2237      	movs	r2, #55	@ 0x37
 8005a88:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8005a8c:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8005a90:	3301      	adds	r3, #1
 8005a92:	3368      	adds	r3, #104	@ 0x68
 8005a94:	443b      	add	r3, r7
 8005a96:	2200      	movs	r2, #0
 8005a98:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "7");
 8005a9c:	483c      	ldr	r0, [pc, #240]	@ (8005b90 <main+0x5a20>)
 8005a9e:	f002 fa21 	bl	8007ee4 <Str_Len>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8005aaa:	9300      	str	r3, [sp, #0]
 8005aac:	4b38      	ldr	r3, [pc, #224]	@ (8005b90 <main+0x5a20>)
 8005aae:	2101      	movs	r1, #1
 8005ab0:	4833      	ldr	r0, [pc, #204]	@ (8005b80 <main+0x5a10>)
 8005ab2:	f002 f9aa 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 8005ab6:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8005aba:	3301      	adds	r3, #1
 8005abc:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8005ac0:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	2101      	movs	r1, #1
 8005ac8:	482d      	ldr	r0, [pc, #180]	@ (8005b80 <main+0x5a10>)
 8005aca:	f002 f962 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8005ace:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	2101      	movs	r1, #1
 8005ad6:	482a      	ldr	r0, [pc, #168]	@ (8005b80 <main+0x5a10>)
 8005ad8:	f002 f9c1 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8005adc:	f002 fb68 	bl	80081b0 <HAL_GetTick>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	33fa      	adds	r3, #250	@ 0xfa
 8005ae4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005ae6:	e0a0      	b.n	8005c2a <main+0x5aba>

			}

			//8 is entered
			else if (Keypad_Get_Key(&kp, kp_button_8)
 8005ae8:	2109      	movs	r1, #9
 8005aea:	4824      	ldr	r0, [pc, #144]	@ (8005b7c <main+0x5a0c>)
 8005aec:	f002 faf0 	bl	80080d0 <Keypad_Get_Key>
 8005af0:	4603      	mov	r3, r0
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d050      	beq.n	8005b98 <main+0x5a28>
					&& (current_tick >= general_delay)) {
 8005af6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005af8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d34c      	bcc.n	8005b98 <main+0x5a28>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8005afe:	2300      	movs	r3, #0
 8005b00:	2200      	movs	r2, #0
 8005b02:	2101      	movs	r1, #1
 8005b04:	481e      	ldr	r0, [pc, #120]	@ (8005b80 <main+0x5a10>)
 8005b06:	f002 f9aa 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8005b0a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d827      	bhi.n	8005b62 <main+0x59f2>
					time_date_buffer[input_index] = '8';
 8005b12:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8005b16:	3368      	adds	r3, #104	@ 0x68
 8005b18:	443b      	add	r3, r7
 8005b1a:	2238      	movs	r2, #56	@ 0x38
 8005b1c:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8005b20:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8005b24:	3301      	adds	r3, #1
 8005b26:	3368      	adds	r3, #104	@ 0x68
 8005b28:	443b      	add	r3, r7
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "8");
 8005b30:	4818      	ldr	r0, [pc, #96]	@ (8005b94 <main+0x5a24>)
 8005b32:	f002 f9d7 	bl	8007ee4 <Str_Len>
 8005b36:	4603      	mov	r3, r0
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8005b3e:	9300      	str	r3, [sp, #0]
 8005b40:	4b14      	ldr	r3, [pc, #80]	@ (8005b94 <main+0x5a24>)
 8005b42:	2101      	movs	r1, #1
 8005b44:	480e      	ldr	r0, [pc, #56]	@ (8005b80 <main+0x5a10>)
 8005b46:	f002 f960 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 8005b4a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8005b4e:	3301      	adds	r3, #1
 8005b50:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8005b54:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8005b58:	461a      	mov	r2, r3
 8005b5a:	2101      	movs	r1, #1
 8005b5c:	4808      	ldr	r0, [pc, #32]	@ (8005b80 <main+0x5a10>)
 8005b5e:	f002 f918 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8005b62:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8005b66:	2301      	movs	r3, #1
 8005b68:	2101      	movs	r1, #1
 8005b6a:	4805      	ldr	r0, [pc, #20]	@ (8005b80 <main+0x5a10>)
 8005b6c:	f002 f977 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8005b70:	f002 fb1e 	bl	80081b0 <HAL_GetTick>
 8005b74:	4603      	mov	r3, r0
 8005b76:	33fa      	adds	r3, #250	@ 0xfa
 8005b78:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005b7a:	e056      	b.n	8005c2a <main+0x5aba>
 8005b7c:	20000000 	.word	0x20000000
 8005b80:	2000001c 	.word	0x2000001c
 8005b84:	0800beac 	.word	0x0800beac
 8005b88:	0800beb0 	.word	0x0800beb0
 8005b8c:	0800beb4 	.word	0x0800beb4
 8005b90:	0800beb8 	.word	0x0800beb8
 8005b94:	0800bebc 	.word	0x0800bebc

			}

			//9 is entered
			else if (Keypad_Get_Key(&kp, kp_button_9)
 8005b98:	210a      	movs	r1, #10
 8005b9a:	48ad      	ldr	r0, [pc, #692]	@ (8005e50 <main+0x5ce0>)
 8005b9c:	f002 fa98 	bl	80080d0 <Keypad_Get_Key>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d041      	beq.n	8005c2a <main+0x5aba>
					&& (current_tick >= general_delay)) {
 8005ba6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005ba8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d33d      	bcc.n	8005c2a <main+0x5aba>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8005bae:	2300      	movs	r3, #0
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	2101      	movs	r1, #1
 8005bb4:	48a7      	ldr	r0, [pc, #668]	@ (8005e54 <main+0x5ce4>)
 8005bb6:	f002 f952 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8005bba:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d827      	bhi.n	8005c12 <main+0x5aa2>
					time_date_buffer[input_index] = '9';
 8005bc2:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8005bc6:	3368      	adds	r3, #104	@ 0x68
 8005bc8:	443b      	add	r3, r7
 8005bca:	2239      	movs	r2, #57	@ 0x39
 8005bcc:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8005bd0:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8005bd4:	3301      	adds	r3, #1
 8005bd6:	3368      	adds	r3, #104	@ 0x68
 8005bd8:	443b      	add	r3, r7
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "9");
 8005be0:	489d      	ldr	r0, [pc, #628]	@ (8005e58 <main+0x5ce8>)
 8005be2:	f002 f97f 	bl	8007ee4 <Str_Len>
 8005be6:	4603      	mov	r3, r0
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8005bee:	9300      	str	r3, [sp, #0]
 8005bf0:	4b99      	ldr	r3, [pc, #612]	@ (8005e58 <main+0x5ce8>)
 8005bf2:	2101      	movs	r1, #1
 8005bf4:	4897      	ldr	r0, [pc, #604]	@ (8005e54 <main+0x5ce4>)
 8005bf6:	f002 f908 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 8005bfa:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8005bfe:	3301      	adds	r3, #1
 8005c00:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8005c04:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8005c08:	461a      	mov	r2, r3
 8005c0a:	2101      	movs	r1, #1
 8005c0c:	4891      	ldr	r0, [pc, #580]	@ (8005e54 <main+0x5ce4>)
 8005c0e:	f002 f8c0 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8005c12:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8005c16:	2301      	movs	r3, #1
 8005c18:	2101      	movs	r1, #1
 8005c1a:	488e      	ldr	r0, [pc, #568]	@ (8005e54 <main+0x5ce4>)
 8005c1c:	f002 f91f 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8005c20:	f002 fac6 	bl	80081b0 <HAL_GetTick>
 8005c24:	4603      	mov	r3, r0
 8005c26:	33fa      	adds	r3, #250	@ 0xfa
 8005c28:	65bb      	str	r3, [r7, #88]	@ 0x58

			}

			//when yes is entered -> check for hour validity (state 47)
			if (Keypad_Get_Key(&kp, kp_button_yes)
 8005c2a:	210f      	movs	r1, #15
 8005c2c:	4888      	ldr	r0, [pc, #544]	@ (8005e50 <main+0x5ce0>)
 8005c2e:	f002 fa4f 	bl	80080d0 <Keypad_Get_Key>
 8005c32:	4603      	mov	r3, r0
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d021      	beq.n	8005c7c <main+0x5b0c>
					&& (current_tick >= general_delay)) {
 8005c38:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005c3a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d31d      	bcc.n	8005c7c <main+0x5b0c>

				Alcd_Clear(&lcd);
 8005c40:	4884      	ldr	r0, [pc, #528]	@ (8005e54 <main+0x5ce4>)
 8005c42:	f002 f8fb 	bl	8007e3c <Alcd_Clear>

				snprintf(timeString, sizeof(timeString), "%02d", buffer);
 8005c46:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8005c4a:	f107 001c 	add.w	r0, r7, #28
 8005c4e:	4a83      	ldr	r2, [pc, #524]	@ (8005e5c <main+0x5cec>)
 8005c50:	2132      	movs	r1, #50	@ 0x32
 8005c52:	f005 fbc7 	bl	800b3e4 <sniprintf>
				Alcd_PutAt_n(&lcd, 1, 0, timeString, strlen(timeString));
 8005c56:	f107 031c 	add.w	r3, r7, #28
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f7fa fa80 	bl	8000160 <strlen>
 8005c60:	4603      	mov	r3, r0
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	f107 021c 	add.w	r2, r7, #28
 8005c68:	9300      	str	r3, [sp, #0]
 8005c6a:	4613      	mov	r3, r2
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	2101      	movs	r1, #1
 8005c70:	4878      	ldr	r0, [pc, #480]	@ (8005e54 <main+0x5ce4>)
 8005c72:	f002 f8ca 	bl	8007e0a <Alcd_PutAt_n>

				status = 47;
 8005c76:	232f      	movs	r3, #47	@ 0x2f
 8005c78:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

			}

			//
			general_delay = HAL_GetTick() + 250;
 8005c7c:	f002 fa98 	bl	80081b0 <HAL_GetTick>
 8005c80:	4603      	mov	r3, r0
 8005c82:	33fa      	adds	r3, #250	@ 0xfa
 8005c84:	65bb      	str	r3, [r7, #88]	@ 0x58
		while ((status == 46) && (current_tick >= general_delay)) {
 8005c86:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8005c8a:	2b2e      	cmp	r3, #46	@ 0x2e
 8005c8c:	f040 80d5 	bne.w	8005e3a <main+0x5cca>
 8005c90:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005c92:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005c94:	429a      	cmp	r2, r3
 8005c96:	f4bf ac81 	bcs.w	800559c <main+0x542c>
		}

		//hours validation phase
		while ((status == 47) && (current_tick >= general_delay)) {
 8005c9a:	e0ce      	b.n	8005e3a <main+0x5cca>

			//get the current tick number
			current_tick = HAL_GetTick();
 8005c9c:	f002 fa88 	bl	80081b0 <HAL_GetTick>
 8005ca0:	6638      	str	r0, [r7, #96]	@ 0x60
			input_index = 0;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55

			Alcd_Clear(&lcd);
 8005ca8:	486a      	ldr	r0, [pc, #424]	@ (8005e54 <main+0x5ce4>)
 8005caa:	f002 f8c7 	bl	8007e3c <Alcd_Clear>

			snprintf(timeString, sizeof(timeString), "%02d", status);
 8005cae:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8005cb2:	f107 001c 	add.w	r0, r7, #28
 8005cb6:	4a69      	ldr	r2, [pc, #420]	@ (8005e5c <main+0x5cec>)
 8005cb8:	2132      	movs	r1, #50	@ 0x32
 8005cba:	f005 fb93 	bl	800b3e4 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 8005cbe:	f107 031c 	add.w	r3, r7, #28
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f7fa fa4c 	bl	8000160 <strlen>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	f107 021c 	add.w	r2, r7, #28
 8005cd0:	9300      	str	r3, [sp, #0]
 8005cd2:	4613      	mov	r3, r2
 8005cd4:	220e      	movs	r2, #14
 8005cd6:	2100      	movs	r1, #0
 8005cd8:	485e      	ldr	r0, [pc, #376]	@ (8005e54 <main+0x5ce4>)
 8005cda:	f002 f896 	bl	8007e0a <Alcd_PutAt_n>

			buffer = atoi(time_date_buffer);
 8005cde:	1d3b      	adds	r3, r7, #4
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f005 faf6 	bl	800b2d2 <atoi>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56

			//in case of 12h format
			if (CLK.format == 1) {
 8005cec:	4b5c      	ldr	r3, [pc, #368]	@ (8005e60 <main+0x5cf0>)
 8005cee:	7c5b      	ldrb	r3, [r3, #17]
 8005cf0:	f003 0301 	and.w	r3, r3, #1
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d048      	beq.n	8005d8c <main+0x5c1c>

				//check if time is within rang 1 to 12
				if (buffer > 0 && buffer < 13) {
 8005cfa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d01c      	beq.n	8005d3c <main+0x5bcc>
 8005d02:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8005d06:	2b0c      	cmp	r3, #12
 8005d08:	d818      	bhi.n	8005d3c <main+0x5bcc>

					//move to the previous menu
					status = 23;
 8005d0a:	2317      	movs	r3, #23
 8005d0c:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

					//set the hours to the value
					dose_h = buffer;
 8005d10:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54

					input_index = 0;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					//turn off the blinking
					Alcd_Display_Control(&lcd, 1, 0, 0);
 8005d20:	2300      	movs	r3, #0
 8005d22:	2200      	movs	r2, #0
 8005d24:	2101      	movs	r1, #1
 8005d26:	484b      	ldr	r0, [pc, #300]	@ (8005e54 <main+0x5ce4>)
 8005d28:	f002 f899 	bl	8007e5e <Alcd_Display_Control>
					//turn on the blinking again
					Alcd_Display_Control(&lcd, 1, input_index, 1);
 8005d2c:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8005d30:	2301      	movs	r3, #1
 8005d32:	2101      	movs	r1, #1
 8005d34:	4847      	ldr	r0, [pc, #284]	@ (8005e54 <main+0x5ce4>)
 8005d36:	f002 f892 	bl	8007e5e <Alcd_Display_Control>
 8005d3a:	e027      	b.n	8005d8c <main+0x5c1c>

				} else {
					Alcd_PutAt(&lcd, 0, 0, "invalid");
 8005d3c:	4849      	ldr	r0, [pc, #292]	@ (8005e64 <main+0x5cf4>)
 8005d3e:	f002 f8d1 	bl	8007ee4 <Str_Len>
 8005d42:	4603      	mov	r3, r0
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	9300      	str	r3, [sp, #0]
 8005d48:	4b46      	ldr	r3, [pc, #280]	@ (8005e64 <main+0x5cf4>)
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	2100      	movs	r1, #0
 8005d4e:	4841      	ldr	r0, [pc, #260]	@ (8005e54 <main+0x5ce4>)
 8005d50:	f002 f85b 	bl	8007e0a <Alcd_PutAt_n>
					delay_flag = 1;
 8005d54:	2301      	movs	r3, #1
 8005d56:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
					input_index = 0;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55

					//turn off the blinking
					Alcd_Display_Control(&lcd, 1, 0, 0);
 8005d60:	2300      	movs	r3, #0
 8005d62:	2200      	movs	r2, #0
 8005d64:	2101      	movs	r1, #1
 8005d66:	483b      	ldr	r0, [pc, #236]	@ (8005e54 <main+0x5ce4>)
 8005d68:	f002 f879 	bl	8007e5e <Alcd_Display_Control>
					//turn on the blinking again
					Alcd_Display_Control(&lcd, 1, input_index, 1);
 8005d6c:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8005d70:	2301      	movs	r3, #1
 8005d72:	2101      	movs	r1, #1
 8005d74:	4837      	ldr	r0, [pc, #220]	@ (8005e54 <main+0x5ce4>)
 8005d76:	f002 f872 	bl	8007e5e <Alcd_Display_Control>

					//return to entering hours
					status = 46;
 8005d7a:	232e      	movs	r3, #46	@ 0x2e
 8005d7c:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

					general_delay = HAL_GetTick() + 1000;
 8005d80:	f002 fa16 	bl	80081b0 <HAL_GetTick>
 8005d84:	4603      	mov	r3, r0
 8005d86:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8005d8a:	65bb      	str	r3, [r7, #88]	@ 0x58
				}
			}

			//in case of 24h format
			if (CLK.format == 0) {
 8005d8c:	4b34      	ldr	r3, [pc, #208]	@ (8005e60 <main+0x5cf0>)
 8005d8e:	7c5b      	ldrb	r3, [r3, #17]
 8005d90:	f003 0301 	and.w	r3, r3, #1
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d144      	bne.n	8005e24 <main+0x5cb4>

				//check if time is within rang 0 to 24
				if (buffer >= 0 && buffer < 25) {
 8005d9a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8005d9e:	2b18      	cmp	r3, #24
 8005da0:	d818      	bhi.n	8005dd4 <main+0x5c64>

					//move to menu
					status = 23;
 8005da2:	2317      	movs	r3, #23
 8005da4:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

					//set the hours to the value
					dose_h = buffer;
 8005da8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54

					input_index = 0;
 8005db2:	2300      	movs	r3, #0
 8005db4:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					//turn off the blinking
					Alcd_Display_Control(&lcd, 1, 0, 0);
 8005db8:	2300      	movs	r3, #0
 8005dba:	2200      	movs	r2, #0
 8005dbc:	2101      	movs	r1, #1
 8005dbe:	4825      	ldr	r0, [pc, #148]	@ (8005e54 <main+0x5ce4>)
 8005dc0:	f002 f84d 	bl	8007e5e <Alcd_Display_Control>
					//turn on the blinking again
					Alcd_Display_Control(&lcd, 1, input_index, 1);
 8005dc4:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8005dc8:	2301      	movs	r3, #1
 8005dca:	2101      	movs	r1, #1
 8005dcc:	4821      	ldr	r0, [pc, #132]	@ (8005e54 <main+0x5ce4>)
 8005dce:	f002 f846 	bl	8007e5e <Alcd_Display_Control>
 8005dd2:	e027      	b.n	8005e24 <main+0x5cb4>
				} else {
					Alcd_PutAt(&lcd, 0, 0, "invalid");
 8005dd4:	4823      	ldr	r0, [pc, #140]	@ (8005e64 <main+0x5cf4>)
 8005dd6:	f002 f885 	bl	8007ee4 <Str_Len>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	9300      	str	r3, [sp, #0]
 8005de0:	4b20      	ldr	r3, [pc, #128]	@ (8005e64 <main+0x5cf4>)
 8005de2:	2200      	movs	r2, #0
 8005de4:	2100      	movs	r1, #0
 8005de6:	481b      	ldr	r0, [pc, #108]	@ (8005e54 <main+0x5ce4>)
 8005de8:	f002 f80f 	bl	8007e0a <Alcd_PutAt_n>
					delay_flag = 1;
 8005dec:	2301      	movs	r3, #1
 8005dee:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

					input_index = 0;
 8005df2:	2300      	movs	r3, #0
 8005df4:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					//turn off the blinking
					Alcd_Display_Control(&lcd, 1, 0, 0);
 8005df8:	2300      	movs	r3, #0
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	2101      	movs	r1, #1
 8005dfe:	4815      	ldr	r0, [pc, #84]	@ (8005e54 <main+0x5ce4>)
 8005e00:	f002 f82d 	bl	8007e5e <Alcd_Display_Control>
					//turn on the blinking again
					Alcd_Display_Control(&lcd, 1, input_index, 1);
 8005e04:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8005e08:	2301      	movs	r3, #1
 8005e0a:	2101      	movs	r1, #1
 8005e0c:	4811      	ldr	r0, [pc, #68]	@ (8005e54 <main+0x5ce4>)
 8005e0e:	f002 f826 	bl	8007e5e <Alcd_Display_Control>
					//return to entering hours
					status = 46;
 8005e12:	232e      	movs	r3, #46	@ 0x2e
 8005e14:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

					general_delay = HAL_GetTick() + 1000;
 8005e18:	f002 f9ca 	bl	80081b0 <HAL_GetTick>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8005e22:	65bb      	str	r3, [r7, #88]	@ 0x58
				}
			}

			//create a delay
			if ((delay_flag == 1) && (current_tick >= general_delay)) {
 8005e24:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d106      	bne.n	8005e3a <main+0x5cca>
 8005e2c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005e2e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d302      	bcc.n	8005e3a <main+0x5cca>

				delay_flag = 0;
 8005e34:	2300      	movs	r3, #0
 8005e36:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
		while ((status == 47) && (current_tick >= general_delay)) {
 8005e3a:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8005e3e:	2b2f      	cmp	r3, #47	@ 0x2f
 8005e40:	d179      	bne.n	8005f36 <main+0x5dc6>
 8005e42:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005e44:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005e46:	429a      	cmp	r2, r3
 8005e48:	f4bf af28 	bcs.w	8005c9c <main+0x5b2c>
			}

		}

		//save parameters? (state 48)
		while ((status == 48) && (current_tick >= general_delay)) {
 8005e4c:	e073      	b.n	8005f36 <main+0x5dc6>
 8005e4e:	bf00      	nop
 8005e50:	20000000 	.word	0x20000000
 8005e54:	2000001c 	.word	0x2000001c
 8005e58:	0800bec0 	.word	0x0800bec0
 8005e5c:	0800bdac 	.word	0x0800bdac
 8005e60:	20000150 	.word	0x20000150
 8005e64:	0800bec4 	.word	0x0800bec4

			//get the current tick number
			current_tick = HAL_GetTick();
 8005e68:	f002 f9a2 	bl	80081b0 <HAL_GetTick>
 8005e6c:	6638      	str	r0, [r7, #96]	@ 0x60

			Alcd_Clear(&lcd);
 8005e6e:	48a3      	ldr	r0, [pc, #652]	@ (80060fc <main+0x5f8c>)
 8005e70:	f001 ffe4 	bl	8007e3c <Alcd_Clear>
			Alcd_PutAt(&lcd, 0, 0, "save?");
 8005e74:	48a2      	ldr	r0, [pc, #648]	@ (8006100 <main+0x5f90>)
 8005e76:	f002 f835 	bl	8007ee4 <Str_Len>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	9300      	str	r3, [sp, #0]
 8005e80:	4b9f      	ldr	r3, [pc, #636]	@ (8006100 <main+0x5f90>)
 8005e82:	2200      	movs	r2, #0
 8005e84:	2100      	movs	r1, #0
 8005e86:	489d      	ldr	r0, [pc, #628]	@ (80060fc <main+0x5f8c>)
 8005e88:	f001 ffbf 	bl	8007e0a <Alcd_PutAt_n>
			snprintf(timeString, sizeof(timeString), "%02d", status);
 8005e8c:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8005e90:	f107 001c 	add.w	r0, r7, #28
 8005e94:	4a9b      	ldr	r2, [pc, #620]	@ (8006104 <main+0x5f94>)
 8005e96:	2132      	movs	r1, #50	@ 0x32
 8005e98:	f005 faa4 	bl	800b3e4 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 8005e9c:	f107 031c 	add.w	r3, r7, #28
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f7fa f95d 	bl	8000160 <strlen>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	f107 021c 	add.w	r2, r7, #28
 8005eae:	9300      	str	r3, [sp, #0]
 8005eb0:	4613      	mov	r3, r2
 8005eb2:	220e      	movs	r2, #14
 8005eb4:	2100      	movs	r1, #0
 8005eb6:	4891      	ldr	r0, [pc, #580]	@ (80060fc <main+0x5f8c>)
 8005eb8:	f001 ffa7 	bl	8007e0a <Alcd_PutAt_n>

			//check if any button is pressed
			//check for any keypad input
			Keypad_Refresh(&kp);
 8005ebc:	4892      	ldr	r0, [pc, #584]	@ (8006108 <main+0x5f98>)
 8005ebe:	f002 f86b 	bl	8007f98 <Keypad_Refresh>

			//in case of yes
			if (Keypad_Get_Key(&kp, kp_button_yes)
 8005ec2:	210f      	movs	r1, #15
 8005ec4:	4890      	ldr	r0, [pc, #576]	@ (8006108 <main+0x5f98>)
 8005ec6:	f002 f903 	bl	80080d0 <Keypad_Get_Key>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d01f      	beq.n	8005f10 <main+0x5da0>
					&& (current_tick >= general_delay)) {
 8005ed0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005ed2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d31b      	bcc.n	8005f10 <main+0x5da0>

				//save the parameters
				eeprom24c32_write(&memory, dose_h, dosing_time_hours);
 8005ed8:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8005edc:	4a8b      	ldr	r2, [pc, #556]	@ (800610c <main+0x5f9c>)
 8005ede:	b292      	uxth	r2, r2
 8005ee0:	4619      	mov	r1, r3
 8005ee2:	488a      	ldr	r0, [pc, #552]	@ (800610c <main+0x5f9c>)
 8005ee4:	f001 fbbe 	bl	8007664 <eeprom24c32_write>
				eeprom24c32_write(&memory, dose_m, dosing_time_minutes);
 8005ee8:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8005eec:	4a88      	ldr	r2, [pc, #544]	@ (8006110 <main+0x5fa0>)
 8005eee:	b292      	uxth	r2, r2
 8005ef0:	4619      	mov	r1, r3
 8005ef2:	4886      	ldr	r0, [pc, #536]	@ (800610c <main+0x5f9c>)
 8005ef4:	f001 fbb6 	bl	8007664 <eeprom24c32_write>
				eeprom24c32_write(&memory, dose_s, dosing_time_seconds);
 8005ef8:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8005efc:	4a85      	ldr	r2, [pc, #532]	@ (8006114 <main+0x5fa4>)
 8005efe:	b292      	uxth	r2, r2
 8005f00:	4619      	mov	r1, r3
 8005f02:	4882      	ldr	r0, [pc, #520]	@ (800610c <main+0x5f9c>)
 8005f04:	f001 fbae 	bl	8007664 <eeprom24c32_write>
				status = 21;
 8005f08:	2315      	movs	r3, #21
 8005f0a:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 8005f0e:	e00d      	b.n	8005f2c <main+0x5dbc>

			}

			//no is selected
			else if (Keypad_Get_Key(&kp, kp_button_no_back)
 8005f10:	210e      	movs	r1, #14
 8005f12:	487d      	ldr	r0, [pc, #500]	@ (8006108 <main+0x5f98>)
 8005f14:	f002 f8dc 	bl	80080d0 <Keypad_Get_Key>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d006      	beq.n	8005f2c <main+0x5dbc>
					&& (current_tick >= general_delay)) {
 8005f1e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005f20:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d302      	bcc.n	8005f2c <main+0x5dbc>

				status = 21;
 8005f26:	2315      	movs	r3, #21
 8005f28:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

			}

			general_delay = HAL_GetTick() + 250;
 8005f2c:	f002 f940 	bl	80081b0 <HAL_GetTick>
 8005f30:	4603      	mov	r3, r0
 8005f32:	33fa      	adds	r3, #250	@ 0xfa
 8005f34:	65bb      	str	r3, [r7, #88]	@ 0x58
		while ((status == 48) && (current_tick >= general_delay)) {
 8005f36:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8005f3a:	2b30      	cmp	r3, #48	@ 0x30
 8005f3c:	f040 808c 	bne.w	8006058 <main+0x5ee8>
 8005f40:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005f42:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d28f      	bcs.n	8005e68 <main+0x5cf8>
		}

		//extended edit parameters menu (state 49)
		while ((status == 49) && (current_tick >= general_delay)) {
 8005f48:	e086      	b.n	8006058 <main+0x5ee8>

			//get the current tick number
			current_tick = HAL_GetTick();
 8005f4a:	f002 f931 	bl	80081b0 <HAL_GetTick>
 8005f4e:	6638      	str	r0, [r7, #96]	@ 0x60

			Alcd_Clear(&lcd);
 8005f50:	486a      	ldr	r0, [pc, #424]	@ (80060fc <main+0x5f8c>)
 8005f52:	f001 ff73 	bl	8007e3c <Alcd_Clear>
			Alcd_PutAt(&lcd, 0, 0, "3: minutes");
 8005f56:	4870      	ldr	r0, [pc, #448]	@ (8006118 <main+0x5fa8>)
 8005f58:	f001 ffc4 	bl	8007ee4 <Str_Len>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	b2db      	uxtb	r3, r3
 8005f60:	9300      	str	r3, [sp, #0]
 8005f62:	4b6d      	ldr	r3, [pc, #436]	@ (8006118 <main+0x5fa8>)
 8005f64:	2200      	movs	r2, #0
 8005f66:	2100      	movs	r1, #0
 8005f68:	4864      	ldr	r0, [pc, #400]	@ (80060fc <main+0x5f8c>)
 8005f6a:	f001 ff4e 	bl	8007e0a <Alcd_PutAt_n>
			Alcd_PutAt(&lcd, 1, 0, "4: seconds");
 8005f6e:	486b      	ldr	r0, [pc, #428]	@ (800611c <main+0x5fac>)
 8005f70:	f001 ffb8 	bl	8007ee4 <Str_Len>
 8005f74:	4603      	mov	r3, r0
 8005f76:	b2db      	uxtb	r3, r3
 8005f78:	9300      	str	r3, [sp, #0]
 8005f7a:	4b68      	ldr	r3, [pc, #416]	@ (800611c <main+0x5fac>)
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	2101      	movs	r1, #1
 8005f80:	485e      	ldr	r0, [pc, #376]	@ (80060fc <main+0x5f8c>)
 8005f82:	f001 ff42 	bl	8007e0a <Alcd_PutAt_n>
			snprintf(timeString, sizeof(timeString), "%02d", status);
 8005f86:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8005f8a:	f107 001c 	add.w	r0, r7, #28
 8005f8e:	4a5d      	ldr	r2, [pc, #372]	@ (8006104 <main+0x5f94>)
 8005f90:	2132      	movs	r1, #50	@ 0x32
 8005f92:	f005 fa27 	bl	800b3e4 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 8005f96:	f107 031c 	add.w	r3, r7, #28
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f7fa f8e0 	bl	8000160 <strlen>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	b2db      	uxtb	r3, r3
 8005fa4:	f107 021c 	add.w	r2, r7, #28
 8005fa8:	9300      	str	r3, [sp, #0]
 8005faa:	4613      	mov	r3, r2
 8005fac:	220e      	movs	r2, #14
 8005fae:	2100      	movs	r1, #0
 8005fb0:	4852      	ldr	r0, [pc, #328]	@ (80060fc <main+0x5f8c>)
 8005fb2:	f001 ff2a 	bl	8007e0a <Alcd_PutAt_n>
			Alcd_Display_Control(&lcd, 1, 0, 0);
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	2200      	movs	r2, #0
 8005fba:	2101      	movs	r1, #1
 8005fbc:	484f      	ldr	r0, [pc, #316]	@ (80060fc <main+0x5f8c>)
 8005fbe:	f001 ff4e 	bl	8007e5e <Alcd_Display_Control>
			Alcd_CursorAt(&lcd, 1, 0);
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	2101      	movs	r1, #1
 8005fc6:	484d      	ldr	r0, [pc, #308]	@ (80060fc <main+0x5f8c>)
 8005fc8:	f001 fee3 	bl	8007d92 <Alcd_CursorAt>

			//check if any button is pressed
			//check for any keypad input
			Keypad_Refresh(&kp);
 8005fcc:	484e      	ldr	r0, [pc, #312]	@ (8006108 <main+0x5f98>)
 8005fce:	f001 ffe3 	bl	8007f98 <Keypad_Refresh>

			//in case 3 is selected -> edit minutes
			if (Keypad_Get_Key(&kp, kp_button_3)
 8005fd2:	2102      	movs	r1, #2
 8005fd4:	484c      	ldr	r0, [pc, #304]	@ (8006108 <main+0x5f98>)
 8005fd6:	f002 f87b 	bl	80080d0 <Keypad_Get_Key>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d007      	beq.n	8005ff0 <main+0x5e80>
					&& (current_tick >= general_delay)) {
 8005fe0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005fe2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d303      	bcc.n	8005ff0 <main+0x5e80>

				status = 50;
 8005fe8:	2332      	movs	r3, #50	@ 0x32
 8005fea:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 8005fee:	e02e      	b.n	800604e <main+0x5ede>

			}

			//4 is selected -> enter seconds
			else if (Keypad_Get_Key(&kp, kp_button_4)
 8005ff0:	2104      	movs	r1, #4
 8005ff2:	4845      	ldr	r0, [pc, #276]	@ (8006108 <main+0x5f98>)
 8005ff4:	f002 f86c 	bl	80080d0 <Keypad_Get_Key>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d00a      	beq.n	8006014 <main+0x5ea4>
					&& (current_tick >= general_delay)) {
 8005ffe:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006000:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006002:	429a      	cmp	r2, r3
 8006004:	d306      	bcc.n	8006014 <main+0x5ea4>

				Alcd_Clear(&lcd);
 8006006:	483d      	ldr	r0, [pc, #244]	@ (80060fc <main+0x5f8c>)
 8006008:	f001 ff18 	bl	8007e3c <Alcd_Clear>
				status = 51;
 800600c:	2333      	movs	r3, #51	@ 0x33
 800600e:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 8006012:	e01c      	b.n	800604e <main+0x5ede>

			}

			//back is selected
			else if (Keypad_Get_Key(&kp, kp_button_no_back)
 8006014:	210e      	movs	r1, #14
 8006016:	483c      	ldr	r0, [pc, #240]	@ (8006108 <main+0x5f98>)
 8006018:	f002 f85a 	bl	80080d0 <Keypad_Get_Key>
 800601c:	4603      	mov	r3, r0
 800601e:	2b00      	cmp	r3, #0
 8006020:	d007      	beq.n	8006032 <main+0x5ec2>
					&& (current_tick >= general_delay)) {
 8006022:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006024:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006026:	429a      	cmp	r2, r3
 8006028:	d303      	bcc.n	8006032 <main+0x5ec2>

				status = 23;
 800602a:	2317      	movs	r3, #23
 800602c:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 8006030:	e00d      	b.n	800604e <main+0x5ede>

			}

			//previous is selected
			else if (Keypad_Get_Key(&kp, kp_button_previous)
 8006032:	2107      	movs	r1, #7
 8006034:	4834      	ldr	r0, [pc, #208]	@ (8006108 <main+0x5f98>)
 8006036:	f002 f84b 	bl	80080d0 <Keypad_Get_Key>
 800603a:	4603      	mov	r3, r0
 800603c:	2b00      	cmp	r3, #0
 800603e:	d006      	beq.n	800604e <main+0x5ede>
					&& (current_tick >= general_delay)) {
 8006040:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006042:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006044:	429a      	cmp	r2, r3
 8006046:	d302      	bcc.n	800604e <main+0x5ede>

				status = 23;
 8006048:	2317      	movs	r3, #23
 800604a:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

			}

			general_delay = HAL_GetTick() + 250;
 800604e:	f002 f8af 	bl	80081b0 <HAL_GetTick>
 8006052:	4603      	mov	r3, r0
 8006054:	33fa      	adds	r3, #250	@ 0xfa
 8006056:	65bb      	str	r3, [r7, #88]	@ 0x58
		while ((status == 49) && (current_tick >= general_delay)) {
 8006058:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 800605c:	2b31      	cmp	r3, #49	@ 0x31
 800605e:	f040 838c 	bne.w	800677a <main+0x660a>
 8006062:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006064:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006066:	429a      	cmp	r2, r3
 8006068:	f4bf af6f 	bcs.w	8005f4a <main+0x5dda>
		}

		//entering the minutes state (50)
		while ((status == 50) && (current_tick >= general_delay)) {
 800606c:	e385      	b.n	800677a <main+0x660a>

			//get the current tick number
			current_tick = HAL_GetTick();
 800606e:	f002 f89f 	bl	80081b0 <HAL_GetTick>
 8006072:	6638      	str	r0, [r7, #96]	@ 0x60

			//Alcd_Clear(&lcd);
			Alcd_PutAt(&lcd, 0, 0, "Enter minutes");
 8006074:	482a      	ldr	r0, [pc, #168]	@ (8006120 <main+0x5fb0>)
 8006076:	f001 ff35 	bl	8007ee4 <Str_Len>
 800607a:	4603      	mov	r3, r0
 800607c:	b2db      	uxtb	r3, r3
 800607e:	9300      	str	r3, [sp, #0]
 8006080:	4b27      	ldr	r3, [pc, #156]	@ (8006120 <main+0x5fb0>)
 8006082:	2200      	movs	r2, #0
 8006084:	2100      	movs	r1, #0
 8006086:	481d      	ldr	r0, [pc, #116]	@ (80060fc <main+0x5f8c>)
 8006088:	f001 febf 	bl	8007e0a <Alcd_PutAt_n>

			snprintf(timeString, sizeof(timeString), "%02d", status);
 800608c:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8006090:	f107 001c 	add.w	r0, r7, #28
 8006094:	4a1b      	ldr	r2, [pc, #108]	@ (8006104 <main+0x5f94>)
 8006096:	2132      	movs	r1, #50	@ 0x32
 8006098:	f005 f9a4 	bl	800b3e4 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 800609c:	f107 031c 	add.w	r3, r7, #28
 80060a0:	4618      	mov	r0, r3
 80060a2:	f7fa f85d 	bl	8000160 <strlen>
 80060a6:	4603      	mov	r3, r0
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	f107 021c 	add.w	r2, r7, #28
 80060ae:	9300      	str	r3, [sp, #0]
 80060b0:	4613      	mov	r3, r2
 80060b2:	220e      	movs	r2, #14
 80060b4:	2100      	movs	r1, #0
 80060b6:	4811      	ldr	r0, [pc, #68]	@ (80060fc <main+0x5f8c>)
 80060b8:	f001 fea7 	bl	8007e0a <Alcd_PutAt_n>

			Alcd_CursorAt(&lcd, 1, input_index);
 80060bc:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80060c0:	461a      	mov	r2, r3
 80060c2:	2101      	movs	r1, #1
 80060c4:	480d      	ldr	r0, [pc, #52]	@ (80060fc <main+0x5f8c>)
 80060c6:	f001 fe64 	bl	8007d92 <Alcd_CursorAt>
			Alcd_Display_Control(&lcd, 1, 1, 1);
 80060ca:	2301      	movs	r3, #1
 80060cc:	2201      	movs	r2, #1
 80060ce:	2101      	movs	r1, #1
 80060d0:	480a      	ldr	r0, [pc, #40]	@ (80060fc <main+0x5f8c>)
 80060d2:	f001 fec4 	bl	8007e5e <Alcd_Display_Control>

			//check if any button is pressed
			//check for any keypad input
			Keypad_Refresh(&kp);
 80060d6:	480c      	ldr	r0, [pc, #48]	@ (8006108 <main+0x5f98>)
 80060d8:	f001 ff5e 	bl	8007f98 <Keypad_Refresh>

			//if back is entered
			if (Keypad_Get_Key(&kp, kp_button_no_back)
 80060dc:	210e      	movs	r1, #14
 80060de:	480a      	ldr	r0, [pc, #40]	@ (8006108 <main+0x5f98>)
 80060e0:	f001 fff6 	bl	80080d0 <Keypad_Get_Key>
 80060e4:	4603      	mov	r3, r0
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d01c      	beq.n	8006124 <main+0x5fb4>
					&& (current_tick >= general_delay)) {
 80060ea:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80060ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d318      	bcc.n	8006124 <main+0x5fb4>

				//back to previous menu
				status = 49;
 80060f2:	2331      	movs	r3, #49	@ 0x31
 80060f4:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 80060f8:	e311      	b.n	800671e <main+0x65ae>
 80060fa:	bf00      	nop
 80060fc:	2000001c 	.word	0x2000001c
 8006100:	0800bfa4 	.word	0x0800bfa4
 8006104:	0800bdac 	.word	0x0800bdac
 8006108:	20000000 	.word	0x20000000
 800610c:	20000168 	.word	0x20000168
 8006110:	2000016c 	.word	0x2000016c
 8006114:	20000170 	.word	0x20000170
 8006118:	0800bfac 	.word	0x0800bfac
 800611c:	0800bfb8 	.word	0x0800bfb8
 8006120:	0800becc 	.word	0x0800becc

			}

			//0 is entered
			else if (Keypad_Get_Key(&kp, kp_button_0)
 8006124:	210d      	movs	r1, #13
 8006126:	48b8      	ldr	r0, [pc, #736]	@ (8006408 <main+0x6298>)
 8006128:	f001 ffd2 	bl	80080d0 <Keypad_Get_Key>
 800612c:	4603      	mov	r3, r0
 800612e:	2b00      	cmp	r3, #0
 8006130:	d042      	beq.n	80061b8 <main+0x6048>
					&& (current_tick >= general_delay)) {
 8006132:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006134:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006136:	429a      	cmp	r2, r3
 8006138:	d33e      	bcc.n	80061b8 <main+0x6048>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 800613a:	2300      	movs	r3, #0
 800613c:	2200      	movs	r2, #0
 800613e:	2101      	movs	r1, #1
 8006140:	48b2      	ldr	r0, [pc, #712]	@ (800640c <main+0x629c>)
 8006142:	f001 fe8c 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8006146:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800614a:	2b01      	cmp	r3, #1
 800614c:	d827      	bhi.n	800619e <main+0x602e>
					time_date_buffer[input_index] = '0';
 800614e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8006152:	3368      	adds	r3, #104	@ 0x68
 8006154:	443b      	add	r3, r7
 8006156:	2230      	movs	r2, #48	@ 0x30
 8006158:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 800615c:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8006160:	3301      	adds	r3, #1
 8006162:	3368      	adds	r3, #104	@ 0x68
 8006164:	443b      	add	r3, r7
 8006166:	2200      	movs	r2, #0
 8006168:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "0");
 800616c:	48a8      	ldr	r0, [pc, #672]	@ (8006410 <main+0x62a0>)
 800616e:	f001 feb9 	bl	8007ee4 <Str_Len>
 8006172:	4603      	mov	r3, r0
 8006174:	b2db      	uxtb	r3, r3
 8006176:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 800617a:	9300      	str	r3, [sp, #0]
 800617c:	4ba4      	ldr	r3, [pc, #656]	@ (8006410 <main+0x62a0>)
 800617e:	2101      	movs	r1, #1
 8006180:	48a2      	ldr	r0, [pc, #648]	@ (800640c <main+0x629c>)
 8006182:	f001 fe42 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 8006186:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800618a:	3301      	adds	r3, #1
 800618c:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8006190:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8006194:	461a      	mov	r2, r3
 8006196:	2101      	movs	r1, #1
 8006198:	489c      	ldr	r0, [pc, #624]	@ (800640c <main+0x629c>)
 800619a:	f001 fdfa 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 800619e:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 80061a2:	2301      	movs	r3, #1
 80061a4:	2101      	movs	r1, #1
 80061a6:	4899      	ldr	r0, [pc, #612]	@ (800640c <main+0x629c>)
 80061a8:	f001 fe59 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 80061ac:	f002 f800 	bl	80081b0 <HAL_GetTick>
 80061b0:	4603      	mov	r3, r0
 80061b2:	33fa      	adds	r3, #250	@ 0xfa
 80061b4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80061b6:	e2b2      	b.n	800671e <main+0x65ae>

			}
			//1 is entered
			else if (Keypad_Get_Key(&kp, kp_button_1)
 80061b8:	2100      	movs	r1, #0
 80061ba:	4893      	ldr	r0, [pc, #588]	@ (8006408 <main+0x6298>)
 80061bc:	f001 ff88 	bl	80080d0 <Keypad_Get_Key>
 80061c0:	4603      	mov	r3, r0
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d042      	beq.n	800624c <main+0x60dc>
					&& (current_tick >= general_delay)) {
 80061c6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80061c8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d33e      	bcc.n	800624c <main+0x60dc>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80061ce:	2300      	movs	r3, #0
 80061d0:	2200      	movs	r2, #0
 80061d2:	2101      	movs	r1, #1
 80061d4:	488d      	ldr	r0, [pc, #564]	@ (800640c <main+0x629c>)
 80061d6:	f001 fe42 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 80061da:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d827      	bhi.n	8006232 <main+0x60c2>
					time_date_buffer[input_index] = '1';
 80061e2:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80061e6:	3368      	adds	r3, #104	@ 0x68
 80061e8:	443b      	add	r3, r7
 80061ea:	2231      	movs	r2, #49	@ 0x31
 80061ec:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 80061f0:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80061f4:	3301      	adds	r3, #1
 80061f6:	3368      	adds	r3, #104	@ 0x68
 80061f8:	443b      	add	r3, r7
 80061fa:	2200      	movs	r2, #0
 80061fc:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "1");
 8006200:	4884      	ldr	r0, [pc, #528]	@ (8006414 <main+0x62a4>)
 8006202:	f001 fe6f 	bl	8007ee4 <Str_Len>
 8006206:	4603      	mov	r3, r0
 8006208:	b2db      	uxtb	r3, r3
 800620a:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 800620e:	9300      	str	r3, [sp, #0]
 8006210:	4b80      	ldr	r3, [pc, #512]	@ (8006414 <main+0x62a4>)
 8006212:	2101      	movs	r1, #1
 8006214:	487d      	ldr	r0, [pc, #500]	@ (800640c <main+0x629c>)
 8006216:	f001 fdf8 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 800621a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800621e:	3301      	adds	r3, #1
 8006220:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8006224:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8006228:	461a      	mov	r2, r3
 800622a:	2101      	movs	r1, #1
 800622c:	4877      	ldr	r0, [pc, #476]	@ (800640c <main+0x629c>)
 800622e:	f001 fdb0 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8006232:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8006236:	2301      	movs	r3, #1
 8006238:	2101      	movs	r1, #1
 800623a:	4874      	ldr	r0, [pc, #464]	@ (800640c <main+0x629c>)
 800623c:	f001 fe0f 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8006240:	f001 ffb6 	bl	80081b0 <HAL_GetTick>
 8006244:	4603      	mov	r3, r0
 8006246:	33fa      	adds	r3, #250	@ 0xfa
 8006248:	65bb      	str	r3, [r7, #88]	@ 0x58
 800624a:	e268      	b.n	800671e <main+0x65ae>

			}
			//2 is entered
			else if (Keypad_Get_Key(&kp, kp_button_2)
 800624c:	2101      	movs	r1, #1
 800624e:	486e      	ldr	r0, [pc, #440]	@ (8006408 <main+0x6298>)
 8006250:	f001 ff3e 	bl	80080d0 <Keypad_Get_Key>
 8006254:	4603      	mov	r3, r0
 8006256:	2b00      	cmp	r3, #0
 8006258:	d042      	beq.n	80062e0 <main+0x6170>
					&& (current_tick >= general_delay)) {
 800625a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800625c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800625e:	429a      	cmp	r2, r3
 8006260:	d33e      	bcc.n	80062e0 <main+0x6170>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8006262:	2300      	movs	r3, #0
 8006264:	2200      	movs	r2, #0
 8006266:	2101      	movs	r1, #1
 8006268:	4868      	ldr	r0, [pc, #416]	@ (800640c <main+0x629c>)
 800626a:	f001 fdf8 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 800626e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8006272:	2b01      	cmp	r3, #1
 8006274:	d827      	bhi.n	80062c6 <main+0x6156>
					time_date_buffer[input_index] = '2';
 8006276:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800627a:	3368      	adds	r3, #104	@ 0x68
 800627c:	443b      	add	r3, r7
 800627e:	2232      	movs	r2, #50	@ 0x32
 8006280:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8006284:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8006288:	3301      	adds	r3, #1
 800628a:	3368      	adds	r3, #104	@ 0x68
 800628c:	443b      	add	r3, r7
 800628e:	2200      	movs	r2, #0
 8006290:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "2");
 8006294:	4860      	ldr	r0, [pc, #384]	@ (8006418 <main+0x62a8>)
 8006296:	f001 fe25 	bl	8007ee4 <Str_Len>
 800629a:	4603      	mov	r3, r0
 800629c:	b2db      	uxtb	r3, r3
 800629e:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 80062a2:	9300      	str	r3, [sp, #0]
 80062a4:	4b5c      	ldr	r3, [pc, #368]	@ (8006418 <main+0x62a8>)
 80062a6:	2101      	movs	r1, #1
 80062a8:	4858      	ldr	r0, [pc, #352]	@ (800640c <main+0x629c>)
 80062aa:	f001 fdae 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 80062ae:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80062b2:	3301      	adds	r3, #1
 80062b4:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 80062b8:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80062bc:	461a      	mov	r2, r3
 80062be:	2101      	movs	r1, #1
 80062c0:	4852      	ldr	r0, [pc, #328]	@ (800640c <main+0x629c>)
 80062c2:	f001 fd66 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 80062c6:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 80062ca:	2301      	movs	r3, #1
 80062cc:	2101      	movs	r1, #1
 80062ce:	484f      	ldr	r0, [pc, #316]	@ (800640c <main+0x629c>)
 80062d0:	f001 fdc5 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 80062d4:	f001 ff6c 	bl	80081b0 <HAL_GetTick>
 80062d8:	4603      	mov	r3, r0
 80062da:	33fa      	adds	r3, #250	@ 0xfa
 80062dc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80062de:	e21e      	b.n	800671e <main+0x65ae>

			}
			//3 is entered
			else if (Keypad_Get_Key(&kp, kp_button_3)
 80062e0:	2102      	movs	r1, #2
 80062e2:	4849      	ldr	r0, [pc, #292]	@ (8006408 <main+0x6298>)
 80062e4:	f001 fef4 	bl	80080d0 <Keypad_Get_Key>
 80062e8:	4603      	mov	r3, r0
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d042      	beq.n	8006374 <main+0x6204>
					&& (current_tick >= general_delay)) {
 80062ee:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80062f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d33e      	bcc.n	8006374 <main+0x6204>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80062f6:	2300      	movs	r3, #0
 80062f8:	2200      	movs	r2, #0
 80062fa:	2101      	movs	r1, #1
 80062fc:	4843      	ldr	r0, [pc, #268]	@ (800640c <main+0x629c>)
 80062fe:	f001 fdae 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8006302:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8006306:	2b01      	cmp	r3, #1
 8006308:	d827      	bhi.n	800635a <main+0x61ea>
					time_date_buffer[input_index] = '3';
 800630a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800630e:	3368      	adds	r3, #104	@ 0x68
 8006310:	443b      	add	r3, r7
 8006312:	2233      	movs	r2, #51	@ 0x33
 8006314:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8006318:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800631c:	3301      	adds	r3, #1
 800631e:	3368      	adds	r3, #104	@ 0x68
 8006320:	443b      	add	r3, r7
 8006322:	2200      	movs	r2, #0
 8006324:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "3");
 8006328:	483c      	ldr	r0, [pc, #240]	@ (800641c <main+0x62ac>)
 800632a:	f001 fddb 	bl	8007ee4 <Str_Len>
 800632e:	4603      	mov	r3, r0
 8006330:	b2db      	uxtb	r3, r3
 8006332:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8006336:	9300      	str	r3, [sp, #0]
 8006338:	4b38      	ldr	r3, [pc, #224]	@ (800641c <main+0x62ac>)
 800633a:	2101      	movs	r1, #1
 800633c:	4833      	ldr	r0, [pc, #204]	@ (800640c <main+0x629c>)
 800633e:	f001 fd64 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 8006342:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8006346:	3301      	adds	r3, #1
 8006348:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 800634c:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8006350:	461a      	mov	r2, r3
 8006352:	2101      	movs	r1, #1
 8006354:	482d      	ldr	r0, [pc, #180]	@ (800640c <main+0x629c>)
 8006356:	f001 fd1c 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 800635a:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 800635e:	2301      	movs	r3, #1
 8006360:	2101      	movs	r1, #1
 8006362:	482a      	ldr	r0, [pc, #168]	@ (800640c <main+0x629c>)
 8006364:	f001 fd7b 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8006368:	f001 ff22 	bl	80081b0 <HAL_GetTick>
 800636c:	4603      	mov	r3, r0
 800636e:	33fa      	adds	r3, #250	@ 0xfa
 8006370:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006372:	e1d4      	b.n	800671e <main+0x65ae>

			}

			//4 is entered
			else if (Keypad_Get_Key(&kp, kp_button_4)
 8006374:	2104      	movs	r1, #4
 8006376:	4824      	ldr	r0, [pc, #144]	@ (8006408 <main+0x6298>)
 8006378:	f001 feaa 	bl	80080d0 <Keypad_Get_Key>
 800637c:	4603      	mov	r3, r0
 800637e:	2b00      	cmp	r3, #0
 8006380:	d050      	beq.n	8006424 <main+0x62b4>
					&& (current_tick >= general_delay)) {
 8006382:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006384:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006386:	429a      	cmp	r2, r3
 8006388:	d34c      	bcc.n	8006424 <main+0x62b4>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 800638a:	2300      	movs	r3, #0
 800638c:	2200      	movs	r2, #0
 800638e:	2101      	movs	r1, #1
 8006390:	481e      	ldr	r0, [pc, #120]	@ (800640c <main+0x629c>)
 8006392:	f001 fd64 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8006396:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800639a:	2b01      	cmp	r3, #1
 800639c:	d827      	bhi.n	80063ee <main+0x627e>
					time_date_buffer[input_index] = '4';
 800639e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80063a2:	3368      	adds	r3, #104	@ 0x68
 80063a4:	443b      	add	r3, r7
 80063a6:	2234      	movs	r2, #52	@ 0x34
 80063a8:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 80063ac:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80063b0:	3301      	adds	r3, #1
 80063b2:	3368      	adds	r3, #104	@ 0x68
 80063b4:	443b      	add	r3, r7
 80063b6:	2200      	movs	r2, #0
 80063b8:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "4");
 80063bc:	4818      	ldr	r0, [pc, #96]	@ (8006420 <main+0x62b0>)
 80063be:	f001 fd91 	bl	8007ee4 <Str_Len>
 80063c2:	4603      	mov	r3, r0
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 80063ca:	9300      	str	r3, [sp, #0]
 80063cc:	4b14      	ldr	r3, [pc, #80]	@ (8006420 <main+0x62b0>)
 80063ce:	2101      	movs	r1, #1
 80063d0:	480e      	ldr	r0, [pc, #56]	@ (800640c <main+0x629c>)
 80063d2:	f001 fd1a 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 80063d6:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80063da:	3301      	adds	r3, #1
 80063dc:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 80063e0:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80063e4:	461a      	mov	r2, r3
 80063e6:	2101      	movs	r1, #1
 80063e8:	4808      	ldr	r0, [pc, #32]	@ (800640c <main+0x629c>)
 80063ea:	f001 fcd2 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 80063ee:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 80063f2:	2301      	movs	r3, #1
 80063f4:	2101      	movs	r1, #1
 80063f6:	4805      	ldr	r0, [pc, #20]	@ (800640c <main+0x629c>)
 80063f8:	f001 fd31 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 80063fc:	f001 fed8 	bl	80081b0 <HAL_GetTick>
 8006400:	4603      	mov	r3, r0
 8006402:	33fa      	adds	r3, #250	@ 0xfa
 8006404:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006406:	e18a      	b.n	800671e <main+0x65ae>
 8006408:	20000000 	.word	0x20000000
 800640c:	2000001c 	.word	0x2000001c
 8006410:	0800be9c 	.word	0x0800be9c
 8006414:	0800bea0 	.word	0x0800bea0
 8006418:	0800bea4 	.word	0x0800bea4
 800641c:	0800bea8 	.word	0x0800bea8
 8006420:	0800beac 	.word	0x0800beac

			}
			//5 is entered
			else if (Keypad_Get_Key(&kp, kp_button_5)
 8006424:	2105      	movs	r1, #5
 8006426:	4893      	ldr	r0, [pc, #588]	@ (8006674 <main+0x6504>)
 8006428:	f001 fe52 	bl	80080d0 <Keypad_Get_Key>
 800642c:	4603      	mov	r3, r0
 800642e:	2b00      	cmp	r3, #0
 8006430:	d042      	beq.n	80064b8 <main+0x6348>
					&& (current_tick >= general_delay)) {
 8006432:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006434:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006436:	429a      	cmp	r2, r3
 8006438:	d33e      	bcc.n	80064b8 <main+0x6348>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 800643a:	2300      	movs	r3, #0
 800643c:	2200      	movs	r2, #0
 800643e:	2101      	movs	r1, #1
 8006440:	488d      	ldr	r0, [pc, #564]	@ (8006678 <main+0x6508>)
 8006442:	f001 fd0c 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8006446:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800644a:	2b01      	cmp	r3, #1
 800644c:	d827      	bhi.n	800649e <main+0x632e>
					time_date_buffer[input_index] = '5';
 800644e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8006452:	3368      	adds	r3, #104	@ 0x68
 8006454:	443b      	add	r3, r7
 8006456:	2235      	movs	r2, #53	@ 0x35
 8006458:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 800645c:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8006460:	3301      	adds	r3, #1
 8006462:	3368      	adds	r3, #104	@ 0x68
 8006464:	443b      	add	r3, r7
 8006466:	2200      	movs	r2, #0
 8006468:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "5");
 800646c:	4883      	ldr	r0, [pc, #524]	@ (800667c <main+0x650c>)
 800646e:	f001 fd39 	bl	8007ee4 <Str_Len>
 8006472:	4603      	mov	r3, r0
 8006474:	b2db      	uxtb	r3, r3
 8006476:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 800647a:	9300      	str	r3, [sp, #0]
 800647c:	4b7f      	ldr	r3, [pc, #508]	@ (800667c <main+0x650c>)
 800647e:	2101      	movs	r1, #1
 8006480:	487d      	ldr	r0, [pc, #500]	@ (8006678 <main+0x6508>)
 8006482:	f001 fcc2 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 8006486:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800648a:	3301      	adds	r3, #1
 800648c:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8006490:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8006494:	461a      	mov	r2, r3
 8006496:	2101      	movs	r1, #1
 8006498:	4877      	ldr	r0, [pc, #476]	@ (8006678 <main+0x6508>)
 800649a:	f001 fc7a 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 800649e:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 80064a2:	2301      	movs	r3, #1
 80064a4:	2101      	movs	r1, #1
 80064a6:	4874      	ldr	r0, [pc, #464]	@ (8006678 <main+0x6508>)
 80064a8:	f001 fcd9 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 80064ac:	f001 fe80 	bl	80081b0 <HAL_GetTick>
 80064b0:	4603      	mov	r3, r0
 80064b2:	33fa      	adds	r3, #250	@ 0xfa
 80064b4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80064b6:	e132      	b.n	800671e <main+0x65ae>

			}

			//6 is entered
			else if (Keypad_Get_Key(&kp, kp_button_6)
 80064b8:	2106      	movs	r1, #6
 80064ba:	486e      	ldr	r0, [pc, #440]	@ (8006674 <main+0x6504>)
 80064bc:	f001 fe08 	bl	80080d0 <Keypad_Get_Key>
 80064c0:	4603      	mov	r3, r0
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d042      	beq.n	800654c <main+0x63dc>
					&& (current_tick >= general_delay)) {
 80064c6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80064c8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d33e      	bcc.n	800654c <main+0x63dc>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80064ce:	2300      	movs	r3, #0
 80064d0:	2200      	movs	r2, #0
 80064d2:	2101      	movs	r1, #1
 80064d4:	4868      	ldr	r0, [pc, #416]	@ (8006678 <main+0x6508>)
 80064d6:	f001 fcc2 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 80064da:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80064de:	2b01      	cmp	r3, #1
 80064e0:	d827      	bhi.n	8006532 <main+0x63c2>
					time_date_buffer[input_index] = '6';
 80064e2:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80064e6:	3368      	adds	r3, #104	@ 0x68
 80064e8:	443b      	add	r3, r7
 80064ea:	2236      	movs	r2, #54	@ 0x36
 80064ec:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 80064f0:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80064f4:	3301      	adds	r3, #1
 80064f6:	3368      	adds	r3, #104	@ 0x68
 80064f8:	443b      	add	r3, r7
 80064fa:	2200      	movs	r2, #0
 80064fc:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "6");
 8006500:	485f      	ldr	r0, [pc, #380]	@ (8006680 <main+0x6510>)
 8006502:	f001 fcef 	bl	8007ee4 <Str_Len>
 8006506:	4603      	mov	r3, r0
 8006508:	b2db      	uxtb	r3, r3
 800650a:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 800650e:	9300      	str	r3, [sp, #0]
 8006510:	4b5b      	ldr	r3, [pc, #364]	@ (8006680 <main+0x6510>)
 8006512:	2101      	movs	r1, #1
 8006514:	4858      	ldr	r0, [pc, #352]	@ (8006678 <main+0x6508>)
 8006516:	f001 fc78 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 800651a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800651e:	3301      	adds	r3, #1
 8006520:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8006524:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8006528:	461a      	mov	r2, r3
 800652a:	2101      	movs	r1, #1
 800652c:	4852      	ldr	r0, [pc, #328]	@ (8006678 <main+0x6508>)
 800652e:	f001 fc30 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8006532:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8006536:	2301      	movs	r3, #1
 8006538:	2101      	movs	r1, #1
 800653a:	484f      	ldr	r0, [pc, #316]	@ (8006678 <main+0x6508>)
 800653c:	f001 fc8f 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8006540:	f001 fe36 	bl	80081b0 <HAL_GetTick>
 8006544:	4603      	mov	r3, r0
 8006546:	33fa      	adds	r3, #250	@ 0xfa
 8006548:	65bb      	str	r3, [r7, #88]	@ 0x58
 800654a:	e0e8      	b.n	800671e <main+0x65ae>

			}

			//7 is entered
			else if (Keypad_Get_Key(&kp, kp_button_7)
 800654c:	2108      	movs	r1, #8
 800654e:	4849      	ldr	r0, [pc, #292]	@ (8006674 <main+0x6504>)
 8006550:	f001 fdbe 	bl	80080d0 <Keypad_Get_Key>
 8006554:	4603      	mov	r3, r0
 8006556:	2b00      	cmp	r3, #0
 8006558:	d042      	beq.n	80065e0 <main+0x6470>
					&& (current_tick >= general_delay)) {
 800655a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800655c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800655e:	429a      	cmp	r2, r3
 8006560:	d33e      	bcc.n	80065e0 <main+0x6470>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8006562:	2300      	movs	r3, #0
 8006564:	2200      	movs	r2, #0
 8006566:	2101      	movs	r1, #1
 8006568:	4843      	ldr	r0, [pc, #268]	@ (8006678 <main+0x6508>)
 800656a:	f001 fc78 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 800656e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8006572:	2b01      	cmp	r3, #1
 8006574:	d827      	bhi.n	80065c6 <main+0x6456>
					time_date_buffer[input_index] = '7';
 8006576:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800657a:	3368      	adds	r3, #104	@ 0x68
 800657c:	443b      	add	r3, r7
 800657e:	2237      	movs	r2, #55	@ 0x37
 8006580:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8006584:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8006588:	3301      	adds	r3, #1
 800658a:	3368      	adds	r3, #104	@ 0x68
 800658c:	443b      	add	r3, r7
 800658e:	2200      	movs	r2, #0
 8006590:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "7");
 8006594:	483b      	ldr	r0, [pc, #236]	@ (8006684 <main+0x6514>)
 8006596:	f001 fca5 	bl	8007ee4 <Str_Len>
 800659a:	4603      	mov	r3, r0
 800659c:	b2db      	uxtb	r3, r3
 800659e:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 80065a2:	9300      	str	r3, [sp, #0]
 80065a4:	4b37      	ldr	r3, [pc, #220]	@ (8006684 <main+0x6514>)
 80065a6:	2101      	movs	r1, #1
 80065a8:	4833      	ldr	r0, [pc, #204]	@ (8006678 <main+0x6508>)
 80065aa:	f001 fc2e 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 80065ae:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80065b2:	3301      	adds	r3, #1
 80065b4:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 80065b8:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80065bc:	461a      	mov	r2, r3
 80065be:	2101      	movs	r1, #1
 80065c0:	482d      	ldr	r0, [pc, #180]	@ (8006678 <main+0x6508>)
 80065c2:	f001 fbe6 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 80065c6:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 80065ca:	2301      	movs	r3, #1
 80065cc:	2101      	movs	r1, #1
 80065ce:	482a      	ldr	r0, [pc, #168]	@ (8006678 <main+0x6508>)
 80065d0:	f001 fc45 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 80065d4:	f001 fdec 	bl	80081b0 <HAL_GetTick>
 80065d8:	4603      	mov	r3, r0
 80065da:	33fa      	adds	r3, #250	@ 0xfa
 80065dc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80065de:	e09e      	b.n	800671e <main+0x65ae>

			}

			//8 is entered
			else if (Keypad_Get_Key(&kp, kp_button_8)
 80065e0:	2109      	movs	r1, #9
 80065e2:	4824      	ldr	r0, [pc, #144]	@ (8006674 <main+0x6504>)
 80065e4:	f001 fd74 	bl	80080d0 <Keypad_Get_Key>
 80065e8:	4603      	mov	r3, r0
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d04e      	beq.n	800668c <main+0x651c>
					&& (current_tick >= general_delay)) {
 80065ee:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80065f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d34a      	bcc.n	800668c <main+0x651c>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80065f6:	2300      	movs	r3, #0
 80065f8:	2200      	movs	r2, #0
 80065fa:	2101      	movs	r1, #1
 80065fc:	481e      	ldr	r0, [pc, #120]	@ (8006678 <main+0x6508>)
 80065fe:	f001 fc2e 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8006602:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8006606:	2b01      	cmp	r3, #1
 8006608:	d827      	bhi.n	800665a <main+0x64ea>
					time_date_buffer[input_index] = '8';
 800660a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800660e:	3368      	adds	r3, #104	@ 0x68
 8006610:	443b      	add	r3, r7
 8006612:	2238      	movs	r2, #56	@ 0x38
 8006614:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8006618:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800661c:	3301      	adds	r3, #1
 800661e:	3368      	adds	r3, #104	@ 0x68
 8006620:	443b      	add	r3, r7
 8006622:	2200      	movs	r2, #0
 8006624:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "8");
 8006628:	4817      	ldr	r0, [pc, #92]	@ (8006688 <main+0x6518>)
 800662a:	f001 fc5b 	bl	8007ee4 <Str_Len>
 800662e:	4603      	mov	r3, r0
 8006630:	b2db      	uxtb	r3, r3
 8006632:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8006636:	9300      	str	r3, [sp, #0]
 8006638:	4b13      	ldr	r3, [pc, #76]	@ (8006688 <main+0x6518>)
 800663a:	2101      	movs	r1, #1
 800663c:	480e      	ldr	r0, [pc, #56]	@ (8006678 <main+0x6508>)
 800663e:	f001 fbe4 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 8006642:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8006646:	3301      	adds	r3, #1
 8006648:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 800664c:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8006650:	461a      	mov	r2, r3
 8006652:	2101      	movs	r1, #1
 8006654:	4808      	ldr	r0, [pc, #32]	@ (8006678 <main+0x6508>)
 8006656:	f001 fb9c 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 800665a:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 800665e:	2301      	movs	r3, #1
 8006660:	2101      	movs	r1, #1
 8006662:	4805      	ldr	r0, [pc, #20]	@ (8006678 <main+0x6508>)
 8006664:	f001 fbfb 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8006668:	f001 fda2 	bl	80081b0 <HAL_GetTick>
 800666c:	4603      	mov	r3, r0
 800666e:	33fa      	adds	r3, #250	@ 0xfa
 8006670:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006672:	e054      	b.n	800671e <main+0x65ae>
 8006674:	20000000 	.word	0x20000000
 8006678:	2000001c 	.word	0x2000001c
 800667c:	0800beb0 	.word	0x0800beb0
 8006680:	0800beb4 	.word	0x0800beb4
 8006684:	0800beb8 	.word	0x0800beb8
 8006688:	0800bebc 	.word	0x0800bebc

			}

			//9 is entered
			else if (Keypad_Get_Key(&kp, kp_button_9)
 800668c:	210a      	movs	r1, #10
 800668e:	48a4      	ldr	r0, [pc, #656]	@ (8006920 <main+0x67b0>)
 8006690:	f001 fd1e 	bl	80080d0 <Keypad_Get_Key>
 8006694:	4603      	mov	r3, r0
 8006696:	2b00      	cmp	r3, #0
 8006698:	d041      	beq.n	800671e <main+0x65ae>
					&& (current_tick >= general_delay)) {
 800669a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800669c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800669e:	429a      	cmp	r2, r3
 80066a0:	d33d      	bcc.n	800671e <main+0x65ae>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80066a2:	2300      	movs	r3, #0
 80066a4:	2200      	movs	r2, #0
 80066a6:	2101      	movs	r1, #1
 80066a8:	489e      	ldr	r0, [pc, #632]	@ (8006924 <main+0x67b4>)
 80066aa:	f001 fbd8 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 80066ae:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d827      	bhi.n	8006706 <main+0x6596>
					time_date_buffer[input_index] = '9';
 80066b6:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80066ba:	3368      	adds	r3, #104	@ 0x68
 80066bc:	443b      	add	r3, r7
 80066be:	2239      	movs	r2, #57	@ 0x39
 80066c0:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 80066c4:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80066c8:	3301      	adds	r3, #1
 80066ca:	3368      	adds	r3, #104	@ 0x68
 80066cc:	443b      	add	r3, r7
 80066ce:	2200      	movs	r2, #0
 80066d0:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "9");
 80066d4:	4894      	ldr	r0, [pc, #592]	@ (8006928 <main+0x67b8>)
 80066d6:	f001 fc05 	bl	8007ee4 <Str_Len>
 80066da:	4603      	mov	r3, r0
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 80066e2:	9300      	str	r3, [sp, #0]
 80066e4:	4b90      	ldr	r3, [pc, #576]	@ (8006928 <main+0x67b8>)
 80066e6:	2101      	movs	r1, #1
 80066e8:	488e      	ldr	r0, [pc, #568]	@ (8006924 <main+0x67b4>)
 80066ea:	f001 fb8e 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 80066ee:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80066f2:	3301      	adds	r3, #1
 80066f4:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 80066f8:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80066fc:	461a      	mov	r2, r3
 80066fe:	2101      	movs	r1, #1
 8006700:	4888      	ldr	r0, [pc, #544]	@ (8006924 <main+0x67b4>)
 8006702:	f001 fb46 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8006706:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 800670a:	2301      	movs	r3, #1
 800670c:	2101      	movs	r1, #1
 800670e:	4885      	ldr	r0, [pc, #532]	@ (8006924 <main+0x67b4>)
 8006710:	f001 fba5 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8006714:	f001 fd4c 	bl	80081b0 <HAL_GetTick>
 8006718:	4603      	mov	r3, r0
 800671a:	33fa      	adds	r3, #250	@ 0xfa
 800671c:	65bb      	str	r3, [r7, #88]	@ 0x58

			}

			//when yes is entered -> check for miinutes validity (state 32)
			if (Keypad_Get_Key(&kp, kp_button_yes)
 800671e:	210f      	movs	r1, #15
 8006720:	487f      	ldr	r0, [pc, #508]	@ (8006920 <main+0x67b0>)
 8006722:	f001 fcd5 	bl	80080d0 <Keypad_Get_Key>
 8006726:	4603      	mov	r3, r0
 8006728:	2b00      	cmp	r3, #0
 800672a:	d021      	beq.n	8006770 <main+0x6600>
					&& (current_tick >= general_delay)) {
 800672c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800672e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006730:	429a      	cmp	r2, r3
 8006732:	d31d      	bcc.n	8006770 <main+0x6600>

				Alcd_Clear(&lcd);
 8006734:	487b      	ldr	r0, [pc, #492]	@ (8006924 <main+0x67b4>)
 8006736:	f001 fb81 	bl	8007e3c <Alcd_Clear>

				snprintf(timeString, sizeof(timeString), "%02d", buffer);
 800673a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800673e:	f107 001c 	add.w	r0, r7, #28
 8006742:	4a7a      	ldr	r2, [pc, #488]	@ (800692c <main+0x67bc>)
 8006744:	2132      	movs	r1, #50	@ 0x32
 8006746:	f004 fe4d 	bl	800b3e4 <sniprintf>
				Alcd_PutAt_n(&lcd, 1, 0, timeString, strlen(timeString));
 800674a:	f107 031c 	add.w	r3, r7, #28
 800674e:	4618      	mov	r0, r3
 8006750:	f7f9 fd06 	bl	8000160 <strlen>
 8006754:	4603      	mov	r3, r0
 8006756:	b2db      	uxtb	r3, r3
 8006758:	f107 021c 	add.w	r2, r7, #28
 800675c:	9300      	str	r3, [sp, #0]
 800675e:	4613      	mov	r3, r2
 8006760:	2200      	movs	r2, #0
 8006762:	2101      	movs	r1, #1
 8006764:	486f      	ldr	r0, [pc, #444]	@ (8006924 <main+0x67b4>)
 8006766:	f001 fb50 	bl	8007e0a <Alcd_PutAt_n>

//go to validation phase
				status = 52;
 800676a:	2334      	movs	r3, #52	@ 0x34
 800676c:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

			}

			//
			general_delay = HAL_GetTick() + 250;
 8006770:	f001 fd1e 	bl	80081b0 <HAL_GetTick>
 8006774:	4603      	mov	r3, r0
 8006776:	33fa      	adds	r3, #250	@ 0xfa
 8006778:	65bb      	str	r3, [r7, #88]	@ 0x58
		while ((status == 50) && (current_tick >= general_delay)) {
 800677a:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 800677e:	2b32      	cmp	r3, #50	@ 0x32
 8006780:	d17d      	bne.n	800687e <main+0x670e>
 8006782:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006784:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006786:	429a      	cmp	r2, r3
 8006788:	f4bf ac71 	bcs.w	800606e <main+0x5efe>
		}

		//minutes validation phase
		while ((status == 52) && (current_tick >= general_delay)) {
 800678c:	e077      	b.n	800687e <main+0x670e>

			//get the current tick number
			current_tick = HAL_GetTick();
 800678e:	f001 fd0f 	bl	80081b0 <HAL_GetTick>
 8006792:	6638      	str	r0, [r7, #96]	@ 0x60
			input_index = 0;
 8006794:	2300      	movs	r3, #0
 8006796:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55

			Alcd_Clear(&lcd);
 800679a:	4862      	ldr	r0, [pc, #392]	@ (8006924 <main+0x67b4>)
 800679c:	f001 fb4e 	bl	8007e3c <Alcd_Clear>

			snprintf(timeString, sizeof(timeString), "%02d", status);
 80067a0:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 80067a4:	f107 001c 	add.w	r0, r7, #28
 80067a8:	4a60      	ldr	r2, [pc, #384]	@ (800692c <main+0x67bc>)
 80067aa:	2132      	movs	r1, #50	@ 0x32
 80067ac:	f004 fe1a 	bl	800b3e4 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 80067b0:	f107 031c 	add.w	r3, r7, #28
 80067b4:	4618      	mov	r0, r3
 80067b6:	f7f9 fcd3 	bl	8000160 <strlen>
 80067ba:	4603      	mov	r3, r0
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	f107 021c 	add.w	r2, r7, #28
 80067c2:	9300      	str	r3, [sp, #0]
 80067c4:	4613      	mov	r3, r2
 80067c6:	220e      	movs	r2, #14
 80067c8:	2100      	movs	r1, #0
 80067ca:	4856      	ldr	r0, [pc, #344]	@ (8006924 <main+0x67b4>)
 80067cc:	f001 fb1d 	bl	8007e0a <Alcd_PutAt_n>

			buffer = atoi(time_date_buffer);
 80067d0:	1d3b      	adds	r3, r7, #4
 80067d2:	4618      	mov	r0, r3
 80067d4:	f004 fd7d 	bl	800b2d2 <atoi>
 80067d8:	4603      	mov	r3, r0
 80067da:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56

			//check if minutes is within the range 0 to 60
			if (buffer >= 0 && buffer < 61) {
 80067de:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80067e2:	2b3c      	cmp	r3, #60	@ 0x3c
 80067e4:	d818      	bhi.n	8006818 <main+0x66a8>

				status = 49;
 80067e6:	2331      	movs	r3, #49	@ 0x31
 80067e8:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

				//set the minutes to the value
				dose_m = buffer;
 80067ec:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80067f0:	b2db      	uxtb	r3, r3
 80067f2:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53

				input_index = 0;
 80067f6:	2300      	movs	r3, #0
 80067f8:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80067fc:	2300      	movs	r3, #0
 80067fe:	2200      	movs	r2, #0
 8006800:	2101      	movs	r1, #1
 8006802:	4848      	ldr	r0, [pc, #288]	@ (8006924 <main+0x67b4>)
 8006804:	f001 fb2b 	bl	8007e5e <Alcd_Display_Control>
				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8006808:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 800680c:	2301      	movs	r3, #1
 800680e:	2101      	movs	r1, #1
 8006810:	4844      	ldr	r0, [pc, #272]	@ (8006924 <main+0x67b4>)
 8006812:	f001 fb24 	bl	8007e5e <Alcd_Display_Control>
 8006816:	e027      	b.n	8006868 <main+0x66f8>
			} else {
				Alcd_PutAt(&lcd, 0, 0, "invalid");
 8006818:	4845      	ldr	r0, [pc, #276]	@ (8006930 <main+0x67c0>)
 800681a:	f001 fb63 	bl	8007ee4 <Str_Len>
 800681e:	4603      	mov	r3, r0
 8006820:	b2db      	uxtb	r3, r3
 8006822:	9300      	str	r3, [sp, #0]
 8006824:	4b42      	ldr	r3, [pc, #264]	@ (8006930 <main+0x67c0>)
 8006826:	2200      	movs	r2, #0
 8006828:	2100      	movs	r1, #0
 800682a:	483e      	ldr	r0, [pc, #248]	@ (8006924 <main+0x67b4>)
 800682c:	f001 faed 	bl	8007e0a <Alcd_PutAt_n>
				delay_flag = 1;
 8006830:	2301      	movs	r3, #1
 8006832:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

				input_index = 0;
 8006836:	2300      	movs	r3, #0
 8006838:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 800683c:	2300      	movs	r3, #0
 800683e:	2200      	movs	r2, #0
 8006840:	2101      	movs	r1, #1
 8006842:	4838      	ldr	r0, [pc, #224]	@ (8006924 <main+0x67b4>)
 8006844:	f001 fb0b 	bl	8007e5e <Alcd_Display_Control>
				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8006848:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 800684c:	2301      	movs	r3, #1
 800684e:	2101      	movs	r1, #1
 8006850:	4834      	ldr	r0, [pc, #208]	@ (8006924 <main+0x67b4>)
 8006852:	f001 fb04 	bl	8007e5e <Alcd_Display_Control>
				//return to entering hours
				status = 50;
 8006856:	2332      	movs	r3, #50	@ 0x32
 8006858:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

				general_delay = HAL_GetTick() + 1000;
 800685c:	f001 fca8 	bl	80081b0 <HAL_GetTick>
 8006860:	4603      	mov	r3, r0
 8006862:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8006866:	65bb      	str	r3, [r7, #88]	@ 0x58
			}

			//create a delay
			if ((delay_flag == 1) && (current_tick >= general_delay)) {
 8006868:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 800686c:	2b01      	cmp	r3, #1
 800686e:	d106      	bne.n	800687e <main+0x670e>
 8006870:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006872:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006874:	429a      	cmp	r2, r3
 8006876:	d302      	bcc.n	800687e <main+0x670e>

				delay_flag = 0;
 8006878:	2300      	movs	r3, #0
 800687a:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
		while ((status == 52) && (current_tick >= general_delay)) {
 800687e:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8006882:	2b34      	cmp	r3, #52	@ 0x34
 8006884:	f040 8383 	bne.w	8006f8e <main+0x6e1e>
 8006888:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800688a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800688c:	429a      	cmp	r2, r3
 800688e:	f4bf af7e 	bcs.w	800678e <main+0x661e>
			}

		}

//entering the seconds state (51)
		while ((status == 51) && (current_tick >= general_delay)) {
 8006892:	e37c      	b.n	8006f8e <main+0x6e1e>

			//get the current tick number
			current_tick = HAL_GetTick();
 8006894:	f001 fc8c 	bl	80081b0 <HAL_GetTick>
 8006898:	6638      	str	r0, [r7, #96]	@ 0x60

			//Alcd_Clear(&lcd);
			Alcd_PutAt(&lcd, 0, 0, "Enter seconds");
 800689a:	4826      	ldr	r0, [pc, #152]	@ (8006934 <main+0x67c4>)
 800689c:	f001 fb22 	bl	8007ee4 <Str_Len>
 80068a0:	4603      	mov	r3, r0
 80068a2:	b2db      	uxtb	r3, r3
 80068a4:	9300      	str	r3, [sp, #0]
 80068a6:	4b23      	ldr	r3, [pc, #140]	@ (8006934 <main+0x67c4>)
 80068a8:	2200      	movs	r2, #0
 80068aa:	2100      	movs	r1, #0
 80068ac:	481d      	ldr	r0, [pc, #116]	@ (8006924 <main+0x67b4>)
 80068ae:	f001 faac 	bl	8007e0a <Alcd_PutAt_n>

			snprintf(timeString, sizeof(timeString), "%02d", status);
 80068b2:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 80068b6:	f107 001c 	add.w	r0, r7, #28
 80068ba:	4a1c      	ldr	r2, [pc, #112]	@ (800692c <main+0x67bc>)
 80068bc:	2132      	movs	r1, #50	@ 0x32
 80068be:	f004 fd91 	bl	800b3e4 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 80068c2:	f107 031c 	add.w	r3, r7, #28
 80068c6:	4618      	mov	r0, r3
 80068c8:	f7f9 fc4a 	bl	8000160 <strlen>
 80068cc:	4603      	mov	r3, r0
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	f107 021c 	add.w	r2, r7, #28
 80068d4:	9300      	str	r3, [sp, #0]
 80068d6:	4613      	mov	r3, r2
 80068d8:	220e      	movs	r2, #14
 80068da:	2100      	movs	r1, #0
 80068dc:	4811      	ldr	r0, [pc, #68]	@ (8006924 <main+0x67b4>)
 80068de:	f001 fa94 	bl	8007e0a <Alcd_PutAt_n>

			Alcd_CursorAt(&lcd, 1, input_index);
 80068e2:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80068e6:	461a      	mov	r2, r3
 80068e8:	2101      	movs	r1, #1
 80068ea:	480e      	ldr	r0, [pc, #56]	@ (8006924 <main+0x67b4>)
 80068ec:	f001 fa51 	bl	8007d92 <Alcd_CursorAt>
			Alcd_Display_Control(&lcd, 1, 1, 1);
 80068f0:	2301      	movs	r3, #1
 80068f2:	2201      	movs	r2, #1
 80068f4:	2101      	movs	r1, #1
 80068f6:	480b      	ldr	r0, [pc, #44]	@ (8006924 <main+0x67b4>)
 80068f8:	f001 fab1 	bl	8007e5e <Alcd_Display_Control>

			//check if any button is pressed
			//check for any keypad input
			Keypad_Refresh(&kp);
 80068fc:	4808      	ldr	r0, [pc, #32]	@ (8006920 <main+0x67b0>)
 80068fe:	f001 fb4b 	bl	8007f98 <Keypad_Refresh>

			//if back is entered
			if (Keypad_Get_Key(&kp, kp_button_no_back)
 8006902:	210e      	movs	r1, #14
 8006904:	4806      	ldr	r0, [pc, #24]	@ (8006920 <main+0x67b0>)
 8006906:	f001 fbe3 	bl	80080d0 <Keypad_Get_Key>
 800690a:	4603      	mov	r3, r0
 800690c:	2b00      	cmp	r3, #0
 800690e:	d013      	beq.n	8006938 <main+0x67c8>
					&& (current_tick >= general_delay)) {
 8006910:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006912:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006914:	429a      	cmp	r2, r3
 8006916:	d30f      	bcc.n	8006938 <main+0x67c8>

				//back to previous menu
				status = 49;
 8006918:	2331      	movs	r3, #49	@ 0x31
 800691a:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 800691e:	e308      	b.n	8006f32 <main+0x6dc2>
 8006920:	20000000 	.word	0x20000000
 8006924:	2000001c 	.word	0x2000001c
 8006928:	0800bec0 	.word	0x0800bec0
 800692c:	0800bdac 	.word	0x0800bdac
 8006930:	0800bec4 	.word	0x0800bec4
 8006934:	0800bedc 	.word	0x0800bedc

			}

			//0 is entered
			else if (Keypad_Get_Key(&kp, kp_button_0)
 8006938:	210d      	movs	r1, #13
 800693a:	48b8      	ldr	r0, [pc, #736]	@ (8006c1c <main+0x6aac>)
 800693c:	f001 fbc8 	bl	80080d0 <Keypad_Get_Key>
 8006940:	4603      	mov	r3, r0
 8006942:	2b00      	cmp	r3, #0
 8006944:	d042      	beq.n	80069cc <main+0x685c>
					&& (current_tick >= general_delay)) {
 8006946:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006948:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800694a:	429a      	cmp	r2, r3
 800694c:	d33e      	bcc.n	80069cc <main+0x685c>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 800694e:	2300      	movs	r3, #0
 8006950:	2200      	movs	r2, #0
 8006952:	2101      	movs	r1, #1
 8006954:	48b2      	ldr	r0, [pc, #712]	@ (8006c20 <main+0x6ab0>)
 8006956:	f001 fa82 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 800695a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800695e:	2b01      	cmp	r3, #1
 8006960:	d827      	bhi.n	80069b2 <main+0x6842>
					time_date_buffer[input_index] = '0';
 8006962:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8006966:	3368      	adds	r3, #104	@ 0x68
 8006968:	443b      	add	r3, r7
 800696a:	2230      	movs	r2, #48	@ 0x30
 800696c:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8006970:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8006974:	3301      	adds	r3, #1
 8006976:	3368      	adds	r3, #104	@ 0x68
 8006978:	443b      	add	r3, r7
 800697a:	2200      	movs	r2, #0
 800697c:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "0");
 8006980:	48a8      	ldr	r0, [pc, #672]	@ (8006c24 <main+0x6ab4>)
 8006982:	f001 faaf 	bl	8007ee4 <Str_Len>
 8006986:	4603      	mov	r3, r0
 8006988:	b2db      	uxtb	r3, r3
 800698a:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 800698e:	9300      	str	r3, [sp, #0]
 8006990:	4ba4      	ldr	r3, [pc, #656]	@ (8006c24 <main+0x6ab4>)
 8006992:	2101      	movs	r1, #1
 8006994:	48a2      	ldr	r0, [pc, #648]	@ (8006c20 <main+0x6ab0>)
 8006996:	f001 fa38 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 800699a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800699e:	3301      	adds	r3, #1
 80069a0:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 80069a4:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80069a8:	461a      	mov	r2, r3
 80069aa:	2101      	movs	r1, #1
 80069ac:	489c      	ldr	r0, [pc, #624]	@ (8006c20 <main+0x6ab0>)
 80069ae:	f001 f9f0 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 80069b2:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 80069b6:	2301      	movs	r3, #1
 80069b8:	2101      	movs	r1, #1
 80069ba:	4899      	ldr	r0, [pc, #612]	@ (8006c20 <main+0x6ab0>)
 80069bc:	f001 fa4f 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 80069c0:	f001 fbf6 	bl	80081b0 <HAL_GetTick>
 80069c4:	4603      	mov	r3, r0
 80069c6:	33fa      	adds	r3, #250	@ 0xfa
 80069c8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80069ca:	e2b2      	b.n	8006f32 <main+0x6dc2>

			}
			//1 is entered
			else if (Keypad_Get_Key(&kp, kp_button_1)
 80069cc:	2100      	movs	r1, #0
 80069ce:	4893      	ldr	r0, [pc, #588]	@ (8006c1c <main+0x6aac>)
 80069d0:	f001 fb7e 	bl	80080d0 <Keypad_Get_Key>
 80069d4:	4603      	mov	r3, r0
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d042      	beq.n	8006a60 <main+0x68f0>
					&& (current_tick >= general_delay)) {
 80069da:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80069dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80069de:	429a      	cmp	r2, r3
 80069e0:	d33e      	bcc.n	8006a60 <main+0x68f0>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80069e2:	2300      	movs	r3, #0
 80069e4:	2200      	movs	r2, #0
 80069e6:	2101      	movs	r1, #1
 80069e8:	488d      	ldr	r0, [pc, #564]	@ (8006c20 <main+0x6ab0>)
 80069ea:	f001 fa38 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 80069ee:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	d827      	bhi.n	8006a46 <main+0x68d6>
					time_date_buffer[input_index] = '1';
 80069f6:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80069fa:	3368      	adds	r3, #104	@ 0x68
 80069fc:	443b      	add	r3, r7
 80069fe:	2231      	movs	r2, #49	@ 0x31
 8006a00:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8006a04:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8006a08:	3301      	adds	r3, #1
 8006a0a:	3368      	adds	r3, #104	@ 0x68
 8006a0c:	443b      	add	r3, r7
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "1");
 8006a14:	4884      	ldr	r0, [pc, #528]	@ (8006c28 <main+0x6ab8>)
 8006a16:	f001 fa65 	bl	8007ee4 <Str_Len>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8006a22:	9300      	str	r3, [sp, #0]
 8006a24:	4b80      	ldr	r3, [pc, #512]	@ (8006c28 <main+0x6ab8>)
 8006a26:	2101      	movs	r1, #1
 8006a28:	487d      	ldr	r0, [pc, #500]	@ (8006c20 <main+0x6ab0>)
 8006a2a:	f001 f9ee 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 8006a2e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8006a32:	3301      	adds	r3, #1
 8006a34:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8006a38:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	2101      	movs	r1, #1
 8006a40:	4877      	ldr	r0, [pc, #476]	@ (8006c20 <main+0x6ab0>)
 8006a42:	f001 f9a6 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8006a46:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	2101      	movs	r1, #1
 8006a4e:	4874      	ldr	r0, [pc, #464]	@ (8006c20 <main+0x6ab0>)
 8006a50:	f001 fa05 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8006a54:	f001 fbac 	bl	80081b0 <HAL_GetTick>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	33fa      	adds	r3, #250	@ 0xfa
 8006a5c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006a5e:	e268      	b.n	8006f32 <main+0x6dc2>

			}
			//2 is entered
			else if (Keypad_Get_Key(&kp, kp_button_2)
 8006a60:	2101      	movs	r1, #1
 8006a62:	486e      	ldr	r0, [pc, #440]	@ (8006c1c <main+0x6aac>)
 8006a64:	f001 fb34 	bl	80080d0 <Keypad_Get_Key>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d042      	beq.n	8006af4 <main+0x6984>
					&& (current_tick >= general_delay)) {
 8006a6e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006a70:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d33e      	bcc.n	8006af4 <main+0x6984>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8006a76:	2300      	movs	r3, #0
 8006a78:	2200      	movs	r2, #0
 8006a7a:	2101      	movs	r1, #1
 8006a7c:	4868      	ldr	r0, [pc, #416]	@ (8006c20 <main+0x6ab0>)
 8006a7e:	f001 f9ee 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8006a82:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d827      	bhi.n	8006ada <main+0x696a>
					time_date_buffer[input_index] = '2';
 8006a8a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8006a8e:	3368      	adds	r3, #104	@ 0x68
 8006a90:	443b      	add	r3, r7
 8006a92:	2232      	movs	r2, #50	@ 0x32
 8006a94:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8006a98:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8006a9c:	3301      	adds	r3, #1
 8006a9e:	3368      	adds	r3, #104	@ 0x68
 8006aa0:	443b      	add	r3, r7
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "2");
 8006aa8:	4860      	ldr	r0, [pc, #384]	@ (8006c2c <main+0x6abc>)
 8006aaa:	f001 fa1b 	bl	8007ee4 <Str_Len>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8006ab6:	9300      	str	r3, [sp, #0]
 8006ab8:	4b5c      	ldr	r3, [pc, #368]	@ (8006c2c <main+0x6abc>)
 8006aba:	2101      	movs	r1, #1
 8006abc:	4858      	ldr	r0, [pc, #352]	@ (8006c20 <main+0x6ab0>)
 8006abe:	f001 f9a4 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 8006ac2:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8006ac6:	3301      	adds	r3, #1
 8006ac8:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8006acc:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	2101      	movs	r1, #1
 8006ad4:	4852      	ldr	r0, [pc, #328]	@ (8006c20 <main+0x6ab0>)
 8006ad6:	f001 f95c 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8006ada:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8006ade:	2301      	movs	r3, #1
 8006ae0:	2101      	movs	r1, #1
 8006ae2:	484f      	ldr	r0, [pc, #316]	@ (8006c20 <main+0x6ab0>)
 8006ae4:	f001 f9bb 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8006ae8:	f001 fb62 	bl	80081b0 <HAL_GetTick>
 8006aec:	4603      	mov	r3, r0
 8006aee:	33fa      	adds	r3, #250	@ 0xfa
 8006af0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006af2:	e21e      	b.n	8006f32 <main+0x6dc2>

			}
			//3 is entered
			else if (Keypad_Get_Key(&kp, kp_button_3)
 8006af4:	2102      	movs	r1, #2
 8006af6:	4849      	ldr	r0, [pc, #292]	@ (8006c1c <main+0x6aac>)
 8006af8:	f001 faea 	bl	80080d0 <Keypad_Get_Key>
 8006afc:	4603      	mov	r3, r0
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d042      	beq.n	8006b88 <main+0x6a18>
					&& (current_tick >= general_delay)) {
 8006b02:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006b04:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006b06:	429a      	cmp	r2, r3
 8006b08:	d33e      	bcc.n	8006b88 <main+0x6a18>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	2101      	movs	r1, #1
 8006b10:	4843      	ldr	r0, [pc, #268]	@ (8006c20 <main+0x6ab0>)
 8006b12:	f001 f9a4 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8006b16:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d827      	bhi.n	8006b6e <main+0x69fe>
					time_date_buffer[input_index] = '3';
 8006b1e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8006b22:	3368      	adds	r3, #104	@ 0x68
 8006b24:	443b      	add	r3, r7
 8006b26:	2233      	movs	r2, #51	@ 0x33
 8006b28:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8006b2c:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8006b30:	3301      	adds	r3, #1
 8006b32:	3368      	adds	r3, #104	@ 0x68
 8006b34:	443b      	add	r3, r7
 8006b36:	2200      	movs	r2, #0
 8006b38:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "3");
 8006b3c:	483c      	ldr	r0, [pc, #240]	@ (8006c30 <main+0x6ac0>)
 8006b3e:	f001 f9d1 	bl	8007ee4 <Str_Len>
 8006b42:	4603      	mov	r3, r0
 8006b44:	b2db      	uxtb	r3, r3
 8006b46:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8006b4a:	9300      	str	r3, [sp, #0]
 8006b4c:	4b38      	ldr	r3, [pc, #224]	@ (8006c30 <main+0x6ac0>)
 8006b4e:	2101      	movs	r1, #1
 8006b50:	4833      	ldr	r0, [pc, #204]	@ (8006c20 <main+0x6ab0>)
 8006b52:	f001 f95a 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 8006b56:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8006b5a:	3301      	adds	r3, #1
 8006b5c:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8006b60:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8006b64:	461a      	mov	r2, r3
 8006b66:	2101      	movs	r1, #1
 8006b68:	482d      	ldr	r0, [pc, #180]	@ (8006c20 <main+0x6ab0>)
 8006b6a:	f001 f912 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8006b6e:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8006b72:	2301      	movs	r3, #1
 8006b74:	2101      	movs	r1, #1
 8006b76:	482a      	ldr	r0, [pc, #168]	@ (8006c20 <main+0x6ab0>)
 8006b78:	f001 f971 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8006b7c:	f001 fb18 	bl	80081b0 <HAL_GetTick>
 8006b80:	4603      	mov	r3, r0
 8006b82:	33fa      	adds	r3, #250	@ 0xfa
 8006b84:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006b86:	e1d4      	b.n	8006f32 <main+0x6dc2>

			}

			//4 is entered
			else if (Keypad_Get_Key(&kp, kp_button_4)
 8006b88:	2104      	movs	r1, #4
 8006b8a:	4824      	ldr	r0, [pc, #144]	@ (8006c1c <main+0x6aac>)
 8006b8c:	f001 faa0 	bl	80080d0 <Keypad_Get_Key>
 8006b90:	4603      	mov	r3, r0
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d050      	beq.n	8006c38 <main+0x6ac8>
					&& (current_tick >= general_delay)) {
 8006b96:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006b98:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d34c      	bcc.n	8006c38 <main+0x6ac8>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	2101      	movs	r1, #1
 8006ba4:	481e      	ldr	r0, [pc, #120]	@ (8006c20 <main+0x6ab0>)
 8006ba6:	f001 f95a 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8006baa:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	d827      	bhi.n	8006c02 <main+0x6a92>
					time_date_buffer[input_index] = '4';
 8006bb2:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8006bb6:	3368      	adds	r3, #104	@ 0x68
 8006bb8:	443b      	add	r3, r7
 8006bba:	2234      	movs	r2, #52	@ 0x34
 8006bbc:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8006bc0:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8006bc4:	3301      	adds	r3, #1
 8006bc6:	3368      	adds	r3, #104	@ 0x68
 8006bc8:	443b      	add	r3, r7
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "4");
 8006bd0:	4818      	ldr	r0, [pc, #96]	@ (8006c34 <main+0x6ac4>)
 8006bd2:	f001 f987 	bl	8007ee4 <Str_Len>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	b2db      	uxtb	r3, r3
 8006bda:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8006bde:	9300      	str	r3, [sp, #0]
 8006be0:	4b14      	ldr	r3, [pc, #80]	@ (8006c34 <main+0x6ac4>)
 8006be2:	2101      	movs	r1, #1
 8006be4:	480e      	ldr	r0, [pc, #56]	@ (8006c20 <main+0x6ab0>)
 8006be6:	f001 f910 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 8006bea:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8006bee:	3301      	adds	r3, #1
 8006bf0:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8006bf4:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	2101      	movs	r1, #1
 8006bfc:	4808      	ldr	r0, [pc, #32]	@ (8006c20 <main+0x6ab0>)
 8006bfe:	f001 f8c8 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8006c02:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8006c06:	2301      	movs	r3, #1
 8006c08:	2101      	movs	r1, #1
 8006c0a:	4805      	ldr	r0, [pc, #20]	@ (8006c20 <main+0x6ab0>)
 8006c0c:	f001 f927 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8006c10:	f001 face 	bl	80081b0 <HAL_GetTick>
 8006c14:	4603      	mov	r3, r0
 8006c16:	33fa      	adds	r3, #250	@ 0xfa
 8006c18:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006c1a:	e18a      	b.n	8006f32 <main+0x6dc2>
 8006c1c:	20000000 	.word	0x20000000
 8006c20:	2000001c 	.word	0x2000001c
 8006c24:	0800be9c 	.word	0x0800be9c
 8006c28:	0800bea0 	.word	0x0800bea0
 8006c2c:	0800bea4 	.word	0x0800bea4
 8006c30:	0800bea8 	.word	0x0800bea8
 8006c34:	0800beac 	.word	0x0800beac

			}
			//5 is entered
			else if (Keypad_Get_Key(&kp, kp_button_5)
 8006c38:	2105      	movs	r1, #5
 8006c3a:	4893      	ldr	r0, [pc, #588]	@ (8006e88 <main+0x6d18>)
 8006c3c:	f001 fa48 	bl	80080d0 <Keypad_Get_Key>
 8006c40:	4603      	mov	r3, r0
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d042      	beq.n	8006ccc <main+0x6b5c>
					&& (current_tick >= general_delay)) {
 8006c46:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006c48:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d33e      	bcc.n	8006ccc <main+0x6b5c>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8006c4e:	2300      	movs	r3, #0
 8006c50:	2200      	movs	r2, #0
 8006c52:	2101      	movs	r1, #1
 8006c54:	488d      	ldr	r0, [pc, #564]	@ (8006e8c <main+0x6d1c>)
 8006c56:	f001 f902 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8006c5a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d827      	bhi.n	8006cb2 <main+0x6b42>
					time_date_buffer[input_index] = '5';
 8006c62:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8006c66:	3368      	adds	r3, #104	@ 0x68
 8006c68:	443b      	add	r3, r7
 8006c6a:	2235      	movs	r2, #53	@ 0x35
 8006c6c:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8006c70:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8006c74:	3301      	adds	r3, #1
 8006c76:	3368      	adds	r3, #104	@ 0x68
 8006c78:	443b      	add	r3, r7
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "5");
 8006c80:	4883      	ldr	r0, [pc, #524]	@ (8006e90 <main+0x6d20>)
 8006c82:	f001 f92f 	bl	8007ee4 <Str_Len>
 8006c86:	4603      	mov	r3, r0
 8006c88:	b2db      	uxtb	r3, r3
 8006c8a:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8006c8e:	9300      	str	r3, [sp, #0]
 8006c90:	4b7f      	ldr	r3, [pc, #508]	@ (8006e90 <main+0x6d20>)
 8006c92:	2101      	movs	r1, #1
 8006c94:	487d      	ldr	r0, [pc, #500]	@ (8006e8c <main+0x6d1c>)
 8006c96:	f001 f8b8 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 8006c9a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8006c9e:	3301      	adds	r3, #1
 8006ca0:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8006ca4:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8006ca8:	461a      	mov	r2, r3
 8006caa:	2101      	movs	r1, #1
 8006cac:	4877      	ldr	r0, [pc, #476]	@ (8006e8c <main+0x6d1c>)
 8006cae:	f001 f870 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8006cb2:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	2101      	movs	r1, #1
 8006cba:	4874      	ldr	r0, [pc, #464]	@ (8006e8c <main+0x6d1c>)
 8006cbc:	f001 f8cf 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8006cc0:	f001 fa76 	bl	80081b0 <HAL_GetTick>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	33fa      	adds	r3, #250	@ 0xfa
 8006cc8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006cca:	e132      	b.n	8006f32 <main+0x6dc2>

			}

			//6 is entered
			else if (Keypad_Get_Key(&kp, kp_button_6)
 8006ccc:	2106      	movs	r1, #6
 8006cce:	486e      	ldr	r0, [pc, #440]	@ (8006e88 <main+0x6d18>)
 8006cd0:	f001 f9fe 	bl	80080d0 <Keypad_Get_Key>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d042      	beq.n	8006d60 <main+0x6bf0>
					&& (current_tick >= general_delay)) {
 8006cda:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006cdc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006cde:	429a      	cmp	r2, r3
 8006ce0:	d33e      	bcc.n	8006d60 <main+0x6bf0>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	2101      	movs	r1, #1
 8006ce8:	4868      	ldr	r0, [pc, #416]	@ (8006e8c <main+0x6d1c>)
 8006cea:	f001 f8b8 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8006cee:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d827      	bhi.n	8006d46 <main+0x6bd6>
					time_date_buffer[input_index] = '6';
 8006cf6:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8006cfa:	3368      	adds	r3, #104	@ 0x68
 8006cfc:	443b      	add	r3, r7
 8006cfe:	2236      	movs	r2, #54	@ 0x36
 8006d00:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8006d04:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8006d08:	3301      	adds	r3, #1
 8006d0a:	3368      	adds	r3, #104	@ 0x68
 8006d0c:	443b      	add	r3, r7
 8006d0e:	2200      	movs	r2, #0
 8006d10:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "6");
 8006d14:	485f      	ldr	r0, [pc, #380]	@ (8006e94 <main+0x6d24>)
 8006d16:	f001 f8e5 	bl	8007ee4 <Str_Len>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	b2db      	uxtb	r3, r3
 8006d1e:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8006d22:	9300      	str	r3, [sp, #0]
 8006d24:	4b5b      	ldr	r3, [pc, #364]	@ (8006e94 <main+0x6d24>)
 8006d26:	2101      	movs	r1, #1
 8006d28:	4858      	ldr	r0, [pc, #352]	@ (8006e8c <main+0x6d1c>)
 8006d2a:	f001 f86e 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 8006d2e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8006d32:	3301      	adds	r3, #1
 8006d34:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8006d38:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	2101      	movs	r1, #1
 8006d40:	4852      	ldr	r0, [pc, #328]	@ (8006e8c <main+0x6d1c>)
 8006d42:	f001 f826 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8006d46:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	2101      	movs	r1, #1
 8006d4e:	484f      	ldr	r0, [pc, #316]	@ (8006e8c <main+0x6d1c>)
 8006d50:	f001 f885 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8006d54:	f001 fa2c 	bl	80081b0 <HAL_GetTick>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	33fa      	adds	r3, #250	@ 0xfa
 8006d5c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006d5e:	e0e8      	b.n	8006f32 <main+0x6dc2>

			}

			//7 is entered
			else if (Keypad_Get_Key(&kp, kp_button_7)
 8006d60:	2108      	movs	r1, #8
 8006d62:	4849      	ldr	r0, [pc, #292]	@ (8006e88 <main+0x6d18>)
 8006d64:	f001 f9b4 	bl	80080d0 <Keypad_Get_Key>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d042      	beq.n	8006df4 <main+0x6c84>
					&& (current_tick >= general_delay)) {
 8006d6e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006d70:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d33e      	bcc.n	8006df4 <main+0x6c84>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8006d76:	2300      	movs	r3, #0
 8006d78:	2200      	movs	r2, #0
 8006d7a:	2101      	movs	r1, #1
 8006d7c:	4843      	ldr	r0, [pc, #268]	@ (8006e8c <main+0x6d1c>)
 8006d7e:	f001 f86e 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8006d82:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	d827      	bhi.n	8006dda <main+0x6c6a>
					time_date_buffer[input_index] = '7';
 8006d8a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8006d8e:	3368      	adds	r3, #104	@ 0x68
 8006d90:	443b      	add	r3, r7
 8006d92:	2237      	movs	r2, #55	@ 0x37
 8006d94:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8006d98:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	3368      	adds	r3, #104	@ 0x68
 8006da0:	443b      	add	r3, r7
 8006da2:	2200      	movs	r2, #0
 8006da4:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "7");
 8006da8:	483b      	ldr	r0, [pc, #236]	@ (8006e98 <main+0x6d28>)
 8006daa:	f001 f89b 	bl	8007ee4 <Str_Len>
 8006dae:	4603      	mov	r3, r0
 8006db0:	b2db      	uxtb	r3, r3
 8006db2:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8006db6:	9300      	str	r3, [sp, #0]
 8006db8:	4b37      	ldr	r3, [pc, #220]	@ (8006e98 <main+0x6d28>)
 8006dba:	2101      	movs	r1, #1
 8006dbc:	4833      	ldr	r0, [pc, #204]	@ (8006e8c <main+0x6d1c>)
 8006dbe:	f001 f824 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 8006dc2:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8006dc6:	3301      	adds	r3, #1
 8006dc8:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8006dcc:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	2101      	movs	r1, #1
 8006dd4:	482d      	ldr	r0, [pc, #180]	@ (8006e8c <main+0x6d1c>)
 8006dd6:	f000 ffdc 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8006dda:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8006dde:	2301      	movs	r3, #1
 8006de0:	2101      	movs	r1, #1
 8006de2:	482a      	ldr	r0, [pc, #168]	@ (8006e8c <main+0x6d1c>)
 8006de4:	f001 f83b 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8006de8:	f001 f9e2 	bl	80081b0 <HAL_GetTick>
 8006dec:	4603      	mov	r3, r0
 8006dee:	33fa      	adds	r3, #250	@ 0xfa
 8006df0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006df2:	e09e      	b.n	8006f32 <main+0x6dc2>

			}

			//8 is entered
			else if (Keypad_Get_Key(&kp, kp_button_8)
 8006df4:	2109      	movs	r1, #9
 8006df6:	4824      	ldr	r0, [pc, #144]	@ (8006e88 <main+0x6d18>)
 8006df8:	f001 f96a 	bl	80080d0 <Keypad_Get_Key>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d04e      	beq.n	8006ea0 <main+0x6d30>
					&& (current_tick >= general_delay)) {
 8006e02:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006e04:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d34a      	bcc.n	8006ea0 <main+0x6d30>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	2101      	movs	r1, #1
 8006e10:	481e      	ldr	r0, [pc, #120]	@ (8006e8c <main+0x6d1c>)
 8006e12:	f001 f824 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8006e16:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8006e1a:	2b01      	cmp	r3, #1
 8006e1c:	d827      	bhi.n	8006e6e <main+0x6cfe>
					time_date_buffer[input_index] = '8';
 8006e1e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8006e22:	3368      	adds	r3, #104	@ 0x68
 8006e24:	443b      	add	r3, r7
 8006e26:	2238      	movs	r2, #56	@ 0x38
 8006e28:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8006e2c:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8006e30:	3301      	adds	r3, #1
 8006e32:	3368      	adds	r3, #104	@ 0x68
 8006e34:	443b      	add	r3, r7
 8006e36:	2200      	movs	r2, #0
 8006e38:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "8");
 8006e3c:	4817      	ldr	r0, [pc, #92]	@ (8006e9c <main+0x6d2c>)
 8006e3e:	f001 f851 	bl	8007ee4 <Str_Len>
 8006e42:	4603      	mov	r3, r0
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8006e4a:	9300      	str	r3, [sp, #0]
 8006e4c:	4b13      	ldr	r3, [pc, #76]	@ (8006e9c <main+0x6d2c>)
 8006e4e:	2101      	movs	r1, #1
 8006e50:	480e      	ldr	r0, [pc, #56]	@ (8006e8c <main+0x6d1c>)
 8006e52:	f000 ffda 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 8006e56:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8006e60:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8006e64:	461a      	mov	r2, r3
 8006e66:	2101      	movs	r1, #1
 8006e68:	4808      	ldr	r0, [pc, #32]	@ (8006e8c <main+0x6d1c>)
 8006e6a:	f000 ff92 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8006e6e:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8006e72:	2301      	movs	r3, #1
 8006e74:	2101      	movs	r1, #1
 8006e76:	4805      	ldr	r0, [pc, #20]	@ (8006e8c <main+0x6d1c>)
 8006e78:	f000 fff1 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8006e7c:	f001 f998 	bl	80081b0 <HAL_GetTick>
 8006e80:	4603      	mov	r3, r0
 8006e82:	33fa      	adds	r3, #250	@ 0xfa
 8006e84:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006e86:	e054      	b.n	8006f32 <main+0x6dc2>
 8006e88:	20000000 	.word	0x20000000
 8006e8c:	2000001c 	.word	0x2000001c
 8006e90:	0800beb0 	.word	0x0800beb0
 8006e94:	0800beb4 	.word	0x0800beb4
 8006e98:	0800beb8 	.word	0x0800beb8
 8006e9c:	0800bebc 	.word	0x0800bebc

			}

			//9 is entered
			else if (Keypad_Get_Key(&kp, kp_button_9)
 8006ea0:	210a      	movs	r1, #10
 8006ea2:	4882      	ldr	r0, [pc, #520]	@ (80070ac <main+0x6f3c>)
 8006ea4:	f001 f914 	bl	80080d0 <Keypad_Get_Key>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d041      	beq.n	8006f32 <main+0x6dc2>
					&& (current_tick >= general_delay)) {
 8006eae:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006eb0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d33d      	bcc.n	8006f32 <main+0x6dc2>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	2200      	movs	r2, #0
 8006eba:	2101      	movs	r1, #1
 8006ebc:	487c      	ldr	r0, [pc, #496]	@ (80070b0 <main+0x6f40>)
 8006ebe:	f000 ffce 	bl	8007e5e <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8006ec2:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d827      	bhi.n	8006f1a <main+0x6daa>
					time_date_buffer[input_index] = '9';
 8006eca:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8006ece:	3368      	adds	r3, #104	@ 0x68
 8006ed0:	443b      	add	r3, r7
 8006ed2:	2239      	movs	r2, #57	@ 0x39
 8006ed4:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8006ed8:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8006edc:	3301      	adds	r3, #1
 8006ede:	3368      	adds	r3, #104	@ 0x68
 8006ee0:	443b      	add	r3, r7
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "9");
 8006ee8:	4872      	ldr	r0, [pc, #456]	@ (80070b4 <main+0x6f44>)
 8006eea:	f000 fffb 	bl	8007ee4 <Str_Len>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8006ef6:	9300      	str	r3, [sp, #0]
 8006ef8:	4b6e      	ldr	r3, [pc, #440]	@ (80070b4 <main+0x6f44>)
 8006efa:	2101      	movs	r1, #1
 8006efc:	486c      	ldr	r0, [pc, #432]	@ (80070b0 <main+0x6f40>)
 8006efe:	f000 ff84 	bl	8007e0a <Alcd_PutAt_n>
					input_index++;
 8006f02:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8006f06:	3301      	adds	r3, #1
 8006f08:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8006f0c:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8006f10:	461a      	mov	r2, r3
 8006f12:	2101      	movs	r1, #1
 8006f14:	4866      	ldr	r0, [pc, #408]	@ (80070b0 <main+0x6f40>)
 8006f16:	f000 ff3c 	bl	8007d92 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8006f1a:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8006f1e:	2301      	movs	r3, #1
 8006f20:	2101      	movs	r1, #1
 8006f22:	4863      	ldr	r0, [pc, #396]	@ (80070b0 <main+0x6f40>)
 8006f24:	f000 ff9b 	bl	8007e5e <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8006f28:	f001 f942 	bl	80081b0 <HAL_GetTick>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	33fa      	adds	r3, #250	@ 0xfa
 8006f30:	65bb      	str	r3, [r7, #88]	@ 0x58

			}

			//when yes is entered -> check for seconds validity (state 34)
			if (Keypad_Get_Key(&kp, kp_button_yes)
 8006f32:	210f      	movs	r1, #15
 8006f34:	485d      	ldr	r0, [pc, #372]	@ (80070ac <main+0x6f3c>)
 8006f36:	f001 f8cb 	bl	80080d0 <Keypad_Get_Key>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d021      	beq.n	8006f84 <main+0x6e14>
					&& (current_tick >= general_delay)) {
 8006f40:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006f42:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006f44:	429a      	cmp	r2, r3
 8006f46:	d31d      	bcc.n	8006f84 <main+0x6e14>

				Alcd_Clear(&lcd);
 8006f48:	4859      	ldr	r0, [pc, #356]	@ (80070b0 <main+0x6f40>)
 8006f4a:	f000 ff77 	bl	8007e3c <Alcd_Clear>

				snprintf(timeString, sizeof(timeString), "%02d", buffer);
 8006f4e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006f52:	f107 001c 	add.w	r0, r7, #28
 8006f56:	4a58      	ldr	r2, [pc, #352]	@ (80070b8 <main+0x6f48>)
 8006f58:	2132      	movs	r1, #50	@ 0x32
 8006f5a:	f004 fa43 	bl	800b3e4 <sniprintf>
				Alcd_PutAt_n(&lcd, 1, 0, timeString, strlen(timeString));
 8006f5e:	f107 031c 	add.w	r3, r7, #28
 8006f62:	4618      	mov	r0, r3
 8006f64:	f7f9 f8fc 	bl	8000160 <strlen>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	b2db      	uxtb	r3, r3
 8006f6c:	f107 021c 	add.w	r2, r7, #28
 8006f70:	9300      	str	r3, [sp, #0]
 8006f72:	4613      	mov	r3, r2
 8006f74:	2200      	movs	r2, #0
 8006f76:	2101      	movs	r1, #1
 8006f78:	484d      	ldr	r0, [pc, #308]	@ (80070b0 <main+0x6f40>)
 8006f7a:	f000 ff46 	bl	8007e0a <Alcd_PutAt_n>

				status = 53;
 8006f7e:	2335      	movs	r3, #53	@ 0x35
 8006f80:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

			}

			//
			general_delay = HAL_GetTick() + 250;
 8006f84:	f001 f914 	bl	80081b0 <HAL_GetTick>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	33fa      	adds	r3, #250	@ 0xfa
 8006f8c:	65bb      	str	r3, [r7, #88]	@ 0x58
		while ((status == 51) && (current_tick >= general_delay)) {
 8006f8e:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8006f92:	2b33      	cmp	r3, #51	@ 0x33
 8006f94:	d17d      	bne.n	8007092 <main+0x6f22>
 8006f96:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006f98:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	f4bf ac7a 	bcs.w	8006894 <main+0x6724>
		}

		//seconds validation phase
		while ((status == 53) && (current_tick >= general_delay)) {
 8006fa0:	e077      	b.n	8007092 <main+0x6f22>

			//get the current tick number
			current_tick = HAL_GetTick();
 8006fa2:	f001 f905 	bl	80081b0 <HAL_GetTick>
 8006fa6:	6638      	str	r0, [r7, #96]	@ 0x60

			input_index = 0;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55

			Alcd_Clear(&lcd);
 8006fae:	4840      	ldr	r0, [pc, #256]	@ (80070b0 <main+0x6f40>)
 8006fb0:	f000 ff44 	bl	8007e3c <Alcd_Clear>

			snprintf(timeString, sizeof(timeString), "%02d", status);
 8006fb4:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8006fb8:	f107 001c 	add.w	r0, r7, #28
 8006fbc:	4a3e      	ldr	r2, [pc, #248]	@ (80070b8 <main+0x6f48>)
 8006fbe:	2132      	movs	r1, #50	@ 0x32
 8006fc0:	f004 fa10 	bl	800b3e4 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 8006fc4:	f107 031c 	add.w	r3, r7, #28
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f7f9 f8c9 	bl	8000160 <strlen>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	b2db      	uxtb	r3, r3
 8006fd2:	f107 021c 	add.w	r2, r7, #28
 8006fd6:	9300      	str	r3, [sp, #0]
 8006fd8:	4613      	mov	r3, r2
 8006fda:	220e      	movs	r2, #14
 8006fdc:	2100      	movs	r1, #0
 8006fde:	4834      	ldr	r0, [pc, #208]	@ (80070b0 <main+0x6f40>)
 8006fe0:	f000 ff13 	bl	8007e0a <Alcd_PutAt_n>

			buffer = atoi(time_date_buffer);
 8006fe4:	1d3b      	adds	r3, r7, #4
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f004 f973 	bl	800b2d2 <atoi>
 8006fec:	4603      	mov	r3, r0
 8006fee:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56

			//check if seconds is within the range 0 to 60
			if (buffer >= 0 && buffer < 61) {
 8006ff2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006ff6:	2b3c      	cmp	r3, #60	@ 0x3c
 8006ff8:	d818      	bhi.n	800702c <main+0x6ebc>

				status = 49;
 8006ffa:	2331      	movs	r3, #49	@ 0x31
 8006ffc:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

				//set the minutes to the value
				dose_m = buffer;
 8007000:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8007004:	b2db      	uxtb	r3, r3
 8007006:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53

				input_index = 0;
 800700a:	2300      	movs	r3, #0
 800700c:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8007010:	2300      	movs	r3, #0
 8007012:	2200      	movs	r2, #0
 8007014:	2101      	movs	r1, #1
 8007016:	4826      	ldr	r0, [pc, #152]	@ (80070b0 <main+0x6f40>)
 8007018:	f000 ff21 	bl	8007e5e <Alcd_Display_Control>
				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 800701c:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8007020:	2301      	movs	r3, #1
 8007022:	2101      	movs	r1, #1
 8007024:	4822      	ldr	r0, [pc, #136]	@ (80070b0 <main+0x6f40>)
 8007026:	f000 ff1a 	bl	8007e5e <Alcd_Display_Control>
 800702a:	e027      	b.n	800707c <main+0x6f0c>
			} else {
				Alcd_PutAt(&lcd, 0, 0, "invalid");
 800702c:	4823      	ldr	r0, [pc, #140]	@ (80070bc <main+0x6f4c>)
 800702e:	f000 ff59 	bl	8007ee4 <Str_Len>
 8007032:	4603      	mov	r3, r0
 8007034:	b2db      	uxtb	r3, r3
 8007036:	9300      	str	r3, [sp, #0]
 8007038:	4b20      	ldr	r3, [pc, #128]	@ (80070bc <main+0x6f4c>)
 800703a:	2200      	movs	r2, #0
 800703c:	2100      	movs	r1, #0
 800703e:	481c      	ldr	r0, [pc, #112]	@ (80070b0 <main+0x6f40>)
 8007040:	f000 fee3 	bl	8007e0a <Alcd_PutAt_n>
				delay_flag = 1;
 8007044:	2301      	movs	r3, #1
 8007046:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

				input_index = 0;
 800704a:	2300      	movs	r3, #0
 800704c:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8007050:	2300      	movs	r3, #0
 8007052:	2200      	movs	r2, #0
 8007054:	2101      	movs	r1, #1
 8007056:	4816      	ldr	r0, [pc, #88]	@ (80070b0 <main+0x6f40>)
 8007058:	f000 ff01 	bl	8007e5e <Alcd_Display_Control>
				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 800705c:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8007060:	2301      	movs	r3, #1
 8007062:	2101      	movs	r1, #1
 8007064:	4812      	ldr	r0, [pc, #72]	@ (80070b0 <main+0x6f40>)
 8007066:	f000 fefa 	bl	8007e5e <Alcd_Display_Control>
				//return to entering hours
				status = 51;
 800706a:	2333      	movs	r3, #51	@ 0x33
 800706c:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

				general_delay = HAL_GetTick() + 1000;
 8007070:	f001 f89e 	bl	80081b0 <HAL_GetTick>
 8007074:	4603      	mov	r3, r0
 8007076:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800707a:	65bb      	str	r3, [r7, #88]	@ 0x58
			}

			//create a delay
			if ((delay_flag == 1) && (current_tick >= general_delay)) {
 800707c:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8007080:	2b01      	cmp	r3, #1
 8007082:	d106      	bne.n	8007092 <main+0x6f22>
 8007084:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007086:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007088:	429a      	cmp	r2, r3
 800708a:	d302      	bcc.n	8007092 <main+0x6f22>

				delay_flag = 0;
 800708c:	2300      	movs	r3, #0
 800708e:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
		while ((status == 53) && (current_tick >= general_delay)) {
 8007092:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8007096:	2b35      	cmp	r3, #53	@ 0x35
 8007098:	f479 a8b4 	bne.w	8000204 <main+0x94>
 800709c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800709e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80070a0:	429a      	cmp	r2, r3
 80070a2:	f4bf af7e 	bcs.w	8006fa2 <main+0x6e32>
		current_tick = HAL_GetTick();
 80070a6:	f7f9 b8ad 	b.w	8000204 <main+0x94>
 80070aa:	bf00      	nop
 80070ac:	20000000 	.word	0x20000000
 80070b0:	2000001c 	.word	0x2000001c
 80070b4:	0800bec0 	.word	0x0800bec0
 80070b8:	0800bdac 	.word	0x0800bdac
 80070bc:	0800bec4 	.word	0x0800bec4

080070c0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b090      	sub	sp, #64	@ 0x40
 80070c4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80070c6:	f107 0318 	add.w	r3, r7, #24
 80070ca:	2228      	movs	r2, #40	@ 0x28
 80070cc:	2100      	movs	r1, #0
 80070ce:	4618      	mov	r0, r3
 80070d0:	f004 f9bc 	bl	800b44c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80070d4:	1d3b      	adds	r3, r7, #4
 80070d6:	2200      	movs	r2, #0
 80070d8:	601a      	str	r2, [r3, #0]
 80070da:	605a      	str	r2, [r3, #4]
 80070dc:	609a      	str	r2, [r3, #8]
 80070de:	60da      	str	r2, [r3, #12]
 80070e0:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80070e2:	2301      	movs	r3, #1
 80070e4:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80070e6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80070ea:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80070ec:	2300      	movs	r3, #0
 80070ee:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80070f0:	2301      	movs	r3, #1
 80070f2:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80070f4:	2302      	movs	r3, #2
 80070f6:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80070f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80070fc:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80070fe:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8007102:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8007104:	f107 0318 	add.w	r3, r7, #24
 8007108:	4618      	mov	r0, r3
 800710a:	f003 f81f 	bl	800a14c <HAL_RCC_OscConfig>
 800710e:	4603      	mov	r3, r0
 8007110:	2b00      	cmp	r3, #0
 8007112:	d001      	beq.n	8007118 <SystemClock_Config+0x58>
		Error_Handler();
 8007114:	f000 f906 	bl	8007324 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8007118:	230f      	movs	r3, #15
 800711a:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800711c:	2302      	movs	r3, #2
 800711e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007120:	2300      	movs	r3, #0
 8007122:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007124:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007128:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800712a:	2300      	movs	r3, #0
 800712c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800712e:	1d3b      	adds	r3, r7, #4
 8007130:	2102      	movs	r1, #2
 8007132:	4618      	mov	r0, r3
 8007134:	f003 fa8c 	bl	800a650 <HAL_RCC_ClockConfig>
 8007138:	4603      	mov	r3, r0
 800713a:	2b00      	cmp	r3, #0
 800713c:	d001      	beq.n	8007142 <SystemClock_Config+0x82>
		Error_Handler();
 800713e:	f000 f8f1 	bl	8007324 <Error_Handler>
	}
}
 8007142:	bf00      	nop
 8007144:	3740      	adds	r7, #64	@ 0x40
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
	...

0800714c <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 800714c:	b580      	push	{r7, lr}
 800714e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8007150:	4b12      	ldr	r3, [pc, #72]	@ (800719c <MX_I2C2_Init+0x50>)
 8007152:	4a13      	ldr	r2, [pc, #76]	@ (80071a0 <MX_I2C2_Init+0x54>)
 8007154:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 100000;
 8007156:	4b11      	ldr	r3, [pc, #68]	@ (800719c <MX_I2C2_Init+0x50>)
 8007158:	4a12      	ldr	r2, [pc, #72]	@ (80071a4 <MX_I2C2_Init+0x58>)
 800715a:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800715c:	4b0f      	ldr	r3, [pc, #60]	@ (800719c <MX_I2C2_Init+0x50>)
 800715e:	2200      	movs	r2, #0
 8007160:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 8007162:	4b0e      	ldr	r3, [pc, #56]	@ (800719c <MX_I2C2_Init+0x50>)
 8007164:	2200      	movs	r2, #0
 8007166:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007168:	4b0c      	ldr	r3, [pc, #48]	@ (800719c <MX_I2C2_Init+0x50>)
 800716a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800716e:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007170:	4b0a      	ldr	r3, [pc, #40]	@ (800719c <MX_I2C2_Init+0x50>)
 8007172:	2200      	movs	r2, #0
 8007174:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 8007176:	4b09      	ldr	r3, [pc, #36]	@ (800719c <MX_I2C2_Init+0x50>)
 8007178:	2200      	movs	r2, #0
 800717a:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800717c:	4b07      	ldr	r3, [pc, #28]	@ (800719c <MX_I2C2_Init+0x50>)
 800717e:	2200      	movs	r2, #0
 8007180:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007182:	4b06      	ldr	r3, [pc, #24]	@ (800719c <MX_I2C2_Init+0x50>)
 8007184:	2200      	movs	r2, #0
 8007186:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8007188:	4804      	ldr	r0, [pc, #16]	@ (800719c <MX_I2C2_Init+0x50>)
 800718a:	f001 fabf 	bl	800870c <HAL_I2C_Init>
 800718e:	4603      	mov	r3, r0
 8007190:	2b00      	cmp	r3, #0
 8007192:	d001      	beq.n	8007198 <MX_I2C2_Init+0x4c>
		Error_Handler();
 8007194:	f000 f8c6 	bl	8007324 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 8007198:	bf00      	nop
 800719a:	bd80      	pop	{r7, pc}
 800719c:	200000b4 	.word	0x200000b4
 80071a0:	40005800 	.word	0x40005800
 80071a4:	000186a0 	.word	0x000186a0

080071a8 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b092      	sub	sp, #72	@ 0x48
 80071ac:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80071ae:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80071b2:	2200      	movs	r2, #0
 80071b4:	601a      	str	r2, [r3, #0]
 80071b6:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80071b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80071bc:	2200      	movs	r2, #0
 80071be:	601a      	str	r2, [r3, #0]
 80071c0:	605a      	str	r2, [r3, #4]
 80071c2:	609a      	str	r2, [r3, #8]
 80071c4:	60da      	str	r2, [r3, #12]
 80071c6:	611a      	str	r2, [r3, #16]
 80071c8:	615a      	str	r2, [r3, #20]
 80071ca:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80071cc:	1d3b      	adds	r3, r7, #4
 80071ce:	2220      	movs	r2, #32
 80071d0:	2100      	movs	r1, #0
 80071d2:	4618      	mov	r0, r3
 80071d4:	f004 f93a 	bl	800b44c <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80071d8:	4b33      	ldr	r3, [pc, #204]	@ (80072a8 <MX_TIM1_Init+0x100>)
 80071da:	4a34      	ldr	r2, [pc, #208]	@ (80072ac <MX_TIM1_Init+0x104>)
 80071dc:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 71;
 80071de:	4b32      	ldr	r3, [pc, #200]	@ (80072a8 <MX_TIM1_Init+0x100>)
 80071e0:	2247      	movs	r2, #71	@ 0x47
 80071e2:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80071e4:	4b30      	ldr	r3, [pc, #192]	@ (80072a8 <MX_TIM1_Init+0x100>)
 80071e6:	2200      	movs	r2, #0
 80071e8:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 19999;
 80071ea:	4b2f      	ldr	r3, [pc, #188]	@ (80072a8 <MX_TIM1_Init+0x100>)
 80071ec:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80071f0:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80071f2:	4b2d      	ldr	r3, [pc, #180]	@ (80072a8 <MX_TIM1_Init+0x100>)
 80071f4:	2200      	movs	r2, #0
 80071f6:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80071f8:	4b2b      	ldr	r3, [pc, #172]	@ (80072a8 <MX_TIM1_Init+0x100>)
 80071fa:	2200      	movs	r2, #0
 80071fc:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80071fe:	4b2a      	ldr	r3, [pc, #168]	@ (80072a8 <MX_TIM1_Init+0x100>)
 8007200:	2200      	movs	r2, #0
 8007202:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8007204:	4828      	ldr	r0, [pc, #160]	@ (80072a8 <MX_TIM1_Init+0x100>)
 8007206:	f003 fbe7 	bl	800a9d8 <HAL_TIM_PWM_Init>
 800720a:	4603      	mov	r3, r0
 800720c:	2b00      	cmp	r3, #0
 800720e:	d001      	beq.n	8007214 <MX_TIM1_Init+0x6c>
		Error_Handler();
 8007210:	f000 f888 	bl	8007324 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007214:	2300      	movs	r3, #0
 8007216:	643b      	str	r3, [r7, #64]	@ 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007218:	2300      	movs	r3, #0
 800721a:	647b      	str	r3, [r7, #68]	@ 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800721c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8007220:	4619      	mov	r1, r3
 8007222:	4821      	ldr	r0, [pc, #132]	@ (80072a8 <MX_TIM1_Init+0x100>)
 8007224:	f003 ffa6 	bl	800b174 <HAL_TIMEx_MasterConfigSynchronization>
 8007228:	4603      	mov	r3, r0
 800722a:	2b00      	cmp	r3, #0
 800722c:	d001      	beq.n	8007232 <MX_TIM1_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 800722e:	f000 f879 	bl	8007324 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007232:	2360      	movs	r3, #96	@ 0x60
 8007234:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfigOC.Pulse = 1000;
 8007236:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800723a:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800723c:	2300      	movs	r3, #0
 800723e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8007240:	2300      	movs	r3, #0
 8007242:	633b      	str	r3, [r7, #48]	@ 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007244:	2300      	movs	r3, #0
 8007246:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8007248:	2300      	movs	r3, #0
 800724a:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800724c:	2300      	movs	r3, #0
 800724e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8007250:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007254:	2200      	movs	r2, #0
 8007256:	4619      	mov	r1, r3
 8007258:	4813      	ldr	r0, [pc, #76]	@ (80072a8 <MX_TIM1_Init+0x100>)
 800725a:	f003 fcaf 	bl	800abbc <HAL_TIM_PWM_ConfigChannel>
 800725e:	4603      	mov	r3, r0
 8007260:	2b00      	cmp	r3, #0
 8007262:	d001      	beq.n	8007268 <MX_TIM1_Init+0xc0>
			!= HAL_OK) {
		Error_Handler();
 8007264:	f000 f85e 	bl	8007324 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8007268:	2300      	movs	r3, #0
 800726a:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800726c:	2300      	movs	r3, #0
 800726e:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8007270:	2300      	movs	r3, #0
 8007272:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8007274:	2300      	movs	r3, #0
 8007276:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8007278:	2300      	movs	r3, #0
 800727a:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800727c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007280:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8007282:	2300      	movs	r3, #0
 8007284:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8007286:	1d3b      	adds	r3, r7, #4
 8007288:	4619      	mov	r1, r3
 800728a:	4807      	ldr	r0, [pc, #28]	@ (80072a8 <MX_TIM1_Init+0x100>)
 800728c:	f003 ffd0 	bl	800b230 <HAL_TIMEx_ConfigBreakDeadTime>
 8007290:	4603      	mov	r3, r0
 8007292:	2b00      	cmp	r3, #0
 8007294:	d001      	beq.n	800729a <MX_TIM1_Init+0xf2>
			!= HAL_OK) {
		Error_Handler();
 8007296:	f000 f845 	bl	8007324 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 800729a:	4803      	ldr	r0, [pc, #12]	@ (80072a8 <MX_TIM1_Init+0x100>)
 800729c:	f000 f8d8 	bl	8007450 <HAL_TIM_MspPostInit>

}
 80072a0:	bf00      	nop
 80072a2:	3748      	adds	r7, #72	@ 0x48
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}
 80072a8:	20000108 	.word	0x20000108
 80072ac:	40012c00 	.word	0x40012c00

080072b0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80072b0:	b480      	push	{r7}
 80072b2:	b085      	sub	sp, #20
 80072b4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80072b6:	4b1a      	ldr	r3, [pc, #104]	@ (8007320 <MX_GPIO_Init+0x70>)
 80072b8:	699b      	ldr	r3, [r3, #24]
 80072ba:	4a19      	ldr	r2, [pc, #100]	@ (8007320 <MX_GPIO_Init+0x70>)
 80072bc:	f043 0320 	orr.w	r3, r3, #32
 80072c0:	6193      	str	r3, [r2, #24]
 80072c2:	4b17      	ldr	r3, [pc, #92]	@ (8007320 <MX_GPIO_Init+0x70>)
 80072c4:	699b      	ldr	r3, [r3, #24]
 80072c6:	f003 0320 	and.w	r3, r3, #32
 80072ca:	60fb      	str	r3, [r7, #12]
 80072cc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80072ce:	4b14      	ldr	r3, [pc, #80]	@ (8007320 <MX_GPIO_Init+0x70>)
 80072d0:	699b      	ldr	r3, [r3, #24]
 80072d2:	4a13      	ldr	r2, [pc, #76]	@ (8007320 <MX_GPIO_Init+0x70>)
 80072d4:	f043 0308 	orr.w	r3, r3, #8
 80072d8:	6193      	str	r3, [r2, #24]
 80072da:	4b11      	ldr	r3, [pc, #68]	@ (8007320 <MX_GPIO_Init+0x70>)
 80072dc:	699b      	ldr	r3, [r3, #24]
 80072de:	f003 0308 	and.w	r3, r3, #8
 80072e2:	60bb      	str	r3, [r7, #8]
 80072e4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80072e6:	4b0e      	ldr	r3, [pc, #56]	@ (8007320 <MX_GPIO_Init+0x70>)
 80072e8:	699b      	ldr	r3, [r3, #24]
 80072ea:	4a0d      	ldr	r2, [pc, #52]	@ (8007320 <MX_GPIO_Init+0x70>)
 80072ec:	f043 0304 	orr.w	r3, r3, #4
 80072f0:	6193      	str	r3, [r2, #24]
 80072f2:	4b0b      	ldr	r3, [pc, #44]	@ (8007320 <MX_GPIO_Init+0x70>)
 80072f4:	699b      	ldr	r3, [r3, #24]
 80072f6:	f003 0304 	and.w	r3, r3, #4
 80072fa:	607b      	str	r3, [r7, #4]
 80072fc:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80072fe:	4b08      	ldr	r3, [pc, #32]	@ (8007320 <MX_GPIO_Init+0x70>)
 8007300:	699b      	ldr	r3, [r3, #24]
 8007302:	4a07      	ldr	r2, [pc, #28]	@ (8007320 <MX_GPIO_Init+0x70>)
 8007304:	f043 0310 	orr.w	r3, r3, #16
 8007308:	6193      	str	r3, [r2, #24]
 800730a:	4b05      	ldr	r3, [pc, #20]	@ (8007320 <MX_GPIO_Init+0x70>)
 800730c:	699b      	ldr	r3, [r3, #24]
 800730e:	f003 0310 	and.w	r3, r3, #16
 8007312:	603b      	str	r3, [r7, #0]
 8007314:	683b      	ldr	r3, [r7, #0]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8007316:	bf00      	nop
 8007318:	3714      	adds	r7, #20
 800731a:	46bd      	mov	sp, r7
 800731c:	bc80      	pop	{r7}
 800731e:	4770      	bx	lr
 8007320:	40021000 	.word	0x40021000

08007324 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8007324:	b480      	push	{r7}
 8007326:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007328:	b672      	cpsid	i
}
 800732a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800732c:	bf00      	nop
 800732e:	e7fd      	b.n	800732c <Error_Handler+0x8>

08007330 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007330:	b480      	push	{r7}
 8007332:	b085      	sub	sp, #20
 8007334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8007336:	4b15      	ldr	r3, [pc, #84]	@ (800738c <HAL_MspInit+0x5c>)
 8007338:	699b      	ldr	r3, [r3, #24]
 800733a:	4a14      	ldr	r2, [pc, #80]	@ (800738c <HAL_MspInit+0x5c>)
 800733c:	f043 0301 	orr.w	r3, r3, #1
 8007340:	6193      	str	r3, [r2, #24]
 8007342:	4b12      	ldr	r3, [pc, #72]	@ (800738c <HAL_MspInit+0x5c>)
 8007344:	699b      	ldr	r3, [r3, #24]
 8007346:	f003 0301 	and.w	r3, r3, #1
 800734a:	60bb      	str	r3, [r7, #8]
 800734c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800734e:	4b0f      	ldr	r3, [pc, #60]	@ (800738c <HAL_MspInit+0x5c>)
 8007350:	69db      	ldr	r3, [r3, #28]
 8007352:	4a0e      	ldr	r2, [pc, #56]	@ (800738c <HAL_MspInit+0x5c>)
 8007354:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007358:	61d3      	str	r3, [r2, #28]
 800735a:	4b0c      	ldr	r3, [pc, #48]	@ (800738c <HAL_MspInit+0x5c>)
 800735c:	69db      	ldr	r3, [r3, #28]
 800735e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007362:	607b      	str	r3, [r7, #4]
 8007364:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8007366:	4b0a      	ldr	r3, [pc, #40]	@ (8007390 <HAL_MspInit+0x60>)
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	60fb      	str	r3, [r7, #12]
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8007372:	60fb      	str	r3, [r7, #12]
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800737a:	60fb      	str	r3, [r7, #12]
 800737c:	4a04      	ldr	r2, [pc, #16]	@ (8007390 <HAL_MspInit+0x60>)
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007382:	bf00      	nop
 8007384:	3714      	adds	r7, #20
 8007386:	46bd      	mov	sp, r7
 8007388:	bc80      	pop	{r7}
 800738a:	4770      	bx	lr
 800738c:	40021000 	.word	0x40021000
 8007390:	40010000 	.word	0x40010000

08007394 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b088      	sub	sp, #32
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800739c:	f107 0310 	add.w	r3, r7, #16
 80073a0:	2200      	movs	r2, #0
 80073a2:	601a      	str	r2, [r3, #0]
 80073a4:	605a      	str	r2, [r3, #4]
 80073a6:	609a      	str	r2, [r3, #8]
 80073a8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a16      	ldr	r2, [pc, #88]	@ (8007408 <HAL_I2C_MspInit+0x74>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d124      	bne.n	80073fe <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80073b4:	4b15      	ldr	r3, [pc, #84]	@ (800740c <HAL_I2C_MspInit+0x78>)
 80073b6:	699b      	ldr	r3, [r3, #24]
 80073b8:	4a14      	ldr	r2, [pc, #80]	@ (800740c <HAL_I2C_MspInit+0x78>)
 80073ba:	f043 0308 	orr.w	r3, r3, #8
 80073be:	6193      	str	r3, [r2, #24]
 80073c0:	4b12      	ldr	r3, [pc, #72]	@ (800740c <HAL_I2C_MspInit+0x78>)
 80073c2:	699b      	ldr	r3, [r3, #24]
 80073c4:	f003 0308 	and.w	r3, r3, #8
 80073c8:	60fb      	str	r3, [r7, #12]
 80073ca:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80073cc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80073d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80073d2:	2312      	movs	r3, #18
 80073d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80073d6:	2303      	movs	r3, #3
 80073d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80073da:	f107 0310 	add.w	r3, r7, #16
 80073de:	4619      	mov	r1, r3
 80073e0:	480b      	ldr	r0, [pc, #44]	@ (8007410 <HAL_I2C_MspInit+0x7c>)
 80073e2:	f000 fff7 	bl	80083d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80073e6:	4b09      	ldr	r3, [pc, #36]	@ (800740c <HAL_I2C_MspInit+0x78>)
 80073e8:	69db      	ldr	r3, [r3, #28]
 80073ea:	4a08      	ldr	r2, [pc, #32]	@ (800740c <HAL_I2C_MspInit+0x78>)
 80073ec:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80073f0:	61d3      	str	r3, [r2, #28]
 80073f2:	4b06      	ldr	r3, [pc, #24]	@ (800740c <HAL_I2C_MspInit+0x78>)
 80073f4:	69db      	ldr	r3, [r3, #28]
 80073f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80073fa:	60bb      	str	r3, [r7, #8]
 80073fc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80073fe:	bf00      	nop
 8007400:	3720      	adds	r7, #32
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}
 8007406:	bf00      	nop
 8007408:	40005800 	.word	0x40005800
 800740c:	40021000 	.word	0x40021000
 8007410:	40010c00 	.word	0x40010c00

08007414 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8007414:	b480      	push	{r7}
 8007416:	b085      	sub	sp, #20
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a09      	ldr	r2, [pc, #36]	@ (8007448 <HAL_TIM_PWM_MspInit+0x34>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d10b      	bne.n	800743e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007426:	4b09      	ldr	r3, [pc, #36]	@ (800744c <HAL_TIM_PWM_MspInit+0x38>)
 8007428:	699b      	ldr	r3, [r3, #24]
 800742a:	4a08      	ldr	r2, [pc, #32]	@ (800744c <HAL_TIM_PWM_MspInit+0x38>)
 800742c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8007430:	6193      	str	r3, [r2, #24]
 8007432:	4b06      	ldr	r3, [pc, #24]	@ (800744c <HAL_TIM_PWM_MspInit+0x38>)
 8007434:	699b      	ldr	r3, [r3, #24]
 8007436:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800743a:	60fb      	str	r3, [r7, #12]
 800743c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800743e:	bf00      	nop
 8007440:	3714      	adds	r7, #20
 8007442:	46bd      	mov	sp, r7
 8007444:	bc80      	pop	{r7}
 8007446:	4770      	bx	lr
 8007448:	40012c00 	.word	0x40012c00
 800744c:	40021000 	.word	0x40021000

08007450 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b088      	sub	sp, #32
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007458:	f107 0310 	add.w	r3, r7, #16
 800745c:	2200      	movs	r2, #0
 800745e:	601a      	str	r2, [r3, #0]
 8007460:	605a      	str	r2, [r3, #4]
 8007462:	609a      	str	r2, [r3, #8]
 8007464:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a10      	ldr	r2, [pc, #64]	@ (80074ac <HAL_TIM_MspPostInit+0x5c>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d118      	bne.n	80074a2 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007470:	4b0f      	ldr	r3, [pc, #60]	@ (80074b0 <HAL_TIM_MspPostInit+0x60>)
 8007472:	699b      	ldr	r3, [r3, #24]
 8007474:	4a0e      	ldr	r2, [pc, #56]	@ (80074b0 <HAL_TIM_MspPostInit+0x60>)
 8007476:	f043 0304 	orr.w	r3, r3, #4
 800747a:	6193      	str	r3, [r2, #24]
 800747c:	4b0c      	ldr	r3, [pc, #48]	@ (80074b0 <HAL_TIM_MspPostInit+0x60>)
 800747e:	699b      	ldr	r3, [r3, #24]
 8007480:	f003 0304 	and.w	r3, r3, #4
 8007484:	60fb      	str	r3, [r7, #12]
 8007486:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8007488:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800748c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800748e:	2302      	movs	r3, #2
 8007490:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007492:	2302      	movs	r3, #2
 8007494:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007496:	f107 0310 	add.w	r3, r7, #16
 800749a:	4619      	mov	r1, r3
 800749c:	4805      	ldr	r0, [pc, #20]	@ (80074b4 <HAL_TIM_MspPostInit+0x64>)
 800749e:	f000 ff99 	bl	80083d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80074a2:	bf00      	nop
 80074a4:	3720      	adds	r7, #32
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}
 80074aa:	bf00      	nop
 80074ac:	40012c00 	.word	0x40012c00
 80074b0:	40021000 	.word	0x40021000
 80074b4:	40010800 	.word	0x40010800

080074b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80074b8:	b480      	push	{r7}
 80074ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80074bc:	bf00      	nop
 80074be:	e7fd      	b.n	80074bc <NMI_Handler+0x4>

080074c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80074c0:	b480      	push	{r7}
 80074c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80074c4:	bf00      	nop
 80074c6:	e7fd      	b.n	80074c4 <HardFault_Handler+0x4>

080074c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80074c8:	b480      	push	{r7}
 80074ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80074cc:	bf00      	nop
 80074ce:	e7fd      	b.n	80074cc <MemManage_Handler+0x4>

080074d0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80074d0:	b480      	push	{r7}
 80074d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80074d4:	bf00      	nop
 80074d6:	e7fd      	b.n	80074d4 <BusFault_Handler+0x4>

080074d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80074d8:	b480      	push	{r7}
 80074da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80074dc:	bf00      	nop
 80074de:	e7fd      	b.n	80074dc <UsageFault_Handler+0x4>

080074e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80074e0:	b480      	push	{r7}
 80074e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80074e4:	bf00      	nop
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bc80      	pop	{r7}
 80074ea:	4770      	bx	lr

080074ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80074ec:	b480      	push	{r7}
 80074ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80074f0:	bf00      	nop
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bc80      	pop	{r7}
 80074f6:	4770      	bx	lr

080074f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80074f8:	b480      	push	{r7}
 80074fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80074fc:	bf00      	nop
 80074fe:	46bd      	mov	sp, r7
 8007500:	bc80      	pop	{r7}
 8007502:	4770      	bx	lr

08007504 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007508:	f000 fe40 	bl	800818c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800750c:	bf00      	nop
 800750e:	bd80      	pop	{r7, pc}

08007510 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b086      	sub	sp, #24
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007518:	4a14      	ldr	r2, [pc, #80]	@ (800756c <_sbrk+0x5c>)
 800751a:	4b15      	ldr	r3, [pc, #84]	@ (8007570 <_sbrk+0x60>)
 800751c:	1ad3      	subs	r3, r2, r3
 800751e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007524:	4b13      	ldr	r3, [pc, #76]	@ (8007574 <_sbrk+0x64>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d102      	bne.n	8007532 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800752c:	4b11      	ldr	r3, [pc, #68]	@ (8007574 <_sbrk+0x64>)
 800752e:	4a12      	ldr	r2, [pc, #72]	@ (8007578 <_sbrk+0x68>)
 8007530:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007532:	4b10      	ldr	r3, [pc, #64]	@ (8007574 <_sbrk+0x64>)
 8007534:	681a      	ldr	r2, [r3, #0]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	4413      	add	r3, r2
 800753a:	693a      	ldr	r2, [r7, #16]
 800753c:	429a      	cmp	r2, r3
 800753e:	d207      	bcs.n	8007550 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007540:	f003 ff8c 	bl	800b45c <__errno>
 8007544:	4603      	mov	r3, r0
 8007546:	220c      	movs	r2, #12
 8007548:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800754a:	f04f 33ff 	mov.w	r3, #4294967295
 800754e:	e009      	b.n	8007564 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007550:	4b08      	ldr	r3, [pc, #32]	@ (8007574 <_sbrk+0x64>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007556:	4b07      	ldr	r3, [pc, #28]	@ (8007574 <_sbrk+0x64>)
 8007558:	681a      	ldr	r2, [r3, #0]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	4413      	add	r3, r2
 800755e:	4a05      	ldr	r2, [pc, #20]	@ (8007574 <_sbrk+0x64>)
 8007560:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007562:	68fb      	ldr	r3, [r7, #12]
}
 8007564:	4618      	mov	r0, r3
 8007566:	3718      	adds	r7, #24
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}
 800756c:	20005000 	.word	0x20005000
 8007570:	00000400 	.word	0x00000400
 8007574:	2000018c 	.word	0x2000018c
 8007578:	200002e0 	.word	0x200002e0

0800757c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800757c:	b480      	push	{r7}
 800757e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007580:	bf00      	nop
 8007582:	46bd      	mov	sp, r7
 8007584:	bc80      	pop	{r7}
 8007586:	4770      	bx	lr

08007588 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8007588:	f7ff fff8 	bl	800757c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800758c:	480b      	ldr	r0, [pc, #44]	@ (80075bc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800758e:	490c      	ldr	r1, [pc, #48]	@ (80075c0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8007590:	4a0c      	ldr	r2, [pc, #48]	@ (80075c4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8007592:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007594:	e002      	b.n	800759c <LoopCopyDataInit>

08007596 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007596:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007598:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800759a:	3304      	adds	r3, #4

0800759c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800759c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800759e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80075a0:	d3f9      	bcc.n	8007596 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80075a2:	4a09      	ldr	r2, [pc, #36]	@ (80075c8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80075a4:	4c09      	ldr	r4, [pc, #36]	@ (80075cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80075a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80075a8:	e001      	b.n	80075ae <LoopFillZerobss>

080075aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80075aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80075ac:	3204      	adds	r2, #4

080075ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80075ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80075b0:	d3fb      	bcc.n	80075aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80075b2:	f003 ff59 	bl	800b468 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80075b6:	f7f8 fddb 	bl	8000170 <main>
  bx lr
 80075ba:	4770      	bx	lr
  ldr r0, =_sdata
 80075bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80075c0:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 80075c4:	0800c13c 	.word	0x0800c13c
  ldr r2, =_sbss
 80075c8:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 80075cc:	200002dc 	.word	0x200002dc

080075d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80075d0:	e7fe      	b.n	80075d0 <ADC1_2_IRQHandler>
	...

080075d4 <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 80075d4:	b480      	push	{r7}
 80075d6:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80075d8:	4b14      	ldr	r3, [pc, #80]	@ (800762c <DWT_Delay_Init+0x58>)
 80075da:	68db      	ldr	r3, [r3, #12]
 80075dc:	4a13      	ldr	r2, [pc, #76]	@ (800762c <DWT_Delay_Init+0x58>)
 80075de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80075e2:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80075e4:	4b11      	ldr	r3, [pc, #68]	@ (800762c <DWT_Delay_Init+0x58>)
 80075e6:	68db      	ldr	r3, [r3, #12]
 80075e8:	4a10      	ldr	r2, [pc, #64]	@ (800762c <DWT_Delay_Init+0x58>)
 80075ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80075ee:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80075f0:	4b0f      	ldr	r3, [pc, #60]	@ (8007630 <DWT_Delay_Init+0x5c>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a0e      	ldr	r2, [pc, #56]	@ (8007630 <DWT_Delay_Init+0x5c>)
 80075f6:	f023 0301 	bic.w	r3, r3, #1
 80075fa:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80075fc:	4b0c      	ldr	r3, [pc, #48]	@ (8007630 <DWT_Delay_Init+0x5c>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a0b      	ldr	r2, [pc, #44]	@ (8007630 <DWT_Delay_Init+0x5c>)
 8007602:	f043 0301 	orr.w	r3, r3, #1
 8007606:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8007608:	4b09      	ldr	r3, [pc, #36]	@ (8007630 <DWT_Delay_Init+0x5c>)
 800760a:	2200      	movs	r2, #0
 800760c:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 800760e:	bf00      	nop
     __ASM volatile ("NOP");
 8007610:	bf00      	nop
  __ASM volatile ("NOP");
 8007612:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8007614:	4b06      	ldr	r3, [pc, #24]	@ (8007630 <DWT_Delay_Init+0x5c>)
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d001      	beq.n	8007620 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 800761c:	2300      	movs	r3, #0
 800761e:	e000      	b.n	8007622 <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8007620:	2301      	movs	r3, #1
  }
}
 8007622:	4618      	mov	r0, r3
 8007624:	46bd      	mov	sp, r7
 8007626:	bc80      	pop	{r7}
 8007628:	4770      	bx	lr
 800762a:	bf00      	nop
 800762c:	e000edf0 	.word	0xe000edf0
 8007630:	e0001000 	.word	0xe0001000

08007634 <eeprom24c32_init>:
	return (OK == HAL_OK) ? 1 : 0;
}

//initializing the eeprom
eeprom_state_t eeprom24c32_init(eeprom24c32_t *eeprom,
		I2C_HandleTypeDef *i2c_bus) {
 8007634:	b480      	push	{r7}
 8007636:	b085      	sub	sp, #20
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
 800763c:	6039      	str	r1, [r7, #0]

	uint8_t status = 1;
 800763e:	2301      	movs	r3, #1
 8007640:	73fb      	strb	r3, [r7, #15]
	eeprom->i2c_bus = i2c_bus;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	683a      	ldr	r2, [r7, #0]
 8007646:	621a      	str	r2, [r3, #32]

	// Clear buffer and write to EEPROM
	eeprom->i2c_buffer[0] = 0x00;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	601a      	str	r2, [r3, #0]

	// Return the appropriate status
	return (status == 1) ? eeprom_OK : eeprom_NOK;
 800764e:	7bfb      	ldrb	r3, [r7, #15]
 8007650:	2b01      	cmp	r3, #1
 8007652:	bf14      	ite	ne
 8007654:	2301      	movne	r3, #1
 8007656:	2300      	moveq	r3, #0
 8007658:	b2db      	uxtb	r3, r3

}
 800765a:	4618      	mov	r0, r3
 800765c:	3714      	adds	r7, #20
 800765e:	46bd      	mov	sp, r7
 8007660:	bc80      	pop	{r7}
 8007662:	4770      	bx	lr

08007664 <eeprom24c32_write>:
 }
 */

//write to the eeprom function
uint8_t eeprom24c32_write(eeprom24c32_t *eeprom, uint8_t data,
		uint16_t mem_address) {
 8007664:	b580      	push	{r7, lr}
 8007666:	b088      	sub	sp, #32
 8007668:	af04      	add	r7, sp, #16
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	460b      	mov	r3, r1
 800766e:	70fb      	strb	r3, [r7, #3]
 8007670:	4613      	mov	r3, r2
 8007672:	803b      	strh	r3, [r7, #0]
	HAL_StatusTypeDef status;
	// Write one byte to EEPROM
	status = HAL_I2C_Mem_Write(eeprom->i2c_bus, (eeprom_SLA << 1), mem_address,
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6a18      	ldr	r0, [r3, #32]
 8007678:	883a      	ldrh	r2, [r7, #0]
 800767a:	2364      	movs	r3, #100	@ 0x64
 800767c:	9302      	str	r3, [sp, #8]
 800767e:	2301      	movs	r3, #1
 8007680:	9301      	str	r3, [sp, #4]
 8007682:	1cfb      	adds	r3, r7, #3
 8007684:	9300      	str	r3, [sp, #0]
 8007686:	2310      	movs	r3, #16
 8007688:	21a0      	movs	r1, #160	@ 0xa0
 800768a:	f001 fced 	bl	8009068 <HAL_I2C_Mem_Write>
 800768e:	4603      	mov	r3, r0
 8007690:	73fb      	strb	r3, [r7, #15]
	I2C_MEMADD_SIZE_16BIT, &data, 1, EEPROM_I2C_TIMEOUT);
	HAL_Delay(5);  // EEPROM write delay
 8007692:	2005      	movs	r0, #5
 8007694:	f000 fd96 	bl	80081c4 <HAL_Delay>
	return (status == HAL_OK) ? 1 : 0;
 8007698:	7bfb      	ldrb	r3, [r7, #15]
 800769a:	2b00      	cmp	r3, #0
 800769c:	bf0c      	ite	eq
 800769e:	2301      	moveq	r3, #1
 80076a0:	2300      	movne	r3, #0
 80076a2:	b2db      	uxtb	r3, r3
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3710      	adds	r7, #16
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}

080076ac <eeprom24c32_read>:

//read data from the eeprom
uint8_t eeprom24c32_read(eeprom24c32_t *eeprom, uint8_t *data,
		uint16_t mem_address) {
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b08a      	sub	sp, #40	@ 0x28
 80076b0:	af04      	add	r7, sp, #16
 80076b2:	60f8      	str	r0, [r7, #12]
 80076b4:	60b9      	str	r1, [r7, #8]
 80076b6:	4613      	mov	r3, r2
 80076b8:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef status;
	// Read one byte from EEPROM
	status = HAL_I2C_Mem_Read(eeprom->i2c_bus, (eeprom_SLA << 1), mem_address,
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	6a18      	ldr	r0, [r3, #32]
 80076be:	88fa      	ldrh	r2, [r7, #6]
 80076c0:	2364      	movs	r3, #100	@ 0x64
 80076c2:	9302      	str	r3, [sp, #8]
 80076c4:	2301      	movs	r3, #1
 80076c6:	9301      	str	r3, [sp, #4]
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	9300      	str	r3, [sp, #0]
 80076cc:	2310      	movs	r3, #16
 80076ce:	21a0      	movs	r1, #160	@ 0xa0
 80076d0:	f001 fdc4 	bl	800925c <HAL_I2C_Mem_Read>
 80076d4:	4603      	mov	r3, r0
 80076d6:	75fb      	strb	r3, [r7, #23]
	I2C_MEMADD_SIZE_16BIT, data, 1, EEPROM_I2C_TIMEOUT);
	return (status == HAL_OK) ? 1 : 0;
 80076d8:	7dfb      	ldrb	r3, [r7, #23]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	bf0c      	ite	eq
 80076de:	2301      	moveq	r3, #1
 80076e0:	2300      	movne	r3, #0
 80076e2:	b2db      	uxtb	r3, r3
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	3718      	adds	r7, #24
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}

080076ec <I2C__write>:
#define dev_SLA	0b1101000

#define start_address 0b00000000

static uint8_t I2C__write(uint8_t slave, uint8_t *data, uint8_t len,
		ds1307_t *clock) {
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b088      	sub	sp, #32
 80076f0:	af02      	add	r7, sp, #8
 80076f2:	60b9      	str	r1, [r7, #8]
 80076f4:	607b      	str	r3, [r7, #4]
 80076f6:	4603      	mov	r3, r0
 80076f8:	73fb      	strb	r3, [r7, #15]
 80076fa:	4613      	mov	r3, r2
 80076fc:	73bb      	strb	r3, [r7, #14]

	//master send data to the slave (RTC)
	HAL_StatusTypeDef OK = HAL_I2C_Master_Transmit(clock->i2c_bus,
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6958      	ldr	r0, [r3, #20]
 8007702:	7bbb      	ldrb	r3, [r7, #14]
 8007704:	b29b      	uxth	r3, r3
 8007706:	2264      	movs	r2, #100	@ 0x64
 8007708:	9200      	str	r2, [sp, #0]
 800770a:	68ba      	ldr	r2, [r7, #8]
 800770c:	21d0      	movs	r1, #208	@ 0xd0
 800770e:	f001 f941 	bl	8008994 <HAL_I2C_Master_Transmit>
 8007712:	4603      	mov	r3, r0
 8007714:	75fb      	strb	r3, [r7, #23]
			(dev_SLA << 1), data, len, 100);

	//check for the acknowledgment flag -> if 1 returned -> not acknowledged
	return (OK == HAL_OK) ? 1 : 0;
 8007716:	7dfb      	ldrb	r3, [r7, #23]
 8007718:	2b00      	cmp	r3, #0
 800771a:	bf0c      	ite	eq
 800771c:	2301      	moveq	r3, #1
 800771e:	2300      	movne	r3, #0
 8007720:	b2db      	uxtb	r3, r3
}
 8007722:	4618      	mov	r0, r3
 8007724:	3718      	adds	r7, #24
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}

0800772a <I2C__read>:

static uint8_t I2C__read(uint8_t slave, uint8_t *data, uint8_t len,
		ds1307_t *clock) {
 800772a:	b580      	push	{r7, lr}
 800772c:	b088      	sub	sp, #32
 800772e:	af02      	add	r7, sp, #8
 8007730:	60b9      	str	r1, [r7, #8]
 8007732:	607b      	str	r3, [r7, #4]
 8007734:	4603      	mov	r3, r0
 8007736:	73fb      	strb	r3, [r7, #15]
 8007738:	4613      	mov	r3, r2
 800773a:	73bb      	strb	r3, [r7, #14]

	//master receive data from the slave (RTC)
	HAL_StatusTypeDef OK = HAL_I2C_Master_Receive(clock->i2c_bus,
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6958      	ldr	r0, [r3, #20]
 8007740:	7bbb      	ldrb	r3, [r7, #14]
 8007742:	b29b      	uxth	r3, r3
 8007744:	2264      	movs	r2, #100	@ 0x64
 8007746:	9200      	str	r2, [sp, #0]
 8007748:	68ba      	ldr	r2, [r7, #8]
 800774a:	21d0      	movs	r1, #208	@ 0xd0
 800774c:	f001 fa20 	bl	8008b90 <HAL_I2C_Master_Receive>
 8007750:	4603      	mov	r3, r0
 8007752:	75fb      	strb	r3, [r7, #23]
			(dev_SLA << 1), data, len, 100);

	//check for the acknowledgment flag -> if 1 returned -> not acknowledged
	return (OK == HAL_OK) ? 1 : 0;
 8007754:	7dfb      	ldrb	r3, [r7, #23]
 8007756:	2b00      	cmp	r3, #0
 8007758:	bf0c      	ite	eq
 800775a:	2301      	moveq	r3, #1
 800775c:	2300      	movne	r3, #0
 800775e:	b2db      	uxtb	r3, r3
}
 8007760:	4618      	mov	r0, r3
 8007762:	3718      	adds	r7, #24
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}

08007768 <BCD2DEC>:

uint8_t BCD2DEC(uint8_t bcd) {
 8007768:	b480      	push	{r7}
 800776a:	b083      	sub	sp, #12
 800776c:	af00      	add	r7, sp, #0
 800776e:	4603      	mov	r3, r0
 8007770:	71fb      	strb	r3, [r7, #7]

	return ((bcd >> 4) * 10 + (0xF & bcd));
 8007772:	79fb      	ldrb	r3, [r7, #7]
 8007774:	091b      	lsrs	r3, r3, #4
 8007776:	b2db      	uxtb	r3, r3
 8007778:	461a      	mov	r2, r3
 800777a:	0092      	lsls	r2, r2, #2
 800777c:	4413      	add	r3, r2
 800777e:	005b      	lsls	r3, r3, #1
 8007780:	b2da      	uxtb	r2, r3
 8007782:	79fb      	ldrb	r3, [r7, #7]
 8007784:	f003 030f 	and.w	r3, r3, #15
 8007788:	b2db      	uxtb	r3, r3
 800778a:	4413      	add	r3, r2
 800778c:	b2db      	uxtb	r3, r3

}
 800778e:	4618      	mov	r0, r3
 8007790:	370c      	adds	r7, #12
 8007792:	46bd      	mov	sp, r7
 8007794:	bc80      	pop	{r7}
 8007796:	4770      	bx	lr

08007798 <DEC2BCD>:

uint8_t DEC2BCD(uint8_t dec) {
 8007798:	b480      	push	{r7}
 800779a:	b085      	sub	sp, #20
 800779c:	af00      	add	r7, sp, #0
 800779e:	4603      	mov	r3, r0
 80077a0:	71fb      	strb	r3, [r7, #7]

	uint8_t div = dec / 10;
 80077a2:	79fb      	ldrb	r3, [r7, #7]
 80077a4:	4a0e      	ldr	r2, [pc, #56]	@ (80077e0 <DEC2BCD+0x48>)
 80077a6:	fba2 2303 	umull	r2, r3, r2, r3
 80077aa:	08db      	lsrs	r3, r3, #3
 80077ac:	73fb      	strb	r3, [r7, #15]
	uint8_t rem = dec % 10;
 80077ae:	79fa      	ldrb	r2, [r7, #7]
 80077b0:	4b0b      	ldr	r3, [pc, #44]	@ (80077e0 <DEC2BCD+0x48>)
 80077b2:	fba3 1302 	umull	r1, r3, r3, r2
 80077b6:	08d9      	lsrs	r1, r3, #3
 80077b8:	460b      	mov	r3, r1
 80077ba:	009b      	lsls	r3, r3, #2
 80077bc:	440b      	add	r3, r1
 80077be:	005b      	lsls	r3, r3, #1
 80077c0:	1ad3      	subs	r3, r2, r3
 80077c2:	73bb      	strb	r3, [r7, #14]

	return (div << 4 | rem);
 80077c4:	7bfb      	ldrb	r3, [r7, #15]
 80077c6:	011b      	lsls	r3, r3, #4
 80077c8:	b25a      	sxtb	r2, r3
 80077ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80077ce:	4313      	orrs	r3, r2
 80077d0:	b25b      	sxtb	r3, r3
 80077d2:	b2db      	uxtb	r3, r3
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	3714      	adds	r7, #20
 80077d8:	46bd      	mov	sp, r7
 80077da:	bc80      	pop	{r7}
 80077dc:	4770      	bx	lr
 80077de:	bf00      	nop
 80077e0:	cccccccd 	.word	0xcccccccd

080077e4 <Ds1307_init>:

//initializing the RTC
DS1307_state_t Ds1307_init(ds1307_t *clock, I2C_HandleTypeDef *i2c_bus) {
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b084      	sub	sp, #16
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	6039      	str	r1, [r7, #0]

	uint8_t status = 1;
 80077ee:	2301      	movs	r3, #1
 80077f0:	73fb      	strb	r3, [r7, #15]

	clock->i2c_bus = i2c_bus;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	683a      	ldr	r2, [r7, #0]
 80077f6:	615a      	str	r2, [r3, #20]

	clock->i2c_buffer[0] = 0x00;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2200      	movs	r2, #0
 80077fc:	701a      	strb	r2, [r3, #0]
	status &= I2C__write(dev_SLA, clock->i2c_buffer, 1, clock);
 80077fe:	6879      	ldr	r1, [r7, #4]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2201      	movs	r2, #1
 8007804:	2068      	movs	r0, #104	@ 0x68
 8007806:	f7ff ff71 	bl	80076ec <I2C__write>
 800780a:	4603      	mov	r3, r0
 800780c:	461a      	mov	r2, r3
 800780e:	7bfb      	ldrb	r3, [r7, #15]
 8007810:	4013      	ands	r3, r2
 8007812:	73fb      	strb	r3, [r7, #15]

	status &= I2C__read(dev_SLA, clock->i2c_buffer, 1, clock);
 8007814:	6879      	ldr	r1, [r7, #4]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2201      	movs	r2, #1
 800781a:	2068      	movs	r0, #104	@ 0x68
 800781c:	f7ff ff85 	bl	800772a <I2C__read>
 8007820:	4603      	mov	r3, r0
 8007822:	461a      	mov	r2, r3
 8007824:	7bfb      	ldrb	r3, [r7, #15]
 8007826:	4013      	ands	r3, r2
 8007828:	73fb      	strb	r3, [r7, #15]

	if (((clock->i2c_buffer[0]) & (1 << 7)) == 0) {
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	b25b      	sxtb	r3, r3
 8007830:	2b00      	cmp	r3, #0
 8007832:	da10      	bge.n	8007856 <Ds1307_init+0x72>

	} else {

		clock->i2c_buffer[0] = 0x00; 	//reg base address
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2200      	movs	r2, #0
 8007838:	701a      	strb	r2, [r3, #0]

		clock->i2c_buffer[1] = 0; 		//clock hold bit
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2200      	movs	r2, #0
 800783e:	705a      	strb	r2, [r3, #1]

		status &= I2C__write(dev_SLA, clock->i2c_buffer, 2, clock);
 8007840:	6879      	ldr	r1, [r7, #4]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2202      	movs	r2, #2
 8007846:	2068      	movs	r0, #104	@ 0x68
 8007848:	f7ff ff50 	bl	80076ec <I2C__write>
 800784c:	4603      	mov	r3, r0
 800784e:	461a      	mov	r2, r3
 8007850:	7bfb      	ldrb	r3, [r7, #15]
 8007852:	4013      	ands	r3, r2
 8007854:	73fb      	strb	r3, [r7, #15]
	}

	if (status == 1) {
 8007856:	7bfb      	ldrb	r3, [r7, #15]
 8007858:	2b01      	cmp	r3, #1
 800785a:	d101      	bne.n	8007860 <Ds1307_init+0x7c>

		return DS1307_OK;
 800785c:	2300      	movs	r3, #0
 800785e:	e000      	b.n	8007862 <Ds1307_init+0x7e>
	} else {
		return DS1307_NOK;
 8007860:	2301      	movs	r3, #1
	}

}
 8007862:	4618      	mov	r0, r3
 8007864:	3710      	adds	r7, #16
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}

0800786a <Ds1307_set>:

//set the time function
DS1307_state_t Ds1307_set(ds1307_t *clock) {
 800786a:	b580      	push	{r7, lr}
 800786c:	b082      	sub	sp, #8
 800786e:	af00      	add	r7, sp, #0
 8007870:	6078      	str	r0, [r7, #4]

	clock->i2c_buffer[0] = start_address;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2200      	movs	r2, #0
 8007876:	701a      	strb	r2, [r3, #0]

	clock->i2c_buffer[1] = DEC2BCD(clock->sec);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	7a1b      	ldrb	r3, [r3, #8]
 800787c:	4618      	mov	r0, r3
 800787e:	f7ff ff8b 	bl	8007798 <DEC2BCD>
 8007882:	4603      	mov	r3, r0
 8007884:	461a      	mov	r2, r3
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	705a      	strb	r2, [r3, #1]

	clock->i2c_buffer[2] = DEC2BCD(clock->min);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	7a5b      	ldrb	r3, [r3, #9]
 800788e:	4618      	mov	r0, r3
 8007890:	f7ff ff82 	bl	8007798 <DEC2BCD>
 8007894:	4603      	mov	r3, r0
 8007896:	461a      	mov	r2, r3
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	709a      	strb	r2, [r3, #2]

	//in case of PMAM is selected (12H format)
	if (clock->format == 1) {
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	7c5b      	ldrb	r3, [r3, #17]
 80078a0:	f003 0301 	and.w	r3, r3, #1
 80078a4:	b2db      	uxtb	r3, r3
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d01c      	beq.n	80078e4 <Ds1307_set+0x7a>

		clock->i2c_buffer[3] = DEC2BCD(clock->hour) | ((clock->format) << 6)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	7a9b      	ldrb	r3, [r3, #10]
 80078ae:	4618      	mov	r0, r3
 80078b0:	f7ff ff72 	bl	8007798 <DEC2BCD>
 80078b4:	4603      	mov	r3, r0
 80078b6:	b25a      	sxtb	r2, r3
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	7c5b      	ldrb	r3, [r3, #17]
 80078bc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80078c0:	b2db      	uxtb	r3, r3
 80078c2:	019b      	lsls	r3, r3, #6
 80078c4:	b25b      	sxtb	r3, r3
 80078c6:	4313      	orrs	r3, r2
 80078c8:	b25a      	sxtb	r2, r3
				| ((clock->AM_PM) << 5);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	7c5b      	ldrb	r3, [r3, #17]
 80078ce:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80078d2:	b2db      	uxtb	r3, r3
 80078d4:	015b      	lsls	r3, r3, #5
 80078d6:	b25b      	sxtb	r3, r3
 80078d8:	4313      	orrs	r3, r2
 80078da:	b25b      	sxtb	r3, r3
 80078dc:	b2da      	uxtb	r2, r3
		clock->i2c_buffer[3] = DEC2BCD(clock->hour) | ((clock->format) << 6)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	70da      	strb	r2, [r3, #3]
 80078e2:	e012      	b.n	800790a <Ds1307_set+0xa0>
	}

	//case of 24h format
	else {

		clock->i2c_buffer[3] = DEC2BCD(clock->hour) | ((clock->AM_PM) << 5);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	7a9b      	ldrb	r3, [r3, #10]
 80078e8:	4618      	mov	r0, r3
 80078ea:	f7ff ff55 	bl	8007798 <DEC2BCD>
 80078ee:	4603      	mov	r3, r0
 80078f0:	b25a      	sxtb	r2, r3
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	7c5b      	ldrb	r3, [r3, #17]
 80078f6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80078fa:	b2db      	uxtb	r3, r3
 80078fc:	015b      	lsls	r3, r3, #5
 80078fe:	b25b      	sxtb	r3, r3
 8007900:	4313      	orrs	r3, r2
 8007902:	b25b      	sxtb	r3, r3
 8007904:	b2da      	uxtb	r2, r3
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	70da      	strb	r2, [r3, #3]

	}

	clock->i2c_buffer[4] = DEC2BCD(clock->day) & 0x7;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	7adb      	ldrb	r3, [r3, #11]
 800790e:	4618      	mov	r0, r3
 8007910:	f7ff ff42 	bl	8007798 <DEC2BCD>
 8007914:	4603      	mov	r3, r0
 8007916:	f003 0307 	and.w	r3, r3, #7
 800791a:	b2da      	uxtb	r2, r3
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	711a      	strb	r2, [r3, #4]

	clock->i2c_buffer[5] = DEC2BCD(clock->date) & 0x3f;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	7b1b      	ldrb	r3, [r3, #12]
 8007924:	4618      	mov	r0, r3
 8007926:	f7ff ff37 	bl	8007798 <DEC2BCD>
 800792a:	4603      	mov	r3, r0
 800792c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007930:	b2da      	uxtb	r2, r3
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	715a      	strb	r2, [r3, #5]

	clock->i2c_buffer[6] = DEC2BCD(clock->month) & 0x1f;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	7b5b      	ldrb	r3, [r3, #13]
 800793a:	4618      	mov	r0, r3
 800793c:	f7ff ff2c 	bl	8007798 <DEC2BCD>
 8007940:	4603      	mov	r3, r0
 8007942:	f003 031f 	and.w	r3, r3, #31
 8007946:	b2da      	uxtb	r2, r3
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	719a      	strb	r2, [r3, #6]

	clock->i2c_buffer[7] = DEC2BCD(clock->year - 2000);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	89db      	ldrh	r3, [r3, #14]
 8007950:	b2db      	uxtb	r3, r3
 8007952:	3330      	adds	r3, #48	@ 0x30
 8007954:	b2db      	uxtb	r3, r3
 8007956:	4618      	mov	r0, r3
 8007958:	f7ff ff1e 	bl	8007798 <DEC2BCD>
 800795c:	4603      	mov	r3, r0
 800795e:	461a      	mov	r2, r3
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	71da      	strb	r2, [r3, #7]

	if (I2C__write(dev_SLA, clock->i2c_buffer, 8, clock) == 1) {
 8007964:	6879      	ldr	r1, [r7, #4]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2208      	movs	r2, #8
 800796a:	2068      	movs	r0, #104	@ 0x68
 800796c:	f7ff febe 	bl	80076ec <I2C__write>
 8007970:	4603      	mov	r3, r0
 8007972:	2b01      	cmp	r3, #1
 8007974:	d101      	bne.n	800797a <Ds1307_set+0x110>

		return DS1307_OK;
 8007976:	2300      	movs	r3, #0
 8007978:	e000      	b.n	800797c <Ds1307_set+0x112>
	} else {

		return DS1307_NOK;
 800797a:	2301      	movs	r3, #1
	}
}
 800797c:	4618      	mov	r0, r3
 800797e:	3708      	adds	r7, #8
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}

08007984 <Ds1307_read>:

//read the time function
DS1307_state_t Ds1307_read(ds1307_t *clock) {
 8007984:	b580      	push	{r7, lr}
 8007986:	b082      	sub	sp, #8
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
	clock->i2c_buffer[0] = start_address;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2200      	movs	r2, #0
 8007990:	701a      	strb	r2, [r3, #0]

	    if (I2C__write(dev_SLA, clock->i2c_buffer, 1, clock) == 1) {
 8007992:	6879      	ldr	r1, [r7, #4]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2201      	movs	r2, #1
 8007998:	2068      	movs	r0, #104	@ 0x68
 800799a:	f7ff fea7 	bl	80076ec <I2C__write>
 800799e:	4603      	mov	r3, r0
 80079a0:	2b01      	cmp	r3, #1
 80079a2:	f040 8088 	bne.w	8007ab6 <Ds1307_read+0x132>
	        if (I2C__read(dev_SLA, clock->i2c_buffer, 7, clock) == 1) {
 80079a6:	6879      	ldr	r1, [r7, #4]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2207      	movs	r2, #7
 80079ac:	2068      	movs	r0, #104	@ 0x68
 80079ae:	f7ff febc 	bl	800772a <I2C__read>
 80079b2:	4603      	mov	r3, r0
 80079b4:	2b01      	cmp	r3, #1
 80079b6:	d17e      	bne.n	8007ab6 <Ds1307_read+0x132>
	            clock->sec = BCD2DEC(clock->i2c_buffer[0] & 0x7F);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	781b      	ldrb	r3, [r3, #0]
 80079bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80079c0:	b2db      	uxtb	r3, r3
 80079c2:	4618      	mov	r0, r3
 80079c4:	f7ff fed0 	bl	8007768 <BCD2DEC>
 80079c8:	4603      	mov	r3, r0
 80079ca:	461a      	mov	r2, r3
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	721a      	strb	r2, [r3, #8]
	            clock->min = BCD2DEC(clock->i2c_buffer[1]);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	785b      	ldrb	r3, [r3, #1]
 80079d4:	4618      	mov	r0, r3
 80079d6:	f7ff fec7 	bl	8007768 <BCD2DEC>
 80079da:	4603      	mov	r3, r0
 80079dc:	461a      	mov	r2, r3
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	725a      	strb	r2, [r3, #9]
	            clock->format = (clock->i2c_buffer[2] & 0b01000000) >> 6;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	789b      	ldrb	r3, [r3, #2]
 80079e6:	119b      	asrs	r3, r3, #6
 80079e8:	f003 0301 	and.w	r3, r3, #1
 80079ec:	b2d9      	uxtb	r1, r3
 80079ee:	687a      	ldr	r2, [r7, #4]
 80079f0:	7c53      	ldrb	r3, [r2, #17]
 80079f2:	f361 0300 	bfi	r3, r1, #0, #1
 80079f6:	7453      	strb	r3, [r2, #17]

	            if (clock->format == 1) { // 12h format
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	7c5b      	ldrb	r3, [r3, #17]
 80079fc:	f003 0301 	and.w	r3, r3, #1
 8007a00:	b2db      	uxtb	r3, r3
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d017      	beq.n	8007a36 <Ds1307_read+0xb2>
	                clock->hour = BCD2DEC(clock->i2c_buffer[2] & 0b00011111);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	789b      	ldrb	r3, [r3, #2]
 8007a0a:	f003 031f 	and.w	r3, r3, #31
 8007a0e:	b2db      	uxtb	r3, r3
 8007a10:	4618      	mov	r0, r3
 8007a12:	f7ff fea9 	bl	8007768 <BCD2DEC>
 8007a16:	4603      	mov	r3, r0
 8007a18:	461a      	mov	r2, r3
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	729a      	strb	r2, [r3, #10]
	                clock->AM_PM = (clock->i2c_buffer[2] & 0b00100000) >> 5;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	789b      	ldrb	r3, [r3, #2]
 8007a22:	115b      	asrs	r3, r3, #5
 8007a24:	f003 0301 	and.w	r3, r3, #1
 8007a28:	b2d9      	uxtb	r1, r3
 8007a2a:	687a      	ldr	r2, [r7, #4]
 8007a2c:	7c53      	ldrb	r3, [r2, #17]
 8007a2e:	f361 0341 	bfi	r3, r1, #1, #1
 8007a32:	7453      	strb	r3, [r2, #17]
 8007a34:	e017      	b.n	8007a66 <Ds1307_read+0xe2>
	            } else { // 24h format
	                clock->hour = BCD2DEC(clock->i2c_buffer[2] & 0b00111111);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	789b      	ldrb	r3, [r3, #2]
 8007a3a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007a3e:	b2db      	uxtb	r3, r3
 8007a40:	4618      	mov	r0, r3
 8007a42:	f7ff fe91 	bl	8007768 <BCD2DEC>
 8007a46:	4603      	mov	r3, r0
 8007a48:	461a      	mov	r2, r3
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	729a      	strb	r2, [r3, #10]
	                clock->AM_PM = (clock->hour > 11) ? 1 : 0;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	7a9b      	ldrb	r3, [r3, #10]
 8007a52:	2b0b      	cmp	r3, #11
 8007a54:	bf8c      	ite	hi
 8007a56:	2301      	movhi	r3, #1
 8007a58:	2300      	movls	r3, #0
 8007a5a:	b2d9      	uxtb	r1, r3
 8007a5c:	687a      	ldr	r2, [r7, #4]
 8007a5e:	7c53      	ldrb	r3, [r2, #17]
 8007a60:	f361 0341 	bfi	r3, r1, #1, #1
 8007a64:	7453      	strb	r3, [r2, #17]
	            }

	            clock->day = BCD2DEC(clock->i2c_buffer[3]);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	78db      	ldrb	r3, [r3, #3]
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f7ff fe7c 	bl	8007768 <BCD2DEC>
 8007a70:	4603      	mov	r3, r0
 8007a72:	461a      	mov	r2, r3
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	72da      	strb	r2, [r3, #11]
	            clock->date = BCD2DEC(clock->i2c_buffer[4]);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	791b      	ldrb	r3, [r3, #4]
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f7ff fe73 	bl	8007768 <BCD2DEC>
 8007a82:	4603      	mov	r3, r0
 8007a84:	461a      	mov	r2, r3
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	731a      	strb	r2, [r3, #12]
	            clock->month = BCD2DEC(clock->i2c_buffer[5]);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	795b      	ldrb	r3, [r3, #5]
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f7ff fe6a 	bl	8007768 <BCD2DEC>
 8007a94:	4603      	mov	r3, r0
 8007a96:	461a      	mov	r2, r3
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	735a      	strb	r2, [r3, #13]
	            clock->year = BCD2DEC(clock->i2c_buffer[6]) + 2000;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	799b      	ldrb	r3, [r3, #6]
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f7ff fe61 	bl	8007768 <BCD2DEC>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8007aac:	b29a      	uxth	r2, r3
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	81da      	strh	r2, [r3, #14]

	            return DS1307_OK;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	e000      	b.n	8007ab8 <Ds1307_read+0x134>
	        }
	    }
	    return DS1307_NOK;
 8007ab6:	2301      	movs	r3, #1
	}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3708      	adds	r7, #8
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}

08007ac0 <DWT_Delay_us>:

/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds) {
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b084      	sub	sp, #16
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
	uint32_t clk_cycle_start = DWT->CYCCNT;
 8007ac8:	4b0d      	ldr	r3, [pc, #52]	@ (8007b00 <DWT_Delay_us+0x40>)
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	60fb      	str	r3, [r7, #12]

	/* Go to number of cycles for system */
	microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8007ace:	f002 fefd 	bl	800a8cc <HAL_RCC_GetHCLKFreq>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	4a0b      	ldr	r2, [pc, #44]	@ (8007b04 <DWT_Delay_us+0x44>)
 8007ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8007ada:	0c9b      	lsrs	r3, r3, #18
 8007adc:	687a      	ldr	r2, [r7, #4]
 8007ade:	fb02 f303 	mul.w	r3, r2, r3
 8007ae2:	607b      	str	r3, [r7, #4]

	/* Delay till end */
	while ((DWT->CYCCNT - clk_cycle_start) < microseconds)
 8007ae4:	bf00      	nop
 8007ae6:	4b06      	ldr	r3, [pc, #24]	@ (8007b00 <DWT_Delay_us+0x40>)
 8007ae8:	685a      	ldr	r2, [r3, #4]
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	1ad2      	subs	r2, r2, r3
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	429a      	cmp	r2, r3
 8007af2:	d3f8      	bcc.n	8007ae6 <DWT_Delay_us+0x26>
		;
}
 8007af4:	bf00      	nop
 8007af6:	bf00      	nop
 8007af8:	3710      	adds	r7, #16
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}
 8007afe:	bf00      	nop
 8007b00:	e0001000 	.word	0xe0001000
 8007b04:	431bde83 	.word	0x431bde83

08007b08 <usDelay>:
    EN_SET(lcd,0);    \
    usDelay(100); \
  } while (0)

/* Hardware interface functions */
static void usDelay(uint16_t delay_us) {
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b082      	sub	sp, #8
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	4603      	mov	r3, r0
 8007b10:	80fb      	strh	r3, [r7, #6]
	DWT_Delay_us(delay_us);
 8007b12:	88fb      	ldrh	r3, [r7, #6]
 8007b14:	4618      	mov	r0, r3
 8007b16:	f7ff ffd3 	bl	8007ac0 <DWT_Delay_us>
}
 8007b1a:	bf00      	nop
 8007b1c:	3708      	adds	r7, #8
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}

08007b22 <Write_HalfByte>:
/// the top 4 bits are ignored
/// transfers the status of the 4-bit data to the hardware GPIO pins
static void Write_HalfByte(Alcd_t *lcd, uint8_t HalfByte) {
 8007b22:	b480      	push	{r7}
 8007b24:	b083      	sub	sp, #12
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	6078      	str	r0, [r7, #4]
 8007b2a:	460b      	mov	r3, r1
 8007b2c:	70fb      	strb	r3, [r7, #3]
	lcd->Data_GPIO->ODR &= ~(0xf << lcd->Data_GPIO_Start_Pin);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	68da      	ldr	r2, [r3, #12]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	7a1b      	ldrb	r3, [r3, #8]
 8007b38:	4619      	mov	r1, r3
 8007b3a:	230f      	movs	r3, #15
 8007b3c:	408b      	lsls	r3, r1
 8007b3e:	43db      	mvns	r3, r3
 8007b40:	4619      	mov	r1, r3
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	685b      	ldr	r3, [r3, #4]
 8007b46:	400a      	ands	r2, r1
 8007b48:	60da      	str	r2, [r3, #12]
	lcd->Data_GPIO->ODR |= HalfByte << lcd->Data_GPIO_Start_Pin;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	68da      	ldr	r2, [r3, #12]
 8007b50:	78fb      	ldrb	r3, [r7, #3]
 8007b52:	6879      	ldr	r1, [r7, #4]
 8007b54:	7a09      	ldrb	r1, [r1, #8]
 8007b56:	408b      	lsls	r3, r1
 8007b58:	4619      	mov	r1, r3
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	685b      	ldr	r3, [r3, #4]
 8007b5e:	430a      	orrs	r2, r1
 8007b60:	60da      	str	r2, [r3, #12]
}
 8007b62:	bf00      	nop
 8007b64:	370c      	adds	r7, #12
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bc80      	pop	{r7}
 8007b6a:	4770      	bx	lr

08007b6c <RS_SET>:
/// @brief 1 for set and 0 for reset
static void RS_SET(Alcd_t *lcd, uint8_t R_S_Stat) {
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b082      	sub	sp, #8
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	460b      	mov	r3, r1
 8007b76:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->RS_GPIO, lcd->RS_GPIO_Pin, R_S_Stat);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6958      	ldr	r0, [r3, #20]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	8b1b      	ldrh	r3, [r3, #24]
 8007b80:	78fa      	ldrb	r2, [r7, #3]
 8007b82:	4619      	mov	r1, r3
 8007b84:	f000 fdaa 	bl	80086dc <HAL_GPIO_WritePin>
}
 8007b88:	bf00      	nop
 8007b8a:	3708      	adds	r7, #8
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <EN_SET>:
/// @brief 1 for set and 0 for reset
static void EN_SET(Alcd_t *lcd, uint8_t EN_Stat) {
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b082      	sub	sp, #8
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	460b      	mov	r3, r1
 8007b9a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->EN_GPIO, lcd->EN_GPIO_Pin, EN_Stat);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	68d8      	ldr	r0, [r3, #12]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	8a1b      	ldrh	r3, [r3, #16]
 8007ba4:	78fa      	ldrb	r2, [r7, #3]
 8007ba6:	4619      	mov	r1, r3
 8007ba8:	f000 fd98 	bl	80086dc <HAL_GPIO_WritePin>
}
 8007bac:	bf00      	nop
 8007bae:	3708      	adds	r7, #8
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}

08007bb4 <Alcd_Init_GPIO>:

static void Alcd_Init_GPIO(Alcd_t *lcd) {
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b086      	sub	sp, #24
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef G = { .Mode = GPIO_MODE_OUTPUT_PP, .Pin = lcd->RS_GPIO_Pin,
 8007bbc:	f107 0308 	add.w	r3, r7, #8
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	601a      	str	r2, [r3, #0]
 8007bc4:	605a      	str	r2, [r3, #4]
 8007bc6:	609a      	str	r2, [r3, #8]
 8007bc8:	60da      	str	r2, [r3, #12]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	8b1b      	ldrh	r3, [r3, #24]
 8007bce:	60bb      	str	r3, [r7, #8]
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	60fb      	str	r3, [r7, #12]
 8007bd4:	2302      	movs	r3, #2
 8007bd6:	617b      	str	r3, [r7, #20]
			.Speed = GPIO_SPEED_FREQ_LOW };
	HAL_GPIO_Init(lcd->RS_GPIO, &G);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	695b      	ldr	r3, [r3, #20]
 8007bdc:	f107 0208 	add.w	r2, r7, #8
 8007be0:	4611      	mov	r1, r2
 8007be2:	4618      	mov	r0, r3
 8007be4:	f000 fbf6 	bl	80083d4 <HAL_GPIO_Init>
	G.Pin = lcd->EN_GPIO_Pin;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	8a1b      	ldrh	r3, [r3, #16]
 8007bec:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(lcd->EN_GPIO, &G);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	68db      	ldr	r3, [r3, #12]
 8007bf2:	f107 0208 	add.w	r2, r7, #8
 8007bf6:	4611      	mov	r1, r2
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f000 fbeb 	bl	80083d4 <HAL_GPIO_Init>

	G.Pin = 0xf << lcd->Data_GPIO_Start_Pin;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	7a1b      	ldrb	r3, [r3, #8]
 8007c02:	461a      	mov	r2, r3
 8007c04:	230f      	movs	r3, #15
 8007c06:	4093      	lsls	r3, r2
 8007c08:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(lcd->Data_GPIO, &G);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	f107 0208 	add.w	r2, r7, #8
 8007c12:	4611      	mov	r1, r2
 8007c14:	4618      	mov	r0, r3
 8007c16:	f000 fbdd 	bl	80083d4 <HAL_GPIO_Init>
}
 8007c1a:	bf00      	nop
 8007c1c:	3718      	adds	r7, #24
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}

08007c22 <Alcd_SendByte>:

/* User Functions  */
void Alcd_Display(Alcd_t *lcd, uint8_t ON_OFF);

static inline void Alcd_SendByte(Alcd_t *lcd, uint8_t CMD_Data, uint8_t value) {
 8007c22:	b580      	push	{r7, lr}
 8007c24:	b082      	sub	sp, #8
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]
 8007c2a:	460b      	mov	r3, r1
 8007c2c:	70fb      	strb	r3, [r7, #3]
 8007c2e:	4613      	mov	r3, r2
 8007c30:	70bb      	strb	r3, [r7, #2]
	RS_SET(lcd, CMD_Data);
 8007c32:	78fb      	ldrb	r3, [r7, #3]
 8007c34:	4619      	mov	r1, r3
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f7ff ff98 	bl	8007b6c <RS_SET>
	// send the higher 4 bits
	Write_HalfByte(lcd, value >> 4);
 8007c3c:	78bb      	ldrb	r3, [r7, #2]
 8007c3e:	091b      	lsrs	r3, r3, #4
 8007c40:	b2db      	uxtb	r3, r3
 8007c42:	4619      	mov	r1, r3
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f7ff ff6c 	bl	8007b22 <Write_HalfByte>
	// pulse the enable pin
	PulseEn
 8007c4a:	2101      	movs	r1, #1
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f7ff ff9f 	bl	8007b90 <EN_SET>
 8007c52:	200a      	movs	r0, #10
 8007c54:	f7ff ff58 	bl	8007b08 <usDelay>
 8007c58:	2100      	movs	r1, #0
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f7ff ff98 	bl	8007b90 <EN_SET>
 8007c60:	2064      	movs	r0, #100	@ 0x64
 8007c62:	f7ff ff51 	bl	8007b08 <usDelay>
	;
	Write_HalfByte(lcd, value);
 8007c66:	78bb      	ldrb	r3, [r7, #2]
 8007c68:	4619      	mov	r1, r3
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f7ff ff59 	bl	8007b22 <Write_HalfByte>
	PulseEn
 8007c70:	2101      	movs	r1, #1
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f7ff ff8c 	bl	8007b90 <EN_SET>
 8007c78:	200a      	movs	r0, #10
 8007c7a:	f7ff ff45 	bl	8007b08 <usDelay>
 8007c7e:	2100      	movs	r1, #0
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f7ff ff85 	bl	8007b90 <EN_SET>
 8007c86:	2064      	movs	r0, #100	@ 0x64
 8007c88:	f7ff ff3e 	bl	8007b08 <usDelay>
	;
}
 8007c8c:	bf00      	nop
 8007c8e:	3708      	adds	r7, #8
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}

08007c94 <Alcd_Init>:

void Alcd_Init(Alcd_t *lcd, uint8_t Lines, uint8_t Chars) {
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b084      	sub	sp, #16
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	460b      	mov	r3, r1
 8007c9e:	70fb      	strb	r3, [r7, #3]
 8007ca0:	4613      	mov	r3, r2
 8007ca2:	70bb      	strb	r3, [r7, #2]
	//INitialize the delay function using the ARM core cycle counter
	DWT_Delay_Init();
 8007ca4:	f7ff fc96 	bl	80075d4 <DWT_Delay_Init>
	Alcd_Init_GPIO(lcd);
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f7ff ff83 	bl	8007bb4 <Alcd_Init_GPIO>
	uint8_t x;

	lcd->RowOffsets[0] = 0;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	769a      	strb	r2, [r3, #26]
	lcd->RowOffsets[1] = 0x40;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2240      	movs	r2, #64	@ 0x40
 8007cb8:	76da      	strb	r2, [r3, #27]
	lcd->RowOffsets[2] = 0 + Chars;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	78ba      	ldrb	r2, [r7, #2]
 8007cbe:	771a      	strb	r2, [r3, #28]
	lcd->RowOffsets[3] = 0x40 + Chars;
 8007cc0:	78bb      	ldrb	r3, [r7, #2]
 8007cc2:	3340      	adds	r3, #64	@ 0x40
 8007cc4:	b2da      	uxtb	r2, r3
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	775a      	strb	r2, [r3, #29]

	RS_SET(lcd, 0);
 8007cca:	2100      	movs	r1, #0
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f7ff ff4d 	bl	8007b6c <RS_SET>
	EN_SET(lcd, 0);
 8007cd2:	2100      	movs	r1, #0
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f7ff ff5b 	bl	8007b90 <EN_SET>
	usDelay(50000);
 8007cda:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8007cde:	f7ff ff13 	bl	8007b08 <usDelay>

	// init display in 4-bit mode
	for (x = 0; x < 2; x++) {
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	73fb      	strb	r3, [r7, #15]
 8007ce6:	e018      	b.n	8007d1a <Alcd_Init+0x86>
		Write_HalfByte(lcd, 0x03);
 8007ce8:	2103      	movs	r1, #3
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f7ff ff19 	bl	8007b22 <Write_HalfByte>
		PulseEn
 8007cf0:	2101      	movs	r1, #1
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f7ff ff4c 	bl	8007b90 <EN_SET>
 8007cf8:	200a      	movs	r0, #10
 8007cfa:	f7ff ff05 	bl	8007b08 <usDelay>
 8007cfe:	2100      	movs	r1, #0
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f7ff ff45 	bl	8007b90 <EN_SET>
 8007d06:	2064      	movs	r0, #100	@ 0x64
 8007d08:	f7ff fefe 	bl	8007b08 <usDelay>
		;
		usDelay(4500);
 8007d0c:	f241 1094 	movw	r0, #4500	@ 0x1194
 8007d10:	f7ff fefa 	bl	8007b08 <usDelay>
	for (x = 0; x < 2; x++) {
 8007d14:	7bfb      	ldrb	r3, [r7, #15]
 8007d16:	3301      	adds	r3, #1
 8007d18:	73fb      	strb	r3, [r7, #15]
 8007d1a:	7bfb      	ldrb	r3, [r7, #15]
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d9e3      	bls.n	8007ce8 <Alcd_Init+0x54>
	}
	Write_HalfByte(lcd, 0x03);
 8007d20:	2103      	movs	r1, #3
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f7ff fefd 	bl	8007b22 <Write_HalfByte>
	PulseEn
 8007d28:	2101      	movs	r1, #1
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f7ff ff30 	bl	8007b90 <EN_SET>
 8007d30:	200a      	movs	r0, #10
 8007d32:	f7ff fee9 	bl	8007b08 <usDelay>
 8007d36:	2100      	movs	r1, #0
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f7ff ff29 	bl	8007b90 <EN_SET>
 8007d3e:	2064      	movs	r0, #100	@ 0x64
 8007d40:	f7ff fee2 	bl	8007b08 <usDelay>
	;
	usDelay(150);
 8007d44:	2096      	movs	r0, #150	@ 0x96
 8007d46:	f7ff fedf 	bl	8007b08 <usDelay>
	Write_HalfByte(lcd, 0x02);
 8007d4a:	2102      	movs	r1, #2
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f7ff fee8 	bl	8007b22 <Write_HalfByte>
	PulseEn
 8007d52:	2101      	movs	r1, #1
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f7ff ff1b 	bl	8007b90 <EN_SET>
 8007d5a:	200a      	movs	r0, #10
 8007d5c:	f7ff fed4 	bl	8007b08 <usDelay>
 8007d60:	2100      	movs	r1, #0
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f7ff ff14 	bl	8007b90 <EN_SET>
 8007d68:	2064      	movs	r0, #100	@ 0x64
 8007d6a:	f7ff fecd 	bl	8007b08 <usDelay>
	;

	// finally, set # lines, font size, etc.
	SendByte(0, LCD_FUNCTIONSET | LCD_2LINE | LCD_5x8DOTS);
 8007d6e:	2228      	movs	r2, #40	@ 0x28
 8007d70:	2100      	movs	r1, #0
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f7ff ff55 	bl	8007c22 <Alcd_SendByte>

	// turn the display on with no cursor or blinking default
	// lcd->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;

	// turn on the display
	Alcd_Display_Control(lcd, 1, 0, 0);
 8007d78:	2300      	movs	r3, #0
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	2101      	movs	r1, #1
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f000 f86d 	bl	8007e5e <Alcd_Display_Control>
	Alcd_Clear(lcd);
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f000 f859 	bl	8007e3c <Alcd_Clear>
}
 8007d8a:	bf00      	nop
 8007d8c:	3710      	adds	r7, #16
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}

08007d92 <Alcd_CursorAt>:

void Alcd_CursorAt(Alcd_t *lcd, uint8_t Row, uint8_t Col) {
 8007d92:	b580      	push	{r7, lr}
 8007d94:	b082      	sub	sp, #8
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	6078      	str	r0, [r7, #4]
 8007d9a:	460b      	mov	r3, r1
 8007d9c:	70fb      	strb	r3, [r7, #3]
 8007d9e:	4613      	mov	r3, r2
 8007da0:	70bb      	strb	r3, [r7, #2]
	SendByte(0, LCD_SETDDRAMADDR | (Col + lcd->RowOffsets[Row]));
 8007da2:	78fb      	ldrb	r3, [r7, #3]
 8007da4:	687a      	ldr	r2, [r7, #4]
 8007da6:	4413      	add	r3, r2
 8007da8:	7e9a      	ldrb	r2, [r3, #26]
 8007daa:	78bb      	ldrb	r3, [r7, #2]
 8007dac:	4413      	add	r3, r2
 8007dae:	b2db      	uxtb	r3, r3
 8007db0:	b25b      	sxtb	r3, r3
 8007db2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007db6:	b25b      	sxtb	r3, r3
 8007db8:	b2db      	uxtb	r3, r3
 8007dba:	461a      	mov	r2, r3
 8007dbc:	2100      	movs	r1, #0
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f7ff ff2f 	bl	8007c22 <Alcd_SendByte>
}
 8007dc4:	bf00      	nop
 8007dc6:	3708      	adds	r7, #8
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}

08007dcc <Alcd_Put_n>:

void Alcd_Put_n(Alcd_t *lcd, char *text, uint8_t len) {
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b086      	sub	sp, #24
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	60f8      	str	r0, [r7, #12]
 8007dd4:	60b9      	str	r1, [r7, #8]
 8007dd6:	4613      	mov	r3, r2
 8007dd8:	71fb      	strb	r3, [r7, #7]
	for (uint8_t x = 0; x < len; x++) {
 8007dda:	2300      	movs	r3, #0
 8007ddc:	75fb      	strb	r3, [r7, #23]
 8007dde:	e00b      	b.n	8007df8 <Alcd_Put_n+0x2c>
		SendByte(1, *(text++));
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	1c5a      	adds	r2, r3, #1
 8007de4:	60ba      	str	r2, [r7, #8]
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	461a      	mov	r2, r3
 8007dea:	2101      	movs	r1, #1
 8007dec:	68f8      	ldr	r0, [r7, #12]
 8007dee:	f7ff ff18 	bl	8007c22 <Alcd_SendByte>
	for (uint8_t x = 0; x < len; x++) {
 8007df2:	7dfb      	ldrb	r3, [r7, #23]
 8007df4:	3301      	adds	r3, #1
 8007df6:	75fb      	strb	r3, [r7, #23]
 8007df8:	7dfa      	ldrb	r2, [r7, #23]
 8007dfa:	79fb      	ldrb	r3, [r7, #7]
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	d3ef      	bcc.n	8007de0 <Alcd_Put_n+0x14>
	}
}
 8007e00:	bf00      	nop
 8007e02:	bf00      	nop
 8007e04:	3718      	adds	r7, #24
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}

08007e0a <Alcd_PutAt_n>:

void Alcd_PutAt_n(Alcd_t *lcd, uint8_t Row, uint8_t Col, char *text,
		uint8_t len) {
 8007e0a:	b580      	push	{r7, lr}
 8007e0c:	b084      	sub	sp, #16
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	60f8      	str	r0, [r7, #12]
 8007e12:	607b      	str	r3, [r7, #4]
 8007e14:	460b      	mov	r3, r1
 8007e16:	72fb      	strb	r3, [r7, #11]
 8007e18:	4613      	mov	r3, r2
 8007e1a:	72bb      	strb	r3, [r7, #10]
	Alcd_CursorAt(lcd, Row, Col);
 8007e1c:	7aba      	ldrb	r2, [r7, #10]
 8007e1e:	7afb      	ldrb	r3, [r7, #11]
 8007e20:	4619      	mov	r1, r3
 8007e22:	68f8      	ldr	r0, [r7, #12]
 8007e24:	f7ff ffb5 	bl	8007d92 <Alcd_CursorAt>
	Alcd_Put_n(lcd, text, len);
 8007e28:	7e3b      	ldrb	r3, [r7, #24]
 8007e2a:	461a      	mov	r2, r3
 8007e2c:	6879      	ldr	r1, [r7, #4]
 8007e2e:	68f8      	ldr	r0, [r7, #12]
 8007e30:	f7ff ffcc 	bl	8007dcc <Alcd_Put_n>
}
 8007e34:	bf00      	nop
 8007e36:	3710      	adds	r7, #16
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}

08007e3c <Alcd_Clear>:
void Alcd_Home(Alcd_t *lcd) {
	SendByte(0, LCD_RETURNHOME);
	usDelay(2000);
}

void Alcd_Clear(Alcd_t *lcd) {
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b082      	sub	sp, #8
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
	SendByte(0, LCD_CLEARDISPLAY);
 8007e44:	2201      	movs	r2, #1
 8007e46:	2100      	movs	r1, #0
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f7ff feea 	bl	8007c22 <Alcd_SendByte>
	usDelay(2000);
 8007e4e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8007e52:	f7ff fe59 	bl	8007b08 <usDelay>
}
 8007e56:	bf00      	nop
 8007e58:	3708      	adds	r7, #8
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}

08007e5e <Alcd_Display_Control>:

void Alcd_Display_Control(Alcd_t *lcd, uint8_t ON_OFF, uint8_t CUR_ON_OFF,
		uint8_t BLINK_ON_OFF) {
 8007e5e:	b580      	push	{r7, lr}
 8007e60:	b082      	sub	sp, #8
 8007e62:	af00      	add	r7, sp, #0
 8007e64:	6078      	str	r0, [r7, #4]
 8007e66:	4608      	mov	r0, r1
 8007e68:	4611      	mov	r1, r2
 8007e6a:	461a      	mov	r2, r3
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	70fb      	strb	r3, [r7, #3]
 8007e70:	460b      	mov	r3, r1
 8007e72:	70bb      	strb	r3, [r7, #2]
 8007e74:	4613      	mov	r3, r2
 8007e76:	707b      	strb	r3, [r7, #1]
	lcd->_displaycontrol = 0;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	779a      	strb	r2, [r3, #30]
	if (ON_OFF) {
 8007e7e:	78fb      	ldrb	r3, [r7, #3]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d006      	beq.n	8007e92 <Alcd_Display_Control+0x34>
		lcd->_displaycontrol |= LCD_DISPLAYON;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	7f9b      	ldrb	r3, [r3, #30]
 8007e88:	f043 0304 	orr.w	r3, r3, #4
 8007e8c:	b2da      	uxtb	r2, r3
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	779a      	strb	r2, [r3, #30]
	}
	if (CUR_ON_OFF) {
 8007e92:	78bb      	ldrb	r3, [r7, #2]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d006      	beq.n	8007ea6 <Alcd_Display_Control+0x48>
		lcd->_displaycontrol |= LCD_CURSORON;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	7f9b      	ldrb	r3, [r3, #30]
 8007e9c:	f043 0302 	orr.w	r3, r3, #2
 8007ea0:	b2da      	uxtb	r2, r3
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	779a      	strb	r2, [r3, #30]
	}
	if (BLINK_ON_OFF) {
 8007ea6:	787b      	ldrb	r3, [r7, #1]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d006      	beq.n	8007eba <Alcd_Display_Control+0x5c>
		lcd->_displaycontrol |= LCD_BLINKON;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	7f9b      	ldrb	r3, [r3, #30]
 8007eb0:	f043 0301 	orr.w	r3, r3, #1
 8007eb4:	b2da      	uxtb	r2, r3
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	779a      	strb	r2, [r3, #30]
	}
	lcd->_displaycontrol |= LCD_DISPLAYON;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	7f9b      	ldrb	r3, [r3, #30]
 8007ebe:	f043 0304 	orr.w	r3, r3, #4
 8007ec2:	b2da      	uxtb	r2, r3
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	779a      	strb	r2, [r3, #30]
	SendByte(0, LCD_DISPLAYCONTROL | lcd->_displaycontrol);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	7f9b      	ldrb	r3, [r3, #30]
 8007ecc:	f043 0308 	orr.w	r3, r3, #8
 8007ed0:	b2db      	uxtb	r3, r3
 8007ed2:	461a      	mov	r2, r3
 8007ed4:	2100      	movs	r1, #0
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f7ff fea3 	bl	8007c22 <Alcd_SendByte>
}
 8007edc:	bf00      	nop
 8007ede:	3708      	adds	r7, #8
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <Str_Len>:

void Alcd_PutChar(Alcd_t *lcd, char chr) {
	SendByte(1, chr);
}

int Str_Len(char *string) {
 8007ee4:	b480      	push	{r7}
 8007ee6:	b085      	sub	sp, #20
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
	int len = 0;
 8007eec:	2300      	movs	r3, #0
 8007eee:	60fb      	str	r3, [r7, #12]
	while (*(string++)) {
 8007ef0:	e002      	b.n	8007ef8 <Str_Len+0x14>
		len++;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	3301      	adds	r3, #1
 8007ef6:	60fb      	str	r3, [r7, #12]
	while (*(string++)) {
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	1c5a      	adds	r2, r3, #1
 8007efc:	607a      	str	r2, [r7, #4]
 8007efe:	781b      	ldrb	r3, [r3, #0]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d1f6      	bne.n	8007ef2 <Str_Len+0xe>
	}
	return len;
 8007f04:	68fb      	ldr	r3, [r7, #12]
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3714      	adds	r7, #20
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bc80      	pop	{r7}
 8007f0e:	4770      	bx	lr

08007f10 <Keypad_GetInputs>:
 */

#include "Matrix_Keypad.h"

/// @brief Reads the input status from the input port
static uint16_t Keypad_GetInputs(Matrix_Keypad_t *keypad) {
 8007f10:	b480      	push	{r7}
 8007f12:	b085      	sub	sp, #20
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
	uint16_t Input = keypad->IntputPort->IDR & keypad->IP_Mask;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	689b      	ldr	r3, [r3, #8]
 8007f1c:	689b      	ldr	r3, [r3, #8]
 8007f1e:	b29a      	uxth	r2, r3
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	8b1b      	ldrh	r3, [r3, #24]
 8007f24:	4013      	ands	r3, r2
 8007f26:	81fb      	strh	r3, [r7, #14]
	return (Input >> keypad->InputStartingPin);
 8007f28:	89fa      	ldrh	r2, [r7, #14]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	68db      	ldr	r3, [r3, #12]
 8007f2e:	fa42 f303 	asr.w	r3, r2, r3
 8007f32:	b29b      	uxth	r3, r3
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3714      	adds	r7, #20
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bc80      	pop	{r7}
 8007f3c:	4770      	bx	lr

08007f3e <Keypad_SetOutputs>:

///@brief Write the status of output ports
static void Keypad_SetOutputs(Matrix_Keypad_t *keypad, uint16_t OutputStat) {
 8007f3e:	b480      	push	{r7}
 8007f40:	b083      	sub	sp, #12
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	6078      	str	r0, [r7, #4]
 8007f46:	460b      	mov	r3, r1
 8007f48:	807b      	strh	r3, [r7, #2]
	//turn off the pins
	keypad->OutputPort->BRR |= keypad->OP_Mask;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	691b      	ldr	r3, [r3, #16]
 8007f4e:	695a      	ldr	r2, [r3, #20]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	8b5b      	ldrh	r3, [r3, #26]
 8007f54:	4619      	mov	r1, r3
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	691b      	ldr	r3, [r3, #16]
 8007f5a:	430a      	orrs	r2, r1
 8007f5c:	615a      	str	r2, [r3, #20]
	//turn on only the needed ones according to the required output
	keypad->OutputPort->BSRR |= (OutputStat << keypad->OutputStartingPin);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	691b      	ldr	r3, [r3, #16]
 8007f62:	691a      	ldr	r2, [r3, #16]
 8007f64:	8879      	ldrh	r1, [r7, #2]
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	695b      	ldr	r3, [r3, #20]
 8007f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8007f6e:	4619      	mov	r1, r3
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	691b      	ldr	r3, [r3, #16]
 8007f74:	430a      	orrs	r2, r1
 8007f76:	611a      	str	r2, [r3, #16]
}
 8007f78:	bf00      	nop
 8007f7a:	370c      	adds	r7, #12
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bc80      	pop	{r7}
 8007f80:	4770      	bx	lr

08007f82 <Keypad_Delay>:

/// @fn void Keypad_Delay(uint32_t)
/// @brief
/// Halts the program execution for a certain time
/// @param delay_ms delay value in milliseconds
static void Keypad_Delay(uint32_t delay_ms) {
 8007f82:	b580      	push	{r7, lr}
 8007f84:	b082      	sub	sp, #8
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	6078      	str	r0, [r7, #4]
	HAL_Delay(delay_ms);
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f000 f91a 	bl	80081c4 <HAL_Delay>
}
 8007f90:	bf00      	nop
 8007f92:	3708      	adds	r7, #8
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}

08007f98 <Keypad_Refresh>:

void Keypad_Refresh(Matrix_Keypad_t *keypad) {
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b084      	sub	sp, #16
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
// temporary variable to store the new status of keys
	uint32_t TempKeys = 0;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	60fb      	str	r3, [r7, #12]
	uint16_t OutputStat = 1 << (keypad->Rows - 1);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	781b      	ldrb	r3, [r3, #0]
 8007fa8:	3b01      	subs	r3, #1
 8007faa:	2201      	movs	r2, #1
 8007fac:	fa02 f303 	lsl.w	r3, r2, r3
 8007fb0:	817b      	strh	r3, [r7, #10]

	uint16_t x = 0;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	813b      	strh	r3, [r7, #8]
	do {

		TempKeys <<= keypad->Columns;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	785b      	ldrb	r3, [r3, #1]
 8007fba:	461a      	mov	r2, r3
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	4093      	lsls	r3, r2
 8007fc0:	60fb      	str	r3, [r7, #12]
		// send the output status to the hardware
		Keypad_SetOutputs(keypad, OutputStat);
 8007fc2:	897b      	ldrh	r3, [r7, #10]
 8007fc4:	4619      	mov	r1, r3
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f7ff ffb9 	bl	8007f3e <Keypad_SetOutputs>
		Keypad_Delay(1);
 8007fcc:	2001      	movs	r0, #1
 8007fce:	f7ff ffd8 	bl	8007f82 <Keypad_Delay>
		// read the input status from the hardware

		TempKeys |= Keypad_GetInputs(keypad);
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f7ff ff9c 	bl	8007f10 <Keypad_GetInputs>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	461a      	mov	r2, r3
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	60fb      	str	r3, [r7, #12]
		OutputStat >>= 1;
 8007fe2:	897b      	ldrh	r3, [r7, #10]
 8007fe4:	085b      	lsrs	r3, r3, #1
 8007fe6:	817b      	strh	r3, [r7, #10]
		x++;
 8007fe8:	893b      	ldrh	r3, [r7, #8]
 8007fea:	3301      	adds	r3, #1
 8007fec:	813b      	strh	r3, [r7, #8]
	} while (x < keypad->Rows);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	781b      	ldrb	r3, [r3, #0]
 8007ff2:	461a      	mov	r2, r3
 8007ff4:	893b      	ldrh	r3, [r7, #8]
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d3dd      	bcc.n	8007fb6 <Keypad_Refresh+0x1e>

	keypad->KeysStatus = TempKeys;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	68fa      	ldr	r2, [r7, #12]
 8007ffe:	605a      	str	r2, [r3, #4]
}
 8008000:	bf00      	nop
 8008002:	3710      	adds	r7, #16
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}

08008008 <Keypad_Init>:

void Keypad_Init(Matrix_Keypad_t *keypad) {
 8008008:	b580      	push	{r7, lr}
 800800a:	b08a      	sub	sp, #40	@ 0x28
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef config;

//put a logic 1 in every position where an input pin is selected
	uint16_t Pins = 0;
 8008010:	2300      	movs	r3, #0
 8008012:	84fb      	strh	r3, [r7, #38]	@ 0x26

//configure the columns gpio pins as inputs
//enable pull down resistors to eliminate the use of external ones
	for (int x = 0; x < keypad->Columns; x++) {
 8008014:	2300      	movs	r3, #0
 8008016:	623b      	str	r3, [r7, #32]
 8008018:	e00f      	b.n	800803a <Keypad_Init+0x32>
		Pins |= (1 << (x + keypad->InputStartingPin));
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	68da      	ldr	r2, [r3, #12]
 800801e:	6a3b      	ldr	r3, [r7, #32]
 8008020:	4413      	add	r3, r2
 8008022:	2201      	movs	r2, #1
 8008024:	fa02 f303 	lsl.w	r3, r2, r3
 8008028:	b21a      	sxth	r2, r3
 800802a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800802e:	4313      	orrs	r3, r2
 8008030:	b21b      	sxth	r3, r3
 8008032:	84fb      	strh	r3, [r7, #38]	@ 0x26
	for (int x = 0; x < keypad->Columns; x++) {
 8008034:	6a3b      	ldr	r3, [r7, #32]
 8008036:	3301      	adds	r3, #1
 8008038:	623b      	str	r3, [r7, #32]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	785b      	ldrb	r3, [r3, #1]
 800803e:	461a      	mov	r2, r3
 8008040:	6a3b      	ldr	r3, [r7, #32]
 8008042:	4293      	cmp	r3, r2
 8008044:	dbe9      	blt.n	800801a <Keypad_Init+0x12>
	}
//Load the input pin Mask
	keypad->IP_Mask = Pins;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800804a:	831a      	strh	r2, [r3, #24]

	config.Mode = GPIO_MODE_INPUT;
 800804c:	2300      	movs	r3, #0
 800804e:	613b      	str	r3, [r7, #16]
	config.Pull = GPIO_PULLDOWN;
 8008050:	2302      	movs	r3, #2
 8008052:	617b      	str	r3, [r7, #20]
	config.Pin = Pins;
 8008054:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008056:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(keypad->IntputPort, &config);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	689b      	ldr	r3, [r3, #8]
 800805c:	f107 020c 	add.w	r2, r7, #12
 8008060:	4611      	mov	r1, r2
 8008062:	4618      	mov	r0, r3
 8008064:	f000 f9b6 	bl	80083d4 <HAL_GPIO_Init>

//configure the rows gpio pins as outputs
	Pins = 0;
 8008068:	2300      	movs	r3, #0
 800806a:	84fb      	strh	r3, [r7, #38]	@ 0x26
	for (int x = 0; x < keypad->Rows; x++) {
 800806c:	2300      	movs	r3, #0
 800806e:	61fb      	str	r3, [r7, #28]
 8008070:	e00f      	b.n	8008092 <Keypad_Init+0x8a>
		Pins |= (1 << (x + keypad->OutputStartingPin));
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	695a      	ldr	r2, [r3, #20]
 8008076:	69fb      	ldr	r3, [r7, #28]
 8008078:	4413      	add	r3, r2
 800807a:	2201      	movs	r2, #1
 800807c:	fa02 f303 	lsl.w	r3, r2, r3
 8008080:	b21a      	sxth	r2, r3
 8008082:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8008086:	4313      	orrs	r3, r2
 8008088:	b21b      	sxth	r3, r3
 800808a:	84fb      	strh	r3, [r7, #38]	@ 0x26
	for (int x = 0; x < keypad->Rows; x++) {
 800808c:	69fb      	ldr	r3, [r7, #28]
 800808e:	3301      	adds	r3, #1
 8008090:	61fb      	str	r3, [r7, #28]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	461a      	mov	r2, r3
 8008098:	69fb      	ldr	r3, [r7, #28]
 800809a:	4293      	cmp	r3, r2
 800809c:	dbe9      	blt.n	8008072 <Keypad_Init+0x6a>
	}

//Load the output pin Mask
	keypad->OP_Mask = Pins;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80080a2:	835a      	strh	r2, [r3, #26]

	config.Mode = GPIO_MODE_OUTPUT_PP;
 80080a4:	2301      	movs	r3, #1
 80080a6:	613b      	str	r3, [r7, #16]
	config.Speed = GPIO_SPEED_FREQ_LOW;
 80080a8:	2302      	movs	r3, #2
 80080aa:	61bb      	str	r3, [r7, #24]
	config.Pin = Pins;
 80080ac:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80080ae:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(keypad->IntputPort, &config);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	689b      	ldr	r3, [r3, #8]
 80080b4:	f107 020c 	add.w	r2, r7, #12
 80080b8:	4611      	mov	r1, r2
 80080ba:	4618      	mov	r0, r3
 80080bc:	f000 f98a 	bl	80083d4 <HAL_GPIO_Init>

//turn off all the outputs
	Keypad_SetOutputs(keypad, 0);
 80080c0:	2100      	movs	r1, #0
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f7ff ff3b 	bl	8007f3e <Keypad_SetOutputs>
}
 80080c8:	bf00      	nop
 80080ca:	3728      	adds	r7, #40	@ 0x28
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}

080080d0 <Keypad_Get_Key>:

uint8_t Keypad_Get_Key(Matrix_Keypad_t *keypad, uint8_t key) {
 80080d0:	b480      	push	{r7}
 80080d2:	b083      	sub	sp, #12
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	460b      	mov	r3, r1
 80080da:	70fb      	strb	r3, [r7, #3]
	return (keypad->KeysStatus & (1 << key)) ? 1 : 0;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	685b      	ldr	r3, [r3, #4]
 80080e0:	78fa      	ldrb	r2, [r7, #3]
 80080e2:	2101      	movs	r1, #1
 80080e4:	fa01 f202 	lsl.w	r2, r1, r2
 80080e8:	4013      	ands	r3, r2
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	bf14      	ite	ne
 80080ee:	2301      	movne	r3, #1
 80080f0:	2300      	moveq	r3, #0
 80080f2:	b2db      	uxtb	r3, r3
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	370c      	adds	r7, #12
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bc80      	pop	{r7}
 80080fc:	4770      	bx	lr
	...

08008100 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008104:	4b08      	ldr	r3, [pc, #32]	@ (8008128 <HAL_Init+0x28>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4a07      	ldr	r2, [pc, #28]	@ (8008128 <HAL_Init+0x28>)
 800810a:	f043 0310 	orr.w	r3, r3, #16
 800810e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008110:	2003      	movs	r0, #3
 8008112:	f000 f92b 	bl	800836c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008116:	200f      	movs	r0, #15
 8008118:	f000 f808 	bl	800812c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800811c:	f7ff f908 	bl	8007330 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008120:	2300      	movs	r3, #0
}
 8008122:	4618      	mov	r0, r3
 8008124:	bd80      	pop	{r7, pc}
 8008126:	bf00      	nop
 8008128:	40022000 	.word	0x40022000

0800812c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b082      	sub	sp, #8
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008134:	4b12      	ldr	r3, [pc, #72]	@ (8008180 <HAL_InitTick+0x54>)
 8008136:	681a      	ldr	r2, [r3, #0]
 8008138:	4b12      	ldr	r3, [pc, #72]	@ (8008184 <HAL_InitTick+0x58>)
 800813a:	781b      	ldrb	r3, [r3, #0]
 800813c:	4619      	mov	r1, r3
 800813e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008142:	fbb3 f3f1 	udiv	r3, r3, r1
 8008146:	fbb2 f3f3 	udiv	r3, r2, r3
 800814a:	4618      	mov	r0, r3
 800814c:	f000 f935 	bl	80083ba <HAL_SYSTICK_Config>
 8008150:	4603      	mov	r3, r0
 8008152:	2b00      	cmp	r3, #0
 8008154:	d001      	beq.n	800815a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008156:	2301      	movs	r3, #1
 8008158:	e00e      	b.n	8008178 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2b0f      	cmp	r3, #15
 800815e:	d80a      	bhi.n	8008176 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008160:	2200      	movs	r2, #0
 8008162:	6879      	ldr	r1, [r7, #4]
 8008164:	f04f 30ff 	mov.w	r0, #4294967295
 8008168:	f000 f90b 	bl	8008382 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800816c:	4a06      	ldr	r2, [pc, #24]	@ (8008188 <HAL_InitTick+0x5c>)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008172:	2300      	movs	r3, #0
 8008174:	e000      	b.n	8008178 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008176:	2301      	movs	r3, #1
}
 8008178:	4618      	mov	r0, r3
 800817a:	3708      	adds	r7, #8
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}
 8008180:	2000003c 	.word	0x2000003c
 8008184:	20000044 	.word	0x20000044
 8008188:	20000040 	.word	0x20000040

0800818c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800818c:	b480      	push	{r7}
 800818e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008190:	4b05      	ldr	r3, [pc, #20]	@ (80081a8 <HAL_IncTick+0x1c>)
 8008192:	781b      	ldrb	r3, [r3, #0]
 8008194:	461a      	mov	r2, r3
 8008196:	4b05      	ldr	r3, [pc, #20]	@ (80081ac <HAL_IncTick+0x20>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4413      	add	r3, r2
 800819c:	4a03      	ldr	r2, [pc, #12]	@ (80081ac <HAL_IncTick+0x20>)
 800819e:	6013      	str	r3, [r2, #0]
}
 80081a0:	bf00      	nop
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bc80      	pop	{r7}
 80081a6:	4770      	bx	lr
 80081a8:	20000044 	.word	0x20000044
 80081ac:	20000190 	.word	0x20000190

080081b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80081b0:	b480      	push	{r7}
 80081b2:	af00      	add	r7, sp, #0
  return uwTick;
 80081b4:	4b02      	ldr	r3, [pc, #8]	@ (80081c0 <HAL_GetTick+0x10>)
 80081b6:	681b      	ldr	r3, [r3, #0]
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bc80      	pop	{r7}
 80081be:	4770      	bx	lr
 80081c0:	20000190 	.word	0x20000190

080081c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b084      	sub	sp, #16
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80081cc:	f7ff fff0 	bl	80081b0 <HAL_GetTick>
 80081d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081dc:	d005      	beq.n	80081ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80081de:	4b0a      	ldr	r3, [pc, #40]	@ (8008208 <HAL_Delay+0x44>)
 80081e0:	781b      	ldrb	r3, [r3, #0]
 80081e2:	461a      	mov	r2, r3
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	4413      	add	r3, r2
 80081e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80081ea:	bf00      	nop
 80081ec:	f7ff ffe0 	bl	80081b0 <HAL_GetTick>
 80081f0:	4602      	mov	r2, r0
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	1ad3      	subs	r3, r2, r3
 80081f6:	68fa      	ldr	r2, [r7, #12]
 80081f8:	429a      	cmp	r2, r3
 80081fa:	d8f7      	bhi.n	80081ec <HAL_Delay+0x28>
  {
  }
}
 80081fc:	bf00      	nop
 80081fe:	bf00      	nop
 8008200:	3710      	adds	r7, #16
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}
 8008206:	bf00      	nop
 8008208:	20000044 	.word	0x20000044

0800820c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800820c:	b480      	push	{r7}
 800820e:	b085      	sub	sp, #20
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f003 0307 	and.w	r3, r3, #7
 800821a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800821c:	4b0c      	ldr	r3, [pc, #48]	@ (8008250 <__NVIC_SetPriorityGrouping+0x44>)
 800821e:	68db      	ldr	r3, [r3, #12]
 8008220:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008222:	68ba      	ldr	r2, [r7, #8]
 8008224:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8008228:	4013      	ands	r3, r2
 800822a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008234:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008238:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800823c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800823e:	4a04      	ldr	r2, [pc, #16]	@ (8008250 <__NVIC_SetPriorityGrouping+0x44>)
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	60d3      	str	r3, [r2, #12]
}
 8008244:	bf00      	nop
 8008246:	3714      	adds	r7, #20
 8008248:	46bd      	mov	sp, r7
 800824a:	bc80      	pop	{r7}
 800824c:	4770      	bx	lr
 800824e:	bf00      	nop
 8008250:	e000ed00 	.word	0xe000ed00

08008254 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008254:	b480      	push	{r7}
 8008256:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008258:	4b04      	ldr	r3, [pc, #16]	@ (800826c <__NVIC_GetPriorityGrouping+0x18>)
 800825a:	68db      	ldr	r3, [r3, #12]
 800825c:	0a1b      	lsrs	r3, r3, #8
 800825e:	f003 0307 	and.w	r3, r3, #7
}
 8008262:	4618      	mov	r0, r3
 8008264:	46bd      	mov	sp, r7
 8008266:	bc80      	pop	{r7}
 8008268:	4770      	bx	lr
 800826a:	bf00      	nop
 800826c:	e000ed00 	.word	0xe000ed00

08008270 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008270:	b480      	push	{r7}
 8008272:	b083      	sub	sp, #12
 8008274:	af00      	add	r7, sp, #0
 8008276:	4603      	mov	r3, r0
 8008278:	6039      	str	r1, [r7, #0]
 800827a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800827c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008280:	2b00      	cmp	r3, #0
 8008282:	db0a      	blt.n	800829a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	b2da      	uxtb	r2, r3
 8008288:	490c      	ldr	r1, [pc, #48]	@ (80082bc <__NVIC_SetPriority+0x4c>)
 800828a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800828e:	0112      	lsls	r2, r2, #4
 8008290:	b2d2      	uxtb	r2, r2
 8008292:	440b      	add	r3, r1
 8008294:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008298:	e00a      	b.n	80082b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	b2da      	uxtb	r2, r3
 800829e:	4908      	ldr	r1, [pc, #32]	@ (80082c0 <__NVIC_SetPriority+0x50>)
 80082a0:	79fb      	ldrb	r3, [r7, #7]
 80082a2:	f003 030f 	and.w	r3, r3, #15
 80082a6:	3b04      	subs	r3, #4
 80082a8:	0112      	lsls	r2, r2, #4
 80082aa:	b2d2      	uxtb	r2, r2
 80082ac:	440b      	add	r3, r1
 80082ae:	761a      	strb	r2, [r3, #24]
}
 80082b0:	bf00      	nop
 80082b2:	370c      	adds	r7, #12
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bc80      	pop	{r7}
 80082b8:	4770      	bx	lr
 80082ba:	bf00      	nop
 80082bc:	e000e100 	.word	0xe000e100
 80082c0:	e000ed00 	.word	0xe000ed00

080082c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b089      	sub	sp, #36	@ 0x24
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	60f8      	str	r0, [r7, #12]
 80082cc:	60b9      	str	r1, [r7, #8]
 80082ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	f003 0307 	and.w	r3, r3, #7
 80082d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80082d8:	69fb      	ldr	r3, [r7, #28]
 80082da:	f1c3 0307 	rsb	r3, r3, #7
 80082de:	2b04      	cmp	r3, #4
 80082e0:	bf28      	it	cs
 80082e2:	2304      	movcs	r3, #4
 80082e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80082e6:	69fb      	ldr	r3, [r7, #28]
 80082e8:	3304      	adds	r3, #4
 80082ea:	2b06      	cmp	r3, #6
 80082ec:	d902      	bls.n	80082f4 <NVIC_EncodePriority+0x30>
 80082ee:	69fb      	ldr	r3, [r7, #28]
 80082f0:	3b03      	subs	r3, #3
 80082f2:	e000      	b.n	80082f6 <NVIC_EncodePriority+0x32>
 80082f4:	2300      	movs	r3, #0
 80082f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80082f8:	f04f 32ff 	mov.w	r2, #4294967295
 80082fc:	69bb      	ldr	r3, [r7, #24]
 80082fe:	fa02 f303 	lsl.w	r3, r2, r3
 8008302:	43da      	mvns	r2, r3
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	401a      	ands	r2, r3
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800830c:	f04f 31ff 	mov.w	r1, #4294967295
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	fa01 f303 	lsl.w	r3, r1, r3
 8008316:	43d9      	mvns	r1, r3
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800831c:	4313      	orrs	r3, r2
         );
}
 800831e:	4618      	mov	r0, r3
 8008320:	3724      	adds	r7, #36	@ 0x24
 8008322:	46bd      	mov	sp, r7
 8008324:	bc80      	pop	{r7}
 8008326:	4770      	bx	lr

08008328 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b082      	sub	sp, #8
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	3b01      	subs	r3, #1
 8008334:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008338:	d301      	bcc.n	800833e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800833a:	2301      	movs	r3, #1
 800833c:	e00f      	b.n	800835e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800833e:	4a0a      	ldr	r2, [pc, #40]	@ (8008368 <SysTick_Config+0x40>)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	3b01      	subs	r3, #1
 8008344:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008346:	210f      	movs	r1, #15
 8008348:	f04f 30ff 	mov.w	r0, #4294967295
 800834c:	f7ff ff90 	bl	8008270 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008350:	4b05      	ldr	r3, [pc, #20]	@ (8008368 <SysTick_Config+0x40>)
 8008352:	2200      	movs	r2, #0
 8008354:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008356:	4b04      	ldr	r3, [pc, #16]	@ (8008368 <SysTick_Config+0x40>)
 8008358:	2207      	movs	r2, #7
 800835a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800835c:	2300      	movs	r3, #0
}
 800835e:	4618      	mov	r0, r3
 8008360:	3708      	adds	r7, #8
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}
 8008366:	bf00      	nop
 8008368:	e000e010 	.word	0xe000e010

0800836c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b082      	sub	sp, #8
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f7ff ff49 	bl	800820c <__NVIC_SetPriorityGrouping>
}
 800837a:	bf00      	nop
 800837c:	3708      	adds	r7, #8
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}

08008382 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008382:	b580      	push	{r7, lr}
 8008384:	b086      	sub	sp, #24
 8008386:	af00      	add	r7, sp, #0
 8008388:	4603      	mov	r3, r0
 800838a:	60b9      	str	r1, [r7, #8]
 800838c:	607a      	str	r2, [r7, #4]
 800838e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008390:	2300      	movs	r3, #0
 8008392:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008394:	f7ff ff5e 	bl	8008254 <__NVIC_GetPriorityGrouping>
 8008398:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800839a:	687a      	ldr	r2, [r7, #4]
 800839c:	68b9      	ldr	r1, [r7, #8]
 800839e:	6978      	ldr	r0, [r7, #20]
 80083a0:	f7ff ff90 	bl	80082c4 <NVIC_EncodePriority>
 80083a4:	4602      	mov	r2, r0
 80083a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80083aa:	4611      	mov	r1, r2
 80083ac:	4618      	mov	r0, r3
 80083ae:	f7ff ff5f 	bl	8008270 <__NVIC_SetPriority>
}
 80083b2:	bf00      	nop
 80083b4:	3718      	adds	r7, #24
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}

080083ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80083ba:	b580      	push	{r7, lr}
 80083bc:	b082      	sub	sp, #8
 80083be:	af00      	add	r7, sp, #0
 80083c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f7ff ffb0 	bl	8008328 <SysTick_Config>
 80083c8:	4603      	mov	r3, r0
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3708      	adds	r7, #8
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}
	...

080083d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b08b      	sub	sp, #44	@ 0x2c
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80083de:	2300      	movs	r3, #0
 80083e0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80083e2:	2300      	movs	r3, #0
 80083e4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80083e6:	e169      	b.n	80086bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80083e8:	2201      	movs	r2, #1
 80083ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083ec:	fa02 f303 	lsl.w	r3, r2, r3
 80083f0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	69fa      	ldr	r2, [r7, #28]
 80083f8:	4013      	ands	r3, r2
 80083fa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80083fc:	69ba      	ldr	r2, [r7, #24]
 80083fe:	69fb      	ldr	r3, [r7, #28]
 8008400:	429a      	cmp	r2, r3
 8008402:	f040 8158 	bne.w	80086b6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	4a9a      	ldr	r2, [pc, #616]	@ (8008674 <HAL_GPIO_Init+0x2a0>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d05e      	beq.n	80084ce <HAL_GPIO_Init+0xfa>
 8008410:	4a98      	ldr	r2, [pc, #608]	@ (8008674 <HAL_GPIO_Init+0x2a0>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d875      	bhi.n	8008502 <HAL_GPIO_Init+0x12e>
 8008416:	4a98      	ldr	r2, [pc, #608]	@ (8008678 <HAL_GPIO_Init+0x2a4>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d058      	beq.n	80084ce <HAL_GPIO_Init+0xfa>
 800841c:	4a96      	ldr	r2, [pc, #600]	@ (8008678 <HAL_GPIO_Init+0x2a4>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d86f      	bhi.n	8008502 <HAL_GPIO_Init+0x12e>
 8008422:	4a96      	ldr	r2, [pc, #600]	@ (800867c <HAL_GPIO_Init+0x2a8>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d052      	beq.n	80084ce <HAL_GPIO_Init+0xfa>
 8008428:	4a94      	ldr	r2, [pc, #592]	@ (800867c <HAL_GPIO_Init+0x2a8>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d869      	bhi.n	8008502 <HAL_GPIO_Init+0x12e>
 800842e:	4a94      	ldr	r2, [pc, #592]	@ (8008680 <HAL_GPIO_Init+0x2ac>)
 8008430:	4293      	cmp	r3, r2
 8008432:	d04c      	beq.n	80084ce <HAL_GPIO_Init+0xfa>
 8008434:	4a92      	ldr	r2, [pc, #584]	@ (8008680 <HAL_GPIO_Init+0x2ac>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d863      	bhi.n	8008502 <HAL_GPIO_Init+0x12e>
 800843a:	4a92      	ldr	r2, [pc, #584]	@ (8008684 <HAL_GPIO_Init+0x2b0>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d046      	beq.n	80084ce <HAL_GPIO_Init+0xfa>
 8008440:	4a90      	ldr	r2, [pc, #576]	@ (8008684 <HAL_GPIO_Init+0x2b0>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d85d      	bhi.n	8008502 <HAL_GPIO_Init+0x12e>
 8008446:	2b12      	cmp	r3, #18
 8008448:	d82a      	bhi.n	80084a0 <HAL_GPIO_Init+0xcc>
 800844a:	2b12      	cmp	r3, #18
 800844c:	d859      	bhi.n	8008502 <HAL_GPIO_Init+0x12e>
 800844e:	a201      	add	r2, pc, #4	@ (adr r2, 8008454 <HAL_GPIO_Init+0x80>)
 8008450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008454:	080084cf 	.word	0x080084cf
 8008458:	080084a9 	.word	0x080084a9
 800845c:	080084bb 	.word	0x080084bb
 8008460:	080084fd 	.word	0x080084fd
 8008464:	08008503 	.word	0x08008503
 8008468:	08008503 	.word	0x08008503
 800846c:	08008503 	.word	0x08008503
 8008470:	08008503 	.word	0x08008503
 8008474:	08008503 	.word	0x08008503
 8008478:	08008503 	.word	0x08008503
 800847c:	08008503 	.word	0x08008503
 8008480:	08008503 	.word	0x08008503
 8008484:	08008503 	.word	0x08008503
 8008488:	08008503 	.word	0x08008503
 800848c:	08008503 	.word	0x08008503
 8008490:	08008503 	.word	0x08008503
 8008494:	08008503 	.word	0x08008503
 8008498:	080084b1 	.word	0x080084b1
 800849c:	080084c5 	.word	0x080084c5
 80084a0:	4a79      	ldr	r2, [pc, #484]	@ (8008688 <HAL_GPIO_Init+0x2b4>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d013      	beq.n	80084ce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80084a6:	e02c      	b.n	8008502 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	68db      	ldr	r3, [r3, #12]
 80084ac:	623b      	str	r3, [r7, #32]
          break;
 80084ae:	e029      	b.n	8008504 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	68db      	ldr	r3, [r3, #12]
 80084b4:	3304      	adds	r3, #4
 80084b6:	623b      	str	r3, [r7, #32]
          break;
 80084b8:	e024      	b.n	8008504 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	68db      	ldr	r3, [r3, #12]
 80084be:	3308      	adds	r3, #8
 80084c0:	623b      	str	r3, [r7, #32]
          break;
 80084c2:	e01f      	b.n	8008504 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	68db      	ldr	r3, [r3, #12]
 80084c8:	330c      	adds	r3, #12
 80084ca:	623b      	str	r3, [r7, #32]
          break;
 80084cc:	e01a      	b.n	8008504 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	689b      	ldr	r3, [r3, #8]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d102      	bne.n	80084dc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80084d6:	2304      	movs	r3, #4
 80084d8:	623b      	str	r3, [r7, #32]
          break;
 80084da:	e013      	b.n	8008504 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	689b      	ldr	r3, [r3, #8]
 80084e0:	2b01      	cmp	r3, #1
 80084e2:	d105      	bne.n	80084f0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80084e4:	2308      	movs	r3, #8
 80084e6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	69fa      	ldr	r2, [r7, #28]
 80084ec:	611a      	str	r2, [r3, #16]
          break;
 80084ee:	e009      	b.n	8008504 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80084f0:	2308      	movs	r3, #8
 80084f2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	69fa      	ldr	r2, [r7, #28]
 80084f8:	615a      	str	r2, [r3, #20]
          break;
 80084fa:	e003      	b.n	8008504 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80084fc:	2300      	movs	r3, #0
 80084fe:	623b      	str	r3, [r7, #32]
          break;
 8008500:	e000      	b.n	8008504 <HAL_GPIO_Init+0x130>
          break;
 8008502:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008504:	69bb      	ldr	r3, [r7, #24]
 8008506:	2bff      	cmp	r3, #255	@ 0xff
 8008508:	d801      	bhi.n	800850e <HAL_GPIO_Init+0x13a>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	e001      	b.n	8008512 <HAL_GPIO_Init+0x13e>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	3304      	adds	r3, #4
 8008512:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008514:	69bb      	ldr	r3, [r7, #24]
 8008516:	2bff      	cmp	r3, #255	@ 0xff
 8008518:	d802      	bhi.n	8008520 <HAL_GPIO_Init+0x14c>
 800851a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800851c:	009b      	lsls	r3, r3, #2
 800851e:	e002      	b.n	8008526 <HAL_GPIO_Init+0x152>
 8008520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008522:	3b08      	subs	r3, #8
 8008524:	009b      	lsls	r3, r3, #2
 8008526:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	681a      	ldr	r2, [r3, #0]
 800852c:	210f      	movs	r1, #15
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	fa01 f303 	lsl.w	r3, r1, r3
 8008534:	43db      	mvns	r3, r3
 8008536:	401a      	ands	r2, r3
 8008538:	6a39      	ldr	r1, [r7, #32]
 800853a:	693b      	ldr	r3, [r7, #16]
 800853c:	fa01 f303 	lsl.w	r3, r1, r3
 8008540:	431a      	orrs	r2, r3
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	685b      	ldr	r3, [r3, #4]
 800854a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800854e:	2b00      	cmp	r3, #0
 8008550:	f000 80b1 	beq.w	80086b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8008554:	4b4d      	ldr	r3, [pc, #308]	@ (800868c <HAL_GPIO_Init+0x2b8>)
 8008556:	699b      	ldr	r3, [r3, #24]
 8008558:	4a4c      	ldr	r2, [pc, #304]	@ (800868c <HAL_GPIO_Init+0x2b8>)
 800855a:	f043 0301 	orr.w	r3, r3, #1
 800855e:	6193      	str	r3, [r2, #24]
 8008560:	4b4a      	ldr	r3, [pc, #296]	@ (800868c <HAL_GPIO_Init+0x2b8>)
 8008562:	699b      	ldr	r3, [r3, #24]
 8008564:	f003 0301 	and.w	r3, r3, #1
 8008568:	60bb      	str	r3, [r7, #8]
 800856a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800856c:	4a48      	ldr	r2, [pc, #288]	@ (8008690 <HAL_GPIO_Init+0x2bc>)
 800856e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008570:	089b      	lsrs	r3, r3, #2
 8008572:	3302      	adds	r3, #2
 8008574:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008578:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800857a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800857c:	f003 0303 	and.w	r3, r3, #3
 8008580:	009b      	lsls	r3, r3, #2
 8008582:	220f      	movs	r2, #15
 8008584:	fa02 f303 	lsl.w	r3, r2, r3
 8008588:	43db      	mvns	r3, r3
 800858a:	68fa      	ldr	r2, [r7, #12]
 800858c:	4013      	ands	r3, r2
 800858e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	4a40      	ldr	r2, [pc, #256]	@ (8008694 <HAL_GPIO_Init+0x2c0>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d013      	beq.n	80085c0 <HAL_GPIO_Init+0x1ec>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	4a3f      	ldr	r2, [pc, #252]	@ (8008698 <HAL_GPIO_Init+0x2c4>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d00d      	beq.n	80085bc <HAL_GPIO_Init+0x1e8>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	4a3e      	ldr	r2, [pc, #248]	@ (800869c <HAL_GPIO_Init+0x2c8>)
 80085a4:	4293      	cmp	r3, r2
 80085a6:	d007      	beq.n	80085b8 <HAL_GPIO_Init+0x1e4>
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	4a3d      	ldr	r2, [pc, #244]	@ (80086a0 <HAL_GPIO_Init+0x2cc>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d101      	bne.n	80085b4 <HAL_GPIO_Init+0x1e0>
 80085b0:	2303      	movs	r3, #3
 80085b2:	e006      	b.n	80085c2 <HAL_GPIO_Init+0x1ee>
 80085b4:	2304      	movs	r3, #4
 80085b6:	e004      	b.n	80085c2 <HAL_GPIO_Init+0x1ee>
 80085b8:	2302      	movs	r3, #2
 80085ba:	e002      	b.n	80085c2 <HAL_GPIO_Init+0x1ee>
 80085bc:	2301      	movs	r3, #1
 80085be:	e000      	b.n	80085c2 <HAL_GPIO_Init+0x1ee>
 80085c0:	2300      	movs	r3, #0
 80085c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80085c4:	f002 0203 	and.w	r2, r2, #3
 80085c8:	0092      	lsls	r2, r2, #2
 80085ca:	4093      	lsls	r3, r2
 80085cc:	68fa      	ldr	r2, [r7, #12]
 80085ce:	4313      	orrs	r3, r2
 80085d0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80085d2:	492f      	ldr	r1, [pc, #188]	@ (8008690 <HAL_GPIO_Init+0x2bc>)
 80085d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085d6:	089b      	lsrs	r3, r3, #2
 80085d8:	3302      	adds	r3, #2
 80085da:	68fa      	ldr	r2, [r7, #12]
 80085dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d006      	beq.n	80085fa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80085ec:	4b2d      	ldr	r3, [pc, #180]	@ (80086a4 <HAL_GPIO_Init+0x2d0>)
 80085ee:	689a      	ldr	r2, [r3, #8]
 80085f0:	492c      	ldr	r1, [pc, #176]	@ (80086a4 <HAL_GPIO_Init+0x2d0>)
 80085f2:	69bb      	ldr	r3, [r7, #24]
 80085f4:	4313      	orrs	r3, r2
 80085f6:	608b      	str	r3, [r1, #8]
 80085f8:	e006      	b.n	8008608 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80085fa:	4b2a      	ldr	r3, [pc, #168]	@ (80086a4 <HAL_GPIO_Init+0x2d0>)
 80085fc:	689a      	ldr	r2, [r3, #8]
 80085fe:	69bb      	ldr	r3, [r7, #24]
 8008600:	43db      	mvns	r3, r3
 8008602:	4928      	ldr	r1, [pc, #160]	@ (80086a4 <HAL_GPIO_Init+0x2d0>)
 8008604:	4013      	ands	r3, r2
 8008606:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	685b      	ldr	r3, [r3, #4]
 800860c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008610:	2b00      	cmp	r3, #0
 8008612:	d006      	beq.n	8008622 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8008614:	4b23      	ldr	r3, [pc, #140]	@ (80086a4 <HAL_GPIO_Init+0x2d0>)
 8008616:	68da      	ldr	r2, [r3, #12]
 8008618:	4922      	ldr	r1, [pc, #136]	@ (80086a4 <HAL_GPIO_Init+0x2d0>)
 800861a:	69bb      	ldr	r3, [r7, #24]
 800861c:	4313      	orrs	r3, r2
 800861e:	60cb      	str	r3, [r1, #12]
 8008620:	e006      	b.n	8008630 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8008622:	4b20      	ldr	r3, [pc, #128]	@ (80086a4 <HAL_GPIO_Init+0x2d0>)
 8008624:	68da      	ldr	r2, [r3, #12]
 8008626:	69bb      	ldr	r3, [r7, #24]
 8008628:	43db      	mvns	r3, r3
 800862a:	491e      	ldr	r1, [pc, #120]	@ (80086a4 <HAL_GPIO_Init+0x2d0>)
 800862c:	4013      	ands	r3, r2
 800862e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	685b      	ldr	r3, [r3, #4]
 8008634:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008638:	2b00      	cmp	r3, #0
 800863a:	d006      	beq.n	800864a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800863c:	4b19      	ldr	r3, [pc, #100]	@ (80086a4 <HAL_GPIO_Init+0x2d0>)
 800863e:	685a      	ldr	r2, [r3, #4]
 8008640:	4918      	ldr	r1, [pc, #96]	@ (80086a4 <HAL_GPIO_Init+0x2d0>)
 8008642:	69bb      	ldr	r3, [r7, #24]
 8008644:	4313      	orrs	r3, r2
 8008646:	604b      	str	r3, [r1, #4]
 8008648:	e006      	b.n	8008658 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800864a:	4b16      	ldr	r3, [pc, #88]	@ (80086a4 <HAL_GPIO_Init+0x2d0>)
 800864c:	685a      	ldr	r2, [r3, #4]
 800864e:	69bb      	ldr	r3, [r7, #24]
 8008650:	43db      	mvns	r3, r3
 8008652:	4914      	ldr	r1, [pc, #80]	@ (80086a4 <HAL_GPIO_Init+0x2d0>)
 8008654:	4013      	ands	r3, r2
 8008656:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	685b      	ldr	r3, [r3, #4]
 800865c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008660:	2b00      	cmp	r3, #0
 8008662:	d021      	beq.n	80086a8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8008664:	4b0f      	ldr	r3, [pc, #60]	@ (80086a4 <HAL_GPIO_Init+0x2d0>)
 8008666:	681a      	ldr	r2, [r3, #0]
 8008668:	490e      	ldr	r1, [pc, #56]	@ (80086a4 <HAL_GPIO_Init+0x2d0>)
 800866a:	69bb      	ldr	r3, [r7, #24]
 800866c:	4313      	orrs	r3, r2
 800866e:	600b      	str	r3, [r1, #0]
 8008670:	e021      	b.n	80086b6 <HAL_GPIO_Init+0x2e2>
 8008672:	bf00      	nop
 8008674:	10320000 	.word	0x10320000
 8008678:	10310000 	.word	0x10310000
 800867c:	10220000 	.word	0x10220000
 8008680:	10210000 	.word	0x10210000
 8008684:	10120000 	.word	0x10120000
 8008688:	10110000 	.word	0x10110000
 800868c:	40021000 	.word	0x40021000
 8008690:	40010000 	.word	0x40010000
 8008694:	40010800 	.word	0x40010800
 8008698:	40010c00 	.word	0x40010c00
 800869c:	40011000 	.word	0x40011000
 80086a0:	40011400 	.word	0x40011400
 80086a4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80086a8:	4b0b      	ldr	r3, [pc, #44]	@ (80086d8 <HAL_GPIO_Init+0x304>)
 80086aa:	681a      	ldr	r2, [r3, #0]
 80086ac:	69bb      	ldr	r3, [r7, #24]
 80086ae:	43db      	mvns	r3, r3
 80086b0:	4909      	ldr	r1, [pc, #36]	@ (80086d8 <HAL_GPIO_Init+0x304>)
 80086b2:	4013      	ands	r3, r2
 80086b4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80086b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086b8:	3301      	adds	r3, #1
 80086ba:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	681a      	ldr	r2, [r3, #0]
 80086c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086c2:	fa22 f303 	lsr.w	r3, r2, r3
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	f47f ae8e 	bne.w	80083e8 <HAL_GPIO_Init+0x14>
  }
}
 80086cc:	bf00      	nop
 80086ce:	bf00      	nop
 80086d0:	372c      	adds	r7, #44	@ 0x2c
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bc80      	pop	{r7}
 80086d6:	4770      	bx	lr
 80086d8:	40010400 	.word	0x40010400

080086dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80086dc:	b480      	push	{r7}
 80086de:	b083      	sub	sp, #12
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
 80086e4:	460b      	mov	r3, r1
 80086e6:	807b      	strh	r3, [r7, #2]
 80086e8:	4613      	mov	r3, r2
 80086ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80086ec:	787b      	ldrb	r3, [r7, #1]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d003      	beq.n	80086fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80086f2:	887a      	ldrh	r2, [r7, #2]
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80086f8:	e003      	b.n	8008702 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80086fa:	887b      	ldrh	r3, [r7, #2]
 80086fc:	041a      	lsls	r2, r3, #16
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	611a      	str	r2, [r3, #16]
}
 8008702:	bf00      	nop
 8008704:	370c      	adds	r7, #12
 8008706:	46bd      	mov	sp, r7
 8008708:	bc80      	pop	{r7}
 800870a:	4770      	bx	lr

0800870c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b084      	sub	sp, #16
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d101      	bne.n	800871e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800871a:	2301      	movs	r3, #1
 800871c:	e12b      	b.n	8008976 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008724:	b2db      	uxtb	r3, r3
 8008726:	2b00      	cmp	r3, #0
 8008728:	d106      	bne.n	8008738 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2200      	movs	r2, #0
 800872e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f7fe fe2e 	bl	8007394 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2224      	movs	r2, #36	@ 0x24
 800873c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	681a      	ldr	r2, [r3, #0]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f022 0201 	bic.w	r2, r2, #1
 800874e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	681a      	ldr	r2, [r3, #0]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800875e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	681a      	ldr	r2, [r3, #0]
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800876e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008770:	f002 f8b6 	bl	800a8e0 <HAL_RCC_GetPCLK1Freq>
 8008774:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	4a81      	ldr	r2, [pc, #516]	@ (8008980 <HAL_I2C_Init+0x274>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d807      	bhi.n	8008790 <HAL_I2C_Init+0x84>
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	4a80      	ldr	r2, [pc, #512]	@ (8008984 <HAL_I2C_Init+0x278>)
 8008784:	4293      	cmp	r3, r2
 8008786:	bf94      	ite	ls
 8008788:	2301      	movls	r3, #1
 800878a:	2300      	movhi	r3, #0
 800878c:	b2db      	uxtb	r3, r3
 800878e:	e006      	b.n	800879e <HAL_I2C_Init+0x92>
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	4a7d      	ldr	r2, [pc, #500]	@ (8008988 <HAL_I2C_Init+0x27c>)
 8008794:	4293      	cmp	r3, r2
 8008796:	bf94      	ite	ls
 8008798:	2301      	movls	r3, #1
 800879a:	2300      	movhi	r3, #0
 800879c:	b2db      	uxtb	r3, r3
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d001      	beq.n	80087a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80087a2:	2301      	movs	r3, #1
 80087a4:	e0e7      	b.n	8008976 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	4a78      	ldr	r2, [pc, #480]	@ (800898c <HAL_I2C_Init+0x280>)
 80087aa:	fba2 2303 	umull	r2, r3, r2, r3
 80087ae:	0c9b      	lsrs	r3, r3, #18
 80087b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	685b      	ldr	r3, [r3, #4]
 80087b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	68ba      	ldr	r2, [r7, #8]
 80087c2:	430a      	orrs	r2, r1
 80087c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	6a1b      	ldr	r3, [r3, #32]
 80087cc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	685b      	ldr	r3, [r3, #4]
 80087d4:	4a6a      	ldr	r2, [pc, #424]	@ (8008980 <HAL_I2C_Init+0x274>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d802      	bhi.n	80087e0 <HAL_I2C_Init+0xd4>
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	3301      	adds	r3, #1
 80087de:	e009      	b.n	80087f4 <HAL_I2C_Init+0xe8>
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80087e6:	fb02 f303 	mul.w	r3, r2, r3
 80087ea:	4a69      	ldr	r2, [pc, #420]	@ (8008990 <HAL_I2C_Init+0x284>)
 80087ec:	fba2 2303 	umull	r2, r3, r2, r3
 80087f0:	099b      	lsrs	r3, r3, #6
 80087f2:	3301      	adds	r3, #1
 80087f4:	687a      	ldr	r2, [r7, #4]
 80087f6:	6812      	ldr	r2, [r2, #0]
 80087f8:	430b      	orrs	r3, r1
 80087fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	69db      	ldr	r3, [r3, #28]
 8008802:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8008806:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	685b      	ldr	r3, [r3, #4]
 800880e:	495c      	ldr	r1, [pc, #368]	@ (8008980 <HAL_I2C_Init+0x274>)
 8008810:	428b      	cmp	r3, r1
 8008812:	d819      	bhi.n	8008848 <HAL_I2C_Init+0x13c>
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	1e59      	subs	r1, r3, #1
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	005b      	lsls	r3, r3, #1
 800881e:	fbb1 f3f3 	udiv	r3, r1, r3
 8008822:	1c59      	adds	r1, r3, #1
 8008824:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008828:	400b      	ands	r3, r1
 800882a:	2b00      	cmp	r3, #0
 800882c:	d00a      	beq.n	8008844 <HAL_I2C_Init+0x138>
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	1e59      	subs	r1, r3, #1
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	685b      	ldr	r3, [r3, #4]
 8008836:	005b      	lsls	r3, r3, #1
 8008838:	fbb1 f3f3 	udiv	r3, r1, r3
 800883c:	3301      	adds	r3, #1
 800883e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008842:	e051      	b.n	80088e8 <HAL_I2C_Init+0x1dc>
 8008844:	2304      	movs	r3, #4
 8008846:	e04f      	b.n	80088e8 <HAL_I2C_Init+0x1dc>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	689b      	ldr	r3, [r3, #8]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d111      	bne.n	8008874 <HAL_I2C_Init+0x168>
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	1e58      	subs	r0, r3, #1
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6859      	ldr	r1, [r3, #4]
 8008858:	460b      	mov	r3, r1
 800885a:	005b      	lsls	r3, r3, #1
 800885c:	440b      	add	r3, r1
 800885e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008862:	3301      	adds	r3, #1
 8008864:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008868:	2b00      	cmp	r3, #0
 800886a:	bf0c      	ite	eq
 800886c:	2301      	moveq	r3, #1
 800886e:	2300      	movne	r3, #0
 8008870:	b2db      	uxtb	r3, r3
 8008872:	e012      	b.n	800889a <HAL_I2C_Init+0x18e>
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	1e58      	subs	r0, r3, #1
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6859      	ldr	r1, [r3, #4]
 800887c:	460b      	mov	r3, r1
 800887e:	009b      	lsls	r3, r3, #2
 8008880:	440b      	add	r3, r1
 8008882:	0099      	lsls	r1, r3, #2
 8008884:	440b      	add	r3, r1
 8008886:	fbb0 f3f3 	udiv	r3, r0, r3
 800888a:	3301      	adds	r3, #1
 800888c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008890:	2b00      	cmp	r3, #0
 8008892:	bf0c      	ite	eq
 8008894:	2301      	moveq	r3, #1
 8008896:	2300      	movne	r3, #0
 8008898:	b2db      	uxtb	r3, r3
 800889a:	2b00      	cmp	r3, #0
 800889c:	d001      	beq.n	80088a2 <HAL_I2C_Init+0x196>
 800889e:	2301      	movs	r3, #1
 80088a0:	e022      	b.n	80088e8 <HAL_I2C_Init+0x1dc>
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	689b      	ldr	r3, [r3, #8]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d10e      	bne.n	80088c8 <HAL_I2C_Init+0x1bc>
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	1e58      	subs	r0, r3, #1
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6859      	ldr	r1, [r3, #4]
 80088b2:	460b      	mov	r3, r1
 80088b4:	005b      	lsls	r3, r3, #1
 80088b6:	440b      	add	r3, r1
 80088b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80088bc:	3301      	adds	r3, #1
 80088be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80088c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80088c6:	e00f      	b.n	80088e8 <HAL_I2C_Init+0x1dc>
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	1e58      	subs	r0, r3, #1
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6859      	ldr	r1, [r3, #4]
 80088d0:	460b      	mov	r3, r1
 80088d2:	009b      	lsls	r3, r3, #2
 80088d4:	440b      	add	r3, r1
 80088d6:	0099      	lsls	r1, r3, #2
 80088d8:	440b      	add	r3, r1
 80088da:	fbb0 f3f3 	udiv	r3, r0, r3
 80088de:	3301      	adds	r3, #1
 80088e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80088e4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80088e8:	6879      	ldr	r1, [r7, #4]
 80088ea:	6809      	ldr	r1, [r1, #0]
 80088ec:	4313      	orrs	r3, r2
 80088ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	69da      	ldr	r2, [r3, #28]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6a1b      	ldr	r3, [r3, #32]
 8008902:	431a      	orrs	r2, r3
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	430a      	orrs	r2, r1
 800890a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	689b      	ldr	r3, [r3, #8]
 8008912:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8008916:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800891a:	687a      	ldr	r2, [r7, #4]
 800891c:	6911      	ldr	r1, [r2, #16]
 800891e:	687a      	ldr	r2, [r7, #4]
 8008920:	68d2      	ldr	r2, [r2, #12]
 8008922:	4311      	orrs	r1, r2
 8008924:	687a      	ldr	r2, [r7, #4]
 8008926:	6812      	ldr	r2, [r2, #0]
 8008928:	430b      	orrs	r3, r1
 800892a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	68db      	ldr	r3, [r3, #12]
 8008932:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	695a      	ldr	r2, [r3, #20]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	699b      	ldr	r3, [r3, #24]
 800893e:	431a      	orrs	r2, r3
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	430a      	orrs	r2, r1
 8008946:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	681a      	ldr	r2, [r3, #0]
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f042 0201 	orr.w	r2, r2, #1
 8008956:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2200      	movs	r2, #0
 800895c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2220      	movs	r2, #32
 8008962:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2200      	movs	r2, #0
 800896a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2200      	movs	r2, #0
 8008970:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8008974:	2300      	movs	r3, #0
}
 8008976:	4618      	mov	r0, r3
 8008978:	3710      	adds	r7, #16
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}
 800897e:	bf00      	nop
 8008980:	000186a0 	.word	0x000186a0
 8008984:	001e847f 	.word	0x001e847f
 8008988:	003d08ff 	.word	0x003d08ff
 800898c:	431bde83 	.word	0x431bde83
 8008990:	10624dd3 	.word	0x10624dd3

08008994 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b088      	sub	sp, #32
 8008998:	af02      	add	r7, sp, #8
 800899a:	60f8      	str	r0, [r7, #12]
 800899c:	607a      	str	r2, [r7, #4]
 800899e:	461a      	mov	r2, r3
 80089a0:	460b      	mov	r3, r1
 80089a2:	817b      	strh	r3, [r7, #10]
 80089a4:	4613      	mov	r3, r2
 80089a6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80089a8:	f7ff fc02 	bl	80081b0 <HAL_GetTick>
 80089ac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80089b4:	b2db      	uxtb	r3, r3
 80089b6:	2b20      	cmp	r3, #32
 80089b8:	f040 80e0 	bne.w	8008b7c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	9300      	str	r3, [sp, #0]
 80089c0:	2319      	movs	r3, #25
 80089c2:	2201      	movs	r2, #1
 80089c4:	4970      	ldr	r1, [pc, #448]	@ (8008b88 <HAL_I2C_Master_Transmit+0x1f4>)
 80089c6:	68f8      	ldr	r0, [r7, #12]
 80089c8:	f001 f98a 	bl	8009ce0 <I2C_WaitOnFlagUntilTimeout>
 80089cc:	4603      	mov	r3, r0
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d001      	beq.n	80089d6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80089d2:	2302      	movs	r3, #2
 80089d4:	e0d3      	b.n	8008b7e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80089dc:	2b01      	cmp	r3, #1
 80089de:	d101      	bne.n	80089e4 <HAL_I2C_Master_Transmit+0x50>
 80089e0:	2302      	movs	r3, #2
 80089e2:	e0cc      	b.n	8008b7e <HAL_I2C_Master_Transmit+0x1ea>
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	2201      	movs	r2, #1
 80089e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f003 0301 	and.w	r3, r3, #1
 80089f6:	2b01      	cmp	r3, #1
 80089f8:	d007      	beq.n	8008a0a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	681a      	ldr	r2, [r3, #0]
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f042 0201 	orr.w	r2, r2, #1
 8008a08:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	681a      	ldr	r2, [r3, #0]
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008a18:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	2221      	movs	r2, #33	@ 0x21
 8008a1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	2210      	movs	r2, #16
 8008a26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	687a      	ldr	r2, [r7, #4]
 8008a34:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	893a      	ldrh	r2, [r7, #8]
 8008a3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a40:	b29a      	uxth	r2, r3
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	4a50      	ldr	r2, [pc, #320]	@ (8008b8c <HAL_I2C_Master_Transmit+0x1f8>)
 8008a4a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008a4c:	8979      	ldrh	r1, [r7, #10]
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	6a3a      	ldr	r2, [r7, #32]
 8008a52:	68f8      	ldr	r0, [r7, #12]
 8008a54:	f000 fe76 	bl	8009744 <I2C_MasterRequestWrite>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d001      	beq.n	8008a62 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8008a5e:	2301      	movs	r3, #1
 8008a60:	e08d      	b.n	8008b7e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008a62:	2300      	movs	r3, #0
 8008a64:	613b      	str	r3, [r7, #16]
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	695b      	ldr	r3, [r3, #20]
 8008a6c:	613b      	str	r3, [r7, #16]
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	699b      	ldr	r3, [r3, #24]
 8008a74:	613b      	str	r3, [r7, #16]
 8008a76:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8008a78:	e066      	b.n	8008b48 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008a7a:	697a      	ldr	r2, [r7, #20]
 8008a7c:	6a39      	ldr	r1, [r7, #32]
 8008a7e:	68f8      	ldr	r0, [r7, #12]
 8008a80:	f001 fa48 	bl	8009f14 <I2C_WaitOnTXEFlagUntilTimeout>
 8008a84:	4603      	mov	r3, r0
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d00d      	beq.n	8008aa6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a8e:	2b04      	cmp	r3, #4
 8008a90:	d107      	bne.n	8008aa2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	681a      	ldr	r2, [r3, #0]
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008aa0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	e06b      	b.n	8008b7e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008aaa:	781a      	ldrb	r2, [r3, #0]
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ab6:	1c5a      	adds	r2, r3, #1
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ac0:	b29b      	uxth	r3, r3
 8008ac2:	3b01      	subs	r3, #1
 8008ac4:	b29a      	uxth	r2, r3
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008ace:	3b01      	subs	r3, #1
 8008ad0:	b29a      	uxth	r2, r3
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	695b      	ldr	r3, [r3, #20]
 8008adc:	f003 0304 	and.w	r3, r3, #4
 8008ae0:	2b04      	cmp	r3, #4
 8008ae2:	d11b      	bne.n	8008b1c <HAL_I2C_Master_Transmit+0x188>
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d017      	beq.n	8008b1c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008af0:	781a      	ldrb	r2, [r3, #0]
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008afc:	1c5a      	adds	r2, r3, #1
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b06:	b29b      	uxth	r3, r3
 8008b08:	3b01      	subs	r3, #1
 8008b0a:	b29a      	uxth	r2, r3
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b14:	3b01      	subs	r3, #1
 8008b16:	b29a      	uxth	r2, r3
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008b1c:	697a      	ldr	r2, [r7, #20]
 8008b1e:	6a39      	ldr	r1, [r7, #32]
 8008b20:	68f8      	ldr	r0, [r7, #12]
 8008b22:	f001 fa3f 	bl	8009fa4 <I2C_WaitOnBTFFlagUntilTimeout>
 8008b26:	4603      	mov	r3, r0
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d00d      	beq.n	8008b48 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b30:	2b04      	cmp	r3, #4
 8008b32:	d107      	bne.n	8008b44 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	681a      	ldr	r2, [r3, #0]
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008b42:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008b44:	2301      	movs	r3, #1
 8008b46:	e01a      	b.n	8008b7e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d194      	bne.n	8008a7a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	681a      	ldr	r2, [r3, #0]
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008b5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	2220      	movs	r2, #32
 8008b64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	2200      	movs	r2, #0
 8008b74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	e000      	b.n	8008b7e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8008b7c:	2302      	movs	r3, #2
  }
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3718      	adds	r7, #24
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}
 8008b86:	bf00      	nop
 8008b88:	00100002 	.word	0x00100002
 8008b8c:	ffff0000 	.word	0xffff0000

08008b90 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b08c      	sub	sp, #48	@ 0x30
 8008b94:	af02      	add	r7, sp, #8
 8008b96:	60f8      	str	r0, [r7, #12]
 8008b98:	607a      	str	r2, [r7, #4]
 8008b9a:	461a      	mov	r2, r3
 8008b9c:	460b      	mov	r3, r1
 8008b9e:	817b      	strh	r3, [r7, #10]
 8008ba0:	4613      	mov	r3, r2
 8008ba2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008ba8:	f7ff fb02 	bl	80081b0 <HAL_GetTick>
 8008bac:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008bb4:	b2db      	uxtb	r3, r3
 8008bb6:	2b20      	cmp	r3, #32
 8008bb8:	f040 824b 	bne.w	8009052 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bbe:	9300      	str	r3, [sp, #0]
 8008bc0:	2319      	movs	r3, #25
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	497f      	ldr	r1, [pc, #508]	@ (8008dc4 <HAL_I2C_Master_Receive+0x234>)
 8008bc6:	68f8      	ldr	r0, [r7, #12]
 8008bc8:	f001 f88a 	bl	8009ce0 <I2C_WaitOnFlagUntilTimeout>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d001      	beq.n	8008bd6 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8008bd2:	2302      	movs	r3, #2
 8008bd4:	e23e      	b.n	8009054 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008bdc:	2b01      	cmp	r3, #1
 8008bde:	d101      	bne.n	8008be4 <HAL_I2C_Master_Receive+0x54>
 8008be0:	2302      	movs	r3, #2
 8008be2:	e237      	b.n	8009054 <HAL_I2C_Master_Receive+0x4c4>
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	2201      	movs	r2, #1
 8008be8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f003 0301 	and.w	r3, r3, #1
 8008bf6:	2b01      	cmp	r3, #1
 8008bf8:	d007      	beq.n	8008c0a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	681a      	ldr	r2, [r3, #0]
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f042 0201 	orr.w	r2, r2, #1
 8008c08:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	681a      	ldr	r2, [r3, #0]
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008c18:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	2222      	movs	r2, #34	@ 0x22
 8008c1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	2210      	movs	r2, #16
 8008c26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	687a      	ldr	r2, [r7, #4]
 8008c34:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	893a      	ldrh	r2, [r7, #8]
 8008c3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c40:	b29a      	uxth	r2, r3
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	4a5f      	ldr	r2, [pc, #380]	@ (8008dc8 <HAL_I2C_Master_Receive+0x238>)
 8008c4a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008c4c:	8979      	ldrh	r1, [r7, #10]
 8008c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c52:	68f8      	ldr	r0, [r7, #12]
 8008c54:	f000 fdf8 	bl	8009848 <I2C_MasterRequestRead>
 8008c58:	4603      	mov	r3, r0
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d001      	beq.n	8008c62 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8008c5e:	2301      	movs	r3, #1
 8008c60:	e1f8      	b.n	8009054 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d113      	bne.n	8008c92 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	61fb      	str	r3, [r7, #28]
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	695b      	ldr	r3, [r3, #20]
 8008c74:	61fb      	str	r3, [r7, #28]
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	699b      	ldr	r3, [r3, #24]
 8008c7c:	61fb      	str	r3, [r7, #28]
 8008c7e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	681a      	ldr	r2, [r3, #0]
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008c8e:	601a      	str	r2, [r3, #0]
 8008c90:	e1cc      	b.n	800902c <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c96:	2b01      	cmp	r3, #1
 8008c98:	d11e      	bne.n	8008cd8 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	681a      	ldr	r2, [r3, #0]
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008ca8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8008caa:	b672      	cpsid	i
}
 8008cac:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008cae:	2300      	movs	r3, #0
 8008cb0:	61bb      	str	r3, [r7, #24]
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	695b      	ldr	r3, [r3, #20]
 8008cb8:	61bb      	str	r3, [r7, #24]
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	699b      	ldr	r3, [r3, #24]
 8008cc0:	61bb      	str	r3, [r7, #24]
 8008cc2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	681a      	ldr	r2, [r3, #0]
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008cd2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8008cd4:	b662      	cpsie	i
}
 8008cd6:	e035      	b.n	8008d44 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008cdc:	2b02      	cmp	r3, #2
 8008cde:	d11e      	bne.n	8008d1e <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	681a      	ldr	r2, [r3, #0]
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008cee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8008cf0:	b672      	cpsid	i
}
 8008cf2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	617b      	str	r3, [r7, #20]
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	695b      	ldr	r3, [r3, #20]
 8008cfe:	617b      	str	r3, [r7, #20]
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	699b      	ldr	r3, [r3, #24]
 8008d06:	617b      	str	r3, [r7, #20]
 8008d08:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	681a      	ldr	r2, [r3, #0]
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008d18:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8008d1a:	b662      	cpsie	i
}
 8008d1c:	e012      	b.n	8008d44 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	681a      	ldr	r2, [r3, #0]
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008d2c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008d2e:	2300      	movs	r3, #0
 8008d30:	613b      	str	r3, [r7, #16]
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	695b      	ldr	r3, [r3, #20]
 8008d38:	613b      	str	r3, [r7, #16]
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	699b      	ldr	r3, [r3, #24]
 8008d40:	613b      	str	r3, [r7, #16]
 8008d42:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8008d44:	e172      	b.n	800902c <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d4a:	2b03      	cmp	r3, #3
 8008d4c:	f200 811f 	bhi.w	8008f8e <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d54:	2b01      	cmp	r3, #1
 8008d56:	d123      	bne.n	8008da0 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008d58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d5a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008d5c:	68f8      	ldr	r0, [r7, #12]
 8008d5e:	f001 f969 	bl	800a034 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008d62:	4603      	mov	r3, r0
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d001      	beq.n	8008d6c <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8008d68:	2301      	movs	r3, #1
 8008d6a:	e173      	b.n	8009054 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	691a      	ldr	r2, [r3, #16]
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d76:	b2d2      	uxtb	r2, r2
 8008d78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d7e:	1c5a      	adds	r2, r3, #1
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d88:	3b01      	subs	r3, #1
 8008d8a:	b29a      	uxth	r2, r3
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d94:	b29b      	uxth	r3, r3
 8008d96:	3b01      	subs	r3, #1
 8008d98:	b29a      	uxth	r2, r3
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008d9e:	e145      	b.n	800902c <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008da4:	2b02      	cmp	r3, #2
 8008da6:	d152      	bne.n	8008e4e <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008daa:	9300      	str	r3, [sp, #0]
 8008dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dae:	2200      	movs	r2, #0
 8008db0:	4906      	ldr	r1, [pc, #24]	@ (8008dcc <HAL_I2C_Master_Receive+0x23c>)
 8008db2:	68f8      	ldr	r0, [r7, #12]
 8008db4:	f000 ff94 	bl	8009ce0 <I2C_WaitOnFlagUntilTimeout>
 8008db8:	4603      	mov	r3, r0
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d008      	beq.n	8008dd0 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	e148      	b.n	8009054 <HAL_I2C_Master_Receive+0x4c4>
 8008dc2:	bf00      	nop
 8008dc4:	00100002 	.word	0x00100002
 8008dc8:	ffff0000 	.word	0xffff0000
 8008dcc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8008dd0:	b672      	cpsid	i
}
 8008dd2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	681a      	ldr	r2, [r3, #0]
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008de2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	691a      	ldr	r2, [r3, #16]
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dee:	b2d2      	uxtb	r2, r2
 8008df0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008df6:	1c5a      	adds	r2, r3, #1
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e00:	3b01      	subs	r3, #1
 8008e02:	b29a      	uxth	r2, r3
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e0c:	b29b      	uxth	r3, r3
 8008e0e:	3b01      	subs	r3, #1
 8008e10:	b29a      	uxth	r2, r3
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8008e16:	b662      	cpsie	i
}
 8008e18:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	691a      	ldr	r2, [r3, #16]
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e24:	b2d2      	uxtb	r2, r2
 8008e26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e2c:	1c5a      	adds	r2, r3, #1
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e36:	3b01      	subs	r3, #1
 8008e38:	b29a      	uxth	r2, r3
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e42:	b29b      	uxth	r3, r3
 8008e44:	3b01      	subs	r3, #1
 8008e46:	b29a      	uxth	r2, r3
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008e4c:	e0ee      	b.n	800902c <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e50:	9300      	str	r3, [sp, #0]
 8008e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e54:	2200      	movs	r2, #0
 8008e56:	4981      	ldr	r1, [pc, #516]	@ (800905c <HAL_I2C_Master_Receive+0x4cc>)
 8008e58:	68f8      	ldr	r0, [r7, #12]
 8008e5a:	f000 ff41 	bl	8009ce0 <I2C_WaitOnFlagUntilTimeout>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d001      	beq.n	8008e68 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8008e64:	2301      	movs	r3, #1
 8008e66:	e0f5      	b.n	8009054 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	681a      	ldr	r2, [r3, #0]
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008e76:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8008e78:	b672      	cpsid	i
}
 8008e7a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	691a      	ldr	r2, [r3, #16]
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e86:	b2d2      	uxtb	r2, r2
 8008e88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e8e:	1c5a      	adds	r2, r3, #1
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e98:	3b01      	subs	r3, #1
 8008e9a:	b29a      	uxth	r2, r3
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ea4:	b29b      	uxth	r3, r3
 8008ea6:	3b01      	subs	r3, #1
 8008ea8:	b29a      	uxth	r2, r3
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8008eae:	4b6c      	ldr	r3, [pc, #432]	@ (8009060 <HAL_I2C_Master_Receive+0x4d0>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	08db      	lsrs	r3, r3, #3
 8008eb4:	4a6b      	ldr	r2, [pc, #428]	@ (8009064 <HAL_I2C_Master_Receive+0x4d4>)
 8008eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8008eba:	0a1a      	lsrs	r2, r3, #8
 8008ebc:	4613      	mov	r3, r2
 8008ebe:	009b      	lsls	r3, r3, #2
 8008ec0:	4413      	add	r3, r2
 8008ec2:	00da      	lsls	r2, r3, #3
 8008ec4:	1ad3      	subs	r3, r2, r3
 8008ec6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8008ec8:	6a3b      	ldr	r3, [r7, #32]
 8008eca:	3b01      	subs	r3, #1
 8008ecc:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8008ece:	6a3b      	ldr	r3, [r7, #32]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d118      	bne.n	8008f06 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	2220      	movs	r2, #32
 8008ede:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008eee:	f043 0220 	orr.w	r2, r3, #32
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8008ef6:	b662      	cpsie	i
}
 8008ef8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	2200      	movs	r2, #0
 8008efe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8008f02:	2301      	movs	r3, #1
 8008f04:	e0a6      	b.n	8009054 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	695b      	ldr	r3, [r3, #20]
 8008f0c:	f003 0304 	and.w	r3, r3, #4
 8008f10:	2b04      	cmp	r3, #4
 8008f12:	d1d9      	bne.n	8008ec8 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	681a      	ldr	r2, [r3, #0]
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008f22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	691a      	ldr	r2, [r3, #16]
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f2e:	b2d2      	uxtb	r2, r2
 8008f30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f36:	1c5a      	adds	r2, r3, #1
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f40:	3b01      	subs	r3, #1
 8008f42:	b29a      	uxth	r2, r3
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f4c:	b29b      	uxth	r3, r3
 8008f4e:	3b01      	subs	r3, #1
 8008f50:	b29a      	uxth	r2, r3
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8008f56:	b662      	cpsie	i
}
 8008f58:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	691a      	ldr	r2, [r3, #16]
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f64:	b2d2      	uxtb	r2, r2
 8008f66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f6c:	1c5a      	adds	r2, r3, #1
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f76:	3b01      	subs	r3, #1
 8008f78:	b29a      	uxth	r2, r3
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f82:	b29b      	uxth	r3, r3
 8008f84:	3b01      	subs	r3, #1
 8008f86:	b29a      	uxth	r2, r3
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008f8c:	e04e      	b.n	800902c <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008f8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f90:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008f92:	68f8      	ldr	r0, [r7, #12]
 8008f94:	f001 f84e 	bl	800a034 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d001      	beq.n	8008fa2 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	e058      	b.n	8009054 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	691a      	ldr	r2, [r3, #16]
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fac:	b2d2      	uxtb	r2, r2
 8008fae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fb4:	1c5a      	adds	r2, r3, #1
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008fbe:	3b01      	subs	r3, #1
 8008fc0:	b29a      	uxth	r2, r3
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008fca:	b29b      	uxth	r3, r3
 8008fcc:	3b01      	subs	r3, #1
 8008fce:	b29a      	uxth	r2, r3
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	695b      	ldr	r3, [r3, #20]
 8008fda:	f003 0304 	and.w	r3, r3, #4
 8008fde:	2b04      	cmp	r3, #4
 8008fe0:	d124      	bne.n	800902c <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008fe6:	2b03      	cmp	r3, #3
 8008fe8:	d107      	bne.n	8008ffa <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	681a      	ldr	r2, [r3, #0]
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008ff8:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	691a      	ldr	r2, [r3, #16]
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009004:	b2d2      	uxtb	r2, r2
 8009006:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800900c:	1c5a      	adds	r2, r3, #1
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009016:	3b01      	subs	r3, #1
 8009018:	b29a      	uxth	r2, r3
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009022:	b29b      	uxth	r3, r3
 8009024:	3b01      	subs	r3, #1
 8009026:	b29a      	uxth	r2, r3
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009030:	2b00      	cmp	r3, #0
 8009032:	f47f ae88 	bne.w	8008d46 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	2220      	movs	r2, #32
 800903a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	2200      	movs	r2, #0
 8009042:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	2200      	movs	r2, #0
 800904a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800904e:	2300      	movs	r3, #0
 8009050:	e000      	b.n	8009054 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8009052:	2302      	movs	r3, #2
  }
}
 8009054:	4618      	mov	r0, r3
 8009056:	3728      	adds	r7, #40	@ 0x28
 8009058:	46bd      	mov	sp, r7
 800905a:	bd80      	pop	{r7, pc}
 800905c:	00010004 	.word	0x00010004
 8009060:	2000003c 	.word	0x2000003c
 8009064:	14f8b589 	.word	0x14f8b589

08009068 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b088      	sub	sp, #32
 800906c:	af02      	add	r7, sp, #8
 800906e:	60f8      	str	r0, [r7, #12]
 8009070:	4608      	mov	r0, r1
 8009072:	4611      	mov	r1, r2
 8009074:	461a      	mov	r2, r3
 8009076:	4603      	mov	r3, r0
 8009078:	817b      	strh	r3, [r7, #10]
 800907a:	460b      	mov	r3, r1
 800907c:	813b      	strh	r3, [r7, #8]
 800907e:	4613      	mov	r3, r2
 8009080:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009082:	f7ff f895 	bl	80081b0 <HAL_GetTick>
 8009086:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800908e:	b2db      	uxtb	r3, r3
 8009090:	2b20      	cmp	r3, #32
 8009092:	f040 80d9 	bne.w	8009248 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009096:	697b      	ldr	r3, [r7, #20]
 8009098:	9300      	str	r3, [sp, #0]
 800909a:	2319      	movs	r3, #25
 800909c:	2201      	movs	r2, #1
 800909e:	496d      	ldr	r1, [pc, #436]	@ (8009254 <HAL_I2C_Mem_Write+0x1ec>)
 80090a0:	68f8      	ldr	r0, [r7, #12]
 80090a2:	f000 fe1d 	bl	8009ce0 <I2C_WaitOnFlagUntilTimeout>
 80090a6:	4603      	mov	r3, r0
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d001      	beq.n	80090b0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80090ac:	2302      	movs	r3, #2
 80090ae:	e0cc      	b.n	800924a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80090b6:	2b01      	cmp	r3, #1
 80090b8:	d101      	bne.n	80090be <HAL_I2C_Mem_Write+0x56>
 80090ba:	2302      	movs	r3, #2
 80090bc:	e0c5      	b.n	800924a <HAL_I2C_Mem_Write+0x1e2>
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	2201      	movs	r2, #1
 80090c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f003 0301 	and.w	r3, r3, #1
 80090d0:	2b01      	cmp	r3, #1
 80090d2:	d007      	beq.n	80090e4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	681a      	ldr	r2, [r3, #0]
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f042 0201 	orr.w	r2, r2, #1
 80090e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	681a      	ldr	r2, [r3, #0]
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80090f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	2221      	movs	r2, #33	@ 0x21
 80090f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	2240      	movs	r2, #64	@ 0x40
 8009100:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	2200      	movs	r2, #0
 8009108:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	6a3a      	ldr	r2, [r7, #32]
 800910e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009114:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800911a:	b29a      	uxth	r2, r3
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	4a4d      	ldr	r2, [pc, #308]	@ (8009258 <HAL_I2C_Mem_Write+0x1f0>)
 8009124:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009126:	88f8      	ldrh	r0, [r7, #6]
 8009128:	893a      	ldrh	r2, [r7, #8]
 800912a:	8979      	ldrh	r1, [r7, #10]
 800912c:	697b      	ldr	r3, [r7, #20]
 800912e:	9301      	str	r3, [sp, #4]
 8009130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009132:	9300      	str	r3, [sp, #0]
 8009134:	4603      	mov	r3, r0
 8009136:	68f8      	ldr	r0, [r7, #12]
 8009138:	f000 fc54 	bl	80099e4 <I2C_RequestMemoryWrite>
 800913c:	4603      	mov	r3, r0
 800913e:	2b00      	cmp	r3, #0
 8009140:	d052      	beq.n	80091e8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8009142:	2301      	movs	r3, #1
 8009144:	e081      	b.n	800924a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009146:	697a      	ldr	r2, [r7, #20]
 8009148:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800914a:	68f8      	ldr	r0, [r7, #12]
 800914c:	f000 fee2 	bl	8009f14 <I2C_WaitOnTXEFlagUntilTimeout>
 8009150:	4603      	mov	r3, r0
 8009152:	2b00      	cmp	r3, #0
 8009154:	d00d      	beq.n	8009172 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800915a:	2b04      	cmp	r3, #4
 800915c:	d107      	bne.n	800916e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	681a      	ldr	r2, [r3, #0]
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800916c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800916e:	2301      	movs	r3, #1
 8009170:	e06b      	b.n	800924a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009176:	781a      	ldrb	r2, [r3, #0]
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009182:	1c5a      	adds	r2, r3, #1
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800918c:	3b01      	subs	r3, #1
 800918e:	b29a      	uxth	r2, r3
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009198:	b29b      	uxth	r3, r3
 800919a:	3b01      	subs	r3, #1
 800919c:	b29a      	uxth	r2, r3
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	695b      	ldr	r3, [r3, #20]
 80091a8:	f003 0304 	and.w	r3, r3, #4
 80091ac:	2b04      	cmp	r3, #4
 80091ae:	d11b      	bne.n	80091e8 <HAL_I2C_Mem_Write+0x180>
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d017      	beq.n	80091e8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091bc:	781a      	ldrb	r2, [r3, #0]
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091c8:	1c5a      	adds	r2, r3, #1
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80091d2:	3b01      	subs	r3, #1
 80091d4:	b29a      	uxth	r2, r3
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80091de:	b29b      	uxth	r3, r3
 80091e0:	3b01      	subs	r3, #1
 80091e2:	b29a      	uxth	r2, r3
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d1aa      	bne.n	8009146 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80091f0:	697a      	ldr	r2, [r7, #20]
 80091f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80091f4:	68f8      	ldr	r0, [r7, #12]
 80091f6:	f000 fed5 	bl	8009fa4 <I2C_WaitOnBTFFlagUntilTimeout>
 80091fa:	4603      	mov	r3, r0
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d00d      	beq.n	800921c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009204:	2b04      	cmp	r3, #4
 8009206:	d107      	bne.n	8009218 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	681a      	ldr	r2, [r3, #0]
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009216:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009218:	2301      	movs	r3, #1
 800921a:	e016      	b.n	800924a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	681a      	ldr	r2, [r3, #0]
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800922a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	2220      	movs	r2, #32
 8009230:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	2200      	movs	r2, #0
 8009238:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	2200      	movs	r2, #0
 8009240:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8009244:	2300      	movs	r3, #0
 8009246:	e000      	b.n	800924a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009248:	2302      	movs	r3, #2
  }
}
 800924a:	4618      	mov	r0, r3
 800924c:	3718      	adds	r7, #24
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}
 8009252:	bf00      	nop
 8009254:	00100002 	.word	0x00100002
 8009258:	ffff0000 	.word	0xffff0000

0800925c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b08c      	sub	sp, #48	@ 0x30
 8009260:	af02      	add	r7, sp, #8
 8009262:	60f8      	str	r0, [r7, #12]
 8009264:	4608      	mov	r0, r1
 8009266:	4611      	mov	r1, r2
 8009268:	461a      	mov	r2, r3
 800926a:	4603      	mov	r3, r0
 800926c:	817b      	strh	r3, [r7, #10]
 800926e:	460b      	mov	r3, r1
 8009270:	813b      	strh	r3, [r7, #8]
 8009272:	4613      	mov	r3, r2
 8009274:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8009276:	2300      	movs	r3, #0
 8009278:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800927a:	f7fe ff99 	bl	80081b0 <HAL_GetTick>
 800927e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009286:	b2db      	uxtb	r3, r3
 8009288:	2b20      	cmp	r3, #32
 800928a:	f040 8250 	bne.w	800972e <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800928e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009290:	9300      	str	r3, [sp, #0]
 8009292:	2319      	movs	r3, #25
 8009294:	2201      	movs	r2, #1
 8009296:	4982      	ldr	r1, [pc, #520]	@ (80094a0 <HAL_I2C_Mem_Read+0x244>)
 8009298:	68f8      	ldr	r0, [r7, #12]
 800929a:	f000 fd21 	bl	8009ce0 <I2C_WaitOnFlagUntilTimeout>
 800929e:	4603      	mov	r3, r0
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d001      	beq.n	80092a8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80092a4:	2302      	movs	r3, #2
 80092a6:	e243      	b.n	8009730 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80092ae:	2b01      	cmp	r3, #1
 80092b0:	d101      	bne.n	80092b6 <HAL_I2C_Mem_Read+0x5a>
 80092b2:	2302      	movs	r3, #2
 80092b4:	e23c      	b.n	8009730 <HAL_I2C_Mem_Read+0x4d4>
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	2201      	movs	r2, #1
 80092ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f003 0301 	and.w	r3, r3, #1
 80092c8:	2b01      	cmp	r3, #1
 80092ca:	d007      	beq.n	80092dc <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	681a      	ldr	r2, [r3, #0]
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f042 0201 	orr.w	r2, r2, #1
 80092da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	681a      	ldr	r2, [r3, #0]
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80092ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	2222      	movs	r2, #34	@ 0x22
 80092f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	2240      	movs	r2, #64	@ 0x40
 80092f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	2200      	movs	r2, #0
 8009300:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009306:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800930c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009312:	b29a      	uxth	r2, r3
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	4a62      	ldr	r2, [pc, #392]	@ (80094a4 <HAL_I2C_Mem_Read+0x248>)
 800931c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800931e:	88f8      	ldrh	r0, [r7, #6]
 8009320:	893a      	ldrh	r2, [r7, #8]
 8009322:	8979      	ldrh	r1, [r7, #10]
 8009324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009326:	9301      	str	r3, [sp, #4]
 8009328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800932a:	9300      	str	r3, [sp, #0]
 800932c:	4603      	mov	r3, r0
 800932e:	68f8      	ldr	r0, [r7, #12]
 8009330:	f000 fbee 	bl	8009b10 <I2C_RequestMemoryRead>
 8009334:	4603      	mov	r3, r0
 8009336:	2b00      	cmp	r3, #0
 8009338:	d001      	beq.n	800933e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800933a:	2301      	movs	r3, #1
 800933c:	e1f8      	b.n	8009730 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009342:	2b00      	cmp	r3, #0
 8009344:	d113      	bne.n	800936e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009346:	2300      	movs	r3, #0
 8009348:	61fb      	str	r3, [r7, #28]
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	695b      	ldr	r3, [r3, #20]
 8009350:	61fb      	str	r3, [r7, #28]
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	699b      	ldr	r3, [r3, #24]
 8009358:	61fb      	str	r3, [r7, #28]
 800935a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	681a      	ldr	r2, [r3, #0]
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800936a:	601a      	str	r2, [r3, #0]
 800936c:	e1cc      	b.n	8009708 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009372:	2b01      	cmp	r3, #1
 8009374:	d11e      	bne.n	80093b4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	681a      	ldr	r2, [r3, #0]
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009384:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009386:	b672      	cpsid	i
}
 8009388:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800938a:	2300      	movs	r3, #0
 800938c:	61bb      	str	r3, [r7, #24]
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	695b      	ldr	r3, [r3, #20]
 8009394:	61bb      	str	r3, [r7, #24]
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	699b      	ldr	r3, [r3, #24]
 800939c:	61bb      	str	r3, [r7, #24]
 800939e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	681a      	ldr	r2, [r3, #0]
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80093ae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80093b0:	b662      	cpsie	i
}
 80093b2:	e035      	b.n	8009420 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80093b8:	2b02      	cmp	r3, #2
 80093ba:	d11e      	bne.n	80093fa <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	681a      	ldr	r2, [r3, #0]
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80093ca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80093cc:	b672      	cpsid	i
}
 80093ce:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80093d0:	2300      	movs	r3, #0
 80093d2:	617b      	str	r3, [r7, #20]
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	695b      	ldr	r3, [r3, #20]
 80093da:	617b      	str	r3, [r7, #20]
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	699b      	ldr	r3, [r3, #24]
 80093e2:	617b      	str	r3, [r7, #20]
 80093e4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	681a      	ldr	r2, [r3, #0]
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80093f4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80093f6:	b662      	cpsie	i
}
 80093f8:	e012      	b.n	8009420 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	681a      	ldr	r2, [r3, #0]
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009408:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800940a:	2300      	movs	r3, #0
 800940c:	613b      	str	r3, [r7, #16]
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	695b      	ldr	r3, [r3, #20]
 8009414:	613b      	str	r3, [r7, #16]
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	699b      	ldr	r3, [r3, #24]
 800941c:	613b      	str	r3, [r7, #16]
 800941e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8009420:	e172      	b.n	8009708 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009426:	2b03      	cmp	r3, #3
 8009428:	f200 811f 	bhi.w	800966a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009430:	2b01      	cmp	r3, #1
 8009432:	d123      	bne.n	800947c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009434:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009436:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009438:	68f8      	ldr	r0, [r7, #12]
 800943a:	f000 fdfb 	bl	800a034 <I2C_WaitOnRXNEFlagUntilTimeout>
 800943e:	4603      	mov	r3, r0
 8009440:	2b00      	cmp	r3, #0
 8009442:	d001      	beq.n	8009448 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8009444:	2301      	movs	r3, #1
 8009446:	e173      	b.n	8009730 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	691a      	ldr	r2, [r3, #16]
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009452:	b2d2      	uxtb	r2, r2
 8009454:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800945a:	1c5a      	adds	r2, r3, #1
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009464:	3b01      	subs	r3, #1
 8009466:	b29a      	uxth	r2, r3
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009470:	b29b      	uxth	r3, r3
 8009472:	3b01      	subs	r3, #1
 8009474:	b29a      	uxth	r2, r3
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800947a:	e145      	b.n	8009708 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009480:	2b02      	cmp	r3, #2
 8009482:	d152      	bne.n	800952a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009486:	9300      	str	r3, [sp, #0]
 8009488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800948a:	2200      	movs	r2, #0
 800948c:	4906      	ldr	r1, [pc, #24]	@ (80094a8 <HAL_I2C_Mem_Read+0x24c>)
 800948e:	68f8      	ldr	r0, [r7, #12]
 8009490:	f000 fc26 	bl	8009ce0 <I2C_WaitOnFlagUntilTimeout>
 8009494:	4603      	mov	r3, r0
 8009496:	2b00      	cmp	r3, #0
 8009498:	d008      	beq.n	80094ac <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800949a:	2301      	movs	r3, #1
 800949c:	e148      	b.n	8009730 <HAL_I2C_Mem_Read+0x4d4>
 800949e:	bf00      	nop
 80094a0:	00100002 	.word	0x00100002
 80094a4:	ffff0000 	.word	0xffff0000
 80094a8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80094ac:	b672      	cpsid	i
}
 80094ae:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	681a      	ldr	r2, [r3, #0]
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80094be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	691a      	ldr	r2, [r3, #16]
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094ca:	b2d2      	uxtb	r2, r2
 80094cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094d2:	1c5a      	adds	r2, r3, #1
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80094dc:	3b01      	subs	r3, #1
 80094de:	b29a      	uxth	r2, r3
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80094e8:	b29b      	uxth	r3, r3
 80094ea:	3b01      	subs	r3, #1
 80094ec:	b29a      	uxth	r2, r3
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80094f2:	b662      	cpsie	i
}
 80094f4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	691a      	ldr	r2, [r3, #16]
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009500:	b2d2      	uxtb	r2, r2
 8009502:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009508:	1c5a      	adds	r2, r3, #1
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009512:	3b01      	subs	r3, #1
 8009514:	b29a      	uxth	r2, r3
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800951e:	b29b      	uxth	r3, r3
 8009520:	3b01      	subs	r3, #1
 8009522:	b29a      	uxth	r2, r3
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009528:	e0ee      	b.n	8009708 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800952a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800952c:	9300      	str	r3, [sp, #0]
 800952e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009530:	2200      	movs	r2, #0
 8009532:	4981      	ldr	r1, [pc, #516]	@ (8009738 <HAL_I2C_Mem_Read+0x4dc>)
 8009534:	68f8      	ldr	r0, [r7, #12]
 8009536:	f000 fbd3 	bl	8009ce0 <I2C_WaitOnFlagUntilTimeout>
 800953a:	4603      	mov	r3, r0
 800953c:	2b00      	cmp	r3, #0
 800953e:	d001      	beq.n	8009544 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8009540:	2301      	movs	r3, #1
 8009542:	e0f5      	b.n	8009730 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	681a      	ldr	r2, [r3, #0]
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009552:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009554:	b672      	cpsid	i
}
 8009556:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	691a      	ldr	r2, [r3, #16]
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009562:	b2d2      	uxtb	r2, r2
 8009564:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800956a:	1c5a      	adds	r2, r3, #1
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009574:	3b01      	subs	r3, #1
 8009576:	b29a      	uxth	r2, r3
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009580:	b29b      	uxth	r3, r3
 8009582:	3b01      	subs	r3, #1
 8009584:	b29a      	uxth	r2, r3
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800958a:	4b6c      	ldr	r3, [pc, #432]	@ (800973c <HAL_I2C_Mem_Read+0x4e0>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	08db      	lsrs	r3, r3, #3
 8009590:	4a6b      	ldr	r2, [pc, #428]	@ (8009740 <HAL_I2C_Mem_Read+0x4e4>)
 8009592:	fba2 2303 	umull	r2, r3, r2, r3
 8009596:	0a1a      	lsrs	r2, r3, #8
 8009598:	4613      	mov	r3, r2
 800959a:	009b      	lsls	r3, r3, #2
 800959c:	4413      	add	r3, r2
 800959e:	00da      	lsls	r2, r3, #3
 80095a0:	1ad3      	subs	r3, r2, r3
 80095a2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80095a4:	6a3b      	ldr	r3, [r7, #32]
 80095a6:	3b01      	subs	r3, #1
 80095a8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80095aa:	6a3b      	ldr	r3, [r7, #32]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d118      	bne.n	80095e2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	2200      	movs	r2, #0
 80095b4:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	2220      	movs	r2, #32
 80095ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	2200      	movs	r2, #0
 80095c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095ca:	f043 0220 	orr.w	r2, r3, #32
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80095d2:	b662      	cpsie	i
}
 80095d4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	2200      	movs	r2, #0
 80095da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80095de:	2301      	movs	r3, #1
 80095e0:	e0a6      	b.n	8009730 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	695b      	ldr	r3, [r3, #20]
 80095e8:	f003 0304 	and.w	r3, r3, #4
 80095ec:	2b04      	cmp	r3, #4
 80095ee:	d1d9      	bne.n	80095a4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	681a      	ldr	r2, [r3, #0]
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80095fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	691a      	ldr	r2, [r3, #16]
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800960a:	b2d2      	uxtb	r2, r2
 800960c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009612:	1c5a      	adds	r2, r3, #1
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800961c:	3b01      	subs	r3, #1
 800961e:	b29a      	uxth	r2, r3
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009628:	b29b      	uxth	r3, r3
 800962a:	3b01      	subs	r3, #1
 800962c:	b29a      	uxth	r2, r3
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009632:	b662      	cpsie	i
}
 8009634:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	691a      	ldr	r2, [r3, #16]
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009640:	b2d2      	uxtb	r2, r2
 8009642:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009648:	1c5a      	adds	r2, r3, #1
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009652:	3b01      	subs	r3, #1
 8009654:	b29a      	uxth	r2, r3
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800965e:	b29b      	uxth	r3, r3
 8009660:	3b01      	subs	r3, #1
 8009662:	b29a      	uxth	r2, r3
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009668:	e04e      	b.n	8009708 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800966a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800966c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800966e:	68f8      	ldr	r0, [r7, #12]
 8009670:	f000 fce0 	bl	800a034 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009674:	4603      	mov	r3, r0
 8009676:	2b00      	cmp	r3, #0
 8009678:	d001      	beq.n	800967e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800967a:	2301      	movs	r3, #1
 800967c:	e058      	b.n	8009730 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	691a      	ldr	r2, [r3, #16]
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009688:	b2d2      	uxtb	r2, r2
 800968a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009690:	1c5a      	adds	r2, r3, #1
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800969a:	3b01      	subs	r3, #1
 800969c:	b29a      	uxth	r2, r3
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80096a6:	b29b      	uxth	r3, r3
 80096a8:	3b01      	subs	r3, #1
 80096aa:	b29a      	uxth	r2, r3
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	695b      	ldr	r3, [r3, #20]
 80096b6:	f003 0304 	and.w	r3, r3, #4
 80096ba:	2b04      	cmp	r3, #4
 80096bc:	d124      	bne.n	8009708 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80096c2:	2b03      	cmp	r3, #3
 80096c4:	d107      	bne.n	80096d6 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	681a      	ldr	r2, [r3, #0]
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80096d4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	691a      	ldr	r2, [r3, #16]
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096e0:	b2d2      	uxtb	r2, r2
 80096e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096e8:	1c5a      	adds	r2, r3, #1
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80096f2:	3b01      	subs	r3, #1
 80096f4:	b29a      	uxth	r2, r3
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80096fe:	b29b      	uxth	r3, r3
 8009700:	3b01      	subs	r3, #1
 8009702:	b29a      	uxth	r2, r3
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800970c:	2b00      	cmp	r3, #0
 800970e:	f47f ae88 	bne.w	8009422 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	2220      	movs	r2, #32
 8009716:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	2200      	movs	r2, #0
 800971e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	2200      	movs	r2, #0
 8009726:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800972a:	2300      	movs	r3, #0
 800972c:	e000      	b.n	8009730 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 800972e:	2302      	movs	r3, #2
  }
}
 8009730:	4618      	mov	r0, r3
 8009732:	3728      	adds	r7, #40	@ 0x28
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}
 8009738:	00010004 	.word	0x00010004
 800973c:	2000003c 	.word	0x2000003c
 8009740:	14f8b589 	.word	0x14f8b589

08009744 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b088      	sub	sp, #32
 8009748:	af02      	add	r7, sp, #8
 800974a:	60f8      	str	r0, [r7, #12]
 800974c:	607a      	str	r2, [r7, #4]
 800974e:	603b      	str	r3, [r7, #0]
 8009750:	460b      	mov	r3, r1
 8009752:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009758:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	2b08      	cmp	r3, #8
 800975e:	d006      	beq.n	800976e <I2C_MasterRequestWrite+0x2a>
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	2b01      	cmp	r3, #1
 8009764:	d003      	beq.n	800976e <I2C_MasterRequestWrite+0x2a>
 8009766:	697b      	ldr	r3, [r7, #20]
 8009768:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800976c:	d108      	bne.n	8009780 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	681a      	ldr	r2, [r3, #0]
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800977c:	601a      	str	r2, [r3, #0]
 800977e:	e00b      	b.n	8009798 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009784:	2b12      	cmp	r3, #18
 8009786:	d107      	bne.n	8009798 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	681a      	ldr	r2, [r3, #0]
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009796:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	9300      	str	r3, [sp, #0]
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2200      	movs	r2, #0
 80097a0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80097a4:	68f8      	ldr	r0, [r7, #12]
 80097a6:	f000 fa9b 	bl	8009ce0 <I2C_WaitOnFlagUntilTimeout>
 80097aa:	4603      	mov	r3, r0
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d00d      	beq.n	80097cc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80097be:	d103      	bne.n	80097c8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80097c6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80097c8:	2303      	movs	r3, #3
 80097ca:	e035      	b.n	8009838 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	691b      	ldr	r3, [r3, #16]
 80097d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80097d4:	d108      	bne.n	80097e8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80097d6:	897b      	ldrh	r3, [r7, #10]
 80097d8:	b2db      	uxtb	r3, r3
 80097da:	461a      	mov	r2, r3
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80097e4:	611a      	str	r2, [r3, #16]
 80097e6:	e01b      	b.n	8009820 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80097e8:	897b      	ldrh	r3, [r7, #10]
 80097ea:	11db      	asrs	r3, r3, #7
 80097ec:	b2db      	uxtb	r3, r3
 80097ee:	f003 0306 	and.w	r3, r3, #6
 80097f2:	b2db      	uxtb	r3, r3
 80097f4:	f063 030f 	orn	r3, r3, #15
 80097f8:	b2da      	uxtb	r2, r3
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	687a      	ldr	r2, [r7, #4]
 8009804:	490e      	ldr	r1, [pc, #56]	@ (8009840 <I2C_MasterRequestWrite+0xfc>)
 8009806:	68f8      	ldr	r0, [r7, #12]
 8009808:	f000 fae4 	bl	8009dd4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800980c:	4603      	mov	r3, r0
 800980e:	2b00      	cmp	r3, #0
 8009810:	d001      	beq.n	8009816 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8009812:	2301      	movs	r3, #1
 8009814:	e010      	b.n	8009838 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009816:	897b      	ldrh	r3, [r7, #10]
 8009818:	b2da      	uxtb	r2, r3
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	687a      	ldr	r2, [r7, #4]
 8009824:	4907      	ldr	r1, [pc, #28]	@ (8009844 <I2C_MasterRequestWrite+0x100>)
 8009826:	68f8      	ldr	r0, [r7, #12]
 8009828:	f000 fad4 	bl	8009dd4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800982c:	4603      	mov	r3, r0
 800982e:	2b00      	cmp	r3, #0
 8009830:	d001      	beq.n	8009836 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8009832:	2301      	movs	r3, #1
 8009834:	e000      	b.n	8009838 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8009836:	2300      	movs	r3, #0
}
 8009838:	4618      	mov	r0, r3
 800983a:	3718      	adds	r7, #24
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}
 8009840:	00010008 	.word	0x00010008
 8009844:	00010002 	.word	0x00010002

08009848 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b088      	sub	sp, #32
 800984c:	af02      	add	r7, sp, #8
 800984e:	60f8      	str	r0, [r7, #12]
 8009850:	607a      	str	r2, [r7, #4]
 8009852:	603b      	str	r3, [r7, #0]
 8009854:	460b      	mov	r3, r1
 8009856:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800985c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	681a      	ldr	r2, [r3, #0]
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800986c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800986e:	697b      	ldr	r3, [r7, #20]
 8009870:	2b08      	cmp	r3, #8
 8009872:	d006      	beq.n	8009882 <I2C_MasterRequestRead+0x3a>
 8009874:	697b      	ldr	r3, [r7, #20]
 8009876:	2b01      	cmp	r3, #1
 8009878:	d003      	beq.n	8009882 <I2C_MasterRequestRead+0x3a>
 800987a:	697b      	ldr	r3, [r7, #20]
 800987c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009880:	d108      	bne.n	8009894 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	681a      	ldr	r2, [r3, #0]
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009890:	601a      	str	r2, [r3, #0]
 8009892:	e00b      	b.n	80098ac <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009898:	2b11      	cmp	r3, #17
 800989a:	d107      	bne.n	80098ac <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	681a      	ldr	r2, [r3, #0]
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80098aa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	9300      	str	r3, [sp, #0]
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2200      	movs	r2, #0
 80098b4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80098b8:	68f8      	ldr	r0, [r7, #12]
 80098ba:	f000 fa11 	bl	8009ce0 <I2C_WaitOnFlagUntilTimeout>
 80098be:	4603      	mov	r3, r0
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d00d      	beq.n	80098e0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80098ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80098d2:	d103      	bne.n	80098dc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80098da:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80098dc:	2303      	movs	r3, #3
 80098de:	e079      	b.n	80099d4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	691b      	ldr	r3, [r3, #16]
 80098e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80098e8:	d108      	bne.n	80098fc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80098ea:	897b      	ldrh	r3, [r7, #10]
 80098ec:	b2db      	uxtb	r3, r3
 80098ee:	f043 0301 	orr.w	r3, r3, #1
 80098f2:	b2da      	uxtb	r2, r3
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	611a      	str	r2, [r3, #16]
 80098fa:	e05f      	b.n	80099bc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80098fc:	897b      	ldrh	r3, [r7, #10]
 80098fe:	11db      	asrs	r3, r3, #7
 8009900:	b2db      	uxtb	r3, r3
 8009902:	f003 0306 	and.w	r3, r3, #6
 8009906:	b2db      	uxtb	r3, r3
 8009908:	f063 030f 	orn	r3, r3, #15
 800990c:	b2da      	uxtb	r2, r3
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	687a      	ldr	r2, [r7, #4]
 8009918:	4930      	ldr	r1, [pc, #192]	@ (80099dc <I2C_MasterRequestRead+0x194>)
 800991a:	68f8      	ldr	r0, [r7, #12]
 800991c:	f000 fa5a 	bl	8009dd4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009920:	4603      	mov	r3, r0
 8009922:	2b00      	cmp	r3, #0
 8009924:	d001      	beq.n	800992a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8009926:	2301      	movs	r3, #1
 8009928:	e054      	b.n	80099d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800992a:	897b      	ldrh	r3, [r7, #10]
 800992c:	b2da      	uxtb	r2, r3
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	687a      	ldr	r2, [r7, #4]
 8009938:	4929      	ldr	r1, [pc, #164]	@ (80099e0 <I2C_MasterRequestRead+0x198>)
 800993a:	68f8      	ldr	r0, [r7, #12]
 800993c:	f000 fa4a 	bl	8009dd4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009940:	4603      	mov	r3, r0
 8009942:	2b00      	cmp	r3, #0
 8009944:	d001      	beq.n	800994a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8009946:	2301      	movs	r3, #1
 8009948:	e044      	b.n	80099d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800994a:	2300      	movs	r3, #0
 800994c:	613b      	str	r3, [r7, #16]
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	695b      	ldr	r3, [r3, #20]
 8009954:	613b      	str	r3, [r7, #16]
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	699b      	ldr	r3, [r3, #24]
 800995c:	613b      	str	r3, [r7, #16]
 800995e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	681a      	ldr	r2, [r3, #0]
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800996e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	9300      	str	r3, [sp, #0]
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2200      	movs	r2, #0
 8009978:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800997c:	68f8      	ldr	r0, [r7, #12]
 800997e:	f000 f9af 	bl	8009ce0 <I2C_WaitOnFlagUntilTimeout>
 8009982:	4603      	mov	r3, r0
 8009984:	2b00      	cmp	r3, #0
 8009986:	d00d      	beq.n	80099a4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009992:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009996:	d103      	bne.n	80099a0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800999e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80099a0:	2303      	movs	r3, #3
 80099a2:	e017      	b.n	80099d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80099a4:	897b      	ldrh	r3, [r7, #10]
 80099a6:	11db      	asrs	r3, r3, #7
 80099a8:	b2db      	uxtb	r3, r3
 80099aa:	f003 0306 	and.w	r3, r3, #6
 80099ae:	b2db      	uxtb	r3, r3
 80099b0:	f063 030e 	orn	r3, r3, #14
 80099b4:	b2da      	uxtb	r2, r3
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	687a      	ldr	r2, [r7, #4]
 80099c0:	4907      	ldr	r1, [pc, #28]	@ (80099e0 <I2C_MasterRequestRead+0x198>)
 80099c2:	68f8      	ldr	r0, [r7, #12]
 80099c4:	f000 fa06 	bl	8009dd4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80099c8:	4603      	mov	r3, r0
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d001      	beq.n	80099d2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80099ce:	2301      	movs	r3, #1
 80099d0:	e000      	b.n	80099d4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80099d2:	2300      	movs	r3, #0
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	3718      	adds	r7, #24
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}
 80099dc:	00010008 	.word	0x00010008
 80099e0:	00010002 	.word	0x00010002

080099e4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b088      	sub	sp, #32
 80099e8:	af02      	add	r7, sp, #8
 80099ea:	60f8      	str	r0, [r7, #12]
 80099ec:	4608      	mov	r0, r1
 80099ee:	4611      	mov	r1, r2
 80099f0:	461a      	mov	r2, r3
 80099f2:	4603      	mov	r3, r0
 80099f4:	817b      	strh	r3, [r7, #10]
 80099f6:	460b      	mov	r3, r1
 80099f8:	813b      	strh	r3, [r7, #8]
 80099fa:	4613      	mov	r3, r2
 80099fc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	681a      	ldr	r2, [r3, #0]
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009a0c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a10:	9300      	str	r3, [sp, #0]
 8009a12:	6a3b      	ldr	r3, [r7, #32]
 8009a14:	2200      	movs	r2, #0
 8009a16:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009a1a:	68f8      	ldr	r0, [r7, #12]
 8009a1c:	f000 f960 	bl	8009ce0 <I2C_WaitOnFlagUntilTimeout>
 8009a20:	4603      	mov	r3, r0
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d00d      	beq.n	8009a42 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009a34:	d103      	bne.n	8009a3e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009a3c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009a3e:	2303      	movs	r3, #3
 8009a40:	e05f      	b.n	8009b02 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009a42:	897b      	ldrh	r3, [r7, #10]
 8009a44:	b2db      	uxtb	r3, r3
 8009a46:	461a      	mov	r2, r3
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8009a50:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a54:	6a3a      	ldr	r2, [r7, #32]
 8009a56:	492d      	ldr	r1, [pc, #180]	@ (8009b0c <I2C_RequestMemoryWrite+0x128>)
 8009a58:	68f8      	ldr	r0, [r7, #12]
 8009a5a:	f000 f9bb 	bl	8009dd4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d001      	beq.n	8009a68 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8009a64:	2301      	movs	r3, #1
 8009a66:	e04c      	b.n	8009b02 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009a68:	2300      	movs	r3, #0
 8009a6a:	617b      	str	r3, [r7, #20]
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	695b      	ldr	r3, [r3, #20]
 8009a72:	617b      	str	r3, [r7, #20]
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	699b      	ldr	r3, [r3, #24]
 8009a7a:	617b      	str	r3, [r7, #20]
 8009a7c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a80:	6a39      	ldr	r1, [r7, #32]
 8009a82:	68f8      	ldr	r0, [r7, #12]
 8009a84:	f000 fa46 	bl	8009f14 <I2C_WaitOnTXEFlagUntilTimeout>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d00d      	beq.n	8009aaa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a92:	2b04      	cmp	r3, #4
 8009a94:	d107      	bne.n	8009aa6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	681a      	ldr	r2, [r3, #0]
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009aa4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	e02b      	b.n	8009b02 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009aaa:	88fb      	ldrh	r3, [r7, #6]
 8009aac:	2b01      	cmp	r3, #1
 8009aae:	d105      	bne.n	8009abc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009ab0:	893b      	ldrh	r3, [r7, #8]
 8009ab2:	b2da      	uxtb	r2, r3
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	611a      	str	r2, [r3, #16]
 8009aba:	e021      	b.n	8009b00 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009abc:	893b      	ldrh	r3, [r7, #8]
 8009abe:	0a1b      	lsrs	r3, r3, #8
 8009ac0:	b29b      	uxth	r3, r3
 8009ac2:	b2da      	uxtb	r2, r3
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009aca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009acc:	6a39      	ldr	r1, [r7, #32]
 8009ace:	68f8      	ldr	r0, [r7, #12]
 8009ad0:	f000 fa20 	bl	8009f14 <I2C_WaitOnTXEFlagUntilTimeout>
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d00d      	beq.n	8009af6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ade:	2b04      	cmp	r3, #4
 8009ae0:	d107      	bne.n	8009af2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	681a      	ldr	r2, [r3, #0]
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009af0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009af2:	2301      	movs	r3, #1
 8009af4:	e005      	b.n	8009b02 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009af6:	893b      	ldrh	r3, [r7, #8]
 8009af8:	b2da      	uxtb	r2, r3
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009b00:	2300      	movs	r3, #0
}
 8009b02:	4618      	mov	r0, r3
 8009b04:	3718      	adds	r7, #24
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}
 8009b0a:	bf00      	nop
 8009b0c:	00010002 	.word	0x00010002

08009b10 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b088      	sub	sp, #32
 8009b14:	af02      	add	r7, sp, #8
 8009b16:	60f8      	str	r0, [r7, #12]
 8009b18:	4608      	mov	r0, r1
 8009b1a:	4611      	mov	r1, r2
 8009b1c:	461a      	mov	r2, r3
 8009b1e:	4603      	mov	r3, r0
 8009b20:	817b      	strh	r3, [r7, #10]
 8009b22:	460b      	mov	r3, r1
 8009b24:	813b      	strh	r3, [r7, #8]
 8009b26:	4613      	mov	r3, r2
 8009b28:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	681a      	ldr	r2, [r3, #0]
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009b38:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	681a      	ldr	r2, [r3, #0]
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009b48:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b4c:	9300      	str	r3, [sp, #0]
 8009b4e:	6a3b      	ldr	r3, [r7, #32]
 8009b50:	2200      	movs	r2, #0
 8009b52:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009b56:	68f8      	ldr	r0, [r7, #12]
 8009b58:	f000 f8c2 	bl	8009ce0 <I2C_WaitOnFlagUntilTimeout>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d00d      	beq.n	8009b7e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b70:	d103      	bne.n	8009b7a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009b78:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009b7a:	2303      	movs	r3, #3
 8009b7c:	e0aa      	b.n	8009cd4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009b7e:	897b      	ldrh	r3, [r7, #10]
 8009b80:	b2db      	uxtb	r3, r3
 8009b82:	461a      	mov	r2, r3
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8009b8c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b90:	6a3a      	ldr	r2, [r7, #32]
 8009b92:	4952      	ldr	r1, [pc, #328]	@ (8009cdc <I2C_RequestMemoryRead+0x1cc>)
 8009b94:	68f8      	ldr	r0, [r7, #12]
 8009b96:	f000 f91d 	bl	8009dd4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d001      	beq.n	8009ba4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	e097      	b.n	8009cd4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	617b      	str	r3, [r7, #20]
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	695b      	ldr	r3, [r3, #20]
 8009bae:	617b      	str	r3, [r7, #20]
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	699b      	ldr	r3, [r3, #24]
 8009bb6:	617b      	str	r3, [r7, #20]
 8009bb8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009bba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009bbc:	6a39      	ldr	r1, [r7, #32]
 8009bbe:	68f8      	ldr	r0, [r7, #12]
 8009bc0:	f000 f9a8 	bl	8009f14 <I2C_WaitOnTXEFlagUntilTimeout>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d00d      	beq.n	8009be6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bce:	2b04      	cmp	r3, #4
 8009bd0:	d107      	bne.n	8009be2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	681a      	ldr	r2, [r3, #0]
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009be0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009be2:	2301      	movs	r3, #1
 8009be4:	e076      	b.n	8009cd4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009be6:	88fb      	ldrh	r3, [r7, #6]
 8009be8:	2b01      	cmp	r3, #1
 8009bea:	d105      	bne.n	8009bf8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009bec:	893b      	ldrh	r3, [r7, #8]
 8009bee:	b2da      	uxtb	r2, r3
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	611a      	str	r2, [r3, #16]
 8009bf6:	e021      	b.n	8009c3c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009bf8:	893b      	ldrh	r3, [r7, #8]
 8009bfa:	0a1b      	lsrs	r3, r3, #8
 8009bfc:	b29b      	uxth	r3, r3
 8009bfe:	b2da      	uxtb	r2, r3
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009c06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c08:	6a39      	ldr	r1, [r7, #32]
 8009c0a:	68f8      	ldr	r0, [r7, #12]
 8009c0c:	f000 f982 	bl	8009f14 <I2C_WaitOnTXEFlagUntilTimeout>
 8009c10:	4603      	mov	r3, r0
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d00d      	beq.n	8009c32 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c1a:	2b04      	cmp	r3, #4
 8009c1c:	d107      	bne.n	8009c2e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	681a      	ldr	r2, [r3, #0]
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009c2c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009c2e:	2301      	movs	r3, #1
 8009c30:	e050      	b.n	8009cd4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009c32:	893b      	ldrh	r3, [r7, #8]
 8009c34:	b2da      	uxtb	r2, r3
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009c3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c3e:	6a39      	ldr	r1, [r7, #32]
 8009c40:	68f8      	ldr	r0, [r7, #12]
 8009c42:	f000 f967 	bl	8009f14 <I2C_WaitOnTXEFlagUntilTimeout>
 8009c46:	4603      	mov	r3, r0
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d00d      	beq.n	8009c68 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c50:	2b04      	cmp	r3, #4
 8009c52:	d107      	bne.n	8009c64 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	681a      	ldr	r2, [r3, #0]
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009c62:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009c64:	2301      	movs	r3, #1
 8009c66:	e035      	b.n	8009cd4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	681a      	ldr	r2, [r3, #0]
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009c76:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c7a:	9300      	str	r3, [sp, #0]
 8009c7c:	6a3b      	ldr	r3, [r7, #32]
 8009c7e:	2200      	movs	r2, #0
 8009c80:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009c84:	68f8      	ldr	r0, [r7, #12]
 8009c86:	f000 f82b 	bl	8009ce0 <I2C_WaitOnFlagUntilTimeout>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d00d      	beq.n	8009cac <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009c9e:	d103      	bne.n	8009ca8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009ca6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009ca8:	2303      	movs	r3, #3
 8009caa:	e013      	b.n	8009cd4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009cac:	897b      	ldrh	r3, [r7, #10]
 8009cae:	b2db      	uxtb	r3, r3
 8009cb0:	f043 0301 	orr.w	r3, r3, #1
 8009cb4:	b2da      	uxtb	r2, r3
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cbe:	6a3a      	ldr	r2, [r7, #32]
 8009cc0:	4906      	ldr	r1, [pc, #24]	@ (8009cdc <I2C_RequestMemoryRead+0x1cc>)
 8009cc2:	68f8      	ldr	r0, [r7, #12]
 8009cc4:	f000 f886 	bl	8009dd4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d001      	beq.n	8009cd2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8009cce:	2301      	movs	r3, #1
 8009cd0:	e000      	b.n	8009cd4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8009cd2:	2300      	movs	r3, #0
}
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	3718      	adds	r7, #24
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bd80      	pop	{r7, pc}
 8009cdc:	00010002 	.word	0x00010002

08009ce0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b084      	sub	sp, #16
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	60f8      	str	r0, [r7, #12]
 8009ce8:	60b9      	str	r1, [r7, #8]
 8009cea:	603b      	str	r3, [r7, #0]
 8009cec:	4613      	mov	r3, r2
 8009cee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009cf0:	e048      	b.n	8009d84 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cf8:	d044      	beq.n	8009d84 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009cfa:	f7fe fa59 	bl	80081b0 <HAL_GetTick>
 8009cfe:	4602      	mov	r2, r0
 8009d00:	69bb      	ldr	r3, [r7, #24]
 8009d02:	1ad3      	subs	r3, r2, r3
 8009d04:	683a      	ldr	r2, [r7, #0]
 8009d06:	429a      	cmp	r2, r3
 8009d08:	d302      	bcc.n	8009d10 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d139      	bne.n	8009d84 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	0c1b      	lsrs	r3, r3, #16
 8009d14:	b2db      	uxtb	r3, r3
 8009d16:	2b01      	cmp	r3, #1
 8009d18:	d10d      	bne.n	8009d36 <I2C_WaitOnFlagUntilTimeout+0x56>
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	695b      	ldr	r3, [r3, #20]
 8009d20:	43da      	mvns	r2, r3
 8009d22:	68bb      	ldr	r3, [r7, #8]
 8009d24:	4013      	ands	r3, r2
 8009d26:	b29b      	uxth	r3, r3
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	bf0c      	ite	eq
 8009d2c:	2301      	moveq	r3, #1
 8009d2e:	2300      	movne	r3, #0
 8009d30:	b2db      	uxtb	r3, r3
 8009d32:	461a      	mov	r2, r3
 8009d34:	e00c      	b.n	8009d50 <I2C_WaitOnFlagUntilTimeout+0x70>
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	699b      	ldr	r3, [r3, #24]
 8009d3c:	43da      	mvns	r2, r3
 8009d3e:	68bb      	ldr	r3, [r7, #8]
 8009d40:	4013      	ands	r3, r2
 8009d42:	b29b      	uxth	r3, r3
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	bf0c      	ite	eq
 8009d48:	2301      	moveq	r3, #1
 8009d4a:	2300      	movne	r3, #0
 8009d4c:	b2db      	uxtb	r3, r3
 8009d4e:	461a      	mov	r2, r3
 8009d50:	79fb      	ldrb	r3, [r7, #7]
 8009d52:	429a      	cmp	r2, r3
 8009d54:	d116      	bne.n	8009d84 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	2200      	movs	r2, #0
 8009d5a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	2220      	movs	r2, #32
 8009d60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	2200      	movs	r2, #0
 8009d68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d70:	f043 0220 	orr.w	r2, r3, #32
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009d80:	2301      	movs	r3, #1
 8009d82:	e023      	b.n	8009dcc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009d84:	68bb      	ldr	r3, [r7, #8]
 8009d86:	0c1b      	lsrs	r3, r3, #16
 8009d88:	b2db      	uxtb	r3, r3
 8009d8a:	2b01      	cmp	r3, #1
 8009d8c:	d10d      	bne.n	8009daa <I2C_WaitOnFlagUntilTimeout+0xca>
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	695b      	ldr	r3, [r3, #20]
 8009d94:	43da      	mvns	r2, r3
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	4013      	ands	r3, r2
 8009d9a:	b29b      	uxth	r3, r3
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	bf0c      	ite	eq
 8009da0:	2301      	moveq	r3, #1
 8009da2:	2300      	movne	r3, #0
 8009da4:	b2db      	uxtb	r3, r3
 8009da6:	461a      	mov	r2, r3
 8009da8:	e00c      	b.n	8009dc4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	699b      	ldr	r3, [r3, #24]
 8009db0:	43da      	mvns	r2, r3
 8009db2:	68bb      	ldr	r3, [r7, #8]
 8009db4:	4013      	ands	r3, r2
 8009db6:	b29b      	uxth	r3, r3
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	bf0c      	ite	eq
 8009dbc:	2301      	moveq	r3, #1
 8009dbe:	2300      	movne	r3, #0
 8009dc0:	b2db      	uxtb	r3, r3
 8009dc2:	461a      	mov	r2, r3
 8009dc4:	79fb      	ldrb	r3, [r7, #7]
 8009dc6:	429a      	cmp	r2, r3
 8009dc8:	d093      	beq.n	8009cf2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009dca:	2300      	movs	r3, #0
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	3710      	adds	r7, #16
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}

08009dd4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b084      	sub	sp, #16
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	60f8      	str	r0, [r7, #12]
 8009ddc:	60b9      	str	r1, [r7, #8]
 8009dde:	607a      	str	r2, [r7, #4]
 8009de0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009de2:	e071      	b.n	8009ec8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	695b      	ldr	r3, [r3, #20]
 8009dea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009dee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009df2:	d123      	bne.n	8009e3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	681a      	ldr	r2, [r3, #0]
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009e02:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009e0c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	2200      	movs	r2, #0
 8009e12:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	2220      	movs	r2, #32
 8009e18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	2200      	movs	r2, #0
 8009e20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e28:	f043 0204 	orr.w	r2, r3, #4
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	2200      	movs	r2, #0
 8009e34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8009e38:	2301      	movs	r3, #1
 8009e3a:	e067      	b.n	8009f0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e42:	d041      	beq.n	8009ec8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e44:	f7fe f9b4 	bl	80081b0 <HAL_GetTick>
 8009e48:	4602      	mov	r2, r0
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	1ad3      	subs	r3, r2, r3
 8009e4e:	687a      	ldr	r2, [r7, #4]
 8009e50:	429a      	cmp	r2, r3
 8009e52:	d302      	bcc.n	8009e5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d136      	bne.n	8009ec8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	0c1b      	lsrs	r3, r3, #16
 8009e5e:	b2db      	uxtb	r3, r3
 8009e60:	2b01      	cmp	r3, #1
 8009e62:	d10c      	bne.n	8009e7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	695b      	ldr	r3, [r3, #20]
 8009e6a:	43da      	mvns	r2, r3
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	4013      	ands	r3, r2
 8009e70:	b29b      	uxth	r3, r3
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	bf14      	ite	ne
 8009e76:	2301      	movne	r3, #1
 8009e78:	2300      	moveq	r3, #0
 8009e7a:	b2db      	uxtb	r3, r3
 8009e7c:	e00b      	b.n	8009e96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	699b      	ldr	r3, [r3, #24]
 8009e84:	43da      	mvns	r2, r3
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	4013      	ands	r3, r2
 8009e8a:	b29b      	uxth	r3, r3
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	bf14      	ite	ne
 8009e90:	2301      	movne	r3, #1
 8009e92:	2300      	moveq	r3, #0
 8009e94:	b2db      	uxtb	r3, r3
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d016      	beq.n	8009ec8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	2220      	movs	r2, #32
 8009ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	2200      	movs	r2, #0
 8009eac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009eb4:	f043 0220 	orr.w	r2, r3, #32
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	e021      	b.n	8009f0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	0c1b      	lsrs	r3, r3, #16
 8009ecc:	b2db      	uxtb	r3, r3
 8009ece:	2b01      	cmp	r3, #1
 8009ed0:	d10c      	bne.n	8009eec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	695b      	ldr	r3, [r3, #20]
 8009ed8:	43da      	mvns	r2, r3
 8009eda:	68bb      	ldr	r3, [r7, #8]
 8009edc:	4013      	ands	r3, r2
 8009ede:	b29b      	uxth	r3, r3
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	bf14      	ite	ne
 8009ee4:	2301      	movne	r3, #1
 8009ee6:	2300      	moveq	r3, #0
 8009ee8:	b2db      	uxtb	r3, r3
 8009eea:	e00b      	b.n	8009f04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	699b      	ldr	r3, [r3, #24]
 8009ef2:	43da      	mvns	r2, r3
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	4013      	ands	r3, r2
 8009ef8:	b29b      	uxth	r3, r3
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	bf14      	ite	ne
 8009efe:	2301      	movne	r3, #1
 8009f00:	2300      	moveq	r3, #0
 8009f02:	b2db      	uxtb	r3, r3
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	f47f af6d 	bne.w	8009de4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8009f0a:	2300      	movs	r3, #0
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	3710      	adds	r7, #16
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}

08009f14 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b084      	sub	sp, #16
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	60f8      	str	r0, [r7, #12]
 8009f1c:	60b9      	str	r1, [r7, #8]
 8009f1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009f20:	e034      	b.n	8009f8c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009f22:	68f8      	ldr	r0, [r7, #12]
 8009f24:	f000 f8e3 	bl	800a0ee <I2C_IsAcknowledgeFailed>
 8009f28:	4603      	mov	r3, r0
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d001      	beq.n	8009f32 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009f2e:	2301      	movs	r3, #1
 8009f30:	e034      	b.n	8009f9c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f38:	d028      	beq.n	8009f8c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f3a:	f7fe f939 	bl	80081b0 <HAL_GetTick>
 8009f3e:	4602      	mov	r2, r0
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	1ad3      	subs	r3, r2, r3
 8009f44:	68ba      	ldr	r2, [r7, #8]
 8009f46:	429a      	cmp	r2, r3
 8009f48:	d302      	bcc.n	8009f50 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d11d      	bne.n	8009f8c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	695b      	ldr	r3, [r3, #20]
 8009f56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f5a:	2b80      	cmp	r3, #128	@ 0x80
 8009f5c:	d016      	beq.n	8009f8c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	2200      	movs	r2, #0
 8009f62:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	2220      	movs	r2, #32
 8009f68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	2200      	movs	r2, #0
 8009f70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f78:	f043 0220 	orr.w	r2, r3, #32
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	2200      	movs	r2, #0
 8009f84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009f88:	2301      	movs	r3, #1
 8009f8a:	e007      	b.n	8009f9c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	695b      	ldr	r3, [r3, #20]
 8009f92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f96:	2b80      	cmp	r3, #128	@ 0x80
 8009f98:	d1c3      	bne.n	8009f22 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009f9a:	2300      	movs	r3, #0
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	3710      	adds	r7, #16
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}

08009fa4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b084      	sub	sp, #16
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	60f8      	str	r0, [r7, #12]
 8009fac:	60b9      	str	r1, [r7, #8]
 8009fae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009fb0:	e034      	b.n	800a01c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009fb2:	68f8      	ldr	r0, [r7, #12]
 8009fb4:	f000 f89b 	bl	800a0ee <I2C_IsAcknowledgeFailed>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d001      	beq.n	8009fc2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	e034      	b.n	800a02c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009fc2:	68bb      	ldr	r3, [r7, #8]
 8009fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fc8:	d028      	beq.n	800a01c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009fca:	f7fe f8f1 	bl	80081b0 <HAL_GetTick>
 8009fce:	4602      	mov	r2, r0
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	1ad3      	subs	r3, r2, r3
 8009fd4:	68ba      	ldr	r2, [r7, #8]
 8009fd6:	429a      	cmp	r2, r3
 8009fd8:	d302      	bcc.n	8009fe0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009fda:	68bb      	ldr	r3, [r7, #8]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d11d      	bne.n	800a01c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	695b      	ldr	r3, [r3, #20]
 8009fe6:	f003 0304 	and.w	r3, r3, #4
 8009fea:	2b04      	cmp	r3, #4
 8009fec:	d016      	beq.n	800a01c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	2220      	movs	r2, #32
 8009ff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	2200      	movs	r2, #0
 800a000:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a008:	f043 0220 	orr.w	r2, r3, #32
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	2200      	movs	r2, #0
 800a014:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800a018:	2301      	movs	r3, #1
 800a01a:	e007      	b.n	800a02c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	695b      	ldr	r3, [r3, #20]
 800a022:	f003 0304 	and.w	r3, r3, #4
 800a026:	2b04      	cmp	r3, #4
 800a028:	d1c3      	bne.n	8009fb2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a02a:	2300      	movs	r3, #0
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	3710      	adds	r7, #16
 800a030:	46bd      	mov	sp, r7
 800a032:	bd80      	pop	{r7, pc}

0800a034 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b084      	sub	sp, #16
 800a038:	af00      	add	r7, sp, #0
 800a03a:	60f8      	str	r0, [r7, #12]
 800a03c:	60b9      	str	r1, [r7, #8]
 800a03e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a040:	e049      	b.n	800a0d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	695b      	ldr	r3, [r3, #20]
 800a048:	f003 0310 	and.w	r3, r3, #16
 800a04c:	2b10      	cmp	r3, #16
 800a04e:	d119      	bne.n	800a084 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	f06f 0210 	mvn.w	r2, #16
 800a058:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	2200      	movs	r2, #0
 800a05e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	2220      	movs	r2, #32
 800a064:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	2200      	movs	r2, #0
 800a06c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	2200      	movs	r2, #0
 800a07c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800a080:	2301      	movs	r3, #1
 800a082:	e030      	b.n	800a0e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a084:	f7fe f894 	bl	80081b0 <HAL_GetTick>
 800a088:	4602      	mov	r2, r0
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	1ad3      	subs	r3, r2, r3
 800a08e:	68ba      	ldr	r2, [r7, #8]
 800a090:	429a      	cmp	r2, r3
 800a092:	d302      	bcc.n	800a09a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d11d      	bne.n	800a0d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	695b      	ldr	r3, [r3, #20]
 800a0a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0a4:	2b40      	cmp	r3, #64	@ 0x40
 800a0a6:	d016      	beq.n	800a0d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	2220      	movs	r2, #32
 800a0b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0c2:	f043 0220 	orr.w	r2, r3, #32
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800a0d2:	2301      	movs	r3, #1
 800a0d4:	e007      	b.n	800a0e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	695b      	ldr	r3, [r3, #20]
 800a0dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0e0:	2b40      	cmp	r3, #64	@ 0x40
 800a0e2:	d1ae      	bne.n	800a042 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a0e4:	2300      	movs	r3, #0
}
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	3710      	adds	r7, #16
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}

0800a0ee <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a0ee:	b480      	push	{r7}
 800a0f0:	b083      	sub	sp, #12
 800a0f2:	af00      	add	r7, sp, #0
 800a0f4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	695b      	ldr	r3, [r3, #20]
 800a0fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a100:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a104:	d11b      	bne.n	800a13e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800a10e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2200      	movs	r2, #0
 800a114:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2220      	movs	r2, #32
 800a11a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2200      	movs	r2, #0
 800a122:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a12a:	f043 0204 	orr.w	r2, r3, #4
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2200      	movs	r2, #0
 800a136:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800a13a:	2301      	movs	r3, #1
 800a13c:	e000      	b.n	800a140 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a13e:	2300      	movs	r3, #0
}
 800a140:	4618      	mov	r0, r3
 800a142:	370c      	adds	r7, #12
 800a144:	46bd      	mov	sp, r7
 800a146:	bc80      	pop	{r7}
 800a148:	4770      	bx	lr
	...

0800a14c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b086      	sub	sp, #24
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d101      	bne.n	800a15e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a15a:	2301      	movs	r3, #1
 800a15c:	e272      	b.n	800a644 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f003 0301 	and.w	r3, r3, #1
 800a166:	2b00      	cmp	r3, #0
 800a168:	f000 8087 	beq.w	800a27a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a16c:	4b92      	ldr	r3, [pc, #584]	@ (800a3b8 <HAL_RCC_OscConfig+0x26c>)
 800a16e:	685b      	ldr	r3, [r3, #4]
 800a170:	f003 030c 	and.w	r3, r3, #12
 800a174:	2b04      	cmp	r3, #4
 800a176:	d00c      	beq.n	800a192 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a178:	4b8f      	ldr	r3, [pc, #572]	@ (800a3b8 <HAL_RCC_OscConfig+0x26c>)
 800a17a:	685b      	ldr	r3, [r3, #4]
 800a17c:	f003 030c 	and.w	r3, r3, #12
 800a180:	2b08      	cmp	r3, #8
 800a182:	d112      	bne.n	800a1aa <HAL_RCC_OscConfig+0x5e>
 800a184:	4b8c      	ldr	r3, [pc, #560]	@ (800a3b8 <HAL_RCC_OscConfig+0x26c>)
 800a186:	685b      	ldr	r3, [r3, #4]
 800a188:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a18c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a190:	d10b      	bne.n	800a1aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a192:	4b89      	ldr	r3, [pc, #548]	@ (800a3b8 <HAL_RCC_OscConfig+0x26c>)
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d06c      	beq.n	800a278 <HAL_RCC_OscConfig+0x12c>
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	685b      	ldr	r3, [r3, #4]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d168      	bne.n	800a278 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a1a6:	2301      	movs	r3, #1
 800a1a8:	e24c      	b.n	800a644 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	685b      	ldr	r3, [r3, #4]
 800a1ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a1b2:	d106      	bne.n	800a1c2 <HAL_RCC_OscConfig+0x76>
 800a1b4:	4b80      	ldr	r3, [pc, #512]	@ (800a3b8 <HAL_RCC_OscConfig+0x26c>)
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	4a7f      	ldr	r2, [pc, #508]	@ (800a3b8 <HAL_RCC_OscConfig+0x26c>)
 800a1ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a1be:	6013      	str	r3, [r2, #0]
 800a1c0:	e02e      	b.n	800a220 <HAL_RCC_OscConfig+0xd4>
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	685b      	ldr	r3, [r3, #4]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d10c      	bne.n	800a1e4 <HAL_RCC_OscConfig+0x98>
 800a1ca:	4b7b      	ldr	r3, [pc, #492]	@ (800a3b8 <HAL_RCC_OscConfig+0x26c>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	4a7a      	ldr	r2, [pc, #488]	@ (800a3b8 <HAL_RCC_OscConfig+0x26c>)
 800a1d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a1d4:	6013      	str	r3, [r2, #0]
 800a1d6:	4b78      	ldr	r3, [pc, #480]	@ (800a3b8 <HAL_RCC_OscConfig+0x26c>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	4a77      	ldr	r2, [pc, #476]	@ (800a3b8 <HAL_RCC_OscConfig+0x26c>)
 800a1dc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a1e0:	6013      	str	r3, [r2, #0]
 800a1e2:	e01d      	b.n	800a220 <HAL_RCC_OscConfig+0xd4>
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	685b      	ldr	r3, [r3, #4]
 800a1e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a1ec:	d10c      	bne.n	800a208 <HAL_RCC_OscConfig+0xbc>
 800a1ee:	4b72      	ldr	r3, [pc, #456]	@ (800a3b8 <HAL_RCC_OscConfig+0x26c>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	4a71      	ldr	r2, [pc, #452]	@ (800a3b8 <HAL_RCC_OscConfig+0x26c>)
 800a1f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a1f8:	6013      	str	r3, [r2, #0]
 800a1fa:	4b6f      	ldr	r3, [pc, #444]	@ (800a3b8 <HAL_RCC_OscConfig+0x26c>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	4a6e      	ldr	r2, [pc, #440]	@ (800a3b8 <HAL_RCC_OscConfig+0x26c>)
 800a200:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a204:	6013      	str	r3, [r2, #0]
 800a206:	e00b      	b.n	800a220 <HAL_RCC_OscConfig+0xd4>
 800a208:	4b6b      	ldr	r3, [pc, #428]	@ (800a3b8 <HAL_RCC_OscConfig+0x26c>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	4a6a      	ldr	r2, [pc, #424]	@ (800a3b8 <HAL_RCC_OscConfig+0x26c>)
 800a20e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a212:	6013      	str	r3, [r2, #0]
 800a214:	4b68      	ldr	r3, [pc, #416]	@ (800a3b8 <HAL_RCC_OscConfig+0x26c>)
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	4a67      	ldr	r2, [pc, #412]	@ (800a3b8 <HAL_RCC_OscConfig+0x26c>)
 800a21a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a21e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	685b      	ldr	r3, [r3, #4]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d013      	beq.n	800a250 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a228:	f7fd ffc2 	bl	80081b0 <HAL_GetTick>
 800a22c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a22e:	e008      	b.n	800a242 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a230:	f7fd ffbe 	bl	80081b0 <HAL_GetTick>
 800a234:	4602      	mov	r2, r0
 800a236:	693b      	ldr	r3, [r7, #16]
 800a238:	1ad3      	subs	r3, r2, r3
 800a23a:	2b64      	cmp	r3, #100	@ 0x64
 800a23c:	d901      	bls.n	800a242 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a23e:	2303      	movs	r3, #3
 800a240:	e200      	b.n	800a644 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a242:	4b5d      	ldr	r3, [pc, #372]	@ (800a3b8 <HAL_RCC_OscConfig+0x26c>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d0f0      	beq.n	800a230 <HAL_RCC_OscConfig+0xe4>
 800a24e:	e014      	b.n	800a27a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a250:	f7fd ffae 	bl	80081b0 <HAL_GetTick>
 800a254:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a256:	e008      	b.n	800a26a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a258:	f7fd ffaa 	bl	80081b0 <HAL_GetTick>
 800a25c:	4602      	mov	r2, r0
 800a25e:	693b      	ldr	r3, [r7, #16]
 800a260:	1ad3      	subs	r3, r2, r3
 800a262:	2b64      	cmp	r3, #100	@ 0x64
 800a264:	d901      	bls.n	800a26a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a266:	2303      	movs	r3, #3
 800a268:	e1ec      	b.n	800a644 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a26a:	4b53      	ldr	r3, [pc, #332]	@ (800a3b8 <HAL_RCC_OscConfig+0x26c>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a272:	2b00      	cmp	r3, #0
 800a274:	d1f0      	bne.n	800a258 <HAL_RCC_OscConfig+0x10c>
 800a276:	e000      	b.n	800a27a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a278:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	f003 0302 	and.w	r3, r3, #2
 800a282:	2b00      	cmp	r3, #0
 800a284:	d063      	beq.n	800a34e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a286:	4b4c      	ldr	r3, [pc, #304]	@ (800a3b8 <HAL_RCC_OscConfig+0x26c>)
 800a288:	685b      	ldr	r3, [r3, #4]
 800a28a:	f003 030c 	and.w	r3, r3, #12
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d00b      	beq.n	800a2aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800a292:	4b49      	ldr	r3, [pc, #292]	@ (800a3b8 <HAL_RCC_OscConfig+0x26c>)
 800a294:	685b      	ldr	r3, [r3, #4]
 800a296:	f003 030c 	and.w	r3, r3, #12
 800a29a:	2b08      	cmp	r3, #8
 800a29c:	d11c      	bne.n	800a2d8 <HAL_RCC_OscConfig+0x18c>
 800a29e:	4b46      	ldr	r3, [pc, #280]	@ (800a3b8 <HAL_RCC_OscConfig+0x26c>)
 800a2a0:	685b      	ldr	r3, [r3, #4]
 800a2a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d116      	bne.n	800a2d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a2aa:	4b43      	ldr	r3, [pc, #268]	@ (800a3b8 <HAL_RCC_OscConfig+0x26c>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	f003 0302 	and.w	r3, r3, #2
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d005      	beq.n	800a2c2 <HAL_RCC_OscConfig+0x176>
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	691b      	ldr	r3, [r3, #16]
 800a2ba:	2b01      	cmp	r3, #1
 800a2bc:	d001      	beq.n	800a2c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800a2be:	2301      	movs	r3, #1
 800a2c0:	e1c0      	b.n	800a644 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a2c2:	4b3d      	ldr	r3, [pc, #244]	@ (800a3b8 <HAL_RCC_OscConfig+0x26c>)
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	695b      	ldr	r3, [r3, #20]
 800a2ce:	00db      	lsls	r3, r3, #3
 800a2d0:	4939      	ldr	r1, [pc, #228]	@ (800a3b8 <HAL_RCC_OscConfig+0x26c>)
 800a2d2:	4313      	orrs	r3, r2
 800a2d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a2d6:	e03a      	b.n	800a34e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	691b      	ldr	r3, [r3, #16]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d020      	beq.n	800a322 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a2e0:	4b36      	ldr	r3, [pc, #216]	@ (800a3bc <HAL_RCC_OscConfig+0x270>)
 800a2e2:	2201      	movs	r2, #1
 800a2e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a2e6:	f7fd ff63 	bl	80081b0 <HAL_GetTick>
 800a2ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a2ec:	e008      	b.n	800a300 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a2ee:	f7fd ff5f 	bl	80081b0 <HAL_GetTick>
 800a2f2:	4602      	mov	r2, r0
 800a2f4:	693b      	ldr	r3, [r7, #16]
 800a2f6:	1ad3      	subs	r3, r2, r3
 800a2f8:	2b02      	cmp	r3, #2
 800a2fa:	d901      	bls.n	800a300 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800a2fc:	2303      	movs	r3, #3
 800a2fe:	e1a1      	b.n	800a644 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a300:	4b2d      	ldr	r3, [pc, #180]	@ (800a3b8 <HAL_RCC_OscConfig+0x26c>)
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	f003 0302 	and.w	r3, r3, #2
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d0f0      	beq.n	800a2ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a30c:	4b2a      	ldr	r3, [pc, #168]	@ (800a3b8 <HAL_RCC_OscConfig+0x26c>)
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	695b      	ldr	r3, [r3, #20]
 800a318:	00db      	lsls	r3, r3, #3
 800a31a:	4927      	ldr	r1, [pc, #156]	@ (800a3b8 <HAL_RCC_OscConfig+0x26c>)
 800a31c:	4313      	orrs	r3, r2
 800a31e:	600b      	str	r3, [r1, #0]
 800a320:	e015      	b.n	800a34e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a322:	4b26      	ldr	r3, [pc, #152]	@ (800a3bc <HAL_RCC_OscConfig+0x270>)
 800a324:	2200      	movs	r2, #0
 800a326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a328:	f7fd ff42 	bl	80081b0 <HAL_GetTick>
 800a32c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a32e:	e008      	b.n	800a342 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a330:	f7fd ff3e 	bl	80081b0 <HAL_GetTick>
 800a334:	4602      	mov	r2, r0
 800a336:	693b      	ldr	r3, [r7, #16]
 800a338:	1ad3      	subs	r3, r2, r3
 800a33a:	2b02      	cmp	r3, #2
 800a33c:	d901      	bls.n	800a342 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800a33e:	2303      	movs	r3, #3
 800a340:	e180      	b.n	800a644 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a342:	4b1d      	ldr	r3, [pc, #116]	@ (800a3b8 <HAL_RCC_OscConfig+0x26c>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	f003 0302 	and.w	r3, r3, #2
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d1f0      	bne.n	800a330 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f003 0308 	and.w	r3, r3, #8
 800a356:	2b00      	cmp	r3, #0
 800a358:	d03a      	beq.n	800a3d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	699b      	ldr	r3, [r3, #24]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d019      	beq.n	800a396 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a362:	4b17      	ldr	r3, [pc, #92]	@ (800a3c0 <HAL_RCC_OscConfig+0x274>)
 800a364:	2201      	movs	r2, #1
 800a366:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a368:	f7fd ff22 	bl	80081b0 <HAL_GetTick>
 800a36c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a36e:	e008      	b.n	800a382 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a370:	f7fd ff1e 	bl	80081b0 <HAL_GetTick>
 800a374:	4602      	mov	r2, r0
 800a376:	693b      	ldr	r3, [r7, #16]
 800a378:	1ad3      	subs	r3, r2, r3
 800a37a:	2b02      	cmp	r3, #2
 800a37c:	d901      	bls.n	800a382 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800a37e:	2303      	movs	r3, #3
 800a380:	e160      	b.n	800a644 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a382:	4b0d      	ldr	r3, [pc, #52]	@ (800a3b8 <HAL_RCC_OscConfig+0x26c>)
 800a384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a386:	f003 0302 	and.w	r3, r3, #2
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d0f0      	beq.n	800a370 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800a38e:	2001      	movs	r0, #1
 800a390:	f000 faba 	bl	800a908 <RCC_Delay>
 800a394:	e01c      	b.n	800a3d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a396:	4b0a      	ldr	r3, [pc, #40]	@ (800a3c0 <HAL_RCC_OscConfig+0x274>)
 800a398:	2200      	movs	r2, #0
 800a39a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a39c:	f7fd ff08 	bl	80081b0 <HAL_GetTick>
 800a3a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a3a2:	e00f      	b.n	800a3c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a3a4:	f7fd ff04 	bl	80081b0 <HAL_GetTick>
 800a3a8:	4602      	mov	r2, r0
 800a3aa:	693b      	ldr	r3, [r7, #16]
 800a3ac:	1ad3      	subs	r3, r2, r3
 800a3ae:	2b02      	cmp	r3, #2
 800a3b0:	d908      	bls.n	800a3c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800a3b2:	2303      	movs	r3, #3
 800a3b4:	e146      	b.n	800a644 <HAL_RCC_OscConfig+0x4f8>
 800a3b6:	bf00      	nop
 800a3b8:	40021000 	.word	0x40021000
 800a3bc:	42420000 	.word	0x42420000
 800a3c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a3c4:	4b92      	ldr	r3, [pc, #584]	@ (800a610 <HAL_RCC_OscConfig+0x4c4>)
 800a3c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3c8:	f003 0302 	and.w	r3, r3, #2
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d1e9      	bne.n	800a3a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	f003 0304 	and.w	r3, r3, #4
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	f000 80a6 	beq.w	800a52a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a3e2:	4b8b      	ldr	r3, [pc, #556]	@ (800a610 <HAL_RCC_OscConfig+0x4c4>)
 800a3e4:	69db      	ldr	r3, [r3, #28]
 800a3e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d10d      	bne.n	800a40a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a3ee:	4b88      	ldr	r3, [pc, #544]	@ (800a610 <HAL_RCC_OscConfig+0x4c4>)
 800a3f0:	69db      	ldr	r3, [r3, #28]
 800a3f2:	4a87      	ldr	r2, [pc, #540]	@ (800a610 <HAL_RCC_OscConfig+0x4c4>)
 800a3f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a3f8:	61d3      	str	r3, [r2, #28]
 800a3fa:	4b85      	ldr	r3, [pc, #532]	@ (800a610 <HAL_RCC_OscConfig+0x4c4>)
 800a3fc:	69db      	ldr	r3, [r3, #28]
 800a3fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a402:	60bb      	str	r3, [r7, #8]
 800a404:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a406:	2301      	movs	r3, #1
 800a408:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a40a:	4b82      	ldr	r3, [pc, #520]	@ (800a614 <HAL_RCC_OscConfig+0x4c8>)
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a412:	2b00      	cmp	r3, #0
 800a414:	d118      	bne.n	800a448 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a416:	4b7f      	ldr	r3, [pc, #508]	@ (800a614 <HAL_RCC_OscConfig+0x4c8>)
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	4a7e      	ldr	r2, [pc, #504]	@ (800a614 <HAL_RCC_OscConfig+0x4c8>)
 800a41c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a420:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a422:	f7fd fec5 	bl	80081b0 <HAL_GetTick>
 800a426:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a428:	e008      	b.n	800a43c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a42a:	f7fd fec1 	bl	80081b0 <HAL_GetTick>
 800a42e:	4602      	mov	r2, r0
 800a430:	693b      	ldr	r3, [r7, #16]
 800a432:	1ad3      	subs	r3, r2, r3
 800a434:	2b64      	cmp	r3, #100	@ 0x64
 800a436:	d901      	bls.n	800a43c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800a438:	2303      	movs	r3, #3
 800a43a:	e103      	b.n	800a644 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a43c:	4b75      	ldr	r3, [pc, #468]	@ (800a614 <HAL_RCC_OscConfig+0x4c8>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a444:	2b00      	cmp	r3, #0
 800a446:	d0f0      	beq.n	800a42a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	68db      	ldr	r3, [r3, #12]
 800a44c:	2b01      	cmp	r3, #1
 800a44e:	d106      	bne.n	800a45e <HAL_RCC_OscConfig+0x312>
 800a450:	4b6f      	ldr	r3, [pc, #444]	@ (800a610 <HAL_RCC_OscConfig+0x4c4>)
 800a452:	6a1b      	ldr	r3, [r3, #32]
 800a454:	4a6e      	ldr	r2, [pc, #440]	@ (800a610 <HAL_RCC_OscConfig+0x4c4>)
 800a456:	f043 0301 	orr.w	r3, r3, #1
 800a45a:	6213      	str	r3, [r2, #32]
 800a45c:	e02d      	b.n	800a4ba <HAL_RCC_OscConfig+0x36e>
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	68db      	ldr	r3, [r3, #12]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d10c      	bne.n	800a480 <HAL_RCC_OscConfig+0x334>
 800a466:	4b6a      	ldr	r3, [pc, #424]	@ (800a610 <HAL_RCC_OscConfig+0x4c4>)
 800a468:	6a1b      	ldr	r3, [r3, #32]
 800a46a:	4a69      	ldr	r2, [pc, #420]	@ (800a610 <HAL_RCC_OscConfig+0x4c4>)
 800a46c:	f023 0301 	bic.w	r3, r3, #1
 800a470:	6213      	str	r3, [r2, #32]
 800a472:	4b67      	ldr	r3, [pc, #412]	@ (800a610 <HAL_RCC_OscConfig+0x4c4>)
 800a474:	6a1b      	ldr	r3, [r3, #32]
 800a476:	4a66      	ldr	r2, [pc, #408]	@ (800a610 <HAL_RCC_OscConfig+0x4c4>)
 800a478:	f023 0304 	bic.w	r3, r3, #4
 800a47c:	6213      	str	r3, [r2, #32]
 800a47e:	e01c      	b.n	800a4ba <HAL_RCC_OscConfig+0x36e>
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	68db      	ldr	r3, [r3, #12]
 800a484:	2b05      	cmp	r3, #5
 800a486:	d10c      	bne.n	800a4a2 <HAL_RCC_OscConfig+0x356>
 800a488:	4b61      	ldr	r3, [pc, #388]	@ (800a610 <HAL_RCC_OscConfig+0x4c4>)
 800a48a:	6a1b      	ldr	r3, [r3, #32]
 800a48c:	4a60      	ldr	r2, [pc, #384]	@ (800a610 <HAL_RCC_OscConfig+0x4c4>)
 800a48e:	f043 0304 	orr.w	r3, r3, #4
 800a492:	6213      	str	r3, [r2, #32]
 800a494:	4b5e      	ldr	r3, [pc, #376]	@ (800a610 <HAL_RCC_OscConfig+0x4c4>)
 800a496:	6a1b      	ldr	r3, [r3, #32]
 800a498:	4a5d      	ldr	r2, [pc, #372]	@ (800a610 <HAL_RCC_OscConfig+0x4c4>)
 800a49a:	f043 0301 	orr.w	r3, r3, #1
 800a49e:	6213      	str	r3, [r2, #32]
 800a4a0:	e00b      	b.n	800a4ba <HAL_RCC_OscConfig+0x36e>
 800a4a2:	4b5b      	ldr	r3, [pc, #364]	@ (800a610 <HAL_RCC_OscConfig+0x4c4>)
 800a4a4:	6a1b      	ldr	r3, [r3, #32]
 800a4a6:	4a5a      	ldr	r2, [pc, #360]	@ (800a610 <HAL_RCC_OscConfig+0x4c4>)
 800a4a8:	f023 0301 	bic.w	r3, r3, #1
 800a4ac:	6213      	str	r3, [r2, #32]
 800a4ae:	4b58      	ldr	r3, [pc, #352]	@ (800a610 <HAL_RCC_OscConfig+0x4c4>)
 800a4b0:	6a1b      	ldr	r3, [r3, #32]
 800a4b2:	4a57      	ldr	r2, [pc, #348]	@ (800a610 <HAL_RCC_OscConfig+0x4c4>)
 800a4b4:	f023 0304 	bic.w	r3, r3, #4
 800a4b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	68db      	ldr	r3, [r3, #12]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d015      	beq.n	800a4ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a4c2:	f7fd fe75 	bl	80081b0 <HAL_GetTick>
 800a4c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a4c8:	e00a      	b.n	800a4e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a4ca:	f7fd fe71 	bl	80081b0 <HAL_GetTick>
 800a4ce:	4602      	mov	r2, r0
 800a4d0:	693b      	ldr	r3, [r7, #16]
 800a4d2:	1ad3      	subs	r3, r2, r3
 800a4d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a4d8:	4293      	cmp	r3, r2
 800a4da:	d901      	bls.n	800a4e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800a4dc:	2303      	movs	r3, #3
 800a4de:	e0b1      	b.n	800a644 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a4e0:	4b4b      	ldr	r3, [pc, #300]	@ (800a610 <HAL_RCC_OscConfig+0x4c4>)
 800a4e2:	6a1b      	ldr	r3, [r3, #32]
 800a4e4:	f003 0302 	and.w	r3, r3, #2
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d0ee      	beq.n	800a4ca <HAL_RCC_OscConfig+0x37e>
 800a4ec:	e014      	b.n	800a518 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a4ee:	f7fd fe5f 	bl	80081b0 <HAL_GetTick>
 800a4f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a4f4:	e00a      	b.n	800a50c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a4f6:	f7fd fe5b 	bl	80081b0 <HAL_GetTick>
 800a4fa:	4602      	mov	r2, r0
 800a4fc:	693b      	ldr	r3, [r7, #16]
 800a4fe:	1ad3      	subs	r3, r2, r3
 800a500:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a504:	4293      	cmp	r3, r2
 800a506:	d901      	bls.n	800a50c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800a508:	2303      	movs	r3, #3
 800a50a:	e09b      	b.n	800a644 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a50c:	4b40      	ldr	r3, [pc, #256]	@ (800a610 <HAL_RCC_OscConfig+0x4c4>)
 800a50e:	6a1b      	ldr	r3, [r3, #32]
 800a510:	f003 0302 	and.w	r3, r3, #2
 800a514:	2b00      	cmp	r3, #0
 800a516:	d1ee      	bne.n	800a4f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800a518:	7dfb      	ldrb	r3, [r7, #23]
 800a51a:	2b01      	cmp	r3, #1
 800a51c:	d105      	bne.n	800a52a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a51e:	4b3c      	ldr	r3, [pc, #240]	@ (800a610 <HAL_RCC_OscConfig+0x4c4>)
 800a520:	69db      	ldr	r3, [r3, #28]
 800a522:	4a3b      	ldr	r2, [pc, #236]	@ (800a610 <HAL_RCC_OscConfig+0x4c4>)
 800a524:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a528:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	69db      	ldr	r3, [r3, #28]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	f000 8087 	beq.w	800a642 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a534:	4b36      	ldr	r3, [pc, #216]	@ (800a610 <HAL_RCC_OscConfig+0x4c4>)
 800a536:	685b      	ldr	r3, [r3, #4]
 800a538:	f003 030c 	and.w	r3, r3, #12
 800a53c:	2b08      	cmp	r3, #8
 800a53e:	d061      	beq.n	800a604 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	69db      	ldr	r3, [r3, #28]
 800a544:	2b02      	cmp	r3, #2
 800a546:	d146      	bne.n	800a5d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a548:	4b33      	ldr	r3, [pc, #204]	@ (800a618 <HAL_RCC_OscConfig+0x4cc>)
 800a54a:	2200      	movs	r2, #0
 800a54c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a54e:	f7fd fe2f 	bl	80081b0 <HAL_GetTick>
 800a552:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a554:	e008      	b.n	800a568 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a556:	f7fd fe2b 	bl	80081b0 <HAL_GetTick>
 800a55a:	4602      	mov	r2, r0
 800a55c:	693b      	ldr	r3, [r7, #16]
 800a55e:	1ad3      	subs	r3, r2, r3
 800a560:	2b02      	cmp	r3, #2
 800a562:	d901      	bls.n	800a568 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800a564:	2303      	movs	r3, #3
 800a566:	e06d      	b.n	800a644 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a568:	4b29      	ldr	r3, [pc, #164]	@ (800a610 <HAL_RCC_OscConfig+0x4c4>)
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a570:	2b00      	cmp	r3, #0
 800a572:	d1f0      	bne.n	800a556 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	6a1b      	ldr	r3, [r3, #32]
 800a578:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a57c:	d108      	bne.n	800a590 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800a57e:	4b24      	ldr	r3, [pc, #144]	@ (800a610 <HAL_RCC_OscConfig+0x4c4>)
 800a580:	685b      	ldr	r3, [r3, #4]
 800a582:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	689b      	ldr	r3, [r3, #8]
 800a58a:	4921      	ldr	r1, [pc, #132]	@ (800a610 <HAL_RCC_OscConfig+0x4c4>)
 800a58c:	4313      	orrs	r3, r2
 800a58e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a590:	4b1f      	ldr	r3, [pc, #124]	@ (800a610 <HAL_RCC_OscConfig+0x4c4>)
 800a592:	685b      	ldr	r3, [r3, #4]
 800a594:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	6a19      	ldr	r1, [r3, #32]
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5a0:	430b      	orrs	r3, r1
 800a5a2:	491b      	ldr	r1, [pc, #108]	@ (800a610 <HAL_RCC_OscConfig+0x4c4>)
 800a5a4:	4313      	orrs	r3, r2
 800a5a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a5a8:	4b1b      	ldr	r3, [pc, #108]	@ (800a618 <HAL_RCC_OscConfig+0x4cc>)
 800a5aa:	2201      	movs	r2, #1
 800a5ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a5ae:	f7fd fdff 	bl	80081b0 <HAL_GetTick>
 800a5b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a5b4:	e008      	b.n	800a5c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a5b6:	f7fd fdfb 	bl	80081b0 <HAL_GetTick>
 800a5ba:	4602      	mov	r2, r0
 800a5bc:	693b      	ldr	r3, [r7, #16]
 800a5be:	1ad3      	subs	r3, r2, r3
 800a5c0:	2b02      	cmp	r3, #2
 800a5c2:	d901      	bls.n	800a5c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800a5c4:	2303      	movs	r3, #3
 800a5c6:	e03d      	b.n	800a644 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a5c8:	4b11      	ldr	r3, [pc, #68]	@ (800a610 <HAL_RCC_OscConfig+0x4c4>)
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d0f0      	beq.n	800a5b6 <HAL_RCC_OscConfig+0x46a>
 800a5d4:	e035      	b.n	800a642 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a5d6:	4b10      	ldr	r3, [pc, #64]	@ (800a618 <HAL_RCC_OscConfig+0x4cc>)
 800a5d8:	2200      	movs	r2, #0
 800a5da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a5dc:	f7fd fde8 	bl	80081b0 <HAL_GetTick>
 800a5e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a5e2:	e008      	b.n	800a5f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a5e4:	f7fd fde4 	bl	80081b0 <HAL_GetTick>
 800a5e8:	4602      	mov	r2, r0
 800a5ea:	693b      	ldr	r3, [r7, #16]
 800a5ec:	1ad3      	subs	r3, r2, r3
 800a5ee:	2b02      	cmp	r3, #2
 800a5f0:	d901      	bls.n	800a5f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800a5f2:	2303      	movs	r3, #3
 800a5f4:	e026      	b.n	800a644 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a5f6:	4b06      	ldr	r3, [pc, #24]	@ (800a610 <HAL_RCC_OscConfig+0x4c4>)
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d1f0      	bne.n	800a5e4 <HAL_RCC_OscConfig+0x498>
 800a602:	e01e      	b.n	800a642 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	69db      	ldr	r3, [r3, #28]
 800a608:	2b01      	cmp	r3, #1
 800a60a:	d107      	bne.n	800a61c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800a60c:	2301      	movs	r3, #1
 800a60e:	e019      	b.n	800a644 <HAL_RCC_OscConfig+0x4f8>
 800a610:	40021000 	.word	0x40021000
 800a614:	40007000 	.word	0x40007000
 800a618:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800a61c:	4b0b      	ldr	r3, [pc, #44]	@ (800a64c <HAL_RCC_OscConfig+0x500>)
 800a61e:	685b      	ldr	r3, [r3, #4]
 800a620:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	6a1b      	ldr	r3, [r3, #32]
 800a62c:	429a      	cmp	r2, r3
 800a62e:	d106      	bne.n	800a63e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a63a:	429a      	cmp	r2, r3
 800a63c:	d001      	beq.n	800a642 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800a63e:	2301      	movs	r3, #1
 800a640:	e000      	b.n	800a644 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800a642:	2300      	movs	r3, #0
}
 800a644:	4618      	mov	r0, r3
 800a646:	3718      	adds	r7, #24
 800a648:	46bd      	mov	sp, r7
 800a64a:	bd80      	pop	{r7, pc}
 800a64c:	40021000 	.word	0x40021000

0800a650 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b084      	sub	sp, #16
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
 800a658:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d101      	bne.n	800a664 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a660:	2301      	movs	r3, #1
 800a662:	e0d0      	b.n	800a806 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a664:	4b6a      	ldr	r3, [pc, #424]	@ (800a810 <HAL_RCC_ClockConfig+0x1c0>)
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	f003 0307 	and.w	r3, r3, #7
 800a66c:	683a      	ldr	r2, [r7, #0]
 800a66e:	429a      	cmp	r2, r3
 800a670:	d910      	bls.n	800a694 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a672:	4b67      	ldr	r3, [pc, #412]	@ (800a810 <HAL_RCC_ClockConfig+0x1c0>)
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	f023 0207 	bic.w	r2, r3, #7
 800a67a:	4965      	ldr	r1, [pc, #404]	@ (800a810 <HAL_RCC_ClockConfig+0x1c0>)
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	4313      	orrs	r3, r2
 800a680:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a682:	4b63      	ldr	r3, [pc, #396]	@ (800a810 <HAL_RCC_ClockConfig+0x1c0>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f003 0307 	and.w	r3, r3, #7
 800a68a:	683a      	ldr	r2, [r7, #0]
 800a68c:	429a      	cmp	r2, r3
 800a68e:	d001      	beq.n	800a694 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800a690:	2301      	movs	r3, #1
 800a692:	e0b8      	b.n	800a806 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f003 0302 	and.w	r3, r3, #2
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d020      	beq.n	800a6e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	f003 0304 	and.w	r3, r3, #4
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d005      	beq.n	800a6b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a6ac:	4b59      	ldr	r3, [pc, #356]	@ (800a814 <HAL_RCC_ClockConfig+0x1c4>)
 800a6ae:	685b      	ldr	r3, [r3, #4]
 800a6b0:	4a58      	ldr	r2, [pc, #352]	@ (800a814 <HAL_RCC_ClockConfig+0x1c4>)
 800a6b2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800a6b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	f003 0308 	and.w	r3, r3, #8
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d005      	beq.n	800a6d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a6c4:	4b53      	ldr	r3, [pc, #332]	@ (800a814 <HAL_RCC_ClockConfig+0x1c4>)
 800a6c6:	685b      	ldr	r3, [r3, #4]
 800a6c8:	4a52      	ldr	r2, [pc, #328]	@ (800a814 <HAL_RCC_ClockConfig+0x1c4>)
 800a6ca:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800a6ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a6d0:	4b50      	ldr	r3, [pc, #320]	@ (800a814 <HAL_RCC_ClockConfig+0x1c4>)
 800a6d2:	685b      	ldr	r3, [r3, #4]
 800a6d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	689b      	ldr	r3, [r3, #8]
 800a6dc:	494d      	ldr	r1, [pc, #308]	@ (800a814 <HAL_RCC_ClockConfig+0x1c4>)
 800a6de:	4313      	orrs	r3, r2
 800a6e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	f003 0301 	and.w	r3, r3, #1
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d040      	beq.n	800a770 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	685b      	ldr	r3, [r3, #4]
 800a6f2:	2b01      	cmp	r3, #1
 800a6f4:	d107      	bne.n	800a706 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a6f6:	4b47      	ldr	r3, [pc, #284]	@ (800a814 <HAL_RCC_ClockConfig+0x1c4>)
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d115      	bne.n	800a72e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a702:	2301      	movs	r3, #1
 800a704:	e07f      	b.n	800a806 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	685b      	ldr	r3, [r3, #4]
 800a70a:	2b02      	cmp	r3, #2
 800a70c:	d107      	bne.n	800a71e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a70e:	4b41      	ldr	r3, [pc, #260]	@ (800a814 <HAL_RCC_ClockConfig+0x1c4>)
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a716:	2b00      	cmp	r3, #0
 800a718:	d109      	bne.n	800a72e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a71a:	2301      	movs	r3, #1
 800a71c:	e073      	b.n	800a806 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a71e:	4b3d      	ldr	r3, [pc, #244]	@ (800a814 <HAL_RCC_ClockConfig+0x1c4>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	f003 0302 	and.w	r3, r3, #2
 800a726:	2b00      	cmp	r3, #0
 800a728:	d101      	bne.n	800a72e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a72a:	2301      	movs	r3, #1
 800a72c:	e06b      	b.n	800a806 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a72e:	4b39      	ldr	r3, [pc, #228]	@ (800a814 <HAL_RCC_ClockConfig+0x1c4>)
 800a730:	685b      	ldr	r3, [r3, #4]
 800a732:	f023 0203 	bic.w	r2, r3, #3
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	685b      	ldr	r3, [r3, #4]
 800a73a:	4936      	ldr	r1, [pc, #216]	@ (800a814 <HAL_RCC_ClockConfig+0x1c4>)
 800a73c:	4313      	orrs	r3, r2
 800a73e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a740:	f7fd fd36 	bl	80081b0 <HAL_GetTick>
 800a744:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a746:	e00a      	b.n	800a75e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a748:	f7fd fd32 	bl	80081b0 <HAL_GetTick>
 800a74c:	4602      	mov	r2, r0
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	1ad3      	subs	r3, r2, r3
 800a752:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a756:	4293      	cmp	r3, r2
 800a758:	d901      	bls.n	800a75e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a75a:	2303      	movs	r3, #3
 800a75c:	e053      	b.n	800a806 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a75e:	4b2d      	ldr	r3, [pc, #180]	@ (800a814 <HAL_RCC_ClockConfig+0x1c4>)
 800a760:	685b      	ldr	r3, [r3, #4]
 800a762:	f003 020c 	and.w	r2, r3, #12
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	685b      	ldr	r3, [r3, #4]
 800a76a:	009b      	lsls	r3, r3, #2
 800a76c:	429a      	cmp	r2, r3
 800a76e:	d1eb      	bne.n	800a748 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a770:	4b27      	ldr	r3, [pc, #156]	@ (800a810 <HAL_RCC_ClockConfig+0x1c0>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	f003 0307 	and.w	r3, r3, #7
 800a778:	683a      	ldr	r2, [r7, #0]
 800a77a:	429a      	cmp	r2, r3
 800a77c:	d210      	bcs.n	800a7a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a77e:	4b24      	ldr	r3, [pc, #144]	@ (800a810 <HAL_RCC_ClockConfig+0x1c0>)
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	f023 0207 	bic.w	r2, r3, #7
 800a786:	4922      	ldr	r1, [pc, #136]	@ (800a810 <HAL_RCC_ClockConfig+0x1c0>)
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	4313      	orrs	r3, r2
 800a78c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a78e:	4b20      	ldr	r3, [pc, #128]	@ (800a810 <HAL_RCC_ClockConfig+0x1c0>)
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	f003 0307 	and.w	r3, r3, #7
 800a796:	683a      	ldr	r2, [r7, #0]
 800a798:	429a      	cmp	r2, r3
 800a79a:	d001      	beq.n	800a7a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800a79c:	2301      	movs	r3, #1
 800a79e:	e032      	b.n	800a806 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	f003 0304 	and.w	r3, r3, #4
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d008      	beq.n	800a7be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a7ac:	4b19      	ldr	r3, [pc, #100]	@ (800a814 <HAL_RCC_ClockConfig+0x1c4>)
 800a7ae:	685b      	ldr	r3, [r3, #4]
 800a7b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	68db      	ldr	r3, [r3, #12]
 800a7b8:	4916      	ldr	r1, [pc, #88]	@ (800a814 <HAL_RCC_ClockConfig+0x1c4>)
 800a7ba:	4313      	orrs	r3, r2
 800a7bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	f003 0308 	and.w	r3, r3, #8
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d009      	beq.n	800a7de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a7ca:	4b12      	ldr	r3, [pc, #72]	@ (800a814 <HAL_RCC_ClockConfig+0x1c4>)
 800a7cc:	685b      	ldr	r3, [r3, #4]
 800a7ce:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	691b      	ldr	r3, [r3, #16]
 800a7d6:	00db      	lsls	r3, r3, #3
 800a7d8:	490e      	ldr	r1, [pc, #56]	@ (800a814 <HAL_RCC_ClockConfig+0x1c4>)
 800a7da:	4313      	orrs	r3, r2
 800a7dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a7de:	f000 f821 	bl	800a824 <HAL_RCC_GetSysClockFreq>
 800a7e2:	4602      	mov	r2, r0
 800a7e4:	4b0b      	ldr	r3, [pc, #44]	@ (800a814 <HAL_RCC_ClockConfig+0x1c4>)
 800a7e6:	685b      	ldr	r3, [r3, #4]
 800a7e8:	091b      	lsrs	r3, r3, #4
 800a7ea:	f003 030f 	and.w	r3, r3, #15
 800a7ee:	490a      	ldr	r1, [pc, #40]	@ (800a818 <HAL_RCC_ClockConfig+0x1c8>)
 800a7f0:	5ccb      	ldrb	r3, [r1, r3]
 800a7f2:	fa22 f303 	lsr.w	r3, r2, r3
 800a7f6:	4a09      	ldr	r2, [pc, #36]	@ (800a81c <HAL_RCC_ClockConfig+0x1cc>)
 800a7f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800a7fa:	4b09      	ldr	r3, [pc, #36]	@ (800a820 <HAL_RCC_ClockConfig+0x1d0>)
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	4618      	mov	r0, r3
 800a800:	f7fd fc94 	bl	800812c <HAL_InitTick>

  return HAL_OK;
 800a804:	2300      	movs	r3, #0
}
 800a806:	4618      	mov	r0, r3
 800a808:	3710      	adds	r7, #16
 800a80a:	46bd      	mov	sp, r7
 800a80c:	bd80      	pop	{r7, pc}
 800a80e:	bf00      	nop
 800a810:	40022000 	.word	0x40022000
 800a814:	40021000 	.word	0x40021000
 800a818:	0800bfcc 	.word	0x0800bfcc
 800a81c:	2000003c 	.word	0x2000003c
 800a820:	20000040 	.word	0x20000040

0800a824 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a824:	b480      	push	{r7}
 800a826:	b087      	sub	sp, #28
 800a828:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800a82a:	2300      	movs	r3, #0
 800a82c:	60fb      	str	r3, [r7, #12]
 800a82e:	2300      	movs	r3, #0
 800a830:	60bb      	str	r3, [r7, #8]
 800a832:	2300      	movs	r3, #0
 800a834:	617b      	str	r3, [r7, #20]
 800a836:	2300      	movs	r3, #0
 800a838:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800a83a:	2300      	movs	r3, #0
 800a83c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800a83e:	4b1e      	ldr	r3, [pc, #120]	@ (800a8b8 <HAL_RCC_GetSysClockFreq+0x94>)
 800a840:	685b      	ldr	r3, [r3, #4]
 800a842:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	f003 030c 	and.w	r3, r3, #12
 800a84a:	2b04      	cmp	r3, #4
 800a84c:	d002      	beq.n	800a854 <HAL_RCC_GetSysClockFreq+0x30>
 800a84e:	2b08      	cmp	r3, #8
 800a850:	d003      	beq.n	800a85a <HAL_RCC_GetSysClockFreq+0x36>
 800a852:	e027      	b.n	800a8a4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800a854:	4b19      	ldr	r3, [pc, #100]	@ (800a8bc <HAL_RCC_GetSysClockFreq+0x98>)
 800a856:	613b      	str	r3, [r7, #16]
      break;
 800a858:	e027      	b.n	800a8aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	0c9b      	lsrs	r3, r3, #18
 800a85e:	f003 030f 	and.w	r3, r3, #15
 800a862:	4a17      	ldr	r2, [pc, #92]	@ (800a8c0 <HAL_RCC_GetSysClockFreq+0x9c>)
 800a864:	5cd3      	ldrb	r3, [r2, r3]
 800a866:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d010      	beq.n	800a894 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800a872:	4b11      	ldr	r3, [pc, #68]	@ (800a8b8 <HAL_RCC_GetSysClockFreq+0x94>)
 800a874:	685b      	ldr	r3, [r3, #4]
 800a876:	0c5b      	lsrs	r3, r3, #17
 800a878:	f003 0301 	and.w	r3, r3, #1
 800a87c:	4a11      	ldr	r2, [pc, #68]	@ (800a8c4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800a87e:	5cd3      	ldrb	r3, [r2, r3]
 800a880:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	4a0d      	ldr	r2, [pc, #52]	@ (800a8bc <HAL_RCC_GetSysClockFreq+0x98>)
 800a886:	fb03 f202 	mul.w	r2, r3, r2
 800a88a:	68bb      	ldr	r3, [r7, #8]
 800a88c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a890:	617b      	str	r3, [r7, #20]
 800a892:	e004      	b.n	800a89e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	4a0c      	ldr	r2, [pc, #48]	@ (800a8c8 <HAL_RCC_GetSysClockFreq+0xa4>)
 800a898:	fb02 f303 	mul.w	r3, r2, r3
 800a89c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800a89e:	697b      	ldr	r3, [r7, #20]
 800a8a0:	613b      	str	r3, [r7, #16]
      break;
 800a8a2:	e002      	b.n	800a8aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800a8a4:	4b05      	ldr	r3, [pc, #20]	@ (800a8bc <HAL_RCC_GetSysClockFreq+0x98>)
 800a8a6:	613b      	str	r3, [r7, #16]
      break;
 800a8a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a8aa:	693b      	ldr	r3, [r7, #16]
}
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	371c      	adds	r7, #28
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	bc80      	pop	{r7}
 800a8b4:	4770      	bx	lr
 800a8b6:	bf00      	nop
 800a8b8:	40021000 	.word	0x40021000
 800a8bc:	007a1200 	.word	0x007a1200
 800a8c0:	0800bfe4 	.word	0x0800bfe4
 800a8c4:	0800bff4 	.word	0x0800bff4
 800a8c8:	003d0900 	.word	0x003d0900

0800a8cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a8cc:	b480      	push	{r7}
 800a8ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a8d0:	4b02      	ldr	r3, [pc, #8]	@ (800a8dc <HAL_RCC_GetHCLKFreq+0x10>)
 800a8d2:	681b      	ldr	r3, [r3, #0]
}
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bc80      	pop	{r7}
 800a8da:	4770      	bx	lr
 800a8dc:	2000003c 	.word	0x2000003c

0800a8e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a8e4:	f7ff fff2 	bl	800a8cc <HAL_RCC_GetHCLKFreq>
 800a8e8:	4602      	mov	r2, r0
 800a8ea:	4b05      	ldr	r3, [pc, #20]	@ (800a900 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a8ec:	685b      	ldr	r3, [r3, #4]
 800a8ee:	0a1b      	lsrs	r3, r3, #8
 800a8f0:	f003 0307 	and.w	r3, r3, #7
 800a8f4:	4903      	ldr	r1, [pc, #12]	@ (800a904 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a8f6:	5ccb      	ldrb	r3, [r1, r3]
 800a8f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	bd80      	pop	{r7, pc}
 800a900:	40021000 	.word	0x40021000
 800a904:	0800bfdc 	.word	0x0800bfdc

0800a908 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800a908:	b480      	push	{r7}
 800a90a:	b085      	sub	sp, #20
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800a910:	4b0a      	ldr	r3, [pc, #40]	@ (800a93c <RCC_Delay+0x34>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	4a0a      	ldr	r2, [pc, #40]	@ (800a940 <RCC_Delay+0x38>)
 800a916:	fba2 2303 	umull	r2, r3, r2, r3
 800a91a:	0a5b      	lsrs	r3, r3, #9
 800a91c:	687a      	ldr	r2, [r7, #4]
 800a91e:	fb02 f303 	mul.w	r3, r2, r3
 800a922:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800a924:	bf00      	nop
  }
  while (Delay --);
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	1e5a      	subs	r2, r3, #1
 800a92a:	60fa      	str	r2, [r7, #12]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d1f9      	bne.n	800a924 <RCC_Delay+0x1c>
}
 800a930:	bf00      	nop
 800a932:	bf00      	nop
 800a934:	3714      	adds	r7, #20
 800a936:	46bd      	mov	sp, r7
 800a938:	bc80      	pop	{r7}
 800a93a:	4770      	bx	lr
 800a93c:	2000003c 	.word	0x2000003c
 800a940:	10624dd3 	.word	0x10624dd3

0800a944 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a944:	b480      	push	{r7}
 800a946:	b085      	sub	sp, #20
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a952:	b2db      	uxtb	r3, r3
 800a954:	2b01      	cmp	r3, #1
 800a956:	d001      	beq.n	800a95c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a958:	2301      	movs	r3, #1
 800a95a:	e032      	b.n	800a9c2 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2202      	movs	r2, #2
 800a960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	4a18      	ldr	r2, [pc, #96]	@ (800a9cc <HAL_TIM_Base_Start+0x88>)
 800a96a:	4293      	cmp	r3, r2
 800a96c:	d00e      	beq.n	800a98c <HAL_TIM_Base_Start+0x48>
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a976:	d009      	beq.n	800a98c <HAL_TIM_Base_Start+0x48>
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	4a14      	ldr	r2, [pc, #80]	@ (800a9d0 <HAL_TIM_Base_Start+0x8c>)
 800a97e:	4293      	cmp	r3, r2
 800a980:	d004      	beq.n	800a98c <HAL_TIM_Base_Start+0x48>
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	4a13      	ldr	r2, [pc, #76]	@ (800a9d4 <HAL_TIM_Base_Start+0x90>)
 800a988:	4293      	cmp	r3, r2
 800a98a:	d111      	bne.n	800a9b0 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	689b      	ldr	r3, [r3, #8]
 800a992:	f003 0307 	and.w	r3, r3, #7
 800a996:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	2b06      	cmp	r3, #6
 800a99c:	d010      	beq.n	800a9c0 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	681a      	ldr	r2, [r3, #0]
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	f042 0201 	orr.w	r2, r2, #1
 800a9ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a9ae:	e007      	b.n	800a9c0 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	681a      	ldr	r2, [r3, #0]
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	f042 0201 	orr.w	r2, r2, #1
 800a9be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a9c0:	2300      	movs	r3, #0
}
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	3714      	adds	r7, #20
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	bc80      	pop	{r7}
 800a9ca:	4770      	bx	lr
 800a9cc:	40012c00 	.word	0x40012c00
 800a9d0:	40000400 	.word	0x40000400
 800a9d4:	40000800 	.word	0x40000800

0800a9d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b082      	sub	sp, #8
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d101      	bne.n	800a9ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a9e6:	2301      	movs	r3, #1
 800a9e8:	e041      	b.n	800aa6e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a9f0:	b2db      	uxtb	r3, r3
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d106      	bne.n	800aa04 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a9fe:	6878      	ldr	r0, [r7, #4]
 800aa00:	f7fc fd08 	bl	8007414 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2202      	movs	r2, #2
 800aa08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681a      	ldr	r2, [r3, #0]
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	3304      	adds	r3, #4
 800aa14:	4619      	mov	r1, r3
 800aa16:	4610      	mov	r0, r2
 800aa18:	f000 f992 	bl	800ad40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2201      	movs	r2, #1
 800aa20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2201      	movs	r2, #1
 800aa28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2201      	movs	r2, #1
 800aa30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2201      	movs	r2, #1
 800aa38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2201      	movs	r2, #1
 800aa40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2201      	movs	r2, #1
 800aa48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2201      	movs	r2, #1
 800aa50:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2201      	movs	r2, #1
 800aa58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2201      	movs	r2, #1
 800aa60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2201      	movs	r2, #1
 800aa68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800aa6c:	2300      	movs	r3, #0
}
 800aa6e:	4618      	mov	r0, r3
 800aa70:	3708      	adds	r7, #8
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bd80      	pop	{r7, pc}
	...

0800aa78 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b084      	sub	sp, #16
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
 800aa80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d109      	bne.n	800aa9c <HAL_TIM_PWM_Start+0x24>
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800aa8e:	b2db      	uxtb	r3, r3
 800aa90:	2b01      	cmp	r3, #1
 800aa92:	bf14      	ite	ne
 800aa94:	2301      	movne	r3, #1
 800aa96:	2300      	moveq	r3, #0
 800aa98:	b2db      	uxtb	r3, r3
 800aa9a:	e022      	b.n	800aae2 <HAL_TIM_PWM_Start+0x6a>
 800aa9c:	683b      	ldr	r3, [r7, #0]
 800aa9e:	2b04      	cmp	r3, #4
 800aaa0:	d109      	bne.n	800aab6 <HAL_TIM_PWM_Start+0x3e>
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800aaa8:	b2db      	uxtb	r3, r3
 800aaaa:	2b01      	cmp	r3, #1
 800aaac:	bf14      	ite	ne
 800aaae:	2301      	movne	r3, #1
 800aab0:	2300      	moveq	r3, #0
 800aab2:	b2db      	uxtb	r3, r3
 800aab4:	e015      	b.n	800aae2 <HAL_TIM_PWM_Start+0x6a>
 800aab6:	683b      	ldr	r3, [r7, #0]
 800aab8:	2b08      	cmp	r3, #8
 800aaba:	d109      	bne.n	800aad0 <HAL_TIM_PWM_Start+0x58>
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800aac2:	b2db      	uxtb	r3, r3
 800aac4:	2b01      	cmp	r3, #1
 800aac6:	bf14      	ite	ne
 800aac8:	2301      	movne	r3, #1
 800aaca:	2300      	moveq	r3, #0
 800aacc:	b2db      	uxtb	r3, r3
 800aace:	e008      	b.n	800aae2 <HAL_TIM_PWM_Start+0x6a>
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800aad6:	b2db      	uxtb	r3, r3
 800aad8:	2b01      	cmp	r3, #1
 800aada:	bf14      	ite	ne
 800aadc:	2301      	movne	r3, #1
 800aade:	2300      	moveq	r3, #0
 800aae0:	b2db      	uxtb	r3, r3
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d001      	beq.n	800aaea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800aae6:	2301      	movs	r3, #1
 800aae8:	e05e      	b.n	800aba8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d104      	bne.n	800aafa <HAL_TIM_PWM_Start+0x82>
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2202      	movs	r2, #2
 800aaf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800aaf8:	e013      	b.n	800ab22 <HAL_TIM_PWM_Start+0xaa>
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	2b04      	cmp	r3, #4
 800aafe:	d104      	bne.n	800ab0a <HAL_TIM_PWM_Start+0x92>
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2202      	movs	r2, #2
 800ab04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ab08:	e00b      	b.n	800ab22 <HAL_TIM_PWM_Start+0xaa>
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	2b08      	cmp	r3, #8
 800ab0e:	d104      	bne.n	800ab1a <HAL_TIM_PWM_Start+0xa2>
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2202      	movs	r2, #2
 800ab14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ab18:	e003      	b.n	800ab22 <HAL_TIM_PWM_Start+0xaa>
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	2202      	movs	r2, #2
 800ab1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	2201      	movs	r2, #1
 800ab28:	6839      	ldr	r1, [r7, #0]
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	f000 fafe 	bl	800b12c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	4a1e      	ldr	r2, [pc, #120]	@ (800abb0 <HAL_TIM_PWM_Start+0x138>)
 800ab36:	4293      	cmp	r3, r2
 800ab38:	d107      	bne.n	800ab4a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ab48:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	4a18      	ldr	r2, [pc, #96]	@ (800abb0 <HAL_TIM_PWM_Start+0x138>)
 800ab50:	4293      	cmp	r3, r2
 800ab52:	d00e      	beq.n	800ab72 <HAL_TIM_PWM_Start+0xfa>
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab5c:	d009      	beq.n	800ab72 <HAL_TIM_PWM_Start+0xfa>
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	4a14      	ldr	r2, [pc, #80]	@ (800abb4 <HAL_TIM_PWM_Start+0x13c>)
 800ab64:	4293      	cmp	r3, r2
 800ab66:	d004      	beq.n	800ab72 <HAL_TIM_PWM_Start+0xfa>
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	4a12      	ldr	r2, [pc, #72]	@ (800abb8 <HAL_TIM_PWM_Start+0x140>)
 800ab6e:	4293      	cmp	r3, r2
 800ab70:	d111      	bne.n	800ab96 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	689b      	ldr	r3, [r3, #8]
 800ab78:	f003 0307 	and.w	r3, r3, #7
 800ab7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	2b06      	cmp	r3, #6
 800ab82:	d010      	beq.n	800aba6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	681a      	ldr	r2, [r3, #0]
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	f042 0201 	orr.w	r2, r2, #1
 800ab92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab94:	e007      	b.n	800aba6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	681a      	ldr	r2, [r3, #0]
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	f042 0201 	orr.w	r2, r2, #1
 800aba4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800aba6:	2300      	movs	r3, #0
}
 800aba8:	4618      	mov	r0, r3
 800abaa:	3710      	adds	r7, #16
 800abac:	46bd      	mov	sp, r7
 800abae:	bd80      	pop	{r7, pc}
 800abb0:	40012c00 	.word	0x40012c00
 800abb4:	40000400 	.word	0x40000400
 800abb8:	40000800 	.word	0x40000800

0800abbc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b086      	sub	sp, #24
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	60f8      	str	r0, [r7, #12]
 800abc4:	60b9      	str	r1, [r7, #8]
 800abc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800abc8:	2300      	movs	r3, #0
 800abca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800abd2:	2b01      	cmp	r3, #1
 800abd4:	d101      	bne.n	800abda <HAL_TIM_PWM_ConfigChannel+0x1e>
 800abd6:	2302      	movs	r3, #2
 800abd8:	e0ae      	b.n	800ad38 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	2201      	movs	r2, #1
 800abde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	2b0c      	cmp	r3, #12
 800abe6:	f200 809f 	bhi.w	800ad28 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800abea:	a201      	add	r2, pc, #4	@ (adr r2, 800abf0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800abec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abf0:	0800ac25 	.word	0x0800ac25
 800abf4:	0800ad29 	.word	0x0800ad29
 800abf8:	0800ad29 	.word	0x0800ad29
 800abfc:	0800ad29 	.word	0x0800ad29
 800ac00:	0800ac65 	.word	0x0800ac65
 800ac04:	0800ad29 	.word	0x0800ad29
 800ac08:	0800ad29 	.word	0x0800ad29
 800ac0c:	0800ad29 	.word	0x0800ad29
 800ac10:	0800aca7 	.word	0x0800aca7
 800ac14:	0800ad29 	.word	0x0800ad29
 800ac18:	0800ad29 	.word	0x0800ad29
 800ac1c:	0800ad29 	.word	0x0800ad29
 800ac20:	0800ace7 	.word	0x0800ace7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	68b9      	ldr	r1, [r7, #8]
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	f000 f8f6 	bl	800ae1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	699a      	ldr	r2, [r3, #24]
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	f042 0208 	orr.w	r2, r2, #8
 800ac3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	699a      	ldr	r2, [r3, #24]
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	f022 0204 	bic.w	r2, r2, #4
 800ac4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	6999      	ldr	r1, [r3, #24]
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	691a      	ldr	r2, [r3, #16]
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	430a      	orrs	r2, r1
 800ac60:	619a      	str	r2, [r3, #24]
      break;
 800ac62:	e064      	b.n	800ad2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	68b9      	ldr	r1, [r7, #8]
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	f000 f93c 	bl	800aee8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	699a      	ldr	r2, [r3, #24]
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ac7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	699a      	ldr	r2, [r3, #24]
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ac8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	6999      	ldr	r1, [r3, #24]
 800ac96:	68bb      	ldr	r3, [r7, #8]
 800ac98:	691b      	ldr	r3, [r3, #16]
 800ac9a:	021a      	lsls	r2, r3, #8
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	430a      	orrs	r2, r1
 800aca2:	619a      	str	r2, [r3, #24]
      break;
 800aca4:	e043      	b.n	800ad2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	68b9      	ldr	r1, [r7, #8]
 800acac:	4618      	mov	r0, r3
 800acae:	f000 f985 	bl	800afbc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	69da      	ldr	r2, [r3, #28]
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	f042 0208 	orr.w	r2, r2, #8
 800acc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	69da      	ldr	r2, [r3, #28]
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	f022 0204 	bic.w	r2, r2, #4
 800acd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	69d9      	ldr	r1, [r3, #28]
 800acd8:	68bb      	ldr	r3, [r7, #8]
 800acda:	691a      	ldr	r2, [r3, #16]
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	430a      	orrs	r2, r1
 800ace2:	61da      	str	r2, [r3, #28]
      break;
 800ace4:	e023      	b.n	800ad2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	68b9      	ldr	r1, [r7, #8]
 800acec:	4618      	mov	r0, r3
 800acee:	f000 f9cf 	bl	800b090 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	69da      	ldr	r2, [r3, #28]
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ad00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	69da      	ldr	r2, [r3, #28]
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ad10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	69d9      	ldr	r1, [r3, #28]
 800ad18:	68bb      	ldr	r3, [r7, #8]
 800ad1a:	691b      	ldr	r3, [r3, #16]
 800ad1c:	021a      	lsls	r2, r3, #8
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	430a      	orrs	r2, r1
 800ad24:	61da      	str	r2, [r3, #28]
      break;
 800ad26:	e002      	b.n	800ad2e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800ad28:	2301      	movs	r3, #1
 800ad2a:	75fb      	strb	r3, [r7, #23]
      break;
 800ad2c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	2200      	movs	r2, #0
 800ad32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ad36:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad38:	4618      	mov	r0, r3
 800ad3a:	3718      	adds	r7, #24
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	bd80      	pop	{r7, pc}

0800ad40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ad40:	b480      	push	{r7}
 800ad42:	b085      	sub	sp, #20
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
 800ad48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	4a2f      	ldr	r2, [pc, #188]	@ (800ae10 <TIM_Base_SetConfig+0xd0>)
 800ad54:	4293      	cmp	r3, r2
 800ad56:	d00b      	beq.n	800ad70 <TIM_Base_SetConfig+0x30>
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ad5e:	d007      	beq.n	800ad70 <TIM_Base_SetConfig+0x30>
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	4a2c      	ldr	r2, [pc, #176]	@ (800ae14 <TIM_Base_SetConfig+0xd4>)
 800ad64:	4293      	cmp	r3, r2
 800ad66:	d003      	beq.n	800ad70 <TIM_Base_SetConfig+0x30>
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	4a2b      	ldr	r2, [pc, #172]	@ (800ae18 <TIM_Base_SetConfig+0xd8>)
 800ad6c:	4293      	cmp	r3, r2
 800ad6e:	d108      	bne.n	800ad82 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	685b      	ldr	r3, [r3, #4]
 800ad7c:	68fa      	ldr	r2, [r7, #12]
 800ad7e:	4313      	orrs	r3, r2
 800ad80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	4a22      	ldr	r2, [pc, #136]	@ (800ae10 <TIM_Base_SetConfig+0xd0>)
 800ad86:	4293      	cmp	r3, r2
 800ad88:	d00b      	beq.n	800ada2 <TIM_Base_SetConfig+0x62>
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ad90:	d007      	beq.n	800ada2 <TIM_Base_SetConfig+0x62>
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	4a1f      	ldr	r2, [pc, #124]	@ (800ae14 <TIM_Base_SetConfig+0xd4>)
 800ad96:	4293      	cmp	r3, r2
 800ad98:	d003      	beq.n	800ada2 <TIM_Base_SetConfig+0x62>
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	4a1e      	ldr	r2, [pc, #120]	@ (800ae18 <TIM_Base_SetConfig+0xd8>)
 800ad9e:	4293      	cmp	r3, r2
 800ada0:	d108      	bne.n	800adb4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ada8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800adaa:	683b      	ldr	r3, [r7, #0]
 800adac:	68db      	ldr	r3, [r3, #12]
 800adae:	68fa      	ldr	r2, [r7, #12]
 800adb0:	4313      	orrs	r3, r2
 800adb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	695b      	ldr	r3, [r3, #20]
 800adbe:	4313      	orrs	r3, r2
 800adc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	68fa      	ldr	r2, [r7, #12]
 800adc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	689a      	ldr	r2, [r3, #8]
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	681a      	ldr	r2, [r3, #0]
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	4a0d      	ldr	r2, [pc, #52]	@ (800ae10 <TIM_Base_SetConfig+0xd0>)
 800addc:	4293      	cmp	r3, r2
 800adde:	d103      	bne.n	800ade8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ade0:	683b      	ldr	r3, [r7, #0]
 800ade2:	691a      	ldr	r2, [r3, #16]
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	2201      	movs	r2, #1
 800adec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	691b      	ldr	r3, [r3, #16]
 800adf2:	f003 0301 	and.w	r3, r3, #1
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d005      	beq.n	800ae06 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	691b      	ldr	r3, [r3, #16]
 800adfe:	f023 0201 	bic.w	r2, r3, #1
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	611a      	str	r2, [r3, #16]
  }
}
 800ae06:	bf00      	nop
 800ae08:	3714      	adds	r7, #20
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	bc80      	pop	{r7}
 800ae0e:	4770      	bx	lr
 800ae10:	40012c00 	.word	0x40012c00
 800ae14:	40000400 	.word	0x40000400
 800ae18:	40000800 	.word	0x40000800

0800ae1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ae1c:	b480      	push	{r7}
 800ae1e:	b087      	sub	sp, #28
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
 800ae24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	6a1b      	ldr	r3, [r3, #32]
 800ae2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	6a1b      	ldr	r3, [r3, #32]
 800ae30:	f023 0201 	bic.w	r2, r3, #1
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	685b      	ldr	r3, [r3, #4]
 800ae3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	699b      	ldr	r3, [r3, #24]
 800ae42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	f023 0303 	bic.w	r3, r3, #3
 800ae52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	68fa      	ldr	r2, [r7, #12]
 800ae5a:	4313      	orrs	r3, r2
 800ae5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ae5e:	697b      	ldr	r3, [r7, #20]
 800ae60:	f023 0302 	bic.w	r3, r3, #2
 800ae64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	689b      	ldr	r3, [r3, #8]
 800ae6a:	697a      	ldr	r2, [r7, #20]
 800ae6c:	4313      	orrs	r3, r2
 800ae6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	4a1c      	ldr	r2, [pc, #112]	@ (800aee4 <TIM_OC1_SetConfig+0xc8>)
 800ae74:	4293      	cmp	r3, r2
 800ae76:	d10c      	bne.n	800ae92 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ae78:	697b      	ldr	r3, [r7, #20]
 800ae7a:	f023 0308 	bic.w	r3, r3, #8
 800ae7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	68db      	ldr	r3, [r3, #12]
 800ae84:	697a      	ldr	r2, [r7, #20]
 800ae86:	4313      	orrs	r3, r2
 800ae88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ae8a:	697b      	ldr	r3, [r7, #20]
 800ae8c:	f023 0304 	bic.w	r3, r3, #4
 800ae90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	4a13      	ldr	r2, [pc, #76]	@ (800aee4 <TIM_OC1_SetConfig+0xc8>)
 800ae96:	4293      	cmp	r3, r2
 800ae98:	d111      	bne.n	800aebe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ae9a:	693b      	ldr	r3, [r7, #16]
 800ae9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aea0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800aea2:	693b      	ldr	r3, [r7, #16]
 800aea4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800aea8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800aeaa:	683b      	ldr	r3, [r7, #0]
 800aeac:	695b      	ldr	r3, [r3, #20]
 800aeae:	693a      	ldr	r2, [r7, #16]
 800aeb0:	4313      	orrs	r3, r2
 800aeb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	699b      	ldr	r3, [r3, #24]
 800aeb8:	693a      	ldr	r2, [r7, #16]
 800aeba:	4313      	orrs	r3, r2
 800aebc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	693a      	ldr	r2, [r7, #16]
 800aec2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	68fa      	ldr	r2, [r7, #12]
 800aec8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	685a      	ldr	r2, [r3, #4]
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	697a      	ldr	r2, [r7, #20]
 800aed6:	621a      	str	r2, [r3, #32]
}
 800aed8:	bf00      	nop
 800aeda:	371c      	adds	r7, #28
 800aedc:	46bd      	mov	sp, r7
 800aede:	bc80      	pop	{r7}
 800aee0:	4770      	bx	lr
 800aee2:	bf00      	nop
 800aee4:	40012c00 	.word	0x40012c00

0800aee8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aee8:	b480      	push	{r7}
 800aeea:	b087      	sub	sp, #28
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
 800aef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6a1b      	ldr	r3, [r3, #32]
 800aef6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	6a1b      	ldr	r3, [r3, #32]
 800aefc:	f023 0210 	bic.w	r2, r3, #16
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	685b      	ldr	r3, [r3, #4]
 800af08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	699b      	ldr	r3, [r3, #24]
 800af0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800af16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800af1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	021b      	lsls	r3, r3, #8
 800af26:	68fa      	ldr	r2, [r7, #12]
 800af28:	4313      	orrs	r3, r2
 800af2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800af2c:	697b      	ldr	r3, [r7, #20]
 800af2e:	f023 0320 	bic.w	r3, r3, #32
 800af32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800af34:	683b      	ldr	r3, [r7, #0]
 800af36:	689b      	ldr	r3, [r3, #8]
 800af38:	011b      	lsls	r3, r3, #4
 800af3a:	697a      	ldr	r2, [r7, #20]
 800af3c:	4313      	orrs	r3, r2
 800af3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	4a1d      	ldr	r2, [pc, #116]	@ (800afb8 <TIM_OC2_SetConfig+0xd0>)
 800af44:	4293      	cmp	r3, r2
 800af46:	d10d      	bne.n	800af64 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800af48:	697b      	ldr	r3, [r7, #20]
 800af4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800af4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	68db      	ldr	r3, [r3, #12]
 800af54:	011b      	lsls	r3, r3, #4
 800af56:	697a      	ldr	r2, [r7, #20]
 800af58:	4313      	orrs	r3, r2
 800af5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800af5c:	697b      	ldr	r3, [r7, #20]
 800af5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800af62:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	4a14      	ldr	r2, [pc, #80]	@ (800afb8 <TIM_OC2_SetConfig+0xd0>)
 800af68:	4293      	cmp	r3, r2
 800af6a:	d113      	bne.n	800af94 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800af6c:	693b      	ldr	r3, [r7, #16]
 800af6e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800af72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800af74:	693b      	ldr	r3, [r7, #16]
 800af76:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800af7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800af7c:	683b      	ldr	r3, [r7, #0]
 800af7e:	695b      	ldr	r3, [r3, #20]
 800af80:	009b      	lsls	r3, r3, #2
 800af82:	693a      	ldr	r2, [r7, #16]
 800af84:	4313      	orrs	r3, r2
 800af86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	699b      	ldr	r3, [r3, #24]
 800af8c:	009b      	lsls	r3, r3, #2
 800af8e:	693a      	ldr	r2, [r7, #16]
 800af90:	4313      	orrs	r3, r2
 800af92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	693a      	ldr	r2, [r7, #16]
 800af98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	68fa      	ldr	r2, [r7, #12]
 800af9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	685a      	ldr	r2, [r3, #4]
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	697a      	ldr	r2, [r7, #20]
 800afac:	621a      	str	r2, [r3, #32]
}
 800afae:	bf00      	nop
 800afb0:	371c      	adds	r7, #28
 800afb2:	46bd      	mov	sp, r7
 800afb4:	bc80      	pop	{r7}
 800afb6:	4770      	bx	lr
 800afb8:	40012c00 	.word	0x40012c00

0800afbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800afbc:	b480      	push	{r7}
 800afbe:	b087      	sub	sp, #28
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
 800afc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	6a1b      	ldr	r3, [r3, #32]
 800afca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	6a1b      	ldr	r3, [r3, #32]
 800afd0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	685b      	ldr	r3, [r3, #4]
 800afdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	69db      	ldr	r3, [r3, #28]
 800afe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800afea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	f023 0303 	bic.w	r3, r3, #3
 800aff2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	68fa      	ldr	r2, [r7, #12]
 800affa:	4313      	orrs	r3, r2
 800affc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800affe:	697b      	ldr	r3, [r7, #20]
 800b000:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b004:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	689b      	ldr	r3, [r3, #8]
 800b00a:	021b      	lsls	r3, r3, #8
 800b00c:	697a      	ldr	r2, [r7, #20]
 800b00e:	4313      	orrs	r3, r2
 800b010:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	4a1d      	ldr	r2, [pc, #116]	@ (800b08c <TIM_OC3_SetConfig+0xd0>)
 800b016:	4293      	cmp	r3, r2
 800b018:	d10d      	bne.n	800b036 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b01a:	697b      	ldr	r3, [r7, #20]
 800b01c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b020:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	68db      	ldr	r3, [r3, #12]
 800b026:	021b      	lsls	r3, r3, #8
 800b028:	697a      	ldr	r2, [r7, #20]
 800b02a:	4313      	orrs	r3, r2
 800b02c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b02e:	697b      	ldr	r3, [r7, #20]
 800b030:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b034:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	4a14      	ldr	r2, [pc, #80]	@ (800b08c <TIM_OC3_SetConfig+0xd0>)
 800b03a:	4293      	cmp	r3, r2
 800b03c:	d113      	bne.n	800b066 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b03e:	693b      	ldr	r3, [r7, #16]
 800b040:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b044:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b046:	693b      	ldr	r3, [r7, #16]
 800b048:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b04c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b04e:	683b      	ldr	r3, [r7, #0]
 800b050:	695b      	ldr	r3, [r3, #20]
 800b052:	011b      	lsls	r3, r3, #4
 800b054:	693a      	ldr	r2, [r7, #16]
 800b056:	4313      	orrs	r3, r2
 800b058:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	699b      	ldr	r3, [r3, #24]
 800b05e:	011b      	lsls	r3, r3, #4
 800b060:	693a      	ldr	r2, [r7, #16]
 800b062:	4313      	orrs	r3, r2
 800b064:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	693a      	ldr	r2, [r7, #16]
 800b06a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	68fa      	ldr	r2, [r7, #12]
 800b070:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	685a      	ldr	r2, [r3, #4]
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	697a      	ldr	r2, [r7, #20]
 800b07e:	621a      	str	r2, [r3, #32]
}
 800b080:	bf00      	nop
 800b082:	371c      	adds	r7, #28
 800b084:	46bd      	mov	sp, r7
 800b086:	bc80      	pop	{r7}
 800b088:	4770      	bx	lr
 800b08a:	bf00      	nop
 800b08c:	40012c00 	.word	0x40012c00

0800b090 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b090:	b480      	push	{r7}
 800b092:	b087      	sub	sp, #28
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
 800b098:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	6a1b      	ldr	r3, [r3, #32]
 800b09e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	6a1b      	ldr	r3, [r3, #32]
 800b0a4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	685b      	ldr	r3, [r3, #4]
 800b0b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	69db      	ldr	r3, [r3, #28]
 800b0b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b0be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b0c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	021b      	lsls	r3, r3, #8
 800b0ce:	68fa      	ldr	r2, [r7, #12]
 800b0d0:	4313      	orrs	r3, r2
 800b0d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b0d4:	693b      	ldr	r3, [r7, #16]
 800b0d6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b0da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	689b      	ldr	r3, [r3, #8]
 800b0e0:	031b      	lsls	r3, r3, #12
 800b0e2:	693a      	ldr	r2, [r7, #16]
 800b0e4:	4313      	orrs	r3, r2
 800b0e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	4a0f      	ldr	r2, [pc, #60]	@ (800b128 <TIM_OC4_SetConfig+0x98>)
 800b0ec:	4293      	cmp	r3, r2
 800b0ee:	d109      	bne.n	800b104 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b0f0:	697b      	ldr	r3, [r7, #20]
 800b0f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b0f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	695b      	ldr	r3, [r3, #20]
 800b0fc:	019b      	lsls	r3, r3, #6
 800b0fe:	697a      	ldr	r2, [r7, #20]
 800b100:	4313      	orrs	r3, r2
 800b102:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	697a      	ldr	r2, [r7, #20]
 800b108:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	68fa      	ldr	r2, [r7, #12]
 800b10e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b110:	683b      	ldr	r3, [r7, #0]
 800b112:	685a      	ldr	r2, [r3, #4]
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	693a      	ldr	r2, [r7, #16]
 800b11c:	621a      	str	r2, [r3, #32]
}
 800b11e:	bf00      	nop
 800b120:	371c      	adds	r7, #28
 800b122:	46bd      	mov	sp, r7
 800b124:	bc80      	pop	{r7}
 800b126:	4770      	bx	lr
 800b128:	40012c00 	.word	0x40012c00

0800b12c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b12c:	b480      	push	{r7}
 800b12e:	b087      	sub	sp, #28
 800b130:	af00      	add	r7, sp, #0
 800b132:	60f8      	str	r0, [r7, #12]
 800b134:	60b9      	str	r1, [r7, #8]
 800b136:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b138:	68bb      	ldr	r3, [r7, #8]
 800b13a:	f003 031f 	and.w	r3, r3, #31
 800b13e:	2201      	movs	r2, #1
 800b140:	fa02 f303 	lsl.w	r3, r2, r3
 800b144:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	6a1a      	ldr	r2, [r3, #32]
 800b14a:	697b      	ldr	r3, [r7, #20]
 800b14c:	43db      	mvns	r3, r3
 800b14e:	401a      	ands	r2, r3
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	6a1a      	ldr	r2, [r3, #32]
 800b158:	68bb      	ldr	r3, [r7, #8]
 800b15a:	f003 031f 	and.w	r3, r3, #31
 800b15e:	6879      	ldr	r1, [r7, #4]
 800b160:	fa01 f303 	lsl.w	r3, r1, r3
 800b164:	431a      	orrs	r2, r3
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	621a      	str	r2, [r3, #32]
}
 800b16a:	bf00      	nop
 800b16c:	371c      	adds	r7, #28
 800b16e:	46bd      	mov	sp, r7
 800b170:	bc80      	pop	{r7}
 800b172:	4770      	bx	lr

0800b174 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b174:	b480      	push	{r7}
 800b176:	b085      	sub	sp, #20
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
 800b17c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b184:	2b01      	cmp	r3, #1
 800b186:	d101      	bne.n	800b18c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b188:	2302      	movs	r3, #2
 800b18a:	e046      	b.n	800b21a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2201      	movs	r2, #1
 800b190:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2202      	movs	r2, #2
 800b198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	685b      	ldr	r3, [r3, #4]
 800b1a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	689b      	ldr	r3, [r3, #8]
 800b1aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b1b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	68fa      	ldr	r2, [r7, #12]
 800b1ba:	4313      	orrs	r3, r2
 800b1bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	68fa      	ldr	r2, [r7, #12]
 800b1c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	4a16      	ldr	r2, [pc, #88]	@ (800b224 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800b1cc:	4293      	cmp	r3, r2
 800b1ce:	d00e      	beq.n	800b1ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b1d8:	d009      	beq.n	800b1ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	4a12      	ldr	r2, [pc, #72]	@ (800b228 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800b1e0:	4293      	cmp	r3, r2
 800b1e2:	d004      	beq.n	800b1ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	4a10      	ldr	r2, [pc, #64]	@ (800b22c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800b1ea:	4293      	cmp	r3, r2
 800b1ec:	d10c      	bne.n	800b208 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b1f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	685b      	ldr	r3, [r3, #4]
 800b1fa:	68ba      	ldr	r2, [r7, #8]
 800b1fc:	4313      	orrs	r3, r2
 800b1fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	68ba      	ldr	r2, [r7, #8]
 800b206:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	2201      	movs	r2, #1
 800b20c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2200      	movs	r2, #0
 800b214:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b218:	2300      	movs	r3, #0
}
 800b21a:	4618      	mov	r0, r3
 800b21c:	3714      	adds	r7, #20
 800b21e:	46bd      	mov	sp, r7
 800b220:	bc80      	pop	{r7}
 800b222:	4770      	bx	lr
 800b224:	40012c00 	.word	0x40012c00
 800b228:	40000400 	.word	0x40000400
 800b22c:	40000800 	.word	0x40000800

0800b230 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b230:	b480      	push	{r7}
 800b232:	b085      	sub	sp, #20
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
 800b238:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b23a:	2300      	movs	r3, #0
 800b23c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b244:	2b01      	cmp	r3, #1
 800b246:	d101      	bne.n	800b24c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b248:	2302      	movs	r3, #2
 800b24a:	e03d      	b.n	800b2c8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	2201      	movs	r2, #1
 800b250:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800b25a:	683b      	ldr	r3, [r7, #0]
 800b25c:	68db      	ldr	r3, [r3, #12]
 800b25e:	4313      	orrs	r3, r2
 800b260:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	689b      	ldr	r3, [r3, #8]
 800b26c:	4313      	orrs	r3, r2
 800b26e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800b276:	683b      	ldr	r3, [r7, #0]
 800b278:	685b      	ldr	r3, [r3, #4]
 800b27a:	4313      	orrs	r3, r2
 800b27c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800b284:	683b      	ldr	r3, [r7, #0]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	4313      	orrs	r3, r2
 800b28a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b292:	683b      	ldr	r3, [r7, #0]
 800b294:	691b      	ldr	r3, [r3, #16]
 800b296:	4313      	orrs	r3, r2
 800b298:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800b2a0:	683b      	ldr	r3, [r7, #0]
 800b2a2:	695b      	ldr	r3, [r3, #20]
 800b2a4:	4313      	orrs	r3, r2
 800b2a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	69db      	ldr	r3, [r3, #28]
 800b2b2:	4313      	orrs	r3, r2
 800b2b4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	68fa      	ldr	r2, [r7, #12]
 800b2bc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b2c6:	2300      	movs	r3, #0
}
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	3714      	adds	r7, #20
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	bc80      	pop	{r7}
 800b2d0:	4770      	bx	lr

0800b2d2 <atoi>:
 800b2d2:	220a      	movs	r2, #10
 800b2d4:	2100      	movs	r1, #0
 800b2d6:	f000 b87b 	b.w	800b3d0 <strtol>
	...

0800b2dc <_strtol_l.constprop.0>:
 800b2dc:	2b24      	cmp	r3, #36	@ 0x24
 800b2de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2e2:	4686      	mov	lr, r0
 800b2e4:	4690      	mov	r8, r2
 800b2e6:	d801      	bhi.n	800b2ec <_strtol_l.constprop.0+0x10>
 800b2e8:	2b01      	cmp	r3, #1
 800b2ea:	d106      	bne.n	800b2fa <_strtol_l.constprop.0+0x1e>
 800b2ec:	f000 f8b6 	bl	800b45c <__errno>
 800b2f0:	2316      	movs	r3, #22
 800b2f2:	6003      	str	r3, [r0, #0]
 800b2f4:	2000      	movs	r0, #0
 800b2f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2fa:	460d      	mov	r5, r1
 800b2fc:	4833      	ldr	r0, [pc, #204]	@ (800b3cc <_strtol_l.constprop.0+0xf0>)
 800b2fe:	462a      	mov	r2, r5
 800b300:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b304:	5d06      	ldrb	r6, [r0, r4]
 800b306:	f016 0608 	ands.w	r6, r6, #8
 800b30a:	d1f8      	bne.n	800b2fe <_strtol_l.constprop.0+0x22>
 800b30c:	2c2d      	cmp	r4, #45	@ 0x2d
 800b30e:	d12d      	bne.n	800b36c <_strtol_l.constprop.0+0x90>
 800b310:	2601      	movs	r6, #1
 800b312:	782c      	ldrb	r4, [r5, #0]
 800b314:	1c95      	adds	r5, r2, #2
 800b316:	f033 0210 	bics.w	r2, r3, #16
 800b31a:	d109      	bne.n	800b330 <_strtol_l.constprop.0+0x54>
 800b31c:	2c30      	cmp	r4, #48	@ 0x30
 800b31e:	d12a      	bne.n	800b376 <_strtol_l.constprop.0+0x9a>
 800b320:	782a      	ldrb	r2, [r5, #0]
 800b322:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b326:	2a58      	cmp	r2, #88	@ 0x58
 800b328:	d125      	bne.n	800b376 <_strtol_l.constprop.0+0x9a>
 800b32a:	2310      	movs	r3, #16
 800b32c:	786c      	ldrb	r4, [r5, #1]
 800b32e:	3502      	adds	r5, #2
 800b330:	2200      	movs	r2, #0
 800b332:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b336:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b33a:	fbbc f9f3 	udiv	r9, ip, r3
 800b33e:	4610      	mov	r0, r2
 800b340:	fb03 ca19 	mls	sl, r3, r9, ip
 800b344:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b348:	2f09      	cmp	r7, #9
 800b34a:	d81b      	bhi.n	800b384 <_strtol_l.constprop.0+0xa8>
 800b34c:	463c      	mov	r4, r7
 800b34e:	42a3      	cmp	r3, r4
 800b350:	dd27      	ble.n	800b3a2 <_strtol_l.constprop.0+0xc6>
 800b352:	1c57      	adds	r7, r2, #1
 800b354:	d007      	beq.n	800b366 <_strtol_l.constprop.0+0x8a>
 800b356:	4581      	cmp	r9, r0
 800b358:	d320      	bcc.n	800b39c <_strtol_l.constprop.0+0xc0>
 800b35a:	d101      	bne.n	800b360 <_strtol_l.constprop.0+0x84>
 800b35c:	45a2      	cmp	sl, r4
 800b35e:	db1d      	blt.n	800b39c <_strtol_l.constprop.0+0xc0>
 800b360:	2201      	movs	r2, #1
 800b362:	fb00 4003 	mla	r0, r0, r3, r4
 800b366:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b36a:	e7eb      	b.n	800b344 <_strtol_l.constprop.0+0x68>
 800b36c:	2c2b      	cmp	r4, #43	@ 0x2b
 800b36e:	bf04      	itt	eq
 800b370:	782c      	ldrbeq	r4, [r5, #0]
 800b372:	1c95      	addeq	r5, r2, #2
 800b374:	e7cf      	b.n	800b316 <_strtol_l.constprop.0+0x3a>
 800b376:	2b00      	cmp	r3, #0
 800b378:	d1da      	bne.n	800b330 <_strtol_l.constprop.0+0x54>
 800b37a:	2c30      	cmp	r4, #48	@ 0x30
 800b37c:	bf0c      	ite	eq
 800b37e:	2308      	moveq	r3, #8
 800b380:	230a      	movne	r3, #10
 800b382:	e7d5      	b.n	800b330 <_strtol_l.constprop.0+0x54>
 800b384:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b388:	2f19      	cmp	r7, #25
 800b38a:	d801      	bhi.n	800b390 <_strtol_l.constprop.0+0xb4>
 800b38c:	3c37      	subs	r4, #55	@ 0x37
 800b38e:	e7de      	b.n	800b34e <_strtol_l.constprop.0+0x72>
 800b390:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b394:	2f19      	cmp	r7, #25
 800b396:	d804      	bhi.n	800b3a2 <_strtol_l.constprop.0+0xc6>
 800b398:	3c57      	subs	r4, #87	@ 0x57
 800b39a:	e7d8      	b.n	800b34e <_strtol_l.constprop.0+0x72>
 800b39c:	f04f 32ff 	mov.w	r2, #4294967295
 800b3a0:	e7e1      	b.n	800b366 <_strtol_l.constprop.0+0x8a>
 800b3a2:	1c53      	adds	r3, r2, #1
 800b3a4:	d108      	bne.n	800b3b8 <_strtol_l.constprop.0+0xdc>
 800b3a6:	2322      	movs	r3, #34	@ 0x22
 800b3a8:	4660      	mov	r0, ip
 800b3aa:	f8ce 3000 	str.w	r3, [lr]
 800b3ae:	f1b8 0f00 	cmp.w	r8, #0
 800b3b2:	d0a0      	beq.n	800b2f6 <_strtol_l.constprop.0+0x1a>
 800b3b4:	1e69      	subs	r1, r5, #1
 800b3b6:	e006      	b.n	800b3c6 <_strtol_l.constprop.0+0xea>
 800b3b8:	b106      	cbz	r6, 800b3bc <_strtol_l.constprop.0+0xe0>
 800b3ba:	4240      	negs	r0, r0
 800b3bc:	f1b8 0f00 	cmp.w	r8, #0
 800b3c0:	d099      	beq.n	800b2f6 <_strtol_l.constprop.0+0x1a>
 800b3c2:	2a00      	cmp	r2, #0
 800b3c4:	d1f6      	bne.n	800b3b4 <_strtol_l.constprop.0+0xd8>
 800b3c6:	f8c8 1000 	str.w	r1, [r8]
 800b3ca:	e794      	b.n	800b2f6 <_strtol_l.constprop.0+0x1a>
 800b3cc:	0800bff7 	.word	0x0800bff7

0800b3d0 <strtol>:
 800b3d0:	4613      	mov	r3, r2
 800b3d2:	460a      	mov	r2, r1
 800b3d4:	4601      	mov	r1, r0
 800b3d6:	4802      	ldr	r0, [pc, #8]	@ (800b3e0 <strtol+0x10>)
 800b3d8:	6800      	ldr	r0, [r0, #0]
 800b3da:	f7ff bf7f 	b.w	800b2dc <_strtol_l.constprop.0>
 800b3de:	bf00      	nop
 800b3e0:	20000048 	.word	0x20000048

0800b3e4 <sniprintf>:
 800b3e4:	b40c      	push	{r2, r3}
 800b3e6:	b530      	push	{r4, r5, lr}
 800b3e8:	4b17      	ldr	r3, [pc, #92]	@ (800b448 <sniprintf+0x64>)
 800b3ea:	1e0c      	subs	r4, r1, #0
 800b3ec:	681d      	ldr	r5, [r3, #0]
 800b3ee:	b09d      	sub	sp, #116	@ 0x74
 800b3f0:	da08      	bge.n	800b404 <sniprintf+0x20>
 800b3f2:	238b      	movs	r3, #139	@ 0x8b
 800b3f4:	f04f 30ff 	mov.w	r0, #4294967295
 800b3f8:	602b      	str	r3, [r5, #0]
 800b3fa:	b01d      	add	sp, #116	@ 0x74
 800b3fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b400:	b002      	add	sp, #8
 800b402:	4770      	bx	lr
 800b404:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b408:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b40c:	bf0c      	ite	eq
 800b40e:	4623      	moveq	r3, r4
 800b410:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b414:	9304      	str	r3, [sp, #16]
 800b416:	9307      	str	r3, [sp, #28]
 800b418:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b41c:	9002      	str	r0, [sp, #8]
 800b41e:	9006      	str	r0, [sp, #24]
 800b420:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b424:	4628      	mov	r0, r5
 800b426:	ab21      	add	r3, sp, #132	@ 0x84
 800b428:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b42a:	a902      	add	r1, sp, #8
 800b42c:	9301      	str	r3, [sp, #4]
 800b42e:	f000 f993 	bl	800b758 <_svfiprintf_r>
 800b432:	1c43      	adds	r3, r0, #1
 800b434:	bfbc      	itt	lt
 800b436:	238b      	movlt	r3, #139	@ 0x8b
 800b438:	602b      	strlt	r3, [r5, #0]
 800b43a:	2c00      	cmp	r4, #0
 800b43c:	d0dd      	beq.n	800b3fa <sniprintf+0x16>
 800b43e:	2200      	movs	r2, #0
 800b440:	9b02      	ldr	r3, [sp, #8]
 800b442:	701a      	strb	r2, [r3, #0]
 800b444:	e7d9      	b.n	800b3fa <sniprintf+0x16>
 800b446:	bf00      	nop
 800b448:	20000048 	.word	0x20000048

0800b44c <memset>:
 800b44c:	4603      	mov	r3, r0
 800b44e:	4402      	add	r2, r0
 800b450:	4293      	cmp	r3, r2
 800b452:	d100      	bne.n	800b456 <memset+0xa>
 800b454:	4770      	bx	lr
 800b456:	f803 1b01 	strb.w	r1, [r3], #1
 800b45a:	e7f9      	b.n	800b450 <memset+0x4>

0800b45c <__errno>:
 800b45c:	4b01      	ldr	r3, [pc, #4]	@ (800b464 <__errno+0x8>)
 800b45e:	6818      	ldr	r0, [r3, #0]
 800b460:	4770      	bx	lr
 800b462:	bf00      	nop
 800b464:	20000048 	.word	0x20000048

0800b468 <__libc_init_array>:
 800b468:	b570      	push	{r4, r5, r6, lr}
 800b46a:	2600      	movs	r6, #0
 800b46c:	4d0c      	ldr	r5, [pc, #48]	@ (800b4a0 <__libc_init_array+0x38>)
 800b46e:	4c0d      	ldr	r4, [pc, #52]	@ (800b4a4 <__libc_init_array+0x3c>)
 800b470:	1b64      	subs	r4, r4, r5
 800b472:	10a4      	asrs	r4, r4, #2
 800b474:	42a6      	cmp	r6, r4
 800b476:	d109      	bne.n	800b48c <__libc_init_array+0x24>
 800b478:	f000 fc78 	bl	800bd6c <_init>
 800b47c:	2600      	movs	r6, #0
 800b47e:	4d0a      	ldr	r5, [pc, #40]	@ (800b4a8 <__libc_init_array+0x40>)
 800b480:	4c0a      	ldr	r4, [pc, #40]	@ (800b4ac <__libc_init_array+0x44>)
 800b482:	1b64      	subs	r4, r4, r5
 800b484:	10a4      	asrs	r4, r4, #2
 800b486:	42a6      	cmp	r6, r4
 800b488:	d105      	bne.n	800b496 <__libc_init_array+0x2e>
 800b48a:	bd70      	pop	{r4, r5, r6, pc}
 800b48c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b490:	4798      	blx	r3
 800b492:	3601      	adds	r6, #1
 800b494:	e7ee      	b.n	800b474 <__libc_init_array+0xc>
 800b496:	f855 3b04 	ldr.w	r3, [r5], #4
 800b49a:	4798      	blx	r3
 800b49c:	3601      	adds	r6, #1
 800b49e:	e7f2      	b.n	800b486 <__libc_init_array+0x1e>
 800b4a0:	0800c134 	.word	0x0800c134
 800b4a4:	0800c134 	.word	0x0800c134
 800b4a8:	0800c134 	.word	0x0800c134
 800b4ac:	0800c138 	.word	0x0800c138

0800b4b0 <__retarget_lock_acquire_recursive>:
 800b4b0:	4770      	bx	lr

0800b4b2 <__retarget_lock_release_recursive>:
 800b4b2:	4770      	bx	lr

0800b4b4 <_free_r>:
 800b4b4:	b538      	push	{r3, r4, r5, lr}
 800b4b6:	4605      	mov	r5, r0
 800b4b8:	2900      	cmp	r1, #0
 800b4ba:	d040      	beq.n	800b53e <_free_r+0x8a>
 800b4bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b4c0:	1f0c      	subs	r4, r1, #4
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	bfb8      	it	lt
 800b4c6:	18e4      	addlt	r4, r4, r3
 800b4c8:	f000 f8de 	bl	800b688 <__malloc_lock>
 800b4cc:	4a1c      	ldr	r2, [pc, #112]	@ (800b540 <_free_r+0x8c>)
 800b4ce:	6813      	ldr	r3, [r2, #0]
 800b4d0:	b933      	cbnz	r3, 800b4e0 <_free_r+0x2c>
 800b4d2:	6063      	str	r3, [r4, #4]
 800b4d4:	6014      	str	r4, [r2, #0]
 800b4d6:	4628      	mov	r0, r5
 800b4d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b4dc:	f000 b8da 	b.w	800b694 <__malloc_unlock>
 800b4e0:	42a3      	cmp	r3, r4
 800b4e2:	d908      	bls.n	800b4f6 <_free_r+0x42>
 800b4e4:	6820      	ldr	r0, [r4, #0]
 800b4e6:	1821      	adds	r1, r4, r0
 800b4e8:	428b      	cmp	r3, r1
 800b4ea:	bf01      	itttt	eq
 800b4ec:	6819      	ldreq	r1, [r3, #0]
 800b4ee:	685b      	ldreq	r3, [r3, #4]
 800b4f0:	1809      	addeq	r1, r1, r0
 800b4f2:	6021      	streq	r1, [r4, #0]
 800b4f4:	e7ed      	b.n	800b4d2 <_free_r+0x1e>
 800b4f6:	461a      	mov	r2, r3
 800b4f8:	685b      	ldr	r3, [r3, #4]
 800b4fa:	b10b      	cbz	r3, 800b500 <_free_r+0x4c>
 800b4fc:	42a3      	cmp	r3, r4
 800b4fe:	d9fa      	bls.n	800b4f6 <_free_r+0x42>
 800b500:	6811      	ldr	r1, [r2, #0]
 800b502:	1850      	adds	r0, r2, r1
 800b504:	42a0      	cmp	r0, r4
 800b506:	d10b      	bne.n	800b520 <_free_r+0x6c>
 800b508:	6820      	ldr	r0, [r4, #0]
 800b50a:	4401      	add	r1, r0
 800b50c:	1850      	adds	r0, r2, r1
 800b50e:	4283      	cmp	r3, r0
 800b510:	6011      	str	r1, [r2, #0]
 800b512:	d1e0      	bne.n	800b4d6 <_free_r+0x22>
 800b514:	6818      	ldr	r0, [r3, #0]
 800b516:	685b      	ldr	r3, [r3, #4]
 800b518:	4408      	add	r0, r1
 800b51a:	6010      	str	r0, [r2, #0]
 800b51c:	6053      	str	r3, [r2, #4]
 800b51e:	e7da      	b.n	800b4d6 <_free_r+0x22>
 800b520:	d902      	bls.n	800b528 <_free_r+0x74>
 800b522:	230c      	movs	r3, #12
 800b524:	602b      	str	r3, [r5, #0]
 800b526:	e7d6      	b.n	800b4d6 <_free_r+0x22>
 800b528:	6820      	ldr	r0, [r4, #0]
 800b52a:	1821      	adds	r1, r4, r0
 800b52c:	428b      	cmp	r3, r1
 800b52e:	bf01      	itttt	eq
 800b530:	6819      	ldreq	r1, [r3, #0]
 800b532:	685b      	ldreq	r3, [r3, #4]
 800b534:	1809      	addeq	r1, r1, r0
 800b536:	6021      	streq	r1, [r4, #0]
 800b538:	6063      	str	r3, [r4, #4]
 800b53a:	6054      	str	r4, [r2, #4]
 800b53c:	e7cb      	b.n	800b4d6 <_free_r+0x22>
 800b53e:	bd38      	pop	{r3, r4, r5, pc}
 800b540:	200002d8 	.word	0x200002d8

0800b544 <sbrk_aligned>:
 800b544:	b570      	push	{r4, r5, r6, lr}
 800b546:	4e0f      	ldr	r6, [pc, #60]	@ (800b584 <sbrk_aligned+0x40>)
 800b548:	460c      	mov	r4, r1
 800b54a:	6831      	ldr	r1, [r6, #0]
 800b54c:	4605      	mov	r5, r0
 800b54e:	b911      	cbnz	r1, 800b556 <sbrk_aligned+0x12>
 800b550:	f000 fbaa 	bl	800bca8 <_sbrk_r>
 800b554:	6030      	str	r0, [r6, #0]
 800b556:	4621      	mov	r1, r4
 800b558:	4628      	mov	r0, r5
 800b55a:	f000 fba5 	bl	800bca8 <_sbrk_r>
 800b55e:	1c43      	adds	r3, r0, #1
 800b560:	d103      	bne.n	800b56a <sbrk_aligned+0x26>
 800b562:	f04f 34ff 	mov.w	r4, #4294967295
 800b566:	4620      	mov	r0, r4
 800b568:	bd70      	pop	{r4, r5, r6, pc}
 800b56a:	1cc4      	adds	r4, r0, #3
 800b56c:	f024 0403 	bic.w	r4, r4, #3
 800b570:	42a0      	cmp	r0, r4
 800b572:	d0f8      	beq.n	800b566 <sbrk_aligned+0x22>
 800b574:	1a21      	subs	r1, r4, r0
 800b576:	4628      	mov	r0, r5
 800b578:	f000 fb96 	bl	800bca8 <_sbrk_r>
 800b57c:	3001      	adds	r0, #1
 800b57e:	d1f2      	bne.n	800b566 <sbrk_aligned+0x22>
 800b580:	e7ef      	b.n	800b562 <sbrk_aligned+0x1e>
 800b582:	bf00      	nop
 800b584:	200002d4 	.word	0x200002d4

0800b588 <_malloc_r>:
 800b588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b58c:	1ccd      	adds	r5, r1, #3
 800b58e:	f025 0503 	bic.w	r5, r5, #3
 800b592:	3508      	adds	r5, #8
 800b594:	2d0c      	cmp	r5, #12
 800b596:	bf38      	it	cc
 800b598:	250c      	movcc	r5, #12
 800b59a:	2d00      	cmp	r5, #0
 800b59c:	4606      	mov	r6, r0
 800b59e:	db01      	blt.n	800b5a4 <_malloc_r+0x1c>
 800b5a0:	42a9      	cmp	r1, r5
 800b5a2:	d904      	bls.n	800b5ae <_malloc_r+0x26>
 800b5a4:	230c      	movs	r3, #12
 800b5a6:	6033      	str	r3, [r6, #0]
 800b5a8:	2000      	movs	r0, #0
 800b5aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b684 <_malloc_r+0xfc>
 800b5b2:	f000 f869 	bl	800b688 <__malloc_lock>
 800b5b6:	f8d8 3000 	ldr.w	r3, [r8]
 800b5ba:	461c      	mov	r4, r3
 800b5bc:	bb44      	cbnz	r4, 800b610 <_malloc_r+0x88>
 800b5be:	4629      	mov	r1, r5
 800b5c0:	4630      	mov	r0, r6
 800b5c2:	f7ff ffbf 	bl	800b544 <sbrk_aligned>
 800b5c6:	1c43      	adds	r3, r0, #1
 800b5c8:	4604      	mov	r4, r0
 800b5ca:	d158      	bne.n	800b67e <_malloc_r+0xf6>
 800b5cc:	f8d8 4000 	ldr.w	r4, [r8]
 800b5d0:	4627      	mov	r7, r4
 800b5d2:	2f00      	cmp	r7, #0
 800b5d4:	d143      	bne.n	800b65e <_malloc_r+0xd6>
 800b5d6:	2c00      	cmp	r4, #0
 800b5d8:	d04b      	beq.n	800b672 <_malloc_r+0xea>
 800b5da:	6823      	ldr	r3, [r4, #0]
 800b5dc:	4639      	mov	r1, r7
 800b5de:	4630      	mov	r0, r6
 800b5e0:	eb04 0903 	add.w	r9, r4, r3
 800b5e4:	f000 fb60 	bl	800bca8 <_sbrk_r>
 800b5e8:	4581      	cmp	r9, r0
 800b5ea:	d142      	bne.n	800b672 <_malloc_r+0xea>
 800b5ec:	6821      	ldr	r1, [r4, #0]
 800b5ee:	4630      	mov	r0, r6
 800b5f0:	1a6d      	subs	r5, r5, r1
 800b5f2:	4629      	mov	r1, r5
 800b5f4:	f7ff ffa6 	bl	800b544 <sbrk_aligned>
 800b5f8:	3001      	adds	r0, #1
 800b5fa:	d03a      	beq.n	800b672 <_malloc_r+0xea>
 800b5fc:	6823      	ldr	r3, [r4, #0]
 800b5fe:	442b      	add	r3, r5
 800b600:	6023      	str	r3, [r4, #0]
 800b602:	f8d8 3000 	ldr.w	r3, [r8]
 800b606:	685a      	ldr	r2, [r3, #4]
 800b608:	bb62      	cbnz	r2, 800b664 <_malloc_r+0xdc>
 800b60a:	f8c8 7000 	str.w	r7, [r8]
 800b60e:	e00f      	b.n	800b630 <_malloc_r+0xa8>
 800b610:	6822      	ldr	r2, [r4, #0]
 800b612:	1b52      	subs	r2, r2, r5
 800b614:	d420      	bmi.n	800b658 <_malloc_r+0xd0>
 800b616:	2a0b      	cmp	r2, #11
 800b618:	d917      	bls.n	800b64a <_malloc_r+0xc2>
 800b61a:	1961      	adds	r1, r4, r5
 800b61c:	42a3      	cmp	r3, r4
 800b61e:	6025      	str	r5, [r4, #0]
 800b620:	bf18      	it	ne
 800b622:	6059      	strne	r1, [r3, #4]
 800b624:	6863      	ldr	r3, [r4, #4]
 800b626:	bf08      	it	eq
 800b628:	f8c8 1000 	streq.w	r1, [r8]
 800b62c:	5162      	str	r2, [r4, r5]
 800b62e:	604b      	str	r3, [r1, #4]
 800b630:	4630      	mov	r0, r6
 800b632:	f000 f82f 	bl	800b694 <__malloc_unlock>
 800b636:	f104 000b 	add.w	r0, r4, #11
 800b63a:	1d23      	adds	r3, r4, #4
 800b63c:	f020 0007 	bic.w	r0, r0, #7
 800b640:	1ac2      	subs	r2, r0, r3
 800b642:	bf1c      	itt	ne
 800b644:	1a1b      	subne	r3, r3, r0
 800b646:	50a3      	strne	r3, [r4, r2]
 800b648:	e7af      	b.n	800b5aa <_malloc_r+0x22>
 800b64a:	6862      	ldr	r2, [r4, #4]
 800b64c:	42a3      	cmp	r3, r4
 800b64e:	bf0c      	ite	eq
 800b650:	f8c8 2000 	streq.w	r2, [r8]
 800b654:	605a      	strne	r2, [r3, #4]
 800b656:	e7eb      	b.n	800b630 <_malloc_r+0xa8>
 800b658:	4623      	mov	r3, r4
 800b65a:	6864      	ldr	r4, [r4, #4]
 800b65c:	e7ae      	b.n	800b5bc <_malloc_r+0x34>
 800b65e:	463c      	mov	r4, r7
 800b660:	687f      	ldr	r7, [r7, #4]
 800b662:	e7b6      	b.n	800b5d2 <_malloc_r+0x4a>
 800b664:	461a      	mov	r2, r3
 800b666:	685b      	ldr	r3, [r3, #4]
 800b668:	42a3      	cmp	r3, r4
 800b66a:	d1fb      	bne.n	800b664 <_malloc_r+0xdc>
 800b66c:	2300      	movs	r3, #0
 800b66e:	6053      	str	r3, [r2, #4]
 800b670:	e7de      	b.n	800b630 <_malloc_r+0xa8>
 800b672:	230c      	movs	r3, #12
 800b674:	4630      	mov	r0, r6
 800b676:	6033      	str	r3, [r6, #0]
 800b678:	f000 f80c 	bl	800b694 <__malloc_unlock>
 800b67c:	e794      	b.n	800b5a8 <_malloc_r+0x20>
 800b67e:	6005      	str	r5, [r0, #0]
 800b680:	e7d6      	b.n	800b630 <_malloc_r+0xa8>
 800b682:	bf00      	nop
 800b684:	200002d8 	.word	0x200002d8

0800b688 <__malloc_lock>:
 800b688:	4801      	ldr	r0, [pc, #4]	@ (800b690 <__malloc_lock+0x8>)
 800b68a:	f7ff bf11 	b.w	800b4b0 <__retarget_lock_acquire_recursive>
 800b68e:	bf00      	nop
 800b690:	200002d0 	.word	0x200002d0

0800b694 <__malloc_unlock>:
 800b694:	4801      	ldr	r0, [pc, #4]	@ (800b69c <__malloc_unlock+0x8>)
 800b696:	f7ff bf0c 	b.w	800b4b2 <__retarget_lock_release_recursive>
 800b69a:	bf00      	nop
 800b69c:	200002d0 	.word	0x200002d0

0800b6a0 <__ssputs_r>:
 800b6a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6a4:	461f      	mov	r7, r3
 800b6a6:	688e      	ldr	r6, [r1, #8]
 800b6a8:	4682      	mov	sl, r0
 800b6aa:	42be      	cmp	r6, r7
 800b6ac:	460c      	mov	r4, r1
 800b6ae:	4690      	mov	r8, r2
 800b6b0:	680b      	ldr	r3, [r1, #0]
 800b6b2:	d82d      	bhi.n	800b710 <__ssputs_r+0x70>
 800b6b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b6b8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b6bc:	d026      	beq.n	800b70c <__ssputs_r+0x6c>
 800b6be:	6965      	ldr	r5, [r4, #20]
 800b6c0:	6909      	ldr	r1, [r1, #16]
 800b6c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b6c6:	eba3 0901 	sub.w	r9, r3, r1
 800b6ca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b6ce:	1c7b      	adds	r3, r7, #1
 800b6d0:	444b      	add	r3, r9
 800b6d2:	106d      	asrs	r5, r5, #1
 800b6d4:	429d      	cmp	r5, r3
 800b6d6:	bf38      	it	cc
 800b6d8:	461d      	movcc	r5, r3
 800b6da:	0553      	lsls	r3, r2, #21
 800b6dc:	d527      	bpl.n	800b72e <__ssputs_r+0x8e>
 800b6de:	4629      	mov	r1, r5
 800b6e0:	f7ff ff52 	bl	800b588 <_malloc_r>
 800b6e4:	4606      	mov	r6, r0
 800b6e6:	b360      	cbz	r0, 800b742 <__ssputs_r+0xa2>
 800b6e8:	464a      	mov	r2, r9
 800b6ea:	6921      	ldr	r1, [r4, #16]
 800b6ec:	f000 fafa 	bl	800bce4 <memcpy>
 800b6f0:	89a3      	ldrh	r3, [r4, #12]
 800b6f2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b6f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b6fa:	81a3      	strh	r3, [r4, #12]
 800b6fc:	6126      	str	r6, [r4, #16]
 800b6fe:	444e      	add	r6, r9
 800b700:	6026      	str	r6, [r4, #0]
 800b702:	463e      	mov	r6, r7
 800b704:	6165      	str	r5, [r4, #20]
 800b706:	eba5 0509 	sub.w	r5, r5, r9
 800b70a:	60a5      	str	r5, [r4, #8]
 800b70c:	42be      	cmp	r6, r7
 800b70e:	d900      	bls.n	800b712 <__ssputs_r+0x72>
 800b710:	463e      	mov	r6, r7
 800b712:	4632      	mov	r2, r6
 800b714:	4641      	mov	r1, r8
 800b716:	6820      	ldr	r0, [r4, #0]
 800b718:	f000 faac 	bl	800bc74 <memmove>
 800b71c:	2000      	movs	r0, #0
 800b71e:	68a3      	ldr	r3, [r4, #8]
 800b720:	1b9b      	subs	r3, r3, r6
 800b722:	60a3      	str	r3, [r4, #8]
 800b724:	6823      	ldr	r3, [r4, #0]
 800b726:	4433      	add	r3, r6
 800b728:	6023      	str	r3, [r4, #0]
 800b72a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b72e:	462a      	mov	r2, r5
 800b730:	f000 fae6 	bl	800bd00 <_realloc_r>
 800b734:	4606      	mov	r6, r0
 800b736:	2800      	cmp	r0, #0
 800b738:	d1e0      	bne.n	800b6fc <__ssputs_r+0x5c>
 800b73a:	4650      	mov	r0, sl
 800b73c:	6921      	ldr	r1, [r4, #16]
 800b73e:	f7ff feb9 	bl	800b4b4 <_free_r>
 800b742:	230c      	movs	r3, #12
 800b744:	f8ca 3000 	str.w	r3, [sl]
 800b748:	89a3      	ldrh	r3, [r4, #12]
 800b74a:	f04f 30ff 	mov.w	r0, #4294967295
 800b74e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b752:	81a3      	strh	r3, [r4, #12]
 800b754:	e7e9      	b.n	800b72a <__ssputs_r+0x8a>
	...

0800b758 <_svfiprintf_r>:
 800b758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b75c:	4698      	mov	r8, r3
 800b75e:	898b      	ldrh	r3, [r1, #12]
 800b760:	4607      	mov	r7, r0
 800b762:	061b      	lsls	r3, r3, #24
 800b764:	460d      	mov	r5, r1
 800b766:	4614      	mov	r4, r2
 800b768:	b09d      	sub	sp, #116	@ 0x74
 800b76a:	d510      	bpl.n	800b78e <_svfiprintf_r+0x36>
 800b76c:	690b      	ldr	r3, [r1, #16]
 800b76e:	b973      	cbnz	r3, 800b78e <_svfiprintf_r+0x36>
 800b770:	2140      	movs	r1, #64	@ 0x40
 800b772:	f7ff ff09 	bl	800b588 <_malloc_r>
 800b776:	6028      	str	r0, [r5, #0]
 800b778:	6128      	str	r0, [r5, #16]
 800b77a:	b930      	cbnz	r0, 800b78a <_svfiprintf_r+0x32>
 800b77c:	230c      	movs	r3, #12
 800b77e:	603b      	str	r3, [r7, #0]
 800b780:	f04f 30ff 	mov.w	r0, #4294967295
 800b784:	b01d      	add	sp, #116	@ 0x74
 800b786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b78a:	2340      	movs	r3, #64	@ 0x40
 800b78c:	616b      	str	r3, [r5, #20]
 800b78e:	2300      	movs	r3, #0
 800b790:	9309      	str	r3, [sp, #36]	@ 0x24
 800b792:	2320      	movs	r3, #32
 800b794:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b798:	2330      	movs	r3, #48	@ 0x30
 800b79a:	f04f 0901 	mov.w	r9, #1
 800b79e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b7a2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800b93c <_svfiprintf_r+0x1e4>
 800b7a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b7aa:	4623      	mov	r3, r4
 800b7ac:	469a      	mov	sl, r3
 800b7ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b7b2:	b10a      	cbz	r2, 800b7b8 <_svfiprintf_r+0x60>
 800b7b4:	2a25      	cmp	r2, #37	@ 0x25
 800b7b6:	d1f9      	bne.n	800b7ac <_svfiprintf_r+0x54>
 800b7b8:	ebba 0b04 	subs.w	fp, sl, r4
 800b7bc:	d00b      	beq.n	800b7d6 <_svfiprintf_r+0x7e>
 800b7be:	465b      	mov	r3, fp
 800b7c0:	4622      	mov	r2, r4
 800b7c2:	4629      	mov	r1, r5
 800b7c4:	4638      	mov	r0, r7
 800b7c6:	f7ff ff6b 	bl	800b6a0 <__ssputs_r>
 800b7ca:	3001      	adds	r0, #1
 800b7cc:	f000 80a7 	beq.w	800b91e <_svfiprintf_r+0x1c6>
 800b7d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b7d2:	445a      	add	r2, fp
 800b7d4:	9209      	str	r2, [sp, #36]	@ 0x24
 800b7d6:	f89a 3000 	ldrb.w	r3, [sl]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	f000 809f 	beq.w	800b91e <_svfiprintf_r+0x1c6>
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	f04f 32ff 	mov.w	r2, #4294967295
 800b7e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b7ea:	f10a 0a01 	add.w	sl, sl, #1
 800b7ee:	9304      	str	r3, [sp, #16]
 800b7f0:	9307      	str	r3, [sp, #28]
 800b7f2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b7f6:	931a      	str	r3, [sp, #104]	@ 0x68
 800b7f8:	4654      	mov	r4, sl
 800b7fa:	2205      	movs	r2, #5
 800b7fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b800:	484e      	ldr	r0, [pc, #312]	@ (800b93c <_svfiprintf_r+0x1e4>)
 800b802:	f000 fa61 	bl	800bcc8 <memchr>
 800b806:	9a04      	ldr	r2, [sp, #16]
 800b808:	b9d8      	cbnz	r0, 800b842 <_svfiprintf_r+0xea>
 800b80a:	06d0      	lsls	r0, r2, #27
 800b80c:	bf44      	itt	mi
 800b80e:	2320      	movmi	r3, #32
 800b810:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b814:	0711      	lsls	r1, r2, #28
 800b816:	bf44      	itt	mi
 800b818:	232b      	movmi	r3, #43	@ 0x2b
 800b81a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b81e:	f89a 3000 	ldrb.w	r3, [sl]
 800b822:	2b2a      	cmp	r3, #42	@ 0x2a
 800b824:	d015      	beq.n	800b852 <_svfiprintf_r+0xfa>
 800b826:	4654      	mov	r4, sl
 800b828:	2000      	movs	r0, #0
 800b82a:	f04f 0c0a 	mov.w	ip, #10
 800b82e:	9a07      	ldr	r2, [sp, #28]
 800b830:	4621      	mov	r1, r4
 800b832:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b836:	3b30      	subs	r3, #48	@ 0x30
 800b838:	2b09      	cmp	r3, #9
 800b83a:	d94b      	bls.n	800b8d4 <_svfiprintf_r+0x17c>
 800b83c:	b1b0      	cbz	r0, 800b86c <_svfiprintf_r+0x114>
 800b83e:	9207      	str	r2, [sp, #28]
 800b840:	e014      	b.n	800b86c <_svfiprintf_r+0x114>
 800b842:	eba0 0308 	sub.w	r3, r0, r8
 800b846:	fa09 f303 	lsl.w	r3, r9, r3
 800b84a:	4313      	orrs	r3, r2
 800b84c:	46a2      	mov	sl, r4
 800b84e:	9304      	str	r3, [sp, #16]
 800b850:	e7d2      	b.n	800b7f8 <_svfiprintf_r+0xa0>
 800b852:	9b03      	ldr	r3, [sp, #12]
 800b854:	1d19      	adds	r1, r3, #4
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	9103      	str	r1, [sp, #12]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	bfbb      	ittet	lt
 800b85e:	425b      	neglt	r3, r3
 800b860:	f042 0202 	orrlt.w	r2, r2, #2
 800b864:	9307      	strge	r3, [sp, #28]
 800b866:	9307      	strlt	r3, [sp, #28]
 800b868:	bfb8      	it	lt
 800b86a:	9204      	strlt	r2, [sp, #16]
 800b86c:	7823      	ldrb	r3, [r4, #0]
 800b86e:	2b2e      	cmp	r3, #46	@ 0x2e
 800b870:	d10a      	bne.n	800b888 <_svfiprintf_r+0x130>
 800b872:	7863      	ldrb	r3, [r4, #1]
 800b874:	2b2a      	cmp	r3, #42	@ 0x2a
 800b876:	d132      	bne.n	800b8de <_svfiprintf_r+0x186>
 800b878:	9b03      	ldr	r3, [sp, #12]
 800b87a:	3402      	adds	r4, #2
 800b87c:	1d1a      	adds	r2, r3, #4
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	9203      	str	r2, [sp, #12]
 800b882:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b886:	9305      	str	r3, [sp, #20]
 800b888:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800b940 <_svfiprintf_r+0x1e8>
 800b88c:	2203      	movs	r2, #3
 800b88e:	4650      	mov	r0, sl
 800b890:	7821      	ldrb	r1, [r4, #0]
 800b892:	f000 fa19 	bl	800bcc8 <memchr>
 800b896:	b138      	cbz	r0, 800b8a8 <_svfiprintf_r+0x150>
 800b898:	2240      	movs	r2, #64	@ 0x40
 800b89a:	9b04      	ldr	r3, [sp, #16]
 800b89c:	eba0 000a 	sub.w	r0, r0, sl
 800b8a0:	4082      	lsls	r2, r0
 800b8a2:	4313      	orrs	r3, r2
 800b8a4:	3401      	adds	r4, #1
 800b8a6:	9304      	str	r3, [sp, #16]
 800b8a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8ac:	2206      	movs	r2, #6
 800b8ae:	4825      	ldr	r0, [pc, #148]	@ (800b944 <_svfiprintf_r+0x1ec>)
 800b8b0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b8b4:	f000 fa08 	bl	800bcc8 <memchr>
 800b8b8:	2800      	cmp	r0, #0
 800b8ba:	d036      	beq.n	800b92a <_svfiprintf_r+0x1d2>
 800b8bc:	4b22      	ldr	r3, [pc, #136]	@ (800b948 <_svfiprintf_r+0x1f0>)
 800b8be:	bb1b      	cbnz	r3, 800b908 <_svfiprintf_r+0x1b0>
 800b8c0:	9b03      	ldr	r3, [sp, #12]
 800b8c2:	3307      	adds	r3, #7
 800b8c4:	f023 0307 	bic.w	r3, r3, #7
 800b8c8:	3308      	adds	r3, #8
 800b8ca:	9303      	str	r3, [sp, #12]
 800b8cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8ce:	4433      	add	r3, r6
 800b8d0:	9309      	str	r3, [sp, #36]	@ 0x24
 800b8d2:	e76a      	b.n	800b7aa <_svfiprintf_r+0x52>
 800b8d4:	460c      	mov	r4, r1
 800b8d6:	2001      	movs	r0, #1
 800b8d8:	fb0c 3202 	mla	r2, ip, r2, r3
 800b8dc:	e7a8      	b.n	800b830 <_svfiprintf_r+0xd8>
 800b8de:	2300      	movs	r3, #0
 800b8e0:	f04f 0c0a 	mov.w	ip, #10
 800b8e4:	4619      	mov	r1, r3
 800b8e6:	3401      	adds	r4, #1
 800b8e8:	9305      	str	r3, [sp, #20]
 800b8ea:	4620      	mov	r0, r4
 800b8ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b8f0:	3a30      	subs	r2, #48	@ 0x30
 800b8f2:	2a09      	cmp	r2, #9
 800b8f4:	d903      	bls.n	800b8fe <_svfiprintf_r+0x1a6>
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d0c6      	beq.n	800b888 <_svfiprintf_r+0x130>
 800b8fa:	9105      	str	r1, [sp, #20]
 800b8fc:	e7c4      	b.n	800b888 <_svfiprintf_r+0x130>
 800b8fe:	4604      	mov	r4, r0
 800b900:	2301      	movs	r3, #1
 800b902:	fb0c 2101 	mla	r1, ip, r1, r2
 800b906:	e7f0      	b.n	800b8ea <_svfiprintf_r+0x192>
 800b908:	ab03      	add	r3, sp, #12
 800b90a:	9300      	str	r3, [sp, #0]
 800b90c:	462a      	mov	r2, r5
 800b90e:	4638      	mov	r0, r7
 800b910:	4b0e      	ldr	r3, [pc, #56]	@ (800b94c <_svfiprintf_r+0x1f4>)
 800b912:	a904      	add	r1, sp, #16
 800b914:	f3af 8000 	nop.w
 800b918:	1c42      	adds	r2, r0, #1
 800b91a:	4606      	mov	r6, r0
 800b91c:	d1d6      	bne.n	800b8cc <_svfiprintf_r+0x174>
 800b91e:	89ab      	ldrh	r3, [r5, #12]
 800b920:	065b      	lsls	r3, r3, #25
 800b922:	f53f af2d 	bmi.w	800b780 <_svfiprintf_r+0x28>
 800b926:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b928:	e72c      	b.n	800b784 <_svfiprintf_r+0x2c>
 800b92a:	ab03      	add	r3, sp, #12
 800b92c:	9300      	str	r3, [sp, #0]
 800b92e:	462a      	mov	r2, r5
 800b930:	4638      	mov	r0, r7
 800b932:	4b06      	ldr	r3, [pc, #24]	@ (800b94c <_svfiprintf_r+0x1f4>)
 800b934:	a904      	add	r1, sp, #16
 800b936:	f000 f87d 	bl	800ba34 <_printf_i>
 800b93a:	e7ed      	b.n	800b918 <_svfiprintf_r+0x1c0>
 800b93c:	0800c0f7 	.word	0x0800c0f7
 800b940:	0800c0fd 	.word	0x0800c0fd
 800b944:	0800c101 	.word	0x0800c101
 800b948:	00000000 	.word	0x00000000
 800b94c:	0800b6a1 	.word	0x0800b6a1

0800b950 <_printf_common>:
 800b950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b954:	4616      	mov	r6, r2
 800b956:	4698      	mov	r8, r3
 800b958:	688a      	ldr	r2, [r1, #8]
 800b95a:	690b      	ldr	r3, [r1, #16]
 800b95c:	4607      	mov	r7, r0
 800b95e:	4293      	cmp	r3, r2
 800b960:	bfb8      	it	lt
 800b962:	4613      	movlt	r3, r2
 800b964:	6033      	str	r3, [r6, #0]
 800b966:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b96a:	460c      	mov	r4, r1
 800b96c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b970:	b10a      	cbz	r2, 800b976 <_printf_common+0x26>
 800b972:	3301      	adds	r3, #1
 800b974:	6033      	str	r3, [r6, #0]
 800b976:	6823      	ldr	r3, [r4, #0]
 800b978:	0699      	lsls	r1, r3, #26
 800b97a:	bf42      	ittt	mi
 800b97c:	6833      	ldrmi	r3, [r6, #0]
 800b97e:	3302      	addmi	r3, #2
 800b980:	6033      	strmi	r3, [r6, #0]
 800b982:	6825      	ldr	r5, [r4, #0]
 800b984:	f015 0506 	ands.w	r5, r5, #6
 800b988:	d106      	bne.n	800b998 <_printf_common+0x48>
 800b98a:	f104 0a19 	add.w	sl, r4, #25
 800b98e:	68e3      	ldr	r3, [r4, #12]
 800b990:	6832      	ldr	r2, [r6, #0]
 800b992:	1a9b      	subs	r3, r3, r2
 800b994:	42ab      	cmp	r3, r5
 800b996:	dc2b      	bgt.n	800b9f0 <_printf_common+0xa0>
 800b998:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b99c:	6822      	ldr	r2, [r4, #0]
 800b99e:	3b00      	subs	r3, #0
 800b9a0:	bf18      	it	ne
 800b9a2:	2301      	movne	r3, #1
 800b9a4:	0692      	lsls	r2, r2, #26
 800b9a6:	d430      	bmi.n	800ba0a <_printf_common+0xba>
 800b9a8:	4641      	mov	r1, r8
 800b9aa:	4638      	mov	r0, r7
 800b9ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b9b0:	47c8      	blx	r9
 800b9b2:	3001      	adds	r0, #1
 800b9b4:	d023      	beq.n	800b9fe <_printf_common+0xae>
 800b9b6:	6823      	ldr	r3, [r4, #0]
 800b9b8:	6922      	ldr	r2, [r4, #16]
 800b9ba:	f003 0306 	and.w	r3, r3, #6
 800b9be:	2b04      	cmp	r3, #4
 800b9c0:	bf14      	ite	ne
 800b9c2:	2500      	movne	r5, #0
 800b9c4:	6833      	ldreq	r3, [r6, #0]
 800b9c6:	f04f 0600 	mov.w	r6, #0
 800b9ca:	bf08      	it	eq
 800b9cc:	68e5      	ldreq	r5, [r4, #12]
 800b9ce:	f104 041a 	add.w	r4, r4, #26
 800b9d2:	bf08      	it	eq
 800b9d4:	1aed      	subeq	r5, r5, r3
 800b9d6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800b9da:	bf08      	it	eq
 800b9dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b9e0:	4293      	cmp	r3, r2
 800b9e2:	bfc4      	itt	gt
 800b9e4:	1a9b      	subgt	r3, r3, r2
 800b9e6:	18ed      	addgt	r5, r5, r3
 800b9e8:	42b5      	cmp	r5, r6
 800b9ea:	d11a      	bne.n	800ba22 <_printf_common+0xd2>
 800b9ec:	2000      	movs	r0, #0
 800b9ee:	e008      	b.n	800ba02 <_printf_common+0xb2>
 800b9f0:	2301      	movs	r3, #1
 800b9f2:	4652      	mov	r2, sl
 800b9f4:	4641      	mov	r1, r8
 800b9f6:	4638      	mov	r0, r7
 800b9f8:	47c8      	blx	r9
 800b9fa:	3001      	adds	r0, #1
 800b9fc:	d103      	bne.n	800ba06 <_printf_common+0xb6>
 800b9fe:	f04f 30ff 	mov.w	r0, #4294967295
 800ba02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba06:	3501      	adds	r5, #1
 800ba08:	e7c1      	b.n	800b98e <_printf_common+0x3e>
 800ba0a:	2030      	movs	r0, #48	@ 0x30
 800ba0c:	18e1      	adds	r1, r4, r3
 800ba0e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ba12:	1c5a      	adds	r2, r3, #1
 800ba14:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ba18:	4422      	add	r2, r4
 800ba1a:	3302      	adds	r3, #2
 800ba1c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ba20:	e7c2      	b.n	800b9a8 <_printf_common+0x58>
 800ba22:	2301      	movs	r3, #1
 800ba24:	4622      	mov	r2, r4
 800ba26:	4641      	mov	r1, r8
 800ba28:	4638      	mov	r0, r7
 800ba2a:	47c8      	blx	r9
 800ba2c:	3001      	adds	r0, #1
 800ba2e:	d0e6      	beq.n	800b9fe <_printf_common+0xae>
 800ba30:	3601      	adds	r6, #1
 800ba32:	e7d9      	b.n	800b9e8 <_printf_common+0x98>

0800ba34 <_printf_i>:
 800ba34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ba38:	7e0f      	ldrb	r7, [r1, #24]
 800ba3a:	4691      	mov	r9, r2
 800ba3c:	2f78      	cmp	r7, #120	@ 0x78
 800ba3e:	4680      	mov	r8, r0
 800ba40:	460c      	mov	r4, r1
 800ba42:	469a      	mov	sl, r3
 800ba44:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ba46:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ba4a:	d807      	bhi.n	800ba5c <_printf_i+0x28>
 800ba4c:	2f62      	cmp	r7, #98	@ 0x62
 800ba4e:	d80a      	bhi.n	800ba66 <_printf_i+0x32>
 800ba50:	2f00      	cmp	r7, #0
 800ba52:	f000 80d3 	beq.w	800bbfc <_printf_i+0x1c8>
 800ba56:	2f58      	cmp	r7, #88	@ 0x58
 800ba58:	f000 80ba 	beq.w	800bbd0 <_printf_i+0x19c>
 800ba5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ba60:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ba64:	e03a      	b.n	800badc <_printf_i+0xa8>
 800ba66:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ba6a:	2b15      	cmp	r3, #21
 800ba6c:	d8f6      	bhi.n	800ba5c <_printf_i+0x28>
 800ba6e:	a101      	add	r1, pc, #4	@ (adr r1, 800ba74 <_printf_i+0x40>)
 800ba70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ba74:	0800bacd 	.word	0x0800bacd
 800ba78:	0800bae1 	.word	0x0800bae1
 800ba7c:	0800ba5d 	.word	0x0800ba5d
 800ba80:	0800ba5d 	.word	0x0800ba5d
 800ba84:	0800ba5d 	.word	0x0800ba5d
 800ba88:	0800ba5d 	.word	0x0800ba5d
 800ba8c:	0800bae1 	.word	0x0800bae1
 800ba90:	0800ba5d 	.word	0x0800ba5d
 800ba94:	0800ba5d 	.word	0x0800ba5d
 800ba98:	0800ba5d 	.word	0x0800ba5d
 800ba9c:	0800ba5d 	.word	0x0800ba5d
 800baa0:	0800bbe3 	.word	0x0800bbe3
 800baa4:	0800bb0b 	.word	0x0800bb0b
 800baa8:	0800bb9d 	.word	0x0800bb9d
 800baac:	0800ba5d 	.word	0x0800ba5d
 800bab0:	0800ba5d 	.word	0x0800ba5d
 800bab4:	0800bc05 	.word	0x0800bc05
 800bab8:	0800ba5d 	.word	0x0800ba5d
 800babc:	0800bb0b 	.word	0x0800bb0b
 800bac0:	0800ba5d 	.word	0x0800ba5d
 800bac4:	0800ba5d 	.word	0x0800ba5d
 800bac8:	0800bba5 	.word	0x0800bba5
 800bacc:	6833      	ldr	r3, [r6, #0]
 800bace:	1d1a      	adds	r2, r3, #4
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	6032      	str	r2, [r6, #0]
 800bad4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bad8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800badc:	2301      	movs	r3, #1
 800bade:	e09e      	b.n	800bc1e <_printf_i+0x1ea>
 800bae0:	6833      	ldr	r3, [r6, #0]
 800bae2:	6820      	ldr	r0, [r4, #0]
 800bae4:	1d19      	adds	r1, r3, #4
 800bae6:	6031      	str	r1, [r6, #0]
 800bae8:	0606      	lsls	r6, r0, #24
 800baea:	d501      	bpl.n	800baf0 <_printf_i+0xbc>
 800baec:	681d      	ldr	r5, [r3, #0]
 800baee:	e003      	b.n	800baf8 <_printf_i+0xc4>
 800baf0:	0645      	lsls	r5, r0, #25
 800baf2:	d5fb      	bpl.n	800baec <_printf_i+0xb8>
 800baf4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800baf8:	2d00      	cmp	r5, #0
 800bafa:	da03      	bge.n	800bb04 <_printf_i+0xd0>
 800bafc:	232d      	movs	r3, #45	@ 0x2d
 800bafe:	426d      	negs	r5, r5
 800bb00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bb04:	230a      	movs	r3, #10
 800bb06:	4859      	ldr	r0, [pc, #356]	@ (800bc6c <_printf_i+0x238>)
 800bb08:	e011      	b.n	800bb2e <_printf_i+0xfa>
 800bb0a:	6821      	ldr	r1, [r4, #0]
 800bb0c:	6833      	ldr	r3, [r6, #0]
 800bb0e:	0608      	lsls	r0, r1, #24
 800bb10:	f853 5b04 	ldr.w	r5, [r3], #4
 800bb14:	d402      	bmi.n	800bb1c <_printf_i+0xe8>
 800bb16:	0649      	lsls	r1, r1, #25
 800bb18:	bf48      	it	mi
 800bb1a:	b2ad      	uxthmi	r5, r5
 800bb1c:	2f6f      	cmp	r7, #111	@ 0x6f
 800bb1e:	6033      	str	r3, [r6, #0]
 800bb20:	bf14      	ite	ne
 800bb22:	230a      	movne	r3, #10
 800bb24:	2308      	moveq	r3, #8
 800bb26:	4851      	ldr	r0, [pc, #324]	@ (800bc6c <_printf_i+0x238>)
 800bb28:	2100      	movs	r1, #0
 800bb2a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bb2e:	6866      	ldr	r6, [r4, #4]
 800bb30:	2e00      	cmp	r6, #0
 800bb32:	bfa8      	it	ge
 800bb34:	6821      	ldrge	r1, [r4, #0]
 800bb36:	60a6      	str	r6, [r4, #8]
 800bb38:	bfa4      	itt	ge
 800bb3a:	f021 0104 	bicge.w	r1, r1, #4
 800bb3e:	6021      	strge	r1, [r4, #0]
 800bb40:	b90d      	cbnz	r5, 800bb46 <_printf_i+0x112>
 800bb42:	2e00      	cmp	r6, #0
 800bb44:	d04b      	beq.n	800bbde <_printf_i+0x1aa>
 800bb46:	4616      	mov	r6, r2
 800bb48:	fbb5 f1f3 	udiv	r1, r5, r3
 800bb4c:	fb03 5711 	mls	r7, r3, r1, r5
 800bb50:	5dc7      	ldrb	r7, [r0, r7]
 800bb52:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bb56:	462f      	mov	r7, r5
 800bb58:	42bb      	cmp	r3, r7
 800bb5a:	460d      	mov	r5, r1
 800bb5c:	d9f4      	bls.n	800bb48 <_printf_i+0x114>
 800bb5e:	2b08      	cmp	r3, #8
 800bb60:	d10b      	bne.n	800bb7a <_printf_i+0x146>
 800bb62:	6823      	ldr	r3, [r4, #0]
 800bb64:	07df      	lsls	r7, r3, #31
 800bb66:	d508      	bpl.n	800bb7a <_printf_i+0x146>
 800bb68:	6923      	ldr	r3, [r4, #16]
 800bb6a:	6861      	ldr	r1, [r4, #4]
 800bb6c:	4299      	cmp	r1, r3
 800bb6e:	bfde      	ittt	le
 800bb70:	2330      	movle	r3, #48	@ 0x30
 800bb72:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bb76:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bb7a:	1b92      	subs	r2, r2, r6
 800bb7c:	6122      	str	r2, [r4, #16]
 800bb7e:	464b      	mov	r3, r9
 800bb80:	4621      	mov	r1, r4
 800bb82:	4640      	mov	r0, r8
 800bb84:	f8cd a000 	str.w	sl, [sp]
 800bb88:	aa03      	add	r2, sp, #12
 800bb8a:	f7ff fee1 	bl	800b950 <_printf_common>
 800bb8e:	3001      	adds	r0, #1
 800bb90:	d14a      	bne.n	800bc28 <_printf_i+0x1f4>
 800bb92:	f04f 30ff 	mov.w	r0, #4294967295
 800bb96:	b004      	add	sp, #16
 800bb98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb9c:	6823      	ldr	r3, [r4, #0]
 800bb9e:	f043 0320 	orr.w	r3, r3, #32
 800bba2:	6023      	str	r3, [r4, #0]
 800bba4:	2778      	movs	r7, #120	@ 0x78
 800bba6:	4832      	ldr	r0, [pc, #200]	@ (800bc70 <_printf_i+0x23c>)
 800bba8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bbac:	6823      	ldr	r3, [r4, #0]
 800bbae:	6831      	ldr	r1, [r6, #0]
 800bbb0:	061f      	lsls	r7, r3, #24
 800bbb2:	f851 5b04 	ldr.w	r5, [r1], #4
 800bbb6:	d402      	bmi.n	800bbbe <_printf_i+0x18a>
 800bbb8:	065f      	lsls	r7, r3, #25
 800bbba:	bf48      	it	mi
 800bbbc:	b2ad      	uxthmi	r5, r5
 800bbbe:	6031      	str	r1, [r6, #0]
 800bbc0:	07d9      	lsls	r1, r3, #31
 800bbc2:	bf44      	itt	mi
 800bbc4:	f043 0320 	orrmi.w	r3, r3, #32
 800bbc8:	6023      	strmi	r3, [r4, #0]
 800bbca:	b11d      	cbz	r5, 800bbd4 <_printf_i+0x1a0>
 800bbcc:	2310      	movs	r3, #16
 800bbce:	e7ab      	b.n	800bb28 <_printf_i+0xf4>
 800bbd0:	4826      	ldr	r0, [pc, #152]	@ (800bc6c <_printf_i+0x238>)
 800bbd2:	e7e9      	b.n	800bba8 <_printf_i+0x174>
 800bbd4:	6823      	ldr	r3, [r4, #0]
 800bbd6:	f023 0320 	bic.w	r3, r3, #32
 800bbda:	6023      	str	r3, [r4, #0]
 800bbdc:	e7f6      	b.n	800bbcc <_printf_i+0x198>
 800bbde:	4616      	mov	r6, r2
 800bbe0:	e7bd      	b.n	800bb5e <_printf_i+0x12a>
 800bbe2:	6833      	ldr	r3, [r6, #0]
 800bbe4:	6825      	ldr	r5, [r4, #0]
 800bbe6:	1d18      	adds	r0, r3, #4
 800bbe8:	6961      	ldr	r1, [r4, #20]
 800bbea:	6030      	str	r0, [r6, #0]
 800bbec:	062e      	lsls	r6, r5, #24
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	d501      	bpl.n	800bbf6 <_printf_i+0x1c2>
 800bbf2:	6019      	str	r1, [r3, #0]
 800bbf4:	e002      	b.n	800bbfc <_printf_i+0x1c8>
 800bbf6:	0668      	lsls	r0, r5, #25
 800bbf8:	d5fb      	bpl.n	800bbf2 <_printf_i+0x1be>
 800bbfa:	8019      	strh	r1, [r3, #0]
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	4616      	mov	r6, r2
 800bc00:	6123      	str	r3, [r4, #16]
 800bc02:	e7bc      	b.n	800bb7e <_printf_i+0x14a>
 800bc04:	6833      	ldr	r3, [r6, #0]
 800bc06:	2100      	movs	r1, #0
 800bc08:	1d1a      	adds	r2, r3, #4
 800bc0a:	6032      	str	r2, [r6, #0]
 800bc0c:	681e      	ldr	r6, [r3, #0]
 800bc0e:	6862      	ldr	r2, [r4, #4]
 800bc10:	4630      	mov	r0, r6
 800bc12:	f000 f859 	bl	800bcc8 <memchr>
 800bc16:	b108      	cbz	r0, 800bc1c <_printf_i+0x1e8>
 800bc18:	1b80      	subs	r0, r0, r6
 800bc1a:	6060      	str	r0, [r4, #4]
 800bc1c:	6863      	ldr	r3, [r4, #4]
 800bc1e:	6123      	str	r3, [r4, #16]
 800bc20:	2300      	movs	r3, #0
 800bc22:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bc26:	e7aa      	b.n	800bb7e <_printf_i+0x14a>
 800bc28:	4632      	mov	r2, r6
 800bc2a:	4649      	mov	r1, r9
 800bc2c:	4640      	mov	r0, r8
 800bc2e:	6923      	ldr	r3, [r4, #16]
 800bc30:	47d0      	blx	sl
 800bc32:	3001      	adds	r0, #1
 800bc34:	d0ad      	beq.n	800bb92 <_printf_i+0x15e>
 800bc36:	6823      	ldr	r3, [r4, #0]
 800bc38:	079b      	lsls	r3, r3, #30
 800bc3a:	d413      	bmi.n	800bc64 <_printf_i+0x230>
 800bc3c:	68e0      	ldr	r0, [r4, #12]
 800bc3e:	9b03      	ldr	r3, [sp, #12]
 800bc40:	4298      	cmp	r0, r3
 800bc42:	bfb8      	it	lt
 800bc44:	4618      	movlt	r0, r3
 800bc46:	e7a6      	b.n	800bb96 <_printf_i+0x162>
 800bc48:	2301      	movs	r3, #1
 800bc4a:	4632      	mov	r2, r6
 800bc4c:	4649      	mov	r1, r9
 800bc4e:	4640      	mov	r0, r8
 800bc50:	47d0      	blx	sl
 800bc52:	3001      	adds	r0, #1
 800bc54:	d09d      	beq.n	800bb92 <_printf_i+0x15e>
 800bc56:	3501      	adds	r5, #1
 800bc58:	68e3      	ldr	r3, [r4, #12]
 800bc5a:	9903      	ldr	r1, [sp, #12]
 800bc5c:	1a5b      	subs	r3, r3, r1
 800bc5e:	42ab      	cmp	r3, r5
 800bc60:	dcf2      	bgt.n	800bc48 <_printf_i+0x214>
 800bc62:	e7eb      	b.n	800bc3c <_printf_i+0x208>
 800bc64:	2500      	movs	r5, #0
 800bc66:	f104 0619 	add.w	r6, r4, #25
 800bc6a:	e7f5      	b.n	800bc58 <_printf_i+0x224>
 800bc6c:	0800c108 	.word	0x0800c108
 800bc70:	0800c119 	.word	0x0800c119

0800bc74 <memmove>:
 800bc74:	4288      	cmp	r0, r1
 800bc76:	b510      	push	{r4, lr}
 800bc78:	eb01 0402 	add.w	r4, r1, r2
 800bc7c:	d902      	bls.n	800bc84 <memmove+0x10>
 800bc7e:	4284      	cmp	r4, r0
 800bc80:	4623      	mov	r3, r4
 800bc82:	d807      	bhi.n	800bc94 <memmove+0x20>
 800bc84:	1e43      	subs	r3, r0, #1
 800bc86:	42a1      	cmp	r1, r4
 800bc88:	d008      	beq.n	800bc9c <memmove+0x28>
 800bc8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bc8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bc92:	e7f8      	b.n	800bc86 <memmove+0x12>
 800bc94:	4601      	mov	r1, r0
 800bc96:	4402      	add	r2, r0
 800bc98:	428a      	cmp	r2, r1
 800bc9a:	d100      	bne.n	800bc9e <memmove+0x2a>
 800bc9c:	bd10      	pop	{r4, pc}
 800bc9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bca2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bca6:	e7f7      	b.n	800bc98 <memmove+0x24>

0800bca8 <_sbrk_r>:
 800bca8:	b538      	push	{r3, r4, r5, lr}
 800bcaa:	2300      	movs	r3, #0
 800bcac:	4d05      	ldr	r5, [pc, #20]	@ (800bcc4 <_sbrk_r+0x1c>)
 800bcae:	4604      	mov	r4, r0
 800bcb0:	4608      	mov	r0, r1
 800bcb2:	602b      	str	r3, [r5, #0]
 800bcb4:	f7fb fc2c 	bl	8007510 <_sbrk>
 800bcb8:	1c43      	adds	r3, r0, #1
 800bcba:	d102      	bne.n	800bcc2 <_sbrk_r+0x1a>
 800bcbc:	682b      	ldr	r3, [r5, #0]
 800bcbe:	b103      	cbz	r3, 800bcc2 <_sbrk_r+0x1a>
 800bcc0:	6023      	str	r3, [r4, #0]
 800bcc2:	bd38      	pop	{r3, r4, r5, pc}
 800bcc4:	200002cc 	.word	0x200002cc

0800bcc8 <memchr>:
 800bcc8:	4603      	mov	r3, r0
 800bcca:	b510      	push	{r4, lr}
 800bccc:	b2c9      	uxtb	r1, r1
 800bcce:	4402      	add	r2, r0
 800bcd0:	4293      	cmp	r3, r2
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	d101      	bne.n	800bcda <memchr+0x12>
 800bcd6:	2000      	movs	r0, #0
 800bcd8:	e003      	b.n	800bce2 <memchr+0x1a>
 800bcda:	7804      	ldrb	r4, [r0, #0]
 800bcdc:	3301      	adds	r3, #1
 800bcde:	428c      	cmp	r4, r1
 800bce0:	d1f6      	bne.n	800bcd0 <memchr+0x8>
 800bce2:	bd10      	pop	{r4, pc}

0800bce4 <memcpy>:
 800bce4:	440a      	add	r2, r1
 800bce6:	4291      	cmp	r1, r2
 800bce8:	f100 33ff 	add.w	r3, r0, #4294967295
 800bcec:	d100      	bne.n	800bcf0 <memcpy+0xc>
 800bcee:	4770      	bx	lr
 800bcf0:	b510      	push	{r4, lr}
 800bcf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bcf6:	4291      	cmp	r1, r2
 800bcf8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bcfc:	d1f9      	bne.n	800bcf2 <memcpy+0xe>
 800bcfe:	bd10      	pop	{r4, pc}

0800bd00 <_realloc_r>:
 800bd00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd04:	4680      	mov	r8, r0
 800bd06:	4615      	mov	r5, r2
 800bd08:	460c      	mov	r4, r1
 800bd0a:	b921      	cbnz	r1, 800bd16 <_realloc_r+0x16>
 800bd0c:	4611      	mov	r1, r2
 800bd0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd12:	f7ff bc39 	b.w	800b588 <_malloc_r>
 800bd16:	b92a      	cbnz	r2, 800bd24 <_realloc_r+0x24>
 800bd18:	f7ff fbcc 	bl	800b4b4 <_free_r>
 800bd1c:	2400      	movs	r4, #0
 800bd1e:	4620      	mov	r0, r4
 800bd20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd24:	f000 f81a 	bl	800bd5c <_malloc_usable_size_r>
 800bd28:	4285      	cmp	r5, r0
 800bd2a:	4606      	mov	r6, r0
 800bd2c:	d802      	bhi.n	800bd34 <_realloc_r+0x34>
 800bd2e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800bd32:	d8f4      	bhi.n	800bd1e <_realloc_r+0x1e>
 800bd34:	4629      	mov	r1, r5
 800bd36:	4640      	mov	r0, r8
 800bd38:	f7ff fc26 	bl	800b588 <_malloc_r>
 800bd3c:	4607      	mov	r7, r0
 800bd3e:	2800      	cmp	r0, #0
 800bd40:	d0ec      	beq.n	800bd1c <_realloc_r+0x1c>
 800bd42:	42b5      	cmp	r5, r6
 800bd44:	462a      	mov	r2, r5
 800bd46:	4621      	mov	r1, r4
 800bd48:	bf28      	it	cs
 800bd4a:	4632      	movcs	r2, r6
 800bd4c:	f7ff ffca 	bl	800bce4 <memcpy>
 800bd50:	4621      	mov	r1, r4
 800bd52:	4640      	mov	r0, r8
 800bd54:	f7ff fbae 	bl	800b4b4 <_free_r>
 800bd58:	463c      	mov	r4, r7
 800bd5a:	e7e0      	b.n	800bd1e <_realloc_r+0x1e>

0800bd5c <_malloc_usable_size_r>:
 800bd5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd60:	1f18      	subs	r0, r3, #4
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	bfbc      	itt	lt
 800bd66:	580b      	ldrlt	r3, [r1, r0]
 800bd68:	18c0      	addlt	r0, r0, r3
 800bd6a:	4770      	bx	lr

0800bd6c <_init>:
 800bd6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd6e:	bf00      	nop
 800bd70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd72:	bc08      	pop	{r3}
 800bd74:	469e      	mov	lr, r3
 800bd76:	4770      	bx	lr

0800bd78 <_fini>:
 800bd78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd7a:	bf00      	nop
 800bd7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd7e:	bc08      	pop	{r3}
 800bd80:	469e      	mov	lr, r3
 800bd82:	4770      	bx	lr
