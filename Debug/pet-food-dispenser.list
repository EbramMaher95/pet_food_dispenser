
pet-food-dispenser.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c144  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d8  0800c250  0800c250  0000d250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c628  0800c628  0000e098  2**0
                  CONTENTS
  4 .ARM          00000008  0800c628  0800c628  0000d628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c630  0800c630  0000e098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c630  0800c630  0000d630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c634  0800c634  0000d634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000098  20000000  0800c638  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000250  20000098  0800c6d0  0000e098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e8  0800c6d0  0000e2e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000e098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ce4a  00000000  00000000  0000e0c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020c8  00000000  00000000  0001af0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d90  00000000  00000000  0001cfd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a87  00000000  00000000  0001dd68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000186fb  00000000  00000000  0001e7ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013435  00000000  00000000  00036eea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ace3  00000000  00000000  0004a31f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d5002  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e30  00000000  00000000  000d5048  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000d8e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000098 	.word	0x20000098
 8000128:	00000000 	.word	0x00000000
 800012c:	0800c238 	.word	0x0800c238

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000009c 	.word	0x2000009c
 8000148:	0800c238 	.word	0x0800c238

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000170:	b580      	push	{r7, lr}
 8000172:	b0a4      	sub	sp, #144	@ 0x90
 8000174:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000176:	f008 fa29 	bl	80085cc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800017a:	f007 fa07 	bl	800758c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800017e:	f007 fafd 	bl	800777c <MX_GPIO_Init>
	MX_TIM1_Init();
 8000182:	f007 fa77 	bl	8007674 <MX_TIM1_Init>
	MX_I2C2_Init();
 8000186:	f007 fa47 	bl	8007618 <MX_I2C2_Init>
	//initialize device drivers
	//first we initialize the lcd to display the updates
	//the LCD will be connected to: --> can be found in line 32 in the main.c file
	//A0,1,2,3 --> Data pins
	//A4:RS, A5:EN
	Alcd_Init(&lcd, 2, 16);
 800018a:	2210      	movs	r2, #16
 800018c:	2102      	movs	r1, #2
 800018e:	489e      	ldr	r0, [pc, #632]	@ (8000408 <main+0x298>)
 8000190:	f007 ffe6 	bl	8008160 <Alcd_Init>

	//clear display
	Alcd_Clear(&lcd);
 8000194:	489c      	ldr	r0, [pc, #624]	@ (8000408 <main+0x298>)
 8000196:	f008 f8b7 	bl	8008308 <Alcd_Clear>

	Keypad_Init(&kp);
 800019a:	489c      	ldr	r0, [pc, #624]	@ (800040c <main+0x29c>)
 800019c:	f008 f99a 	bl	80084d4 <Keypad_Init>

	//initialize the RTC
	Ds1307_init(&CLK, &hi2c2);
 80001a0:	499b      	ldr	r1, [pc, #620]	@ (8000410 <main+0x2a0>)
 80001a2:	489c      	ldr	r0, [pc, #624]	@ (8000414 <main+0x2a4>)
 80001a4:	f007 fd84 	bl	8007cb0 <Ds1307_init>

	//initialize the eeprom
	eeprom24c32_init(&memory, &hi2c2);
 80001a8:	4999      	ldr	r1, [pc, #612]	@ (8000410 <main+0x2a0>)
 80001aa:	489b      	ldr	r0, [pc, #620]	@ (8000418 <main+0x2a8>)
 80001ac:	f007 fca8 	bl	8007b00 <eeprom24c32_init>

	//to initiate the base (counter)
	HAL_TIM_Base_Start(&htim1);
 80001b0:	489a      	ldr	r0, [pc, #616]	@ (800041c <main+0x2ac>)
 80001b2:	f00a fe2d 	bl	800ae10 <HAL_TIM_Base_Start>

	//enable the OC pin (PWM pin)
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80001b6:	2100      	movs	r1, #0
 80001b8:	4898      	ldr	r0, [pc, #608]	@ (800041c <main+0x2ac>)
 80001ba:	f00a fec3 	bl	800af44 <HAL_TIM_PWM_Start>

	//to change the duty cycle -> CCR
	//range is from 999 to 1999 (according to calculations)

	//the servo is set at 0 degree upon starting
	TIM1->CCR1 = 999;
 80001be:	4b98      	ldr	r3, [pc, #608]	@ (8000420 <main+0x2b0>)
 80001c0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80001c4:	635a      	str	r2, [r3, #52]	@ 0x34

	//a flag if button is pressed
	uint8_t password_comp_flag, error_code, delay_flag, dosing_done_flag;
	int8_t status;
	password_comp_flag = 0;
 80001c6:	2300      	movs	r3, #0
 80001c8:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
	status = 0;
 80001cc:	2300      	movs	r3, #0
 80001ce:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
	error_code = 0;
 80001d2:	2300      	movs	r3, #0
 80001d4:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86

	// a string to save the RTC time
	char timeString[50];

	/*password section*/
	char menu_pass[] = "1234";
 80001d8:	4a92      	ldr	r2, [pc, #584]	@ (8000424 <main+0x2b4>)
 80001da:	f107 0320 	add.w	r3, r7, #32
 80001de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80001e2:	6018      	str	r0, [r3, #0]
 80001e4:	3304      	adds	r3, #4
 80001e6:	7019      	strb	r1, [r3, #0]
	char entered_password[5] = ""; // User input buffer (4 digits + null terminator)
 80001e8:	2300      	movs	r3, #0
 80001ea:	61bb      	str	r3, [r7, #24]
 80001ec:	2300      	movs	r3, #0
 80001ee:	773b      	strb	r3, [r7, #28]
	char time_date_buffer[5];
	uint16_t buffer;
	uint8_t input_index = 0;
 80001f0:	2300      	movs	r3, #0
 80001f2:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d

	// Variable to store the last date
	uint8_t last_date = CLK.date;
 80001f6:	4b87      	ldr	r3, [pc, #540]	@ (8000414 <main+0x2a4>)
 80001f8:	7b1b      	ldrb	r3, [r3, #12]
 80001fa:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

	// Set the number of times the loop
	uint8_t loop_count = 0;
 80001fe:	2300      	movs	r3, #0
 8000200:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c

	//getting the dosing parameters from the eeprom
	//the dosing number
	eeprom24c32_read(&memory, &dose_num, doses_number);
 8000204:	4b88      	ldr	r3, [pc, #544]	@ (8000428 <main+0x2b8>)
 8000206:	b29a      	uxth	r2, r3
 8000208:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800020c:	4619      	mov	r1, r3
 800020e:	4882      	ldr	r0, [pc, #520]	@ (8000418 <main+0x2a8>)
 8000210:	f007 fcb2 	bl	8007b78 <eeprom24c32_read>

	//the dosing hour
	eeprom24c32_read(&memory, &dose_h, dosing_time_hours);
 8000214:	4b80      	ldr	r3, [pc, #512]	@ (8000418 <main+0x2a8>)
 8000216:	b29a      	uxth	r2, r3
 8000218:	f107 035f 	add.w	r3, r7, #95	@ 0x5f
 800021c:	4619      	mov	r1, r3
 800021e:	487e      	ldr	r0, [pc, #504]	@ (8000418 <main+0x2a8>)
 8000220:	f007 fcaa 	bl	8007b78 <eeprom24c32_read>

	//the dosing minue
	eeprom24c32_read(&memory, &dose_m, dosing_time_minutes);
 8000224:	4b81      	ldr	r3, [pc, #516]	@ (800042c <main+0x2bc>)
 8000226:	b29a      	uxth	r2, r3
 8000228:	f107 035e 	add.w	r3, r7, #94	@ 0x5e
 800022c:	4619      	mov	r1, r3
 800022e:	487a      	ldr	r0, [pc, #488]	@ (8000418 <main+0x2a8>)
 8000230:	f007 fca2 	bl	8007b78 <eeprom24c32_read>

	//the dosing second
	eeprom24c32_read(&memory, &dose_s, dosing_time_seconds);
 8000234:	4b7e      	ldr	r3, [pc, #504]	@ (8000430 <main+0x2c0>)
 8000236:	b29a      	uxth	r2, r3
 8000238:	f107 035d 	add.w	r3, r7, #93	@ 0x5d
 800023c:	4619      	mov	r1, r3
 800023e:	4876      	ldr	r0, [pc, #472]	@ (8000418 <main+0x2a8>)
 8000240:	f007 fc9a 	bl	8007b78 <eeprom24c32_read>

	//the dosing status
	//eeprom24c32_read(&memory, &dosing_done_flag, dosing_status);
	dosing_done_flag = 0;
 8000244:	2300      	movs	r3, #0
 8000246:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84

	//the dosing ticks
	eeprom24c32_read(&memory, &dosing_tick_sec, dosing_period);
 800024a:	4b7a      	ldr	r3, [pc, #488]	@ (8000434 <main+0x2c4>)
 800024c:	b29a      	uxth	r2, r3
 800024e:	f107 035b 	add.w	r3, r7, #91	@ 0x5b
 8000252:	4619      	mov	r1, r3
 8000254:	4870      	ldr	r0, [pc, #448]	@ (8000418 <main+0x2a8>)
 8000256:	f007 fc8f 	bl	8007b78 <eeprom24c32_read>

	general_delay = HAL_GetTick() + 250;
 800025a:	f008 fa0f 	bl	800867c <HAL_GetTick>
 800025e:	4603      	mov	r3, r0
 8000260:	33fa      	adds	r3, #250	@ 0xfa
 8000262:	677b      	str	r3, [r7, #116]	@ 0x74

	GPIO_InitTypeDef c = { .Mode = GPIO_MODE_OUTPUT_PP, .Pin = GPIO_PIN_13,
 8000264:	463b      	mov	r3, r7
 8000266:	2200      	movs	r2, #0
 8000268:	601a      	str	r2, [r3, #0]
 800026a:	605a      	str	r2, [r3, #4]
 800026c:	609a      	str	r2, [r3, #8]
 800026e:	60da      	str	r2, [r3, #12]
 8000270:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000274:	603b      	str	r3, [r7, #0]
 8000276:	2301      	movs	r3, #1
 8000278:	607b      	str	r3, [r7, #4]
 800027a:	2302      	movs	r3, #2
 800027c:	60fb      	str	r3, [r7, #12]
			.Speed = GPIO_SPEED_LOW };

	HAL_GPIO_Init(GPIOC, &c);
 800027e:	463b      	mov	r3, r7
 8000280:	4619      	mov	r1, r3
 8000282:	486d      	ldr	r0, [pc, #436]	@ (8000438 <main+0x2c8>)
 8000284:	f008 fb0c 	bl	80088a0 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 8000288:	2201      	movs	r2, #1
 800028a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800028e:	486a      	ldr	r0, [pc, #424]	@ (8000438 <main+0x2c8>)
 8000290:	f008 fc8a 	bl	8008ba8 <HAL_GPIO_WritePin>
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		//get the current tick number
		current_tick = HAL_GetTick();
 8000294:	f008 f9f2 	bl	800867c <HAL_GetTick>
 8000298:	67f8      	str	r0, [r7, #124]	@ 0x7c

		//in idle mode -> button flag is 0 and status is zero
		while ((status == 0) && (error_code == 0)
 800029a:	e19b      	b.n	80005d4 <main+0x464>
				&& (current_tick >= general_delay)) {

			//moving the motor to the 0 position
			TIM1->CCR1 = 999;
 800029c:	4b60      	ldr	r3, [pc, #384]	@ (8000420 <main+0x2b0>)
 800029e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80002a2:	635a      	str	r2, [r3, #52]	@ 0x34

			//get the current tick number
			current_tick = HAL_GetTick();
 80002a4:	f008 f9ea 	bl	800867c <HAL_GetTick>
 80002a8:	67f8      	str	r0, [r7, #124]	@ 0x7c

			//check if any button is pressed
			//check for any keypad input
			Keypad_Refresh(&kp);
 80002aa:	4858      	ldr	r0, [pc, #352]	@ (800040c <main+0x29c>)
 80002ac:	f008 f8da 	bl	8008464 <Keypad_Refresh>

			//in case menu is pressed -> move to state10
			if (Keypad_Get_Key(&kp, kp_button_save_menu)
 80002b0:	210c      	movs	r1, #12
 80002b2:	4856      	ldr	r0, [pc, #344]	@ (800040c <main+0x29c>)
 80002b4:	f008 f972 	bl	800859c <Keypad_Get_Key>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d006      	beq.n	80002cc <main+0x15c>
					&& (current_tick >= general_delay)) {
 80002be:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80002c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80002c2:	429a      	cmp	r2, r3
 80002c4:	d302      	bcc.n	80002cc <main+0x15c>
				status = 10;
 80002c6:	230a      	movs	r3, #10
 80002c8:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83

			}

			//in case force feeding is pressed -> move to state 54
			if (Keypad_Get_Key(&kp, kp_button_force_feed)
 80002cc:	210b      	movs	r1, #11
 80002ce:	484f      	ldr	r0, [pc, #316]	@ (800040c <main+0x29c>)
 80002d0:	f008 f964 	bl	800859c <Keypad_Get_Key>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d006      	beq.n	80002e8 <main+0x178>
					&& (current_tick >= general_delay)) {
 80002da:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80002dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80002de:	429a      	cmp	r2, r3
 80002e0:	d302      	bcc.n	80002e8 <main+0x178>
				status = 54;
 80002e2:	2336      	movs	r3, #54	@ 0x36
 80002e4:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83

			}

			//testing
			if (Keypad_Get_Key(&kp, kp_button_0)
 80002e8:	210d      	movs	r1, #13
 80002ea:	4848      	ldr	r0, [pc, #288]	@ (800040c <main+0x29c>)
 80002ec:	f008 f956 	bl	800859c <Keypad_Get_Key>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d01c      	beq.n	8000330 <main+0x1c0>
					&& (current_tick >= general_delay)) {
 80002f6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80002f8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d318      	bcc.n	8000330 <main+0x1c0>

				//moving the motor to the 0 position
				TIM1->CCR1 = 1999;
 80002fe:	4b48      	ldr	r3, [pc, #288]	@ (8000420 <main+0x2b0>)
 8000300:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000304:	635a      	str	r2, [r3, #52]	@ 0x34

				Alcd_Clear(&lcd);
 8000306:	4840      	ldr	r0, [pc, #256]	@ (8000408 <main+0x298>)
 8000308:	f007 fffe 	bl	8008308 <Alcd_Clear>

				Alcd_PutAt(&lcd, 0, 0, "test");
 800030c:	484b      	ldr	r0, [pc, #300]	@ (800043c <main+0x2cc>)
 800030e:	f008 f84f 	bl	80083b0 <Str_Len>
 8000312:	4603      	mov	r3, r0
 8000314:	b2db      	uxtb	r3, r3
 8000316:	9300      	str	r3, [sp, #0]
 8000318:	4b48      	ldr	r3, [pc, #288]	@ (800043c <main+0x2cc>)
 800031a:	2200      	movs	r2, #0
 800031c:	2100      	movs	r1, #0
 800031e:	483a      	ldr	r0, [pc, #232]	@ (8000408 <main+0x298>)
 8000320:	f007 ffd9 	bl	80082d6 <Alcd_PutAt_n>

				start_tick = HAL_GetTick();
 8000324:	f008 f9aa 	bl	800867c <HAL_GetTick>
 8000328:	6738      	str	r0, [r7, #112]	@ 0x70

				status = 55;
 800032a:	2337      	movs	r3, #55	@ 0x37
 800032c:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
				//reset the dosing flag
				//dosing_done_flag = 0;
			}

			//check if the dosing flag is down and the dosing time has reached
			if ((CLK.hour >= dose_h) && (dosing_done_flag == 0)) {
 8000330:	4b38      	ldr	r3, [pc, #224]	@ (8000414 <main+0x2a4>)
 8000332:	7a9a      	ldrb	r2, [r3, #10]
 8000334:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8000338:	429a      	cmp	r2, r3
 800033a:	d318      	bcc.n	800036e <main+0x1fe>
 800033c:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8000340:	2b00      	cmp	r3, #0
 8000342:	d114      	bne.n	800036e <main+0x1fe>

				//check if the minutes has reached
				if (CLK.min >= dose_m) {
 8000344:	4b33      	ldr	r3, [pc, #204]	@ (8000414 <main+0x2a4>)
 8000346:	7a5a      	ldrb	r2, [r3, #9]
 8000348:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 800034c:	429a      	cmp	r2, r3
 800034e:	d30e      	bcc.n	800036e <main+0x1fe>

					//check if the seconds has reached
					if (CLK.sec >= dose_s) {
 8000350:	4b30      	ldr	r3, [pc, #192]	@ (8000414 <main+0x2a4>)
 8000352:	7a1a      	ldrb	r2, [r3, #8]
 8000354:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 8000358:	429a      	cmp	r2, r3
 800035a:	d308      	bcc.n	800036e <main+0x1fe>

						//turn on the led -> for testing purposes
						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
 800035c:	2200      	movs	r2, #0
 800035e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000362:	4835      	ldr	r0, [pc, #212]	@ (8000438 <main+0x2c8>)
 8000364:	f008 fc20 	bl	8008ba8 <HAL_GPIO_WritePin>

						//go to scheduled feeding state
						status = 55;
 8000368:	2337      	movs	r3, #55	@ 0x37
 800036a:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
			}

			//displaying the time and date
			//the lcd will display the time
			// Read time from DS1307
			if (Ds1307_read(&CLK) == DS1307_OK) //in case reading is ok
 800036e:	4829      	ldr	r0, [pc, #164]	@ (8000414 <main+0x2a4>)
 8000370:	f007 fd6e 	bl	8007e50 <Ds1307_read>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	f040 810f 	bne.w	800059a <main+0x42a>
					{

				//check if the time format is 24h or 12h
				//in case of 12h
				if (CLK.format == 1) {
 800037c:	4b25      	ldr	r3, [pc, #148]	@ (8000414 <main+0x2a4>)
 800037e:	7c5b      	ldrb	r3, [r3, #17]
 8000380:	f003 0301 	and.w	r3, r3, #1
 8000384:	b2db      	uxtb	r3, r3
 8000386:	2b00      	cmp	r3, #0
 8000388:	f000 80a4 	beq.w	80004d4 <main+0x364>

					// display the time
					Alcd_Clear(&lcd);
 800038c:	481e      	ldr	r0, [pc, #120]	@ (8000408 <main+0x298>)
 800038e:	f007 ffbb 	bl	8008308 <Alcd_Clear>
					Alcd_Display_Control(&lcd, 1, 0, 0);
 8000392:	2300      	movs	r3, #0
 8000394:	2200      	movs	r2, #0
 8000396:	2101      	movs	r1, #1
 8000398:	481b      	ldr	r0, [pc, #108]	@ (8000408 <main+0x298>)
 800039a:	f007 ffc6 	bl	800832a <Alcd_Display_Control>
					snprintf(timeString, sizeof(timeString), "%02d:%02d:%02d",
							CLK.hour, CLK.min, CLK.sec);
 800039e:	4b1d      	ldr	r3, [pc, #116]	@ (8000414 <main+0x2a4>)
 80003a0:	7a9b      	ldrb	r3, [r3, #10]
					snprintf(timeString, sizeof(timeString), "%02d:%02d:%02d",
 80003a2:	4619      	mov	r1, r3
							CLK.hour, CLK.min, CLK.sec);
 80003a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000414 <main+0x2a4>)
 80003a6:	7a5b      	ldrb	r3, [r3, #9]
					snprintf(timeString, sizeof(timeString), "%02d:%02d:%02d",
 80003a8:	461a      	mov	r2, r3
							CLK.hour, CLK.min, CLK.sec);
 80003aa:	4b1a      	ldr	r3, [pc, #104]	@ (8000414 <main+0x2a4>)
 80003ac:	7a1b      	ldrb	r3, [r3, #8]
					snprintf(timeString, sizeof(timeString), "%02d:%02d:%02d",
 80003ae:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80003b2:	9301      	str	r3, [sp, #4]
 80003b4:	9200      	str	r2, [sp, #0]
 80003b6:	460b      	mov	r3, r1
 80003b8:	4a21      	ldr	r2, [pc, #132]	@ (8000440 <main+0x2d0>)
 80003ba:	2132      	movs	r1, #50	@ 0x32
 80003bc:	f00b fa78 	bl	800b8b0 <sniprintf>
					Alcd_PutAt_n(&lcd, 1, 0, timeString, strlen(timeString));
 80003c0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80003c4:	4618      	mov	r0, r3
 80003c6:	f7ff fecb 	bl	8000160 <strlen>
 80003ca:	4603      	mov	r3, r0
 80003cc:	b2db      	uxtb	r3, r3
 80003ce:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80003d2:	9300      	str	r3, [sp, #0]
 80003d4:	4613      	mov	r3, r2
 80003d6:	2200      	movs	r2, #0
 80003d8:	2101      	movs	r1, #1
 80003da:	480b      	ldr	r0, [pc, #44]	@ (8000408 <main+0x298>)
 80003dc:	f007 ff7b 	bl	80082d6 <Alcd_PutAt_n>

					//check for PM or AM
					//in case: AM
					if (CLK.AM_PM == 0) {
 80003e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000414 <main+0x2a4>)
 80003e2:	7c5b      	ldrb	r3, [r3, #17]
 80003e4:	f003 0302 	and.w	r3, r3, #2
 80003e8:	b2db      	uxtb	r3, r3
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d12c      	bne.n	8000448 <main+0x2d8>
						Alcd_PutAt(&lcd, 1, 9, "AM");
 80003ee:	4815      	ldr	r0, [pc, #84]	@ (8000444 <main+0x2d4>)
 80003f0:	f007 ffde 	bl	80083b0 <Str_Len>
 80003f4:	4603      	mov	r3, r0
 80003f6:	b2db      	uxtb	r3, r3
 80003f8:	9300      	str	r3, [sp, #0]
 80003fa:	4b12      	ldr	r3, [pc, #72]	@ (8000444 <main+0x2d4>)
 80003fc:	2209      	movs	r2, #9
 80003fe:	2101      	movs	r1, #1
 8000400:	4801      	ldr	r0, [pc, #4]	@ (8000408 <main+0x298>)
 8000402:	f007 ff68 	bl	80082d6 <Alcd_PutAt_n>
 8000406:	e02b      	b.n	8000460 <main+0x2f0>
 8000408:	2000001c 	.word	0x2000001c
 800040c:	20000000 	.word	0x20000000
 8000410:	200000b4 	.word	0x200000b4
 8000414:	20000150 	.word	0x20000150
 8000418:	20000168 	.word	0x20000168
 800041c:	20000108 	.word	0x20000108
 8000420:	40012c00 	.word	0x40012c00
 8000424:	0800c4c0 	.word	0x0800c4c0
 8000428:	20000174 	.word	0x20000174
 800042c:	2000016c 	.word	0x2000016c
 8000430:	20000170 	.word	0x20000170
 8000434:	20000180 	.word	0x20000180
 8000438:	40011000 	.word	0x40011000
 800043c:	0800c250 	.word	0x0800c250
 8000440:	0800c258 	.word	0x0800c258
 8000444:	0800c268 	.word	0x0800c268

					} else {
						Alcd_PutAt(&lcd, 1, 9, "PM");
 8000448:	48a5      	ldr	r0, [pc, #660]	@ (80006e0 <main+0x570>)
 800044a:	f007 ffb1 	bl	80083b0 <Str_Len>
 800044e:	4603      	mov	r3, r0
 8000450:	b2db      	uxtb	r3, r3
 8000452:	9300      	str	r3, [sp, #0]
 8000454:	4ba2      	ldr	r3, [pc, #648]	@ (80006e0 <main+0x570>)
 8000456:	2209      	movs	r2, #9
 8000458:	2101      	movs	r1, #1
 800045a:	48a2      	ldr	r0, [pc, #648]	@ (80006e4 <main+0x574>)
 800045c:	f007 ff3b 	bl	80082d6 <Alcd_PutAt_n>

					}

					snprintf(timeString, sizeof(timeString), "%02d-%02d-%04d",
							CLK.date, CLK.month, CLK.year);
 8000460:	4ba1      	ldr	r3, [pc, #644]	@ (80006e8 <main+0x578>)
 8000462:	7b1b      	ldrb	r3, [r3, #12]
					snprintf(timeString, sizeof(timeString), "%02d-%02d-%04d",
 8000464:	4619      	mov	r1, r3
							CLK.date, CLK.month, CLK.year);
 8000466:	4ba0      	ldr	r3, [pc, #640]	@ (80006e8 <main+0x578>)
 8000468:	7b5b      	ldrb	r3, [r3, #13]
					snprintf(timeString, sizeof(timeString), "%02d-%02d-%04d",
 800046a:	461a      	mov	r2, r3
							CLK.date, CLK.month, CLK.year);
 800046c:	4b9e      	ldr	r3, [pc, #632]	@ (80006e8 <main+0x578>)
 800046e:	89db      	ldrh	r3, [r3, #14]
					snprintf(timeString, sizeof(timeString), "%02d-%02d-%04d",
 8000470:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8000474:	9301      	str	r3, [sp, #4]
 8000476:	9200      	str	r2, [sp, #0]
 8000478:	460b      	mov	r3, r1
 800047a:	4a9c      	ldr	r2, [pc, #624]	@ (80006ec <main+0x57c>)
 800047c:	2132      	movs	r1, #50	@ 0x32
 800047e:	f00b fa17 	bl	800b8b0 <sniprintf>
					Alcd_PutAt_n(&lcd, 0, 0, timeString, strlen(timeString));
 8000482:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000486:	4618      	mov	r0, r3
 8000488:	f7ff fe6a 	bl	8000160 <strlen>
 800048c:	4603      	mov	r3, r0
 800048e:	b2db      	uxtb	r3, r3
 8000490:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8000494:	9300      	str	r3, [sp, #0]
 8000496:	4613      	mov	r3, r2
 8000498:	2200      	movs	r2, #0
 800049a:	2100      	movs	r1, #0
 800049c:	4891      	ldr	r0, [pc, #580]	@ (80006e4 <main+0x574>)
 800049e:	f007 ff1a 	bl	80082d6 <Alcd_PutAt_n>

					snprintf(timeString, sizeof(timeString), "%02d", status);
 80004a2:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 80004a6:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80004aa:	4a91      	ldr	r2, [pc, #580]	@ (80006f0 <main+0x580>)
 80004ac:	2132      	movs	r1, #50	@ 0x32
 80004ae:	f00b f9ff 	bl	800b8b0 <sniprintf>
					Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 80004b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80004b6:	4618      	mov	r0, r3
 80004b8:	f7ff fe52 	bl	8000160 <strlen>
 80004bc:	4603      	mov	r3, r0
 80004be:	b2db      	uxtb	r3, r3
 80004c0:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80004c4:	9300      	str	r3, [sp, #0]
 80004c6:	4613      	mov	r3, r2
 80004c8:	220e      	movs	r2, #14
 80004ca:	2100      	movs	r1, #0
 80004cc:	4885      	ldr	r0, [pc, #532]	@ (80006e4 <main+0x574>)
 80004ce:	f007 ff02 	bl	80082d6 <Alcd_PutAt_n>
 80004d2:	e062      	b.n	800059a <main+0x42a>

				//in case of 24 format
				else {

					snprintf(timeString, sizeof(timeString), "%02d:%02d:%02d",
							CLK.hour, CLK.min, CLK.sec);
 80004d4:	4b84      	ldr	r3, [pc, #528]	@ (80006e8 <main+0x578>)
 80004d6:	7a9b      	ldrb	r3, [r3, #10]
					snprintf(timeString, sizeof(timeString), "%02d:%02d:%02d",
 80004d8:	4619      	mov	r1, r3
							CLK.hour, CLK.min, CLK.sec);
 80004da:	4b83      	ldr	r3, [pc, #524]	@ (80006e8 <main+0x578>)
 80004dc:	7a5b      	ldrb	r3, [r3, #9]
					snprintf(timeString, sizeof(timeString), "%02d:%02d:%02d",
 80004de:	461a      	mov	r2, r3
							CLK.hour, CLK.min, CLK.sec);
 80004e0:	4b81      	ldr	r3, [pc, #516]	@ (80006e8 <main+0x578>)
 80004e2:	7a1b      	ldrb	r3, [r3, #8]
					snprintf(timeString, sizeof(timeString), "%02d:%02d:%02d",
 80004e4:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80004e8:	9301      	str	r3, [sp, #4]
 80004ea:	9200      	str	r2, [sp, #0]
 80004ec:	460b      	mov	r3, r1
 80004ee:	4a81      	ldr	r2, [pc, #516]	@ (80006f4 <main+0x584>)
 80004f0:	2132      	movs	r1, #50	@ 0x32
 80004f2:	f00b f9dd 	bl	800b8b0 <sniprintf>

					// display the time
					Alcd_Clear(&lcd);
 80004f6:	487b      	ldr	r0, [pc, #492]	@ (80006e4 <main+0x574>)
 80004f8:	f007 ff06 	bl	8008308 <Alcd_Clear>
					Alcd_Display_Control(&lcd, 1, 0, 0);
 80004fc:	2300      	movs	r3, #0
 80004fe:	2200      	movs	r2, #0
 8000500:	2101      	movs	r1, #1
 8000502:	4878      	ldr	r0, [pc, #480]	@ (80006e4 <main+0x574>)
 8000504:	f007 ff11 	bl	800832a <Alcd_Display_Control>
					Alcd_PutAt_n(&lcd, 1, 0, timeString, strlen(timeString));
 8000508:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800050c:	4618      	mov	r0, r3
 800050e:	f7ff fe27 	bl	8000160 <strlen>
 8000512:	4603      	mov	r3, r0
 8000514:	b2db      	uxtb	r3, r3
 8000516:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800051a:	9300      	str	r3, [sp, #0]
 800051c:	4613      	mov	r3, r2
 800051e:	2200      	movs	r2, #0
 8000520:	2101      	movs	r1, #1
 8000522:	4870      	ldr	r0, [pc, #448]	@ (80006e4 <main+0x574>)
 8000524:	f007 fed7 	bl	80082d6 <Alcd_PutAt_n>

					snprintf(timeString, sizeof(timeString), "%02d-%02d-%04d",
							CLK.date, CLK.month, CLK.year);
 8000528:	4b6f      	ldr	r3, [pc, #444]	@ (80006e8 <main+0x578>)
 800052a:	7b1b      	ldrb	r3, [r3, #12]
					snprintf(timeString, sizeof(timeString), "%02d-%02d-%04d",
 800052c:	4619      	mov	r1, r3
							CLK.date, CLK.month, CLK.year);
 800052e:	4b6e      	ldr	r3, [pc, #440]	@ (80006e8 <main+0x578>)
 8000530:	7b5b      	ldrb	r3, [r3, #13]
					snprintf(timeString, sizeof(timeString), "%02d-%02d-%04d",
 8000532:	461a      	mov	r2, r3
							CLK.date, CLK.month, CLK.year);
 8000534:	4b6c      	ldr	r3, [pc, #432]	@ (80006e8 <main+0x578>)
 8000536:	89db      	ldrh	r3, [r3, #14]
					snprintf(timeString, sizeof(timeString), "%02d-%02d-%04d",
 8000538:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800053c:	9301      	str	r3, [sp, #4]
 800053e:	9200      	str	r2, [sp, #0]
 8000540:	460b      	mov	r3, r1
 8000542:	4a6a      	ldr	r2, [pc, #424]	@ (80006ec <main+0x57c>)
 8000544:	2132      	movs	r1, #50	@ 0x32
 8000546:	f00b f9b3 	bl	800b8b0 <sniprintf>
					Alcd_PutAt_n(&lcd, 0, 0, timeString, strlen(timeString));
 800054a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800054e:	4618      	mov	r0, r3
 8000550:	f7ff fe06 	bl	8000160 <strlen>
 8000554:	4603      	mov	r3, r0
 8000556:	b2db      	uxtb	r3, r3
 8000558:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800055c:	9300      	str	r3, [sp, #0]
 800055e:	4613      	mov	r3, r2
 8000560:	2200      	movs	r2, #0
 8000562:	2100      	movs	r1, #0
 8000564:	485f      	ldr	r0, [pc, #380]	@ (80006e4 <main+0x574>)
 8000566:	f007 feb6 	bl	80082d6 <Alcd_PutAt_n>

					snprintf(timeString, sizeof(timeString), "%02d", status);
 800056a:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 800056e:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8000572:	4a5f      	ldr	r2, [pc, #380]	@ (80006f0 <main+0x580>)
 8000574:	2132      	movs	r1, #50	@ 0x32
 8000576:	f00b f99b 	bl	800b8b0 <sniprintf>
					Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 800057a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800057e:	4618      	mov	r0, r3
 8000580:	f7ff fdee 	bl	8000160 <strlen>
 8000584:	4603      	mov	r3, r0
 8000586:	b2db      	uxtb	r3, r3
 8000588:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800058c:	9300      	str	r3, [sp, #0]
 800058e:	4613      	mov	r3, r2
 8000590:	220e      	movs	r2, #14
 8000592:	2100      	movs	r1, #0
 8000594:	4853      	ldr	r0, [pc, #332]	@ (80006e4 <main+0x574>)
 8000596:	f007 fe9e 	bl	80082d6 <Alcd_PutAt_n>
				 Alcd_PutAt(&lcd, 0, 0, "RTC failure");
				 error_code = 1;
				 */

			}
			snprintf(timeString, sizeof(timeString), "%02d", status);
 800059a:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 800059e:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80005a2:	4a53      	ldr	r2, [pc, #332]	@ (80006f0 <main+0x580>)
 80005a4:	2132      	movs	r1, #50	@ 0x32
 80005a6:	f00b f983 	bl	800b8b0 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 80005aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80005ae:	4618      	mov	r0, r3
 80005b0:	f7ff fdd6 	bl	8000160 <strlen>
 80005b4:	4603      	mov	r3, r0
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80005bc:	9300      	str	r3, [sp, #0]
 80005be:	4613      	mov	r3, r2
 80005c0:	220e      	movs	r2, #14
 80005c2:	2100      	movs	r1, #0
 80005c4:	4847      	ldr	r0, [pc, #284]	@ (80006e4 <main+0x574>)
 80005c6:	f007 fe86 	bl	80082d6 <Alcd_PutAt_n>

			general_delay = HAL_GetTick() + 250;
 80005ca:	f008 f857 	bl	800867c <HAL_GetTick>
 80005ce:	4603      	mov	r3, r0
 80005d0:	33fa      	adds	r3, #250	@ 0xfa
 80005d2:	677b      	str	r3, [r7, #116]	@ 0x74
				&& (current_tick >= general_delay)) {
 80005d4:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d176      	bne.n	80006ca <main+0x55a>
		while ((status == 0) && (error_code == 0)
 80005dc:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d172      	bne.n	80006ca <main+0x55a>
				&& (current_tick >= general_delay)) {
 80005e4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80005e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80005e8:	429a      	cmp	r2, r3
 80005ea:	f4bf ae57 	bcs.w	800029c <main+0x12c>

		}

		//status 10 -> main menu
		while ((status == 10) && (current_tick >= general_delay)) {
 80005ee:	e06c      	b.n	80006ca <main+0x55a>

			//get the current tick number
			current_tick = HAL_GetTick();
 80005f0:	f008 f844 	bl	800867c <HAL_GetTick>
 80005f4:	67f8      	str	r0, [r7, #124]	@ 0x7c

			Alcd_Clear(&lcd);
 80005f6:	483b      	ldr	r0, [pc, #236]	@ (80006e4 <main+0x574>)
 80005f8:	f007 fe86 	bl	8008308 <Alcd_Clear>
			Alcd_PutAt(&lcd, 0, 0, "1: view");
 80005fc:	483e      	ldr	r0, [pc, #248]	@ (80006f8 <main+0x588>)
 80005fe:	f007 fed7 	bl	80083b0 <Str_Len>
 8000602:	4603      	mov	r3, r0
 8000604:	b2db      	uxtb	r3, r3
 8000606:	9300      	str	r3, [sp, #0]
 8000608:	4b3b      	ldr	r3, [pc, #236]	@ (80006f8 <main+0x588>)
 800060a:	2200      	movs	r2, #0
 800060c:	2100      	movs	r1, #0
 800060e:	4835      	ldr	r0, [pc, #212]	@ (80006e4 <main+0x574>)
 8000610:	f007 fe61 	bl	80082d6 <Alcd_PutAt_n>
			Alcd_PutAt(&lcd, 1, 0, "2: edit");
 8000614:	4839      	ldr	r0, [pc, #228]	@ (80006fc <main+0x58c>)
 8000616:	f007 fecb 	bl	80083b0 <Str_Len>
 800061a:	4603      	mov	r3, r0
 800061c:	b2db      	uxtb	r3, r3
 800061e:	9300      	str	r3, [sp, #0]
 8000620:	4b36      	ldr	r3, [pc, #216]	@ (80006fc <main+0x58c>)
 8000622:	2200      	movs	r2, #0
 8000624:	2101      	movs	r1, #1
 8000626:	482f      	ldr	r0, [pc, #188]	@ (80006e4 <main+0x574>)
 8000628:	f007 fe55 	bl	80082d6 <Alcd_PutAt_n>
			snprintf(timeString, sizeof(timeString), "%02d", status);
 800062c:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 8000630:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8000634:	4a2e      	ldr	r2, [pc, #184]	@ (80006f0 <main+0x580>)
 8000636:	2132      	movs	r1, #50	@ 0x32
 8000638:	f00b f93a 	bl	800b8b0 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 800063c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000640:	4618      	mov	r0, r3
 8000642:	f7ff fd8d 	bl	8000160 <strlen>
 8000646:	4603      	mov	r3, r0
 8000648:	b2db      	uxtb	r3, r3
 800064a:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800064e:	9300      	str	r3, [sp, #0]
 8000650:	4613      	mov	r3, r2
 8000652:	220e      	movs	r2, #14
 8000654:	2100      	movs	r1, #0
 8000656:	4823      	ldr	r0, [pc, #140]	@ (80006e4 <main+0x574>)
 8000658:	f007 fe3d 	bl	80082d6 <Alcd_PutAt_n>

			//check if any button is pressed
			//check for any keypad input
			Keypad_Refresh(&kp);
 800065c:	4828      	ldr	r0, [pc, #160]	@ (8000700 <main+0x590>)
 800065e:	f007 ff01 	bl	8008464 <Keypad_Refresh>

			//in case 1 is selected -> view menu (status 11)
			if (Keypad_Get_Key(&kp, kp_button_1)
 8000662:	2100      	movs	r1, #0
 8000664:	4826      	ldr	r0, [pc, #152]	@ (8000700 <main+0x590>)
 8000666:	f007 ff99 	bl	800859c <Keypad_Get_Key>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d007      	beq.n	8000680 <main+0x510>
					&& (current_tick >= general_delay)) {
 8000670:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000672:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000674:	429a      	cmp	r2, r3
 8000676:	d303      	bcc.n	8000680 <main+0x510>

				status = 11;
 8000678:	230b      	movs	r3, #11
 800067a:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 800067e:	e01f      	b.n	80006c0 <main+0x550>

			}

			//2 is selected -> edit menu (status 20)
			else if (Keypad_Get_Key(&kp, kp_button_2)
 8000680:	2101      	movs	r1, #1
 8000682:	481f      	ldr	r0, [pc, #124]	@ (8000700 <main+0x590>)
 8000684:	f007 ff8a 	bl	800859c <Keypad_Get_Key>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d00a      	beq.n	80006a4 <main+0x534>
					&& (current_tick >= general_delay)) {
 800068e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000690:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000692:	429a      	cmp	r2, r3
 8000694:	d306      	bcc.n	80006a4 <main+0x534>

				//ask the user for password
				Alcd_Clear(&lcd);
 8000696:	4813      	ldr	r0, [pc, #76]	@ (80006e4 <main+0x574>)
 8000698:	f007 fe36 	bl	8008308 <Alcd_Clear>
				status = 20;
 800069c:	2314      	movs	r3, #20
 800069e:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 80006a2:	e00d      	b.n	80006c0 <main+0x550>

			}

			//back is selected
			else if (Keypad_Get_Key(&kp, kp_button_no_back)
 80006a4:	210e      	movs	r1, #14
 80006a6:	4816      	ldr	r0, [pc, #88]	@ (8000700 <main+0x590>)
 80006a8:	f007 ff78 	bl	800859c <Keypad_Get_Key>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d006      	beq.n	80006c0 <main+0x550>
					&& (current_tick >= general_delay)) {
 80006b2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80006b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80006b6:	429a      	cmp	r2, r3
 80006b8:	d302      	bcc.n	80006c0 <main+0x550>

				status = 0;
 80006ba:	2300      	movs	r3, #0
 80006bc:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83

			}

			general_delay = HAL_GetTick() + 250;
 80006c0:	f007 ffdc 	bl	800867c <HAL_GetTick>
 80006c4:	4603      	mov	r3, r0
 80006c6:	33fa      	adds	r3, #250	@ 0xfa
 80006c8:	677b      	str	r3, [r7, #116]	@ 0x74
		while ((status == 10) && (current_tick >= general_delay)) {
 80006ca:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 80006ce:	2b0a      	cmp	r3, #10
 80006d0:	f040 8082 	bne.w	80007d8 <main+0x668>
 80006d4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80006d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80006d8:	429a      	cmp	r2, r3
 80006da:	d289      	bcs.n	80005f0 <main+0x480>
		}

		//status 11 -> view menu
		while ((status == 11) && (current_tick >= general_delay)) {
 80006dc:	e07c      	b.n	80007d8 <main+0x668>
 80006de:	bf00      	nop
 80006e0:	0800c26c 	.word	0x0800c26c
 80006e4:	2000001c 	.word	0x2000001c
 80006e8:	20000150 	.word	0x20000150
 80006ec:	0800c270 	.word	0x0800c270
 80006f0:	0800c280 	.word	0x0800c280
 80006f4:	0800c258 	.word	0x0800c258
 80006f8:	0800c288 	.word	0x0800c288
 80006fc:	0800c290 	.word	0x0800c290
 8000700:	20000000 	.word	0x20000000

			//get the current tick number
			current_tick = HAL_GetTick();
 8000704:	f007 ffba 	bl	800867c <HAL_GetTick>
 8000708:	67f8      	str	r0, [r7, #124]	@ 0x7c

			Alcd_Clear(&lcd);
 800070a:	48b5      	ldr	r0, [pc, #724]	@ (80009e0 <main+0x870>)
 800070c:	f007 fdfc 	bl	8008308 <Alcd_Clear>
			Alcd_PutAt(&lcd, 0, 0, "1: date");
 8000710:	48b4      	ldr	r0, [pc, #720]	@ (80009e4 <main+0x874>)
 8000712:	f007 fe4d 	bl	80083b0 <Str_Len>
 8000716:	4603      	mov	r3, r0
 8000718:	b2db      	uxtb	r3, r3
 800071a:	9300      	str	r3, [sp, #0]
 800071c:	4bb1      	ldr	r3, [pc, #708]	@ (80009e4 <main+0x874>)
 800071e:	2200      	movs	r2, #0
 8000720:	2100      	movs	r1, #0
 8000722:	48af      	ldr	r0, [pc, #700]	@ (80009e0 <main+0x870>)
 8000724:	f007 fdd7 	bl	80082d6 <Alcd_PutAt_n>
			Alcd_PutAt(&lcd, 1, 0, "2: parameters");
 8000728:	48af      	ldr	r0, [pc, #700]	@ (80009e8 <main+0x878>)
 800072a:	f007 fe41 	bl	80083b0 <Str_Len>
 800072e:	4603      	mov	r3, r0
 8000730:	b2db      	uxtb	r3, r3
 8000732:	9300      	str	r3, [sp, #0]
 8000734:	4bac      	ldr	r3, [pc, #688]	@ (80009e8 <main+0x878>)
 8000736:	2200      	movs	r2, #0
 8000738:	2101      	movs	r1, #1
 800073a:	48a9      	ldr	r0, [pc, #676]	@ (80009e0 <main+0x870>)
 800073c:	f007 fdcb 	bl	80082d6 <Alcd_PutAt_n>
			snprintf(timeString, sizeof(timeString), "%02d", status);
 8000740:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 8000744:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8000748:	4aa8      	ldr	r2, [pc, #672]	@ (80009ec <main+0x87c>)
 800074a:	2132      	movs	r1, #50	@ 0x32
 800074c:	f00b f8b0 	bl	800b8b0 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 8000750:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000754:	4618      	mov	r0, r3
 8000756:	f7ff fd03 	bl	8000160 <strlen>
 800075a:	4603      	mov	r3, r0
 800075c:	b2db      	uxtb	r3, r3
 800075e:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8000762:	9300      	str	r3, [sp, #0]
 8000764:	4613      	mov	r3, r2
 8000766:	220e      	movs	r2, #14
 8000768:	2100      	movs	r1, #0
 800076a:	489d      	ldr	r0, [pc, #628]	@ (80009e0 <main+0x870>)
 800076c:	f007 fdb3 	bl	80082d6 <Alcd_PutAt_n>

			//check if any button is pressed
			//check for any keypad input
			Keypad_Refresh(&kp);
 8000770:	489f      	ldr	r0, [pc, #636]	@ (80009f0 <main+0x880>)
 8000772:	f007 fe77 	bl	8008464 <Keypad_Refresh>

			//in case 1 is selected -> view date (status 13)
			if (Keypad_Get_Key(&kp, kp_button_1)
 8000776:	2100      	movs	r1, #0
 8000778:	489d      	ldr	r0, [pc, #628]	@ (80009f0 <main+0x880>)
 800077a:	f007 ff0f 	bl	800859c <Keypad_Get_Key>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d007      	beq.n	8000794 <main+0x624>
					&& (current_tick >= general_delay)) {
 8000784:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000786:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000788:	429a      	cmp	r2, r3
 800078a:	d303      	bcc.n	8000794 <main+0x624>

				status = 13;
 800078c:	230d      	movs	r3, #13
 800078e:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 8000792:	e01c      	b.n	80007ce <main+0x65e>

			}

			//2 is selected -> view parameters (status 14)
			else if (Keypad_Get_Key(&kp, kp_button_2)
 8000794:	2101      	movs	r1, #1
 8000796:	4896      	ldr	r0, [pc, #600]	@ (80009f0 <main+0x880>)
 8000798:	f007 ff00 	bl	800859c <Keypad_Get_Key>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d007      	beq.n	80007b2 <main+0x642>
					&& (current_tick >= general_delay)) {
 80007a2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80007a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80007a6:	429a      	cmp	r2, r3
 80007a8:	d303      	bcc.n	80007b2 <main+0x642>

				status = 14;
 80007aa:	230e      	movs	r3, #14
 80007ac:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 80007b0:	e00d      	b.n	80007ce <main+0x65e>

			}

			//back is selected
			else if (Keypad_Get_Key(&kp, kp_button_no_back)
 80007b2:	210e      	movs	r1, #14
 80007b4:	488e      	ldr	r0, [pc, #568]	@ (80009f0 <main+0x880>)
 80007b6:	f007 fef1 	bl	800859c <Keypad_Get_Key>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d006      	beq.n	80007ce <main+0x65e>
					&& (current_tick >= general_delay)) {
 80007c0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80007c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80007c4:	429a      	cmp	r2, r3
 80007c6:	d302      	bcc.n	80007ce <main+0x65e>

				//back to previous menu
				status = 10;
 80007c8:	230a      	movs	r3, #10
 80007ca:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83

			}

			general_delay = HAL_GetTick() + 250;
 80007ce:	f007 ff55 	bl	800867c <HAL_GetTick>
 80007d2:	4603      	mov	r3, r0
 80007d4:	33fa      	adds	r3, #250	@ 0xfa
 80007d6:	677b      	str	r3, [r7, #116]	@ 0x74
		while ((status == 11) && (current_tick >= general_delay)) {
 80007d8:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 80007dc:	2b0b      	cmp	r3, #11
 80007de:	f040 8153 	bne.w	8000a88 <main+0x918>
 80007e2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80007e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80007e6:	429a      	cmp	r2, r3
 80007e8:	d28c      	bcs.n	8000704 <main+0x594>
		}

		//view the time and date -> status 13
		while ((status == 13) && (current_tick >= general_delay)) {
 80007ea:	e14d      	b.n	8000a88 <main+0x918>

			//get the current tick number
			current_tick = HAL_GetTick();
 80007ec:	f007 ff46 	bl	800867c <HAL_GetTick>
 80007f0:	67f8      	str	r0, [r7, #124]	@ 0x7c

			//displaying the time and date
			//the lcd will display the time
			// Read time from DS1307
			if (Ds1307_read(&CLK) == DS1307_OK) //in case reading is ok
 80007f2:	4880      	ldr	r0, [pc, #512]	@ (80009f4 <main+0x884>)
 80007f4:	f007 fb2c 	bl	8007e50 <Ds1307_read>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	f040 8104 	bne.w	8000a08 <main+0x898>
					{

				//check if the time format is 24h or 12h
				//in case of 12h
				if (CLK.format == 1) {
 8000800:	4b7c      	ldr	r3, [pc, #496]	@ (80009f4 <main+0x884>)
 8000802:	7c5b      	ldrb	r3, [r3, #17]
 8000804:	f003 0301 	and.w	r3, r3, #1
 8000808:	b2db      	uxtb	r3, r3
 800080a:	2b00      	cmp	r3, #0
 800080c:	f000 8084 	beq.w	8000918 <main+0x7a8>

					// display the time
					Alcd_Clear(&lcd);
 8000810:	4873      	ldr	r0, [pc, #460]	@ (80009e0 <main+0x870>)
 8000812:	f007 fd79 	bl	8008308 <Alcd_Clear>
					Alcd_Display_Control(&lcd, 1, 0, 0);
 8000816:	2300      	movs	r3, #0
 8000818:	2200      	movs	r2, #0
 800081a:	2101      	movs	r1, #1
 800081c:	4870      	ldr	r0, [pc, #448]	@ (80009e0 <main+0x870>)
 800081e:	f007 fd84 	bl	800832a <Alcd_Display_Control>
					snprintf(timeString, sizeof(timeString), "%02d:%02d:%02d",
							CLK.hour, CLK.min, CLK.sec);
 8000822:	4b74      	ldr	r3, [pc, #464]	@ (80009f4 <main+0x884>)
 8000824:	7a9b      	ldrb	r3, [r3, #10]
					snprintf(timeString, sizeof(timeString), "%02d:%02d:%02d",
 8000826:	4619      	mov	r1, r3
							CLK.hour, CLK.min, CLK.sec);
 8000828:	4b72      	ldr	r3, [pc, #456]	@ (80009f4 <main+0x884>)
 800082a:	7a5b      	ldrb	r3, [r3, #9]
					snprintf(timeString, sizeof(timeString), "%02d:%02d:%02d",
 800082c:	461a      	mov	r2, r3
							CLK.hour, CLK.min, CLK.sec);
 800082e:	4b71      	ldr	r3, [pc, #452]	@ (80009f4 <main+0x884>)
 8000830:	7a1b      	ldrb	r3, [r3, #8]
					snprintf(timeString, sizeof(timeString), "%02d:%02d:%02d",
 8000832:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8000836:	9301      	str	r3, [sp, #4]
 8000838:	9200      	str	r2, [sp, #0]
 800083a:	460b      	mov	r3, r1
 800083c:	4a6e      	ldr	r2, [pc, #440]	@ (80009f8 <main+0x888>)
 800083e:	2132      	movs	r1, #50	@ 0x32
 8000840:	f00b f836 	bl	800b8b0 <sniprintf>
					Alcd_PutAt_n(&lcd, 1, 0, timeString, strlen(timeString));
 8000844:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff fc89 	bl	8000160 <strlen>
 800084e:	4603      	mov	r3, r0
 8000850:	b2db      	uxtb	r3, r3
 8000852:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8000856:	9300      	str	r3, [sp, #0]
 8000858:	4613      	mov	r3, r2
 800085a:	2200      	movs	r2, #0
 800085c:	2101      	movs	r1, #1
 800085e:	4860      	ldr	r0, [pc, #384]	@ (80009e0 <main+0x870>)
 8000860:	f007 fd39 	bl	80082d6 <Alcd_PutAt_n>

					//check for PM or AM
					//in case: AM
					if (CLK.AM_PM == 0) {
 8000864:	4b63      	ldr	r3, [pc, #396]	@ (80009f4 <main+0x884>)
 8000866:	7c5b      	ldrb	r3, [r3, #17]
 8000868:	f003 0302 	and.w	r3, r3, #2
 800086c:	b2db      	uxtb	r3, r3
 800086e:	2b00      	cmp	r3, #0
 8000870:	d10c      	bne.n	800088c <main+0x71c>
						Alcd_PutAt(&lcd, 1, 9, "AM");
 8000872:	4862      	ldr	r0, [pc, #392]	@ (80009fc <main+0x88c>)
 8000874:	f007 fd9c 	bl	80083b0 <Str_Len>
 8000878:	4603      	mov	r3, r0
 800087a:	b2db      	uxtb	r3, r3
 800087c:	9300      	str	r3, [sp, #0]
 800087e:	4b5f      	ldr	r3, [pc, #380]	@ (80009fc <main+0x88c>)
 8000880:	2209      	movs	r2, #9
 8000882:	2101      	movs	r1, #1
 8000884:	4856      	ldr	r0, [pc, #344]	@ (80009e0 <main+0x870>)
 8000886:	f007 fd26 	bl	80082d6 <Alcd_PutAt_n>
 800088a:	e00b      	b.n	80008a4 <main+0x734>

					} else {
						Alcd_PutAt(&lcd, 1, 9, "PM");
 800088c:	485c      	ldr	r0, [pc, #368]	@ (8000a00 <main+0x890>)
 800088e:	f007 fd8f 	bl	80083b0 <Str_Len>
 8000892:	4603      	mov	r3, r0
 8000894:	b2db      	uxtb	r3, r3
 8000896:	9300      	str	r3, [sp, #0]
 8000898:	4b59      	ldr	r3, [pc, #356]	@ (8000a00 <main+0x890>)
 800089a:	2209      	movs	r2, #9
 800089c:	2101      	movs	r1, #1
 800089e:	4850      	ldr	r0, [pc, #320]	@ (80009e0 <main+0x870>)
 80008a0:	f007 fd19 	bl	80082d6 <Alcd_PutAt_n>

					}

					snprintf(timeString, sizeof(timeString), "%02d-%02d-%04d",
							CLK.date, CLK.month, CLK.year);
 80008a4:	4b53      	ldr	r3, [pc, #332]	@ (80009f4 <main+0x884>)
 80008a6:	7b1b      	ldrb	r3, [r3, #12]
					snprintf(timeString, sizeof(timeString), "%02d-%02d-%04d",
 80008a8:	4619      	mov	r1, r3
							CLK.date, CLK.month, CLK.year);
 80008aa:	4b52      	ldr	r3, [pc, #328]	@ (80009f4 <main+0x884>)
 80008ac:	7b5b      	ldrb	r3, [r3, #13]
					snprintf(timeString, sizeof(timeString), "%02d-%02d-%04d",
 80008ae:	461a      	mov	r2, r3
							CLK.date, CLK.month, CLK.year);
 80008b0:	4b50      	ldr	r3, [pc, #320]	@ (80009f4 <main+0x884>)
 80008b2:	89db      	ldrh	r3, [r3, #14]
					snprintf(timeString, sizeof(timeString), "%02d-%02d-%04d",
 80008b4:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80008b8:	9301      	str	r3, [sp, #4]
 80008ba:	9200      	str	r2, [sp, #0]
 80008bc:	460b      	mov	r3, r1
 80008be:	4a51      	ldr	r2, [pc, #324]	@ (8000a04 <main+0x894>)
 80008c0:	2132      	movs	r1, #50	@ 0x32
 80008c2:	f00a fff5 	bl	800b8b0 <sniprintf>
					Alcd_PutAt_n(&lcd, 0, 0, timeString, strlen(timeString));
 80008c6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008ca:	4618      	mov	r0, r3
 80008cc:	f7ff fc48 	bl	8000160 <strlen>
 80008d0:	4603      	mov	r3, r0
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80008d8:	9300      	str	r3, [sp, #0]
 80008da:	4613      	mov	r3, r2
 80008dc:	2200      	movs	r2, #0
 80008de:	2100      	movs	r1, #0
 80008e0:	483f      	ldr	r0, [pc, #252]	@ (80009e0 <main+0x870>)
 80008e2:	f007 fcf8 	bl	80082d6 <Alcd_PutAt_n>

					snprintf(timeString, sizeof(timeString), "%02d", status);
 80008e6:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 80008ea:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80008ee:	4a3f      	ldr	r2, [pc, #252]	@ (80009ec <main+0x87c>)
 80008f0:	2132      	movs	r1, #50	@ 0x32
 80008f2:	f00a ffdd 	bl	800b8b0 <sniprintf>
					Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 80008f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008fa:	4618      	mov	r0, r3
 80008fc:	f7ff fc30 	bl	8000160 <strlen>
 8000900:	4603      	mov	r3, r0
 8000902:	b2db      	uxtb	r3, r3
 8000904:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8000908:	9300      	str	r3, [sp, #0]
 800090a:	4613      	mov	r3, r2
 800090c:	220e      	movs	r2, #14
 800090e:	2100      	movs	r1, #0
 8000910:	4833      	ldr	r0, [pc, #204]	@ (80009e0 <main+0x870>)
 8000912:	f007 fce0 	bl	80082d6 <Alcd_PutAt_n>
 8000916:	e089      	b.n	8000a2c <main+0x8bc>

				//in case of 24 format
				else {

					snprintf(timeString, sizeof(timeString), "%02d:%02d:%02d",
							CLK.hour, CLK.min, CLK.sec);
 8000918:	4b36      	ldr	r3, [pc, #216]	@ (80009f4 <main+0x884>)
 800091a:	7a9b      	ldrb	r3, [r3, #10]
					snprintf(timeString, sizeof(timeString), "%02d:%02d:%02d",
 800091c:	4619      	mov	r1, r3
							CLK.hour, CLK.min, CLK.sec);
 800091e:	4b35      	ldr	r3, [pc, #212]	@ (80009f4 <main+0x884>)
 8000920:	7a5b      	ldrb	r3, [r3, #9]
					snprintf(timeString, sizeof(timeString), "%02d:%02d:%02d",
 8000922:	461a      	mov	r2, r3
							CLK.hour, CLK.min, CLK.sec);
 8000924:	4b33      	ldr	r3, [pc, #204]	@ (80009f4 <main+0x884>)
 8000926:	7a1b      	ldrb	r3, [r3, #8]
					snprintf(timeString, sizeof(timeString), "%02d:%02d:%02d",
 8000928:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800092c:	9301      	str	r3, [sp, #4]
 800092e:	9200      	str	r2, [sp, #0]
 8000930:	460b      	mov	r3, r1
 8000932:	4a31      	ldr	r2, [pc, #196]	@ (80009f8 <main+0x888>)
 8000934:	2132      	movs	r1, #50	@ 0x32
 8000936:	f00a ffbb 	bl	800b8b0 <sniprintf>

					// display the time
					Alcd_Clear(&lcd);
 800093a:	4829      	ldr	r0, [pc, #164]	@ (80009e0 <main+0x870>)
 800093c:	f007 fce4 	bl	8008308 <Alcd_Clear>
					Alcd_Display_Control(&lcd, 1, 0, 0);
 8000940:	2300      	movs	r3, #0
 8000942:	2200      	movs	r2, #0
 8000944:	2101      	movs	r1, #1
 8000946:	4826      	ldr	r0, [pc, #152]	@ (80009e0 <main+0x870>)
 8000948:	f007 fcef 	bl	800832a <Alcd_Display_Control>
					Alcd_PutAt_n(&lcd, 1, 0, timeString, strlen(timeString));
 800094c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000950:	4618      	mov	r0, r3
 8000952:	f7ff fc05 	bl	8000160 <strlen>
 8000956:	4603      	mov	r3, r0
 8000958:	b2db      	uxtb	r3, r3
 800095a:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800095e:	9300      	str	r3, [sp, #0]
 8000960:	4613      	mov	r3, r2
 8000962:	2200      	movs	r2, #0
 8000964:	2101      	movs	r1, #1
 8000966:	481e      	ldr	r0, [pc, #120]	@ (80009e0 <main+0x870>)
 8000968:	f007 fcb5 	bl	80082d6 <Alcd_PutAt_n>

					snprintf(timeString, sizeof(timeString), "%02d-%02d-%04d",
							CLK.date, CLK.month, CLK.year);
 800096c:	4b21      	ldr	r3, [pc, #132]	@ (80009f4 <main+0x884>)
 800096e:	7b1b      	ldrb	r3, [r3, #12]
					snprintf(timeString, sizeof(timeString), "%02d-%02d-%04d",
 8000970:	4619      	mov	r1, r3
							CLK.date, CLK.month, CLK.year);
 8000972:	4b20      	ldr	r3, [pc, #128]	@ (80009f4 <main+0x884>)
 8000974:	7b5b      	ldrb	r3, [r3, #13]
					snprintf(timeString, sizeof(timeString), "%02d-%02d-%04d",
 8000976:	461a      	mov	r2, r3
							CLK.date, CLK.month, CLK.year);
 8000978:	4b1e      	ldr	r3, [pc, #120]	@ (80009f4 <main+0x884>)
 800097a:	89db      	ldrh	r3, [r3, #14]
					snprintf(timeString, sizeof(timeString), "%02d-%02d-%04d",
 800097c:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8000980:	9301      	str	r3, [sp, #4]
 8000982:	9200      	str	r2, [sp, #0]
 8000984:	460b      	mov	r3, r1
 8000986:	4a1f      	ldr	r2, [pc, #124]	@ (8000a04 <main+0x894>)
 8000988:	2132      	movs	r1, #50	@ 0x32
 800098a:	f00a ff91 	bl	800b8b0 <sniprintf>
					Alcd_PutAt_n(&lcd, 0, 0, timeString, strlen(timeString));
 800098e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000992:	4618      	mov	r0, r3
 8000994:	f7ff fbe4 	bl	8000160 <strlen>
 8000998:	4603      	mov	r3, r0
 800099a:	b2db      	uxtb	r3, r3
 800099c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80009a0:	9300      	str	r3, [sp, #0]
 80009a2:	4613      	mov	r3, r2
 80009a4:	2200      	movs	r2, #0
 80009a6:	2100      	movs	r1, #0
 80009a8:	480d      	ldr	r0, [pc, #52]	@ (80009e0 <main+0x870>)
 80009aa:	f007 fc94 	bl	80082d6 <Alcd_PutAt_n>

					snprintf(timeString, sizeof(timeString), "%02d", status);
 80009ae:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 80009b2:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80009b6:	4a0d      	ldr	r2, [pc, #52]	@ (80009ec <main+0x87c>)
 80009b8:	2132      	movs	r1, #50	@ 0x32
 80009ba:	f00a ff79 	bl	800b8b0 <sniprintf>
					Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 80009be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009c2:	4618      	mov	r0, r3
 80009c4:	f7ff fbcc 	bl	8000160 <strlen>
 80009c8:	4603      	mov	r3, r0
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80009d0:	9300      	str	r3, [sp, #0]
 80009d2:	4613      	mov	r3, r2
 80009d4:	220e      	movs	r2, #14
 80009d6:	2100      	movs	r1, #0
 80009d8:	4801      	ldr	r0, [pc, #4]	@ (80009e0 <main+0x870>)
 80009da:	f007 fc7c 	bl	80082d6 <Alcd_PutAt_n>
 80009de:	e025      	b.n	8000a2c <main+0x8bc>
 80009e0:	2000001c 	.word	0x2000001c
 80009e4:	0800c298 	.word	0x0800c298
 80009e8:	0800c2a0 	.word	0x0800c2a0
 80009ec:	0800c280 	.word	0x0800c280
 80009f0:	20000000 	.word	0x20000000
 80009f4:	20000150 	.word	0x20000150
 80009f8:	0800c258 	.word	0x0800c258
 80009fc:	0800c268 	.word	0x0800c268
 8000a00:	0800c26c 	.word	0x0800c26c
 8000a04:	0800c270 	.word	0x0800c270

				}

			} else {
				Alcd_Clear(&lcd);
 8000a08:	48b1      	ldr	r0, [pc, #708]	@ (8000cd0 <main+0xb60>)
 8000a0a:	f007 fc7d 	bl	8008308 <Alcd_Clear>
				Alcd_PutAt(&lcd, 0, 0, "RTC failure");
 8000a0e:	48b1      	ldr	r0, [pc, #708]	@ (8000cd4 <main+0xb64>)
 8000a10:	f007 fcce 	bl	80083b0 <Str_Len>
 8000a14:	4603      	mov	r3, r0
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	9300      	str	r3, [sp, #0]
 8000a1a:	4bae      	ldr	r3, [pc, #696]	@ (8000cd4 <main+0xb64>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	2100      	movs	r1, #0
 8000a20:	48ab      	ldr	r0, [pc, #684]	@ (8000cd0 <main+0xb60>)
 8000a22:	f007 fc58 	bl	80082d6 <Alcd_PutAt_n>
				error_code = 1;
 8000a26:	2301      	movs	r3, #1
 8000a28:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
			}
			snprintf(timeString, sizeof(timeString), "%02d", status);
 8000a2c:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 8000a30:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8000a34:	4aa8      	ldr	r2, [pc, #672]	@ (8000cd8 <main+0xb68>)
 8000a36:	2132      	movs	r1, #50	@ 0x32
 8000a38:	f00a ff3a 	bl	800b8b0 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 8000a3c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a40:	4618      	mov	r0, r3
 8000a42:	f7ff fb8d 	bl	8000160 <strlen>
 8000a46:	4603      	mov	r3, r0
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8000a4e:	9300      	str	r3, [sp, #0]
 8000a50:	4613      	mov	r3, r2
 8000a52:	220e      	movs	r2, #14
 8000a54:	2100      	movs	r1, #0
 8000a56:	489e      	ldr	r0, [pc, #632]	@ (8000cd0 <main+0xb60>)
 8000a58:	f007 fc3d 	bl	80082d6 <Alcd_PutAt_n>

			//check if back is selected
			Keypad_Refresh(&kp);
 8000a5c:	489f      	ldr	r0, [pc, #636]	@ (8000cdc <main+0xb6c>)
 8000a5e:	f007 fd01 	bl	8008464 <Keypad_Refresh>
			if (Keypad_Get_Key(&kp, kp_button_no_back)
 8000a62:	210e      	movs	r1, #14
 8000a64:	489d      	ldr	r0, [pc, #628]	@ (8000cdc <main+0xb6c>)
 8000a66:	f007 fd99 	bl	800859c <Keypad_Get_Key>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d006      	beq.n	8000a7e <main+0x90e>
					&& (current_tick >= general_delay)) {
 8000a70:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000a72:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000a74:	429a      	cmp	r2, r3
 8000a76:	d302      	bcc.n	8000a7e <main+0x90e>

				//back to previous menu
				status = 11;
 8000a78:	230b      	movs	r3, #11
 8000a7a:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83

			}

			general_delay = HAL_GetTick() + 250;
 8000a7e:	f007 fdfd 	bl	800867c <HAL_GetTick>
 8000a82:	4603      	mov	r3, r0
 8000a84:	33fa      	adds	r3, #250	@ 0xfa
 8000a86:	677b      	str	r3, [r7, #116]	@ 0x74
		while ((status == 13) && (current_tick >= general_delay)) {
 8000a88:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 8000a8c:	2b0d      	cmp	r3, #13
 8000a8e:	f040 80b4 	bne.w	8000bfa <main+0xa8a>
 8000a92:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000a94:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000a96:	429a      	cmp	r2, r3
 8000a98:	f4bf aea8 	bcs.w	80007ec <main+0x67c>
		}

		//view the time parameters -> status 14
		while ((status == 14) && (current_tick >= general_delay)) {
 8000a9c:	e0ad      	b.n	8000bfa <main+0xa8a>

			//get the current tick number
			current_tick = HAL_GetTick();
 8000a9e:	f007 fded 	bl	800867c <HAL_GetTick>
 8000aa2:	67f8      	str	r0, [r7, #124]	@ 0x7c
			//clear the lcd
			Alcd_Clear(&lcd);
 8000aa4:	488a      	ldr	r0, [pc, #552]	@ (8000cd0 <main+0xb60>)
 8000aa6:	f007 fc2f 	bl	8008308 <Alcd_Clear>
			Alcd_PutAt(&lcd, 0, 0, "Dose @");
 8000aaa:	488d      	ldr	r0, [pc, #564]	@ (8000ce0 <main+0xb70>)
 8000aac:	f007 fc80 	bl	80083b0 <Str_Len>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	9300      	str	r3, [sp, #0]
 8000ab6:	4b8a      	ldr	r3, [pc, #552]	@ (8000ce0 <main+0xb70>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2100      	movs	r1, #0
 8000abc:	4884      	ldr	r0, [pc, #528]	@ (8000cd0 <main+0xb60>)
 8000abe:	f007 fc0a 	bl	80082d6 <Alcd_PutAt_n>

			snprintf(timeString, sizeof(timeString), "%02d", status);
 8000ac2:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 8000ac6:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8000aca:	4a83      	ldr	r2, [pc, #524]	@ (8000cd8 <main+0xb68>)
 8000acc:	2132      	movs	r1, #50	@ 0x32
 8000ace:	f00a feef 	bl	800b8b0 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 8000ad2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f7ff fb42 	bl	8000160 <strlen>
 8000adc:	4603      	mov	r3, r0
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8000ae4:	9300      	str	r3, [sp, #0]
 8000ae6:	4613      	mov	r3, r2
 8000ae8:	220e      	movs	r2, #14
 8000aea:	2100      	movs	r1, #0
 8000aec:	4878      	ldr	r0, [pc, #480]	@ (8000cd0 <main+0xb60>)
 8000aee:	f007 fbf2 	bl	80082d6 <Alcd_PutAt_n>

			//reading dosing hours
			eeprom24c32_read(&memory, &dose_h, dosing_time_hours);
 8000af2:	4b7c      	ldr	r3, [pc, #496]	@ (8000ce4 <main+0xb74>)
 8000af4:	b29a      	uxth	r2, r3
 8000af6:	f107 035f 	add.w	r3, r7, #95	@ 0x5f
 8000afa:	4619      	mov	r1, r3
 8000afc:	4879      	ldr	r0, [pc, #484]	@ (8000ce4 <main+0xb74>)
 8000afe:	f007 f83b 	bl	8007b78 <eeprom24c32_read>

			//reading dosing minutes
			eeprom24c32_read(&memory, &dose_m, dosing_time_minutes);
 8000b02:	4b79      	ldr	r3, [pc, #484]	@ (8000ce8 <main+0xb78>)
 8000b04:	b29a      	uxth	r2, r3
 8000b06:	f107 035e 	add.w	r3, r7, #94	@ 0x5e
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4875      	ldr	r0, [pc, #468]	@ (8000ce4 <main+0xb74>)
 8000b0e:	f007 f833 	bl	8007b78 <eeprom24c32_read>

			//reading dosing seconds
			eeprom24c32_read(&memory, &dose_s, dosing_time_seconds);
 8000b12:	4b76      	ldr	r3, [pc, #472]	@ (8000cec <main+0xb7c>)
 8000b14:	b29a      	uxth	r2, r3
 8000b16:	f107 035d 	add.w	r3, r7, #93	@ 0x5d
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4871      	ldr	r0, [pc, #452]	@ (8000ce4 <main+0xb74>)
 8000b1e:	f007 f82b 	bl	8007b78 <eeprom24c32_read>

			snprintf(timeString, sizeof(timeString), "%02d:%02d:%02d", dose_h,
 8000b22:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8000b26:	4619      	mov	r1, r3
 8000b28:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8000b2c:	f897 205d 	ldrb.w	r2, [r7, #93]	@ 0x5d
 8000b30:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8000b34:	9201      	str	r2, [sp, #4]
 8000b36:	9300      	str	r3, [sp, #0]
 8000b38:	460b      	mov	r3, r1
 8000b3a:	4a6d      	ldr	r2, [pc, #436]	@ (8000cf0 <main+0xb80>)
 8000b3c:	2132      	movs	r1, #50	@ 0x32
 8000b3e:	f00a feb7 	bl	800b8b0 <sniprintf>
					dose_m, dose_s);
			Alcd_PutAt_n(&lcd, 1, 0, timeString, strlen(timeString));
 8000b42:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b46:	4618      	mov	r0, r3
 8000b48:	f7ff fb0a 	bl	8000160 <strlen>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8000b54:	9300      	str	r3, [sp, #0]
 8000b56:	4613      	mov	r3, r2
 8000b58:	2200      	movs	r2, #0
 8000b5a:	2101      	movs	r1, #1
 8000b5c:	485c      	ldr	r0, [pc, #368]	@ (8000cd0 <main+0xb60>)
 8000b5e:	f007 fbba 	bl	80082d6 <Alcd_PutAt_n>

			//check if format is 12h
			if (CLK.format == 1) {
 8000b62:	4b64      	ldr	r3, [pc, #400]	@ (8000cf4 <main+0xb84>)
 8000b64:	7c5b      	ldrb	r3, [r3, #17]
 8000b66:	f003 0301 	and.w	r3, r3, #1
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d01f      	beq.n	8000bb0 <main+0xa40>

				//in case AM
				if (CLK.AM_PM == 0) {
 8000b70:	4b60      	ldr	r3, [pc, #384]	@ (8000cf4 <main+0xb84>)
 8000b72:	7c5b      	ldrb	r3, [r3, #17]
 8000b74:	f003 0302 	and.w	r3, r3, #2
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d10c      	bne.n	8000b98 <main+0xa28>

					Alcd_PutAt(&lcd, 1, 9, "AM");
 8000b7e:	485e      	ldr	r0, [pc, #376]	@ (8000cf8 <main+0xb88>)
 8000b80:	f007 fc16 	bl	80083b0 <Str_Len>
 8000b84:	4603      	mov	r3, r0
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	9300      	str	r3, [sp, #0]
 8000b8a:	4b5b      	ldr	r3, [pc, #364]	@ (8000cf8 <main+0xb88>)
 8000b8c:	2209      	movs	r2, #9
 8000b8e:	2101      	movs	r1, #1
 8000b90:	484f      	ldr	r0, [pc, #316]	@ (8000cd0 <main+0xb60>)
 8000b92:	f007 fba0 	bl	80082d6 <Alcd_PutAt_n>
 8000b96:	e00b      	b.n	8000bb0 <main+0xa40>
				}
				//in case of PM
				else {
					Alcd_PutAt(&lcd, 1, 9, "PM");
 8000b98:	4858      	ldr	r0, [pc, #352]	@ (8000cfc <main+0xb8c>)
 8000b9a:	f007 fc09 	bl	80083b0 <Str_Len>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	9300      	str	r3, [sp, #0]
 8000ba4:	4b55      	ldr	r3, [pc, #340]	@ (8000cfc <main+0xb8c>)
 8000ba6:	2209      	movs	r2, #9
 8000ba8:	2101      	movs	r1, #1
 8000baa:	4849      	ldr	r0, [pc, #292]	@ (8000cd0 <main+0xb60>)
 8000bac:	f007 fb93 	bl	80082d6 <Alcd_PutAt_n>
				}
			}

			//check if back or next is selected
			Keypad_Refresh(&kp);
 8000bb0:	484a      	ldr	r0, [pc, #296]	@ (8000cdc <main+0xb6c>)
 8000bb2:	f007 fc57 	bl	8008464 <Keypad_Refresh>
			//in case back is selected
			if (Keypad_Get_Key(&kp, kp_button_no_back)
 8000bb6:	210e      	movs	r1, #14
 8000bb8:	4848      	ldr	r0, [pc, #288]	@ (8000cdc <main+0xb6c>)
 8000bba:	f007 fcef 	bl	800859c <Keypad_Get_Key>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d007      	beq.n	8000bd4 <main+0xa64>
					&& (current_tick >= general_delay)) {
 8000bc4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000bc6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	d303      	bcc.n	8000bd4 <main+0xa64>

				//back to previous menu
				status = 11;
 8000bcc:	230b      	movs	r3, #11
 8000bce:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 8000bd2:	e00d      	b.n	8000bf0 <main+0xa80>

			}

			//in case next is selected
			else if (Keypad_Get_Key(&kp, kp_button_next)
 8000bd4:	2103      	movs	r1, #3
 8000bd6:	4841      	ldr	r0, [pc, #260]	@ (8000cdc <main+0xb6c>)
 8000bd8:	f007 fce0 	bl	800859c <Keypad_Get_Key>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d006      	beq.n	8000bf0 <main+0xa80>
					&& (current_tick >= general_delay)) {
 8000be2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000be4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000be6:	429a      	cmp	r2, r3
 8000be8:	d302      	bcc.n	8000bf0 <main+0xa80>

				//back to display no of doses -> status 15
				status = 15;
 8000bea:	230f      	movs	r3, #15
 8000bec:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83

			}

			general_delay = HAL_GetTick() + 250;
 8000bf0:	f007 fd44 	bl	800867c <HAL_GetTick>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	33fa      	adds	r3, #250	@ 0xfa
 8000bf8:	677b      	str	r3, [r7, #116]	@ 0x74
		while ((status == 14) && (current_tick >= general_delay)) {
 8000bfa:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 8000bfe:	2b0e      	cmp	r3, #14
 8000c00:	d15b      	bne.n	8000cba <main+0xb4a>
 8000c02:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000c04:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000c06:	429a      	cmp	r2, r3
 8000c08:	f4bf af49 	bcs.w	8000a9e <main+0x92e>
		}

		//view the no. of doses -> status 15
		while ((status == 15) && (current_tick >= general_delay)) {
 8000c0c:	e055      	b.n	8000cba <main+0xb4a>

			//get the current tick number
			current_tick = HAL_GetTick();
 8000c0e:	f007 fd35 	bl	800867c <HAL_GetTick>
 8000c12:	67f8      	str	r0, [r7, #124]	@ 0x7c
			//clear the lcd
			Alcd_Clear(&lcd);
 8000c14:	482e      	ldr	r0, [pc, #184]	@ (8000cd0 <main+0xb60>)
 8000c16:	f007 fb77 	bl	8008308 <Alcd_Clear>
			Alcd_PutAt(&lcd, 0, 0, "doses no.");
 8000c1a:	4839      	ldr	r0, [pc, #228]	@ (8000d00 <main+0xb90>)
 8000c1c:	f007 fbc8 	bl	80083b0 <Str_Len>
 8000c20:	4603      	mov	r3, r0
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	9300      	str	r3, [sp, #0]
 8000c26:	4b36      	ldr	r3, [pc, #216]	@ (8000d00 <main+0xb90>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	4828      	ldr	r0, [pc, #160]	@ (8000cd0 <main+0xb60>)
 8000c2e:	f007 fb52 	bl	80082d6 <Alcd_PutAt_n>

			//reading dosing number
			eeprom24c32_read(&memory, &dose_num, doses_number);
 8000c32:	4b34      	ldr	r3, [pc, #208]	@ (8000d04 <main+0xb94>)
 8000c34:	b29a      	uxth	r2, r3
 8000c36:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4829      	ldr	r0, [pc, #164]	@ (8000ce4 <main+0xb74>)
 8000c3e:	f006 ff9b 	bl	8007b78 <eeprom24c32_read>

			snprintf(timeString, sizeof(timeString), "%02d", dose_num);
 8000c42:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 8000c46:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8000c4a:	4a23      	ldr	r2, [pc, #140]	@ (8000cd8 <main+0xb68>)
 8000c4c:	2132      	movs	r1, #50	@ 0x32
 8000c4e:	f00a fe2f 	bl	800b8b0 <sniprintf>
			Alcd_PutAt_n(&lcd, 1, 0, timeString, strlen(timeString));
 8000c52:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c56:	4618      	mov	r0, r3
 8000c58:	f7ff fa82 	bl	8000160 <strlen>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8000c64:	9300      	str	r3, [sp, #0]
 8000c66:	4613      	mov	r3, r2
 8000c68:	2200      	movs	r2, #0
 8000c6a:	2101      	movs	r1, #1
 8000c6c:	4818      	ldr	r0, [pc, #96]	@ (8000cd0 <main+0xb60>)
 8000c6e:	f007 fb32 	bl	80082d6 <Alcd_PutAt_n>

			//check if back or next is selected
			Keypad_Refresh(&kp);
 8000c72:	481a      	ldr	r0, [pc, #104]	@ (8000cdc <main+0xb6c>)
 8000c74:	f007 fbf6 	bl	8008464 <Keypad_Refresh>
			//in case back is selected
			if (Keypad_Get_Key(&kp, kp_button_no_back)
 8000c78:	210e      	movs	r1, #14
 8000c7a:	4818      	ldr	r0, [pc, #96]	@ (8000cdc <main+0xb6c>)
 8000c7c:	f007 fc8e 	bl	800859c <Keypad_Get_Key>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d006      	beq.n	8000c94 <main+0xb24>
					&& (current_tick >= general_delay)) {
 8000c86:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000c88:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000c8a:	429a      	cmp	r2, r3
 8000c8c:	d302      	bcc.n	8000c94 <main+0xb24>

				//back to previous menu
				status = 11;
 8000c8e:	230b      	movs	r3, #11
 8000c90:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83

			}

			//in case previous button is selected
			if (Keypad_Get_Key(&kp, kp_button_previous)
 8000c94:	2107      	movs	r1, #7
 8000c96:	4811      	ldr	r0, [pc, #68]	@ (8000cdc <main+0xb6c>)
 8000c98:	f007 fc80 	bl	800859c <Keypad_Get_Key>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d006      	beq.n	8000cb0 <main+0xb40>
					&& (current_tick >= general_delay)) {
 8000ca2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000ca4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000ca6:	429a      	cmp	r2, r3
 8000ca8:	d302      	bcc.n	8000cb0 <main+0xb40>

				//back to previous menu
				status = 14;
 8000caa:	230e      	movs	r3, #14
 8000cac:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83

			}

			general_delay = HAL_GetTick() + 250;
 8000cb0:	f007 fce4 	bl	800867c <HAL_GetTick>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	33fa      	adds	r3, #250	@ 0xfa
 8000cb8:	677b      	str	r3, [r7, #116]	@ 0x74
		while ((status == 15) && (current_tick >= general_delay)) {
 8000cba:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 8000cbe:	2b0f      	cmp	r3, #15
 8000cc0:	f040 83d0 	bne.w	8001464 <main+0x12f4>
 8000cc4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000cc6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d2a0      	bcs.n	8000c0e <main+0xa9e>
		}

		//edit menu -> status 20
		while ((status == 20) && (current_tick >= general_delay)) {
 8000ccc:	e3ca      	b.n	8001464 <main+0x12f4>
 8000cce:	bf00      	nop
 8000cd0:	2000001c 	.word	0x2000001c
 8000cd4:	0800c2b0 	.word	0x0800c2b0
 8000cd8:	0800c280 	.word	0x0800c280
 8000cdc:	20000000 	.word	0x20000000
 8000ce0:	0800c2bc 	.word	0x0800c2bc
 8000ce4:	20000168 	.word	0x20000168
 8000ce8:	2000016c 	.word	0x2000016c
 8000cec:	20000170 	.word	0x20000170
 8000cf0:	0800c258 	.word	0x0800c258
 8000cf4:	20000150 	.word	0x20000150
 8000cf8:	0800c268 	.word	0x0800c268
 8000cfc:	0800c26c 	.word	0x0800c26c
 8000d00:	0800c2c4 	.word	0x0800c2c4
 8000d04:	20000174 	.word	0x20000174

			//get the current tick number
			current_tick = HAL_GetTick();
 8000d08:	f007 fcb8 	bl	800867c <HAL_GetTick>
 8000d0c:	67f8      	str	r0, [r7, #124]	@ 0x7c

			Alcd_PutAt(&lcd, 0, 0, "Password:");
 8000d0e:	48ba      	ldr	r0, [pc, #744]	@ (8000ff8 <main+0xe88>)
 8000d10:	f007 fb4e 	bl	80083b0 <Str_Len>
 8000d14:	4603      	mov	r3, r0
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	9300      	str	r3, [sp, #0]
 8000d1a:	4bb7      	ldr	r3, [pc, #732]	@ (8000ff8 <main+0xe88>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2100      	movs	r1, #0
 8000d20:	48b6      	ldr	r0, [pc, #728]	@ (8000ffc <main+0xe8c>)
 8000d22:	f007 fad8 	bl	80082d6 <Alcd_PutAt_n>
			snprintf(timeString, sizeof(timeString), "%02d", status);
 8000d26:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 8000d2a:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8000d2e:	4ab4      	ldr	r2, [pc, #720]	@ (8001000 <main+0xe90>)
 8000d30:	2132      	movs	r1, #50	@ 0x32
 8000d32:	f00a fdbd 	bl	800b8b0 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 8000d36:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff fa10 	bl	8000160 <strlen>
 8000d40:	4603      	mov	r3, r0
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8000d48:	9300      	str	r3, [sp, #0]
 8000d4a:	4613      	mov	r3, r2
 8000d4c:	220e      	movs	r2, #14
 8000d4e:	2100      	movs	r1, #0
 8000d50:	48aa      	ldr	r0, [pc, #680]	@ (8000ffc <main+0xe8c>)
 8000d52:	f007 fac0 	bl	80082d6 <Alcd_PutAt_n>

			Alcd_CursorAt(&lcd, 1, input_index);
 8000d56:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	2101      	movs	r1, #1
 8000d5e:	48a7      	ldr	r0, [pc, #668]	@ (8000ffc <main+0xe8c>)
 8000d60:	f007 fa7d 	bl	800825e <Alcd_CursorAt>
			Alcd_Display_Control(&lcd, 1, 1, 1);
 8000d64:	2301      	movs	r3, #1
 8000d66:	2201      	movs	r2, #1
 8000d68:	2101      	movs	r1, #1
 8000d6a:	48a4      	ldr	r0, [pc, #656]	@ (8000ffc <main+0xe8c>)
 8000d6c:	f007 fadd 	bl	800832a <Alcd_Display_Control>

			Keypad_Refresh(&kp);
 8000d70:	48a4      	ldr	r0, [pc, #656]	@ (8001004 <main+0xe94>)
 8000d72:	f007 fb77 	bl	8008464 <Keypad_Refresh>

			//in case back is selected
			if (Keypad_Get_Key(&kp, kp_button_no_back)
 8000d76:	210e      	movs	r1, #14
 8000d78:	48a2      	ldr	r0, [pc, #648]	@ (8001004 <main+0xe94>)
 8000d7a:	f007 fc0f 	bl	800859c <Keypad_Get_Key>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d010      	beq.n	8000da6 <main+0xc36>
					&& (current_tick >= general_delay)) {
 8000d84:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000d86:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d30c      	bcc.n	8000da6 <main+0xc36>

				input_index = 0;  // Reset input index
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8000d92:	2300      	movs	r3, #0
 8000d94:	2200      	movs	r2, #0
 8000d96:	2101      	movs	r1, #1
 8000d98:	4898      	ldr	r0, [pc, #608]	@ (8000ffc <main+0xe8c>)
 8000d9a:	f007 fac6 	bl	800832a <Alcd_Display_Control>

				//back to previous menu
				status = 11;
 8000d9e:	230b      	movs	r3, #11
 8000da0:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 8000da4:	e35e      	b.n	8001464 <main+0x12f4>

			}

			//if 0 is pressed
			else if (Keypad_Get_Key(&kp, kp_button_0)
 8000da6:	210d      	movs	r1, #13
 8000da8:	4896      	ldr	r0, [pc, #600]	@ (8001004 <main+0xe94>)
 8000daa:	f007 fbf7 	bl	800859c <Keypad_Get_Key>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d042      	beq.n	8000e3a <main+0xcca>
					&& (current_tick >= general_delay)) {
 8000db4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000db6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d33e      	bcc.n	8000e3a <main+0xcca>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2101      	movs	r1, #1
 8000dc2:	488e      	ldr	r0, [pc, #568]	@ (8000ffc <main+0xe8c>)
 8000dc4:	f007 fab1 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered password
				if (input_index < 4) {
 8000dc8:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8000dcc:	2b03      	cmp	r3, #3
 8000dce:	d827      	bhi.n	8000e20 <main+0xcb0>
					entered_password[input_index] = '0';
 8000dd0:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8000dd4:	3388      	adds	r3, #136	@ 0x88
 8000dd6:	443b      	add	r3, r7
 8000dd8:	2230      	movs	r2, #48	@ 0x30
 8000dda:	f803 2c70 	strb.w	r2, [r3, #-112]
					entered_password[input_index + 1] = '\0'; // Null-terminate the string
 8000dde:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8000de2:	3301      	adds	r3, #1
 8000de4:	3388      	adds	r3, #136	@ 0x88
 8000de6:	443b      	add	r3, r7
 8000de8:	2200      	movs	r2, #0
 8000dea:	f803 2c70 	strb.w	r2, [r3, #-112]
					Alcd_PutAt(&lcd, 1, input_index, "*");
 8000dee:	4886      	ldr	r0, [pc, #536]	@ (8001008 <main+0xe98>)
 8000df0:	f007 fade 	bl	80083b0 <Str_Len>
 8000df4:	4603      	mov	r3, r0
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8000dfc:	9300      	str	r3, [sp, #0]
 8000dfe:	4b82      	ldr	r3, [pc, #520]	@ (8001008 <main+0xe98>)
 8000e00:	2101      	movs	r1, #1
 8000e02:	487e      	ldr	r0, [pc, #504]	@ (8000ffc <main+0xe8c>)
 8000e04:	f007 fa67 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 8000e08:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8000e12:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8000e16:	461a      	mov	r2, r3
 8000e18:	2101      	movs	r1, #1
 8000e1a:	4878      	ldr	r0, [pc, #480]	@ (8000ffc <main+0xe8c>)
 8000e1c:	f007 fa1f 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8000e20:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8000e24:	2301      	movs	r3, #1
 8000e26:	2101      	movs	r1, #1
 8000e28:	4874      	ldr	r0, [pc, #464]	@ (8000ffc <main+0xe8c>)
 8000e2a:	f007 fa7e 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8000e2e:	f007 fc25 	bl	800867c <HAL_GetTick>
 8000e32:	4603      	mov	r3, r0
 8000e34:	33fa      	adds	r3, #250	@ 0xfa
 8000e36:	677b      	str	r3, [r7, #116]	@ 0x74
 8000e38:	e314      	b.n	8001464 <main+0x12f4>
			}

			//if 1 is pressed
			else if (Keypad_Get_Key(&kp, kp_button_1)
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	4871      	ldr	r0, [pc, #452]	@ (8001004 <main+0xe94>)
 8000e3e:	f007 fbad 	bl	800859c <Keypad_Get_Key>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d042      	beq.n	8000ece <main+0xd5e>
					&& (current_tick >= general_delay)) {
 8000e48:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000e4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	d33e      	bcc.n	8000ece <main+0xd5e>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8000e50:	2300      	movs	r3, #0
 8000e52:	2200      	movs	r2, #0
 8000e54:	2101      	movs	r1, #1
 8000e56:	4869      	ldr	r0, [pc, #420]	@ (8000ffc <main+0xe8c>)
 8000e58:	f007 fa67 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered password
				if (input_index < 4) {
 8000e5c:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8000e60:	2b03      	cmp	r3, #3
 8000e62:	d827      	bhi.n	8000eb4 <main+0xd44>
					entered_password[input_index] = '1';
 8000e64:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8000e68:	3388      	adds	r3, #136	@ 0x88
 8000e6a:	443b      	add	r3, r7
 8000e6c:	2231      	movs	r2, #49	@ 0x31
 8000e6e:	f803 2c70 	strb.w	r2, [r3, #-112]
					entered_password[input_index + 1] = '\0'; // Null-terminate the string
 8000e72:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8000e76:	3301      	adds	r3, #1
 8000e78:	3388      	adds	r3, #136	@ 0x88
 8000e7a:	443b      	add	r3, r7
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	f803 2c70 	strb.w	r2, [r3, #-112]
					Alcd_PutAt(&lcd, 1, input_index, "*");
 8000e82:	4861      	ldr	r0, [pc, #388]	@ (8001008 <main+0xe98>)
 8000e84:	f007 fa94 	bl	80083b0 <Str_Len>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8000e90:	9300      	str	r3, [sp, #0]
 8000e92:	4b5d      	ldr	r3, [pc, #372]	@ (8001008 <main+0xe98>)
 8000e94:	2101      	movs	r1, #1
 8000e96:	4859      	ldr	r0, [pc, #356]	@ (8000ffc <main+0xe8c>)
 8000e98:	f007 fa1d 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 8000e9c:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8000ea6:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8000eaa:	461a      	mov	r2, r3
 8000eac:	2101      	movs	r1, #1
 8000eae:	4853      	ldr	r0, [pc, #332]	@ (8000ffc <main+0xe8c>)
 8000eb0:	f007 f9d5 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8000eb4:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8000eb8:	2301      	movs	r3, #1
 8000eba:	2101      	movs	r1, #1
 8000ebc:	484f      	ldr	r0, [pc, #316]	@ (8000ffc <main+0xe8c>)
 8000ebe:	f007 fa34 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8000ec2:	f007 fbdb 	bl	800867c <HAL_GetTick>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	33fa      	adds	r3, #250	@ 0xfa
 8000eca:	677b      	str	r3, [r7, #116]	@ 0x74
 8000ecc:	e2ca      	b.n	8001464 <main+0x12f4>
			}

			//if 2 is pressed
			else if (Keypad_Get_Key(&kp, kp_button_2)
 8000ece:	2101      	movs	r1, #1
 8000ed0:	484c      	ldr	r0, [pc, #304]	@ (8001004 <main+0xe94>)
 8000ed2:	f007 fb63 	bl	800859c <Keypad_Get_Key>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d042      	beq.n	8000f62 <main+0xdf2>
					&& (current_tick >= general_delay)) {
 8000edc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000ede:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d33e      	bcc.n	8000f62 <main+0xdf2>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2101      	movs	r1, #1
 8000eea:	4844      	ldr	r0, [pc, #272]	@ (8000ffc <main+0xe8c>)
 8000eec:	f007 fa1d 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered password
				if (input_index < 4) {
 8000ef0:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8000ef4:	2b03      	cmp	r3, #3
 8000ef6:	d827      	bhi.n	8000f48 <main+0xdd8>
					entered_password[input_index] = '2';
 8000ef8:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8000efc:	3388      	adds	r3, #136	@ 0x88
 8000efe:	443b      	add	r3, r7
 8000f00:	2232      	movs	r2, #50	@ 0x32
 8000f02:	f803 2c70 	strb.w	r2, [r3, #-112]
					entered_password[input_index + 1] = '\0'; // Null-terminate the string
 8000f06:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	3388      	adds	r3, #136	@ 0x88
 8000f0e:	443b      	add	r3, r7
 8000f10:	2200      	movs	r2, #0
 8000f12:	f803 2c70 	strb.w	r2, [r3, #-112]
					Alcd_PutAt(&lcd, 1, input_index, "*");
 8000f16:	483c      	ldr	r0, [pc, #240]	@ (8001008 <main+0xe98>)
 8000f18:	f007 fa4a 	bl	80083b0 <Str_Len>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8000f24:	9300      	str	r3, [sp, #0]
 8000f26:	4b38      	ldr	r3, [pc, #224]	@ (8001008 <main+0xe98>)
 8000f28:	2101      	movs	r1, #1
 8000f2a:	4834      	ldr	r0, [pc, #208]	@ (8000ffc <main+0xe8c>)
 8000f2c:	f007 f9d3 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 8000f30:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8000f34:	3301      	adds	r3, #1
 8000f36:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8000f3a:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8000f3e:	461a      	mov	r2, r3
 8000f40:	2101      	movs	r1, #1
 8000f42:	482e      	ldr	r0, [pc, #184]	@ (8000ffc <main+0xe8c>)
 8000f44:	f007 f98b 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8000f48:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	2101      	movs	r1, #1
 8000f50:	482a      	ldr	r0, [pc, #168]	@ (8000ffc <main+0xe8c>)
 8000f52:	f007 f9ea 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8000f56:	f007 fb91 	bl	800867c <HAL_GetTick>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	33fa      	adds	r3, #250	@ 0xfa
 8000f5e:	677b      	str	r3, [r7, #116]	@ 0x74
 8000f60:	e280      	b.n	8001464 <main+0x12f4>
			}

			//if 3 is pressed
			else if (Keypad_Get_Key(&kp, kp_button_3)
 8000f62:	2102      	movs	r1, #2
 8000f64:	4827      	ldr	r0, [pc, #156]	@ (8001004 <main+0xe94>)
 8000f66:	f007 fb19 	bl	800859c <Keypad_Get_Key>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d04d      	beq.n	800100c <main+0xe9c>
					&& (current_tick >= general_delay)) {
 8000f70:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000f72:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000f74:	429a      	cmp	r2, r3
 8000f76:	d349      	bcc.n	800100c <main+0xe9c>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8000f78:	2300      	movs	r3, #0
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	481f      	ldr	r0, [pc, #124]	@ (8000ffc <main+0xe8c>)
 8000f80:	f007 f9d3 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered password
				if (input_index < 4) {
 8000f84:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8000f88:	2b03      	cmp	r3, #3
 8000f8a:	d827      	bhi.n	8000fdc <main+0xe6c>
					entered_password[input_index] = '3';
 8000f8c:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8000f90:	3388      	adds	r3, #136	@ 0x88
 8000f92:	443b      	add	r3, r7
 8000f94:	2233      	movs	r2, #51	@ 0x33
 8000f96:	f803 2c70 	strb.w	r2, [r3, #-112]
					entered_password[input_index + 1] = '\0'; // Null-terminate the string
 8000f9a:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	3388      	adds	r3, #136	@ 0x88
 8000fa2:	443b      	add	r3, r7
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f803 2c70 	strb.w	r2, [r3, #-112]
					Alcd_PutAt(&lcd, 1, input_index, "*");
 8000faa:	4817      	ldr	r0, [pc, #92]	@ (8001008 <main+0xe98>)
 8000fac:	f007 fa00 	bl	80083b0 <Str_Len>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8000fb8:	9300      	str	r3, [sp, #0]
 8000fba:	4b13      	ldr	r3, [pc, #76]	@ (8001008 <main+0xe98>)
 8000fbc:	2101      	movs	r1, #1
 8000fbe:	480f      	ldr	r0, [pc, #60]	@ (8000ffc <main+0xe8c>)
 8000fc0:	f007 f989 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 8000fc4:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8000fc8:	3301      	adds	r3, #1
 8000fca:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8000fce:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	4809      	ldr	r0, [pc, #36]	@ (8000ffc <main+0xe8c>)
 8000fd8:	f007 f941 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8000fdc:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	2101      	movs	r1, #1
 8000fe4:	4805      	ldr	r0, [pc, #20]	@ (8000ffc <main+0xe8c>)
 8000fe6:	f007 f9a0 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8000fea:	f007 fb47 	bl	800867c <HAL_GetTick>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	33fa      	adds	r3, #250	@ 0xfa
 8000ff2:	677b      	str	r3, [r7, #116]	@ 0x74
 8000ff4:	e236      	b.n	8001464 <main+0x12f4>
 8000ff6:	bf00      	nop
 8000ff8:	0800c2d0 	.word	0x0800c2d0
 8000ffc:	2000001c 	.word	0x2000001c
 8001000:	0800c280 	.word	0x0800c280
 8001004:	20000000 	.word	0x20000000
 8001008:	0800c2dc 	.word	0x0800c2dc
			}
			//if 4 is pressed
			else if (Keypad_Get_Key(&kp, kp_button_4)
 800100c:	2104      	movs	r1, #4
 800100e:	48b8      	ldr	r0, [pc, #736]	@ (80012f0 <main+0x1180>)
 8001010:	f007 fac4 	bl	800859c <Keypad_Get_Key>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d042      	beq.n	80010a0 <main+0xf30>
					&& (current_tick >= general_delay)) {
 800101a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800101c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800101e:	429a      	cmp	r2, r3
 8001020:	d33e      	bcc.n	80010a0 <main+0xf30>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8001022:	2300      	movs	r3, #0
 8001024:	2200      	movs	r2, #0
 8001026:	2101      	movs	r1, #1
 8001028:	48b2      	ldr	r0, [pc, #712]	@ (80012f4 <main+0x1184>)
 800102a:	f007 f97e 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered password
				if (input_index < 4) {
 800102e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001032:	2b03      	cmp	r3, #3
 8001034:	d827      	bhi.n	8001086 <main+0xf16>
					entered_password[input_index] = '4';
 8001036:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800103a:	3388      	adds	r3, #136	@ 0x88
 800103c:	443b      	add	r3, r7
 800103e:	2234      	movs	r2, #52	@ 0x34
 8001040:	f803 2c70 	strb.w	r2, [r3, #-112]
					entered_password[input_index + 1] = '\0'; // Null-terminate the string
 8001044:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001048:	3301      	adds	r3, #1
 800104a:	3388      	adds	r3, #136	@ 0x88
 800104c:	443b      	add	r3, r7
 800104e:	2200      	movs	r2, #0
 8001050:	f803 2c70 	strb.w	r2, [r3, #-112]
					Alcd_PutAt(&lcd, 1, input_index, "*");
 8001054:	48a8      	ldr	r0, [pc, #672]	@ (80012f8 <main+0x1188>)
 8001056:	f007 f9ab 	bl	80083b0 <Str_Len>
 800105a:	4603      	mov	r3, r0
 800105c:	b2db      	uxtb	r3, r3
 800105e:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8001062:	9300      	str	r3, [sp, #0]
 8001064:	4ba4      	ldr	r3, [pc, #656]	@ (80012f8 <main+0x1188>)
 8001066:	2101      	movs	r1, #1
 8001068:	48a2      	ldr	r0, [pc, #648]	@ (80012f4 <main+0x1184>)
 800106a:	f007 f934 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 800106e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001072:	3301      	adds	r3, #1
 8001074:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8001078:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800107c:	461a      	mov	r2, r3
 800107e:	2101      	movs	r1, #1
 8001080:	489c      	ldr	r0, [pc, #624]	@ (80012f4 <main+0x1184>)
 8001082:	f007 f8ec 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8001086:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 800108a:	2301      	movs	r3, #1
 800108c:	2101      	movs	r1, #1
 800108e:	4899      	ldr	r0, [pc, #612]	@ (80012f4 <main+0x1184>)
 8001090:	f007 f94b 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8001094:	f007 faf2 	bl	800867c <HAL_GetTick>
 8001098:	4603      	mov	r3, r0
 800109a:	33fa      	adds	r3, #250	@ 0xfa
 800109c:	677b      	str	r3, [r7, #116]	@ 0x74
 800109e:	e1e1      	b.n	8001464 <main+0x12f4>
			}

			//if 5 is pressed
			else if (Keypad_Get_Key(&kp, kp_button_5)
 80010a0:	2105      	movs	r1, #5
 80010a2:	4893      	ldr	r0, [pc, #588]	@ (80012f0 <main+0x1180>)
 80010a4:	f007 fa7a 	bl	800859c <Keypad_Get_Key>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d042      	beq.n	8001134 <main+0xfc4>
					&& (current_tick >= general_delay)) {
 80010ae:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80010b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80010b2:	429a      	cmp	r2, r3
 80010b4:	d33e      	bcc.n	8001134 <main+0xfc4>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80010b6:	2300      	movs	r3, #0
 80010b8:	2200      	movs	r2, #0
 80010ba:	2101      	movs	r1, #1
 80010bc:	488d      	ldr	r0, [pc, #564]	@ (80012f4 <main+0x1184>)
 80010be:	f007 f934 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered password
				if (input_index < 4) {
 80010c2:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80010c6:	2b03      	cmp	r3, #3
 80010c8:	d827      	bhi.n	800111a <main+0xfaa>
					entered_password[input_index] = '5';
 80010ca:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80010ce:	3388      	adds	r3, #136	@ 0x88
 80010d0:	443b      	add	r3, r7
 80010d2:	2235      	movs	r2, #53	@ 0x35
 80010d4:	f803 2c70 	strb.w	r2, [r3, #-112]
					entered_password[input_index + 1] = '\0'; // Null-terminate the string
 80010d8:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80010dc:	3301      	adds	r3, #1
 80010de:	3388      	adds	r3, #136	@ 0x88
 80010e0:	443b      	add	r3, r7
 80010e2:	2200      	movs	r2, #0
 80010e4:	f803 2c70 	strb.w	r2, [r3, #-112]
					Alcd_PutAt(&lcd, 1, input_index, "*");
 80010e8:	4883      	ldr	r0, [pc, #524]	@ (80012f8 <main+0x1188>)
 80010ea:	f007 f961 	bl	80083b0 <Str_Len>
 80010ee:	4603      	mov	r3, r0
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 80010f6:	9300      	str	r3, [sp, #0]
 80010f8:	4b7f      	ldr	r3, [pc, #508]	@ (80012f8 <main+0x1188>)
 80010fa:	2101      	movs	r1, #1
 80010fc:	487d      	ldr	r0, [pc, #500]	@ (80012f4 <main+0x1184>)
 80010fe:	f007 f8ea 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 8001102:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001106:	3301      	adds	r3, #1
 8001108:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 800110c:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001110:	461a      	mov	r2, r3
 8001112:	2101      	movs	r1, #1
 8001114:	4877      	ldr	r0, [pc, #476]	@ (80012f4 <main+0x1184>)
 8001116:	f007 f8a2 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 800111a:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 800111e:	2301      	movs	r3, #1
 8001120:	2101      	movs	r1, #1
 8001122:	4874      	ldr	r0, [pc, #464]	@ (80012f4 <main+0x1184>)
 8001124:	f007 f901 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8001128:	f007 faa8 	bl	800867c <HAL_GetTick>
 800112c:	4603      	mov	r3, r0
 800112e:	33fa      	adds	r3, #250	@ 0xfa
 8001130:	677b      	str	r3, [r7, #116]	@ 0x74
 8001132:	e197      	b.n	8001464 <main+0x12f4>
			}

			//if 6 is pressed
			else if (Keypad_Get_Key(&kp, kp_button_6)
 8001134:	2106      	movs	r1, #6
 8001136:	486e      	ldr	r0, [pc, #440]	@ (80012f0 <main+0x1180>)
 8001138:	f007 fa30 	bl	800859c <Keypad_Get_Key>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d042      	beq.n	80011c8 <main+0x1058>
					&& (current_tick >= general_delay)) {
 8001142:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001144:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001146:	429a      	cmp	r2, r3
 8001148:	d33e      	bcc.n	80011c8 <main+0x1058>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 800114a:	2300      	movs	r3, #0
 800114c:	2200      	movs	r2, #0
 800114e:	2101      	movs	r1, #1
 8001150:	4868      	ldr	r0, [pc, #416]	@ (80012f4 <main+0x1184>)
 8001152:	f007 f8ea 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered password
				if (input_index < 4) {
 8001156:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800115a:	2b03      	cmp	r3, #3
 800115c:	d827      	bhi.n	80011ae <main+0x103e>
					entered_password[input_index] = '6';
 800115e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001162:	3388      	adds	r3, #136	@ 0x88
 8001164:	443b      	add	r3, r7
 8001166:	2236      	movs	r2, #54	@ 0x36
 8001168:	f803 2c70 	strb.w	r2, [r3, #-112]
					entered_password[input_index + 1] = '\0'; // Null-terminate the string
 800116c:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001170:	3301      	adds	r3, #1
 8001172:	3388      	adds	r3, #136	@ 0x88
 8001174:	443b      	add	r3, r7
 8001176:	2200      	movs	r2, #0
 8001178:	f803 2c70 	strb.w	r2, [r3, #-112]
					Alcd_PutAt(&lcd, 1, input_index, "*");
 800117c:	485e      	ldr	r0, [pc, #376]	@ (80012f8 <main+0x1188>)
 800117e:	f007 f917 	bl	80083b0 <Str_Len>
 8001182:	4603      	mov	r3, r0
 8001184:	b2db      	uxtb	r3, r3
 8001186:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 800118a:	9300      	str	r3, [sp, #0]
 800118c:	4b5a      	ldr	r3, [pc, #360]	@ (80012f8 <main+0x1188>)
 800118e:	2101      	movs	r1, #1
 8001190:	4858      	ldr	r0, [pc, #352]	@ (80012f4 <main+0x1184>)
 8001192:	f007 f8a0 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 8001196:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800119a:	3301      	adds	r3, #1
 800119c:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 80011a0:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80011a4:	461a      	mov	r2, r3
 80011a6:	2101      	movs	r1, #1
 80011a8:	4852      	ldr	r0, [pc, #328]	@ (80012f4 <main+0x1184>)
 80011aa:	f007 f858 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 80011ae:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 80011b2:	2301      	movs	r3, #1
 80011b4:	2101      	movs	r1, #1
 80011b6:	484f      	ldr	r0, [pc, #316]	@ (80012f4 <main+0x1184>)
 80011b8:	f007 f8b7 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 80011bc:	f007 fa5e 	bl	800867c <HAL_GetTick>
 80011c0:	4603      	mov	r3, r0
 80011c2:	33fa      	adds	r3, #250	@ 0xfa
 80011c4:	677b      	str	r3, [r7, #116]	@ 0x74
 80011c6:	e14d      	b.n	8001464 <main+0x12f4>
			}
			//if 7 is pressed
			else if (Keypad_Get_Key(&kp, kp_button_7)
 80011c8:	2108      	movs	r1, #8
 80011ca:	4849      	ldr	r0, [pc, #292]	@ (80012f0 <main+0x1180>)
 80011cc:	f007 f9e6 	bl	800859c <Keypad_Get_Key>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d042      	beq.n	800125c <main+0x10ec>
					&& (current_tick >= general_delay)) {
 80011d6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80011d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80011da:	429a      	cmp	r2, r3
 80011dc:	d33e      	bcc.n	800125c <main+0x10ec>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80011de:	2300      	movs	r3, #0
 80011e0:	2200      	movs	r2, #0
 80011e2:	2101      	movs	r1, #1
 80011e4:	4843      	ldr	r0, [pc, #268]	@ (80012f4 <main+0x1184>)
 80011e6:	f007 f8a0 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered password
				if (input_index < 4) {
 80011ea:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80011ee:	2b03      	cmp	r3, #3
 80011f0:	d827      	bhi.n	8001242 <main+0x10d2>
					entered_password[input_index] = '7';
 80011f2:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80011f6:	3388      	adds	r3, #136	@ 0x88
 80011f8:	443b      	add	r3, r7
 80011fa:	2237      	movs	r2, #55	@ 0x37
 80011fc:	f803 2c70 	strb.w	r2, [r3, #-112]
					entered_password[input_index + 1] = '\0'; // Null-terminate the string
 8001200:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001204:	3301      	adds	r3, #1
 8001206:	3388      	adds	r3, #136	@ 0x88
 8001208:	443b      	add	r3, r7
 800120a:	2200      	movs	r2, #0
 800120c:	f803 2c70 	strb.w	r2, [r3, #-112]
					Alcd_PutAt(&lcd, 1, input_index, "*");
 8001210:	4839      	ldr	r0, [pc, #228]	@ (80012f8 <main+0x1188>)
 8001212:	f007 f8cd 	bl	80083b0 <Str_Len>
 8001216:	4603      	mov	r3, r0
 8001218:	b2db      	uxtb	r3, r3
 800121a:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 800121e:	9300      	str	r3, [sp, #0]
 8001220:	4b35      	ldr	r3, [pc, #212]	@ (80012f8 <main+0x1188>)
 8001222:	2101      	movs	r1, #1
 8001224:	4833      	ldr	r0, [pc, #204]	@ (80012f4 <main+0x1184>)
 8001226:	f007 f856 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 800122a:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800122e:	3301      	adds	r3, #1
 8001230:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8001234:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001238:	461a      	mov	r2, r3
 800123a:	2101      	movs	r1, #1
 800123c:	482d      	ldr	r0, [pc, #180]	@ (80012f4 <main+0x1184>)
 800123e:	f007 f80e 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8001242:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8001246:	2301      	movs	r3, #1
 8001248:	2101      	movs	r1, #1
 800124a:	482a      	ldr	r0, [pc, #168]	@ (80012f4 <main+0x1184>)
 800124c:	f007 f86d 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8001250:	f007 fa14 	bl	800867c <HAL_GetTick>
 8001254:	4603      	mov	r3, r0
 8001256:	33fa      	adds	r3, #250	@ 0xfa
 8001258:	677b      	str	r3, [r7, #116]	@ 0x74
 800125a:	e103      	b.n	8001464 <main+0x12f4>
			}
			//if 8 is pressed
			else if (Keypad_Get_Key(&kp, kp_button_8)
 800125c:	2109      	movs	r1, #9
 800125e:	4824      	ldr	r0, [pc, #144]	@ (80012f0 <main+0x1180>)
 8001260:	f007 f99c 	bl	800859c <Keypad_Get_Key>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d048      	beq.n	80012fc <main+0x118c>
					&& (current_tick >= general_delay)) {
 800126a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800126c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800126e:	429a      	cmp	r2, r3
 8001270:	d344      	bcc.n	80012fc <main+0x118c>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8001272:	2300      	movs	r3, #0
 8001274:	2200      	movs	r2, #0
 8001276:	2101      	movs	r1, #1
 8001278:	481e      	ldr	r0, [pc, #120]	@ (80012f4 <main+0x1184>)
 800127a:	f007 f856 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered password
				if (input_index < 4) {
 800127e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001282:	2b03      	cmp	r3, #3
 8001284:	d827      	bhi.n	80012d6 <main+0x1166>
					entered_password[input_index] = '8';
 8001286:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800128a:	3388      	adds	r3, #136	@ 0x88
 800128c:	443b      	add	r3, r7
 800128e:	2238      	movs	r2, #56	@ 0x38
 8001290:	f803 2c70 	strb.w	r2, [r3, #-112]
					entered_password[input_index + 1] = '\0'; // Null-terminate the string
 8001294:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001298:	3301      	adds	r3, #1
 800129a:	3388      	adds	r3, #136	@ 0x88
 800129c:	443b      	add	r3, r7
 800129e:	2200      	movs	r2, #0
 80012a0:	f803 2c70 	strb.w	r2, [r3, #-112]
					Alcd_PutAt(&lcd, 1, input_index, "*");
 80012a4:	4814      	ldr	r0, [pc, #80]	@ (80012f8 <main+0x1188>)
 80012a6:	f007 f883 	bl	80083b0 <Str_Len>
 80012aa:	4603      	mov	r3, r0
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 80012b2:	9300      	str	r3, [sp, #0]
 80012b4:	4b10      	ldr	r3, [pc, #64]	@ (80012f8 <main+0x1188>)
 80012b6:	2101      	movs	r1, #1
 80012b8:	480e      	ldr	r0, [pc, #56]	@ (80012f4 <main+0x1184>)
 80012ba:	f007 f80c 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 80012be:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80012c2:	3301      	adds	r3, #1
 80012c4:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 80012c8:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80012cc:	461a      	mov	r2, r3
 80012ce:	2101      	movs	r1, #1
 80012d0:	4808      	ldr	r0, [pc, #32]	@ (80012f4 <main+0x1184>)
 80012d2:	f006 ffc4 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 80012d6:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 80012da:	2301      	movs	r3, #1
 80012dc:	2101      	movs	r1, #1
 80012de:	4805      	ldr	r0, [pc, #20]	@ (80012f4 <main+0x1184>)
 80012e0:	f007 f823 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 80012e4:	f007 f9ca 	bl	800867c <HAL_GetTick>
 80012e8:	4603      	mov	r3, r0
 80012ea:	33fa      	adds	r3, #250	@ 0xfa
 80012ec:	677b      	str	r3, [r7, #116]	@ 0x74
 80012ee:	e0b9      	b.n	8001464 <main+0x12f4>
 80012f0:	20000000 	.word	0x20000000
 80012f4:	2000001c 	.word	0x2000001c
 80012f8:	0800c2dc 	.word	0x0800c2dc
			}
			//if 9 is pressed
			else if (Keypad_Get_Key(&kp, kp_button_9)
 80012fc:	210a      	movs	r1, #10
 80012fe:	48a3      	ldr	r0, [pc, #652]	@ (800158c <main+0x141c>)
 8001300:	f007 f94c 	bl	800859c <Keypad_Get_Key>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d042      	beq.n	8001390 <main+0x1220>
					&& (current_tick >= general_delay)) {
 800130a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800130c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800130e:	429a      	cmp	r2, r3
 8001310:	d33e      	bcc.n	8001390 <main+0x1220>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8001312:	2300      	movs	r3, #0
 8001314:	2200      	movs	r2, #0
 8001316:	2101      	movs	r1, #1
 8001318:	489d      	ldr	r0, [pc, #628]	@ (8001590 <main+0x1420>)
 800131a:	f007 f806 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered password
				if (input_index < 4) {
 800131e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001322:	2b03      	cmp	r3, #3
 8001324:	d827      	bhi.n	8001376 <main+0x1206>
					entered_password[input_index] = '9';
 8001326:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800132a:	3388      	adds	r3, #136	@ 0x88
 800132c:	443b      	add	r3, r7
 800132e:	2239      	movs	r2, #57	@ 0x39
 8001330:	f803 2c70 	strb.w	r2, [r3, #-112]
					entered_password[input_index + 1] = '\0'; // Null-terminate the string
 8001334:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001338:	3301      	adds	r3, #1
 800133a:	3388      	adds	r3, #136	@ 0x88
 800133c:	443b      	add	r3, r7
 800133e:	2200      	movs	r2, #0
 8001340:	f803 2c70 	strb.w	r2, [r3, #-112]
					Alcd_PutAt(&lcd, 1, input_index, "*");
 8001344:	4893      	ldr	r0, [pc, #588]	@ (8001594 <main+0x1424>)
 8001346:	f007 f833 	bl	80083b0 <Str_Len>
 800134a:	4603      	mov	r3, r0
 800134c:	b2db      	uxtb	r3, r3
 800134e:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8001352:	9300      	str	r3, [sp, #0]
 8001354:	4b8f      	ldr	r3, [pc, #572]	@ (8001594 <main+0x1424>)
 8001356:	2101      	movs	r1, #1
 8001358:	488d      	ldr	r0, [pc, #564]	@ (8001590 <main+0x1420>)
 800135a:	f006 ffbc 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 800135e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001362:	3301      	adds	r3, #1
 8001364:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8001368:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800136c:	461a      	mov	r2, r3
 800136e:	2101      	movs	r1, #1
 8001370:	4887      	ldr	r0, [pc, #540]	@ (8001590 <main+0x1420>)
 8001372:	f006 ff74 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8001376:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 800137a:	2301      	movs	r3, #1
 800137c:	2101      	movs	r1, #1
 800137e:	4884      	ldr	r0, [pc, #528]	@ (8001590 <main+0x1420>)
 8001380:	f006 ffd3 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8001384:	f007 f97a 	bl	800867c <HAL_GetTick>
 8001388:	4603      	mov	r3, r0
 800138a:	33fa      	adds	r3, #250	@ 0xfa
 800138c:	677b      	str	r3, [r7, #116]	@ 0x74
 800138e:	e069      	b.n	8001464 <main+0x12f4>
			}

			//if yes is pressed
			else if (Keypad_Get_Key(&kp, kp_button_yes)
 8001390:	210f      	movs	r1, #15
 8001392:	487e      	ldr	r0, [pc, #504]	@ (800158c <main+0x141c>)
 8001394:	f007 f902 	bl	800859c <Keypad_Get_Key>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d062      	beq.n	8001464 <main+0x12f4>
					&& (current_tick >= general_delay)) {
 800139e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80013a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d35e      	bcc.n	8001464 <main+0x12f4>
				// Compare entered password with the saved password (menu_pass)
				if (strcmp(entered_password, menu_pass) == 0) {
 80013a6:	f107 0220 	add.w	r2, r7, #32
 80013aa:	f107 0318 	add.w	r3, r7, #24
 80013ae:	4611      	mov	r1, r2
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7fe fecb 	bl	800014c <strcmp>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d124      	bne.n	8001406 <main+0x1296>

					// Password is correct, proceed to the next menu or operation
					Alcd_Clear(&lcd);
 80013bc:	4874      	ldr	r0, [pc, #464]	@ (8001590 <main+0x1420>)
 80013be:	f006 ffa3 	bl	8008308 <Alcd_Clear>
					Alcd_PutAt(&lcd, 0, 0, "Access Granted");
 80013c2:	4875      	ldr	r0, [pc, #468]	@ (8001598 <main+0x1428>)
 80013c4:	f006 fff4 	bl	80083b0 <Str_Len>
 80013c8:	4603      	mov	r3, r0
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	9300      	str	r3, [sp, #0]
 80013ce:	4b72      	ldr	r3, [pc, #456]	@ (8001598 <main+0x1428>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	2100      	movs	r1, #0
 80013d4:	486e      	ldr	r0, [pc, #440]	@ (8001590 <main+0x1420>)
 80013d6:	f006 ff7e 	bl	80082d6 <Alcd_PutAt_n>
					//HAL_Delay(2000);

					//raise the password compare flag
					password_comp_flag = 1;
 80013da:	2301      	movs	r3, #1
 80013dc:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

					Alcd_Display_Control(&lcd, 1, 0, 0);
 80013e0:	2300      	movs	r3, #0
 80013e2:	2200      	movs	r2, #0
 80013e4:	2101      	movs	r1, #1
 80013e6:	486a      	ldr	r0, [pc, #424]	@ (8001590 <main+0x1420>)
 80013e8:	f006 ff9f 	bl	800832a <Alcd_Display_Control>

					status = 21;
 80013ec:	2315      	movs	r3, #21
 80013ee:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83

					input_index = 0; //reset the input index
 80013f2:	2300      	movs	r3, #0
 80013f4:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					general_delay = HAL_GetTick() + 1500;
 80013f8:	f007 f940 	bl	800867c <HAL_GetTick>
 80013fc:	4603      	mov	r3, r0
 80013fe:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 8001402:	677b      	str	r3, [r7, #116]	@ 0x74
 8001404:	e023      	b.n	800144e <main+0x12de>
				}

				else {
					// Password is incorrect, display error message
					Alcd_Clear(&lcd);
 8001406:	4862      	ldr	r0, [pc, #392]	@ (8001590 <main+0x1420>)
 8001408:	f006 ff7e 	bl	8008308 <Alcd_Clear>
					Alcd_PutAt(&lcd, 0, 0, "Wrong Password");
 800140c:	4863      	ldr	r0, [pc, #396]	@ (800159c <main+0x142c>)
 800140e:	f006 ffcf 	bl	80083b0 <Str_Len>
 8001412:	4603      	mov	r3, r0
 8001414:	b2db      	uxtb	r3, r3
 8001416:	9300      	str	r3, [sp, #0]
 8001418:	4b60      	ldr	r3, [pc, #384]	@ (800159c <main+0x142c>)
 800141a:	2200      	movs	r2, #0
 800141c:	2100      	movs	r1, #0
 800141e:	485c      	ldr	r0, [pc, #368]	@ (8001590 <main+0x1420>)
 8001420:	f006 ff59 	bl	80082d6 <Alcd_PutAt_n>

					//raise the password compare flag
					password_comp_flag = 1;
 8001424:	2301      	movs	r3, #1
 8001426:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

					input_index = 0; //reset the input index
 800142a:	2300      	movs	r3, #0
 800142c:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_Display_Control(&lcd, 1, 0, 0);
 8001430:	2300      	movs	r3, #0
 8001432:	2200      	movs	r2, #0
 8001434:	2101      	movs	r1, #1
 8001436:	4856      	ldr	r0, [pc, #344]	@ (8001590 <main+0x1420>)
 8001438:	f006 ff77 	bl	800832a <Alcd_Display_Control>

					status = 10;
 800143c:	230a      	movs	r3, #10
 800143e:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83

					general_delay = HAL_GetTick() + 1500;
 8001442:	f007 f91b 	bl	800867c <HAL_GetTick>
 8001446:	4603      	mov	r3, r0
 8001448:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 800144c:	677b      	str	r3, [r7, #116]	@ 0x74

				}

				//create a delay
				if ((password_comp_flag == 1)
 800144e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001452:	2b01      	cmp	r3, #1
 8001454:	d106      	bne.n	8001464 <main+0x12f4>
						&& (current_tick >= general_delay)) {
 8001456:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001458:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800145a:	429a      	cmp	r2, r3
 800145c:	d302      	bcc.n	8001464 <main+0x12f4>

					password_comp_flag = 0;
 800145e:	2300      	movs	r3, #0
 8001460:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
		while ((status == 20) && (current_tick >= general_delay)) {
 8001464:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 8001468:	2b14      	cmp	r3, #20
 800146a:	f040 8084 	bne.w	8001576 <main+0x1406>
 800146e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001470:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001472:	429a      	cmp	r2, r3
 8001474:	f4bf ac48 	bcs.w	8000d08 <main+0xb98>
			}

		}

		//view the edit menu -> status 21
		while ((status == 21) && (current_tick >= general_delay)) {
 8001478:	e07d      	b.n	8001576 <main+0x1406>

			//get the current tick number
			current_tick = HAL_GetTick();
 800147a:	f007 f8ff 	bl	800867c <HAL_GetTick>
 800147e:	67f8      	str	r0, [r7, #124]	@ 0x7c

			Alcd_Clear(&lcd);
 8001480:	4843      	ldr	r0, [pc, #268]	@ (8001590 <main+0x1420>)
 8001482:	f006 ff41 	bl	8008308 <Alcd_Clear>
			Alcd_PutAt(&lcd, 0, 0, "1: parameters");
 8001486:	4846      	ldr	r0, [pc, #280]	@ (80015a0 <main+0x1430>)
 8001488:	f006 ff92 	bl	80083b0 <Str_Len>
 800148c:	4603      	mov	r3, r0
 800148e:	b2db      	uxtb	r3, r3
 8001490:	9300      	str	r3, [sp, #0]
 8001492:	4b43      	ldr	r3, [pc, #268]	@ (80015a0 <main+0x1430>)
 8001494:	2200      	movs	r2, #0
 8001496:	2100      	movs	r1, #0
 8001498:	483d      	ldr	r0, [pc, #244]	@ (8001590 <main+0x1420>)
 800149a:	f006 ff1c 	bl	80082d6 <Alcd_PutAt_n>
			Alcd_PutAt(&lcd, 1, 0, "2: calibration");
 800149e:	4841      	ldr	r0, [pc, #260]	@ (80015a4 <main+0x1434>)
 80014a0:	f006 ff86 	bl	80083b0 <Str_Len>
 80014a4:	4603      	mov	r3, r0
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	9300      	str	r3, [sp, #0]
 80014aa:	4b3e      	ldr	r3, [pc, #248]	@ (80015a4 <main+0x1434>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	2101      	movs	r1, #1
 80014b0:	4837      	ldr	r0, [pc, #220]	@ (8001590 <main+0x1420>)
 80014b2:	f006 ff10 	bl	80082d6 <Alcd_PutAt_n>
			snprintf(timeString, sizeof(timeString), "%02d", status);
 80014b6:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 80014ba:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80014be:	4a3a      	ldr	r2, [pc, #232]	@ (80015a8 <main+0x1438>)
 80014c0:	2132      	movs	r1, #50	@ 0x32
 80014c2:	f00a f9f5 	bl	800b8b0 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 80014c6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7fe fe48 	bl	8000160 <strlen>
 80014d0:	4603      	mov	r3, r0
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80014d8:	9300      	str	r3, [sp, #0]
 80014da:	4613      	mov	r3, r2
 80014dc:	220e      	movs	r2, #14
 80014de:	2100      	movs	r1, #0
 80014e0:	482b      	ldr	r0, [pc, #172]	@ (8001590 <main+0x1420>)
 80014e2:	f006 fef8 	bl	80082d6 <Alcd_PutAt_n>

			//check if any button is pressed
			//check for any keypad input
			Keypad_Refresh(&kp);
 80014e6:	4829      	ldr	r0, [pc, #164]	@ (800158c <main+0x141c>)
 80014e8:	f006 ffbc 	bl	8008464 <Keypad_Refresh>

			//in case 1 is selected -> edit parameters (status 23)
			if (Keypad_Get_Key(&kp, kp_button_1)
 80014ec:	2100      	movs	r1, #0
 80014ee:	4827      	ldr	r0, [pc, #156]	@ (800158c <main+0x141c>)
 80014f0:	f007 f854 	bl	800859c <Keypad_Get_Key>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d007      	beq.n	800150a <main+0x139a>
					&& (current_tick >= general_delay)) {
 80014fa:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80014fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80014fe:	429a      	cmp	r2, r3
 8001500:	d303      	bcc.n	800150a <main+0x139a>

				status = 23;
 8001502:	2317      	movs	r3, #23
 8001504:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 8001508:	e030      	b.n	800156c <main+0x13fc>

			}

			//2 is selected -> calibrate dosing time (status 24)
			else if (Keypad_Get_Key(&kp, kp_button_2)
 800150a:	2101      	movs	r1, #1
 800150c:	481f      	ldr	r0, [pc, #124]	@ (800158c <main+0x141c>)
 800150e:	f007 f845 	bl	800859c <Keypad_Get_Key>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d00c      	beq.n	8001532 <main+0x13c2>
					&& (current_tick >= general_delay)) {
 8001518:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800151a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800151c:	429a      	cmp	r2, r3
 800151e:	d308      	bcc.n	8001532 <main+0x13c2>

				dosing_tick = 0;
 8001520:	2300      	movs	r3, #0
 8001522:	67bb      	str	r3, [r7, #120]	@ 0x78
				start_tick = HAL_GetTick();
 8001524:	f007 f8aa 	bl	800867c <HAL_GetTick>
 8001528:	6738      	str	r0, [r7, #112]	@ 0x70

				status = 24;
 800152a:	2318      	movs	r3, #24
 800152c:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 8001530:	e01c      	b.n	800156c <main+0x13fc>

			}

			//back is selected
			else if (Keypad_Get_Key(&kp, kp_button_no_back)
 8001532:	210e      	movs	r1, #14
 8001534:	4815      	ldr	r0, [pc, #84]	@ (800158c <main+0x141c>)
 8001536:	f007 f831 	bl	800859c <Keypad_Get_Key>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d007      	beq.n	8001550 <main+0x13e0>
					&& (current_tick >= general_delay)) {
 8001540:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001542:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001544:	429a      	cmp	r2, r3
 8001546:	d303      	bcc.n	8001550 <main+0x13e0>

				//back to previous menu
				status = 10;
 8001548:	230a      	movs	r3, #10
 800154a:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 800154e:	e00d      	b.n	800156c <main+0x13fc>

			}
			//next is selected
			else if (Keypad_Get_Key(&kp, kp_button_next)
 8001550:	2103      	movs	r1, #3
 8001552:	480e      	ldr	r0, [pc, #56]	@ (800158c <main+0x141c>)
 8001554:	f007 f822 	bl	800859c <Keypad_Get_Key>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d006      	beq.n	800156c <main+0x13fc>
					&& (current_tick >= general_delay)) {
 800155e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001560:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001562:	429a      	cmp	r2, r3
 8001564:	d302      	bcc.n	800156c <main+0x13fc>

				//go to next state
				status = 22;
 8001566:	2316      	movs	r3, #22
 8001568:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83

			}

			general_delay = HAL_GetTick() + 250;
 800156c:	f007 f886 	bl	800867c <HAL_GetTick>
 8001570:	4603      	mov	r3, r0
 8001572:	33fa      	adds	r3, #250	@ 0xfa
 8001574:	677b      	str	r3, [r7, #116]	@ 0x74
		while ((status == 21) && (current_tick >= general_delay)) {
 8001576:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 800157a:	2b15      	cmp	r3, #21
 800157c:	f040 80a4 	bne.w	80016c8 <main+0x1558>
 8001580:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001582:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001584:	429a      	cmp	r2, r3
 8001586:	f4bf af78 	bcs.w	800147a <main+0x130a>
		}

		//view the extended edit menu -> status 22
		while ((status == 22) && (current_tick >= general_delay)) {
 800158a:	e09d      	b.n	80016c8 <main+0x1558>
 800158c:	20000000 	.word	0x20000000
 8001590:	2000001c 	.word	0x2000001c
 8001594:	0800c2dc 	.word	0x0800c2dc
 8001598:	0800c2e0 	.word	0x0800c2e0
 800159c:	0800c2f0 	.word	0x0800c2f0
 80015a0:	0800c300 	.word	0x0800c300
 80015a4:	0800c310 	.word	0x0800c310
 80015a8:	0800c280 	.word	0x0800c280

			//get the current tick number
			current_tick = HAL_GetTick();
 80015ac:	f007 f866 	bl	800867c <HAL_GetTick>
 80015b0:	67f8      	str	r0, [r7, #124]	@ 0x7c

			Alcd_Clear(&lcd);
 80015b2:	48b1      	ldr	r0, [pc, #708]	@ (8001878 <main+0x1708>)
 80015b4:	f006 fea8 	bl	8008308 <Alcd_Clear>
			Alcd_PutAt(&lcd, 0, 0, "3: time");
 80015b8:	48b0      	ldr	r0, [pc, #704]	@ (800187c <main+0x170c>)
 80015ba:	f006 fef9 	bl	80083b0 <Str_Len>
 80015be:	4603      	mov	r3, r0
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	9300      	str	r3, [sp, #0]
 80015c4:	4bad      	ldr	r3, [pc, #692]	@ (800187c <main+0x170c>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	2100      	movs	r1, #0
 80015ca:	48ab      	ldr	r0, [pc, #684]	@ (8001878 <main+0x1708>)
 80015cc:	f006 fe83 	bl	80082d6 <Alcd_PutAt_n>
			Alcd_PutAt(&lcd, 1, 0, "4: date");
 80015d0:	48ab      	ldr	r0, [pc, #684]	@ (8001880 <main+0x1710>)
 80015d2:	f006 feed 	bl	80083b0 <Str_Len>
 80015d6:	4603      	mov	r3, r0
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	9300      	str	r3, [sp, #0]
 80015dc:	4ba8      	ldr	r3, [pc, #672]	@ (8001880 <main+0x1710>)
 80015de:	2200      	movs	r2, #0
 80015e0:	2101      	movs	r1, #1
 80015e2:	48a5      	ldr	r0, [pc, #660]	@ (8001878 <main+0x1708>)
 80015e4:	f006 fe77 	bl	80082d6 <Alcd_PutAt_n>
			snprintf(timeString, sizeof(timeString), "%02d", status);
 80015e8:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 80015ec:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80015f0:	4aa4      	ldr	r2, [pc, #656]	@ (8001884 <main+0x1714>)
 80015f2:	2132      	movs	r1, #50	@ 0x32
 80015f4:	f00a f95c 	bl	800b8b0 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 80015f8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7fe fdaf 	bl	8000160 <strlen>
 8001602:	4603      	mov	r3, r0
 8001604:	b2db      	uxtb	r3, r3
 8001606:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800160a:	9300      	str	r3, [sp, #0]
 800160c:	4613      	mov	r3, r2
 800160e:	220e      	movs	r2, #14
 8001610:	2100      	movs	r1, #0
 8001612:	4899      	ldr	r0, [pc, #612]	@ (8001878 <main+0x1708>)
 8001614:	f006 fe5f 	bl	80082d6 <Alcd_PutAt_n>

			//check if any button is pressed
			//check for any keypad input
			Keypad_Refresh(&kp);
 8001618:	489b      	ldr	r0, [pc, #620]	@ (8001888 <main+0x1718>)
 800161a:	f006 ff23 	bl	8008464 <Keypad_Refresh>

			//in case 3 is selected -> edit time (status 25)
			if (Keypad_Get_Key(&kp, kp_button_3)
 800161e:	2102      	movs	r1, #2
 8001620:	4899      	ldr	r0, [pc, #612]	@ (8001888 <main+0x1718>)
 8001622:	f006 ffbb 	bl	800859c <Keypad_Get_Key>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d00a      	beq.n	8001642 <main+0x14d2>
					&& (current_tick >= general_delay)) {
 800162c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800162e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001630:	429a      	cmp	r2, r3
 8001632:	d306      	bcc.n	8001642 <main+0x14d2>
				Alcd_Clear(&lcd);
 8001634:	4890      	ldr	r0, [pc, #576]	@ (8001878 <main+0x1708>)
 8001636:	f006 fe67 	bl	8008308 <Alcd_Clear>
				status = 25;
 800163a:	2319      	movs	r3, #25
 800163c:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 8001640:	e03d      	b.n	80016be <main+0x154e>

			}

			//4 is selected -> edit date (status 26)
			else if (Keypad_Get_Key(&kp, kp_button_4)
 8001642:	2104      	movs	r1, #4
 8001644:	4890      	ldr	r0, [pc, #576]	@ (8001888 <main+0x1718>)
 8001646:	f006 ffa9 	bl	800859c <Keypad_Get_Key>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d00a      	beq.n	8001666 <main+0x14f6>
					&& (current_tick >= general_delay)) {
 8001650:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001652:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001654:	429a      	cmp	r2, r3
 8001656:	d306      	bcc.n	8001666 <main+0x14f6>

				Alcd_Clear(&lcd);
 8001658:	4887      	ldr	r0, [pc, #540]	@ (8001878 <main+0x1708>)
 800165a:	f006 fe55 	bl	8008308 <Alcd_Clear>
				status = 26;
 800165e:	231a      	movs	r3, #26
 8001660:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 8001664:	e02b      	b.n	80016be <main+0x154e>

			}

			//back is selected
			else if (Keypad_Get_Key(&kp, kp_button_no_back)
 8001666:	210e      	movs	r1, #14
 8001668:	4887      	ldr	r0, [pc, #540]	@ (8001888 <main+0x1718>)
 800166a:	f006 ff97 	bl	800859c <Keypad_Get_Key>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d007      	beq.n	8001684 <main+0x1514>
					&& (current_tick >= general_delay)) {
 8001674:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001676:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001678:	429a      	cmp	r2, r3
 800167a:	d303      	bcc.n	8001684 <main+0x1514>

				//back to previous menu
				status = 10;
 800167c:	230a      	movs	r3, #10
 800167e:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 8001682:	e01c      	b.n	80016be <main+0x154e>

			}
			//previous is selected
			else if (Keypad_Get_Key(&kp, kp_button_previous)
 8001684:	2107      	movs	r1, #7
 8001686:	4880      	ldr	r0, [pc, #512]	@ (8001888 <main+0x1718>)
 8001688:	f006 ff88 	bl	800859c <Keypad_Get_Key>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d007      	beq.n	80016a2 <main+0x1532>
					&& (current_tick >= general_delay)) {
 8001692:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001694:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001696:	429a      	cmp	r2, r3
 8001698:	d303      	bcc.n	80016a2 <main+0x1532>

				//go to previous state
				status = 21;
 800169a:	2315      	movs	r3, #21
 800169c:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 80016a0:	e00d      	b.n	80016be <main+0x154e>

			}

			//next is selected
			else if (Keypad_Get_Key(&kp, kp_button_next)
 80016a2:	2103      	movs	r1, #3
 80016a4:	4878      	ldr	r0, [pc, #480]	@ (8001888 <main+0x1718>)
 80016a6:	f006 ff79 	bl	800859c <Keypad_Get_Key>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d006      	beq.n	80016be <main+0x154e>
					&& (current_tick >= general_delay)) {
 80016b0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80016b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d302      	bcc.n	80016be <main+0x154e>

				//go to next state
				status = 27;
 80016b8:	231b      	movs	r3, #27
 80016ba:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83

			}

			general_delay = HAL_GetTick() + 250;
 80016be:	f006 ffdd 	bl	800867c <HAL_GetTick>
 80016c2:	4603      	mov	r3, r0
 80016c4:	33fa      	adds	r3, #250	@ 0xfa
 80016c6:	677b      	str	r3, [r7, #116]	@ 0x74
		while ((status == 22) && (current_tick >= general_delay)) {
 80016c8:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 80016cc:	2b16      	cmp	r3, #22
 80016ce:	d179      	bne.n	80017c4 <main+0x1654>
 80016d0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80016d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80016d4:	429a      	cmp	r2, r3
 80016d6:	f4bf af69 	bcs.w	80015ac <main+0x143c>
		}

		//edit the time
		while ((status == 25) && (current_tick >= general_delay)) {
 80016da:	e073      	b.n	80017c4 <main+0x1654>

			//get the current tick number
			current_tick = HAL_GetTick();
 80016dc:	f006 ffce 	bl	800867c <HAL_GetTick>
 80016e0:	67f8      	str	r0, [r7, #124]	@ 0x7c

			Alcd_Clear(&lcd);
 80016e2:	4865      	ldr	r0, [pc, #404]	@ (8001878 <main+0x1708>)
 80016e4:	f006 fe10 	bl	8008308 <Alcd_Clear>
			Alcd_PutAt(&lcd, 0, 0, "format");
 80016e8:	4868      	ldr	r0, [pc, #416]	@ (800188c <main+0x171c>)
 80016ea:	f006 fe61 	bl	80083b0 <Str_Len>
 80016ee:	4603      	mov	r3, r0
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	9300      	str	r3, [sp, #0]
 80016f4:	4b65      	ldr	r3, [pc, #404]	@ (800188c <main+0x171c>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	2100      	movs	r1, #0
 80016fa:	485f      	ldr	r0, [pc, #380]	@ (8001878 <main+0x1708>)
 80016fc:	f006 fdeb 	bl	80082d6 <Alcd_PutAt_n>
			Alcd_PutAt(&lcd, 1, 0, "1: 12h    2: 24h");
 8001700:	4863      	ldr	r0, [pc, #396]	@ (8001890 <main+0x1720>)
 8001702:	f006 fe55 	bl	80083b0 <Str_Len>
 8001706:	4603      	mov	r3, r0
 8001708:	b2db      	uxtb	r3, r3
 800170a:	9300      	str	r3, [sp, #0]
 800170c:	4b60      	ldr	r3, [pc, #384]	@ (8001890 <main+0x1720>)
 800170e:	2200      	movs	r2, #0
 8001710:	2101      	movs	r1, #1
 8001712:	4859      	ldr	r0, [pc, #356]	@ (8001878 <main+0x1708>)
 8001714:	f006 fddf 	bl	80082d6 <Alcd_PutAt_n>
			snprintf(timeString, sizeof(timeString), "%02d", status);
 8001718:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 800171c:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8001720:	4a58      	ldr	r2, [pc, #352]	@ (8001884 <main+0x1714>)
 8001722:	2132      	movs	r1, #50	@ 0x32
 8001724:	f00a f8c4 	bl	800b8b0 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 8001728:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800172c:	4618      	mov	r0, r3
 800172e:	f7fe fd17 	bl	8000160 <strlen>
 8001732:	4603      	mov	r3, r0
 8001734:	b2db      	uxtb	r3, r3
 8001736:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800173a:	9300      	str	r3, [sp, #0]
 800173c:	4613      	mov	r3, r2
 800173e:	220e      	movs	r2, #14
 8001740:	2100      	movs	r1, #0
 8001742:	484d      	ldr	r0, [pc, #308]	@ (8001878 <main+0x1708>)
 8001744:	f006 fdc7 	bl	80082d6 <Alcd_PutAt_n>

			//check if any button is pressed
			//check for any keypad input
			Keypad_Refresh(&kp);
 8001748:	484f      	ldr	r0, [pc, #316]	@ (8001888 <main+0x1718>)
 800174a:	f006 fe8b 	bl	8008464 <Keypad_Refresh>

			//in case 1 is selected -> 12h format (status 28)
			if (Keypad_Get_Key(&kp, kp_button_1)
 800174e:	2100      	movs	r1, #0
 8001750:	484d      	ldr	r0, [pc, #308]	@ (8001888 <main+0x1718>)
 8001752:	f006 ff23 	bl	800859c <Keypad_Get_Key>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d00c      	beq.n	8001776 <main+0x1606>
					&& (current_tick >= general_delay)) {
 800175c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800175e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001760:	429a      	cmp	r2, r3
 8001762:	d308      	bcc.n	8001776 <main+0x1606>

				//set 12h format
				CLK.format = 1;
 8001764:	4a4b      	ldr	r2, [pc, #300]	@ (8001894 <main+0x1724>)
 8001766:	7c53      	ldrb	r3, [r2, #17]
 8001768:	f043 0301 	orr.w	r3, r3, #1
 800176c:	7453      	strb	r3, [r2, #17]
				status = 28;
 800176e:	231c      	movs	r3, #28
 8001770:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 8001774:	e021      	b.n	80017ba <main+0x164a>

			}

			//2 is selected -> 24h format (status 29)
			else if (Keypad_Get_Key(&kp, kp_button_2)
 8001776:	2101      	movs	r1, #1
 8001778:	4843      	ldr	r0, [pc, #268]	@ (8001888 <main+0x1718>)
 800177a:	f006 ff0f 	bl	800859c <Keypad_Get_Key>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d00c      	beq.n	800179e <main+0x162e>
					&& (current_tick >= general_delay)) {
 8001784:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001786:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001788:	429a      	cmp	r2, r3
 800178a:	d308      	bcc.n	800179e <main+0x162e>

				//set 24h format
				CLK.format = 0;
 800178c:	4a41      	ldr	r2, [pc, #260]	@ (8001894 <main+0x1724>)
 800178e:	7c53      	ldrb	r3, [r2, #17]
 8001790:	f36f 0300 	bfc	r3, #0, #1
 8001794:	7453      	strb	r3, [r2, #17]

				status = 17;
 8001796:	2311      	movs	r3, #17
 8001798:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 800179c:	e00d      	b.n	80017ba <main+0x164a>

			}

			//back is selected
			else if (Keypad_Get_Key(&kp, kp_button_no_back)
 800179e:	210e      	movs	r1, #14
 80017a0:	4839      	ldr	r0, [pc, #228]	@ (8001888 <main+0x1718>)
 80017a2:	f006 fefb 	bl	800859c <Keypad_Get_Key>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d006      	beq.n	80017ba <main+0x164a>
					&& (current_tick >= general_delay)) {
 80017ac:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80017ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d302      	bcc.n	80017ba <main+0x164a>

				//back to previous menu
				status = 22;
 80017b4:	2316      	movs	r3, #22
 80017b6:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83

			}

			general_delay = HAL_GetTick() + 250;
 80017ba:	f006 ff5f 	bl	800867c <HAL_GetTick>
 80017be:	4603      	mov	r3, r0
 80017c0:	33fa      	adds	r3, #250	@ 0xfa
 80017c2:	677b      	str	r3, [r7, #116]	@ 0x74
		while ((status == 25) && (current_tick >= general_delay)) {
 80017c4:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 80017c8:	2b19      	cmp	r3, #25
 80017ca:	f040 8091 	bne.w	80018f0 <main+0x1780>
 80017ce:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80017d0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d282      	bcs.n	80016dc <main+0x156c>
		}

		//12h time format
		while ((status == 28) && (current_tick >= general_delay)) {
 80017d6:	e08b      	b.n	80018f0 <main+0x1780>

			//get the current tick number
			current_tick = HAL_GetTick();
 80017d8:	f006 ff50 	bl	800867c <HAL_GetTick>
 80017dc:	67f8      	str	r0, [r7, #124]	@ 0x7c

			Alcd_Clear(&lcd);
 80017de:	4826      	ldr	r0, [pc, #152]	@ (8001878 <main+0x1708>)
 80017e0:	f006 fd92 	bl	8008308 <Alcd_Clear>
			Alcd_PutAt(&lcd, 0, 0, "format");
 80017e4:	4829      	ldr	r0, [pc, #164]	@ (800188c <main+0x171c>)
 80017e6:	f006 fde3 	bl	80083b0 <Str_Len>
 80017ea:	4603      	mov	r3, r0
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	9300      	str	r3, [sp, #0]
 80017f0:	4b26      	ldr	r3, [pc, #152]	@ (800188c <main+0x171c>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	2100      	movs	r1, #0
 80017f6:	4820      	ldr	r0, [pc, #128]	@ (8001878 <main+0x1708>)
 80017f8:	f006 fd6d 	bl	80082d6 <Alcd_PutAt_n>
			Alcd_PutAt(&lcd, 1, 0, "1: AM    2: 2PM");
 80017fc:	4826      	ldr	r0, [pc, #152]	@ (8001898 <main+0x1728>)
 80017fe:	f006 fdd7 	bl	80083b0 <Str_Len>
 8001802:	4603      	mov	r3, r0
 8001804:	b2db      	uxtb	r3, r3
 8001806:	9300      	str	r3, [sp, #0]
 8001808:	4b23      	ldr	r3, [pc, #140]	@ (8001898 <main+0x1728>)
 800180a:	2200      	movs	r2, #0
 800180c:	2101      	movs	r1, #1
 800180e:	481a      	ldr	r0, [pc, #104]	@ (8001878 <main+0x1708>)
 8001810:	f006 fd61 	bl	80082d6 <Alcd_PutAt_n>
			snprintf(timeString, sizeof(timeString), "%02d", status);
 8001814:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 8001818:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800181c:	4a19      	ldr	r2, [pc, #100]	@ (8001884 <main+0x1714>)
 800181e:	2132      	movs	r1, #50	@ 0x32
 8001820:	f00a f846 	bl	800b8b0 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 8001824:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001828:	4618      	mov	r0, r3
 800182a:	f7fe fc99 	bl	8000160 <strlen>
 800182e:	4603      	mov	r3, r0
 8001830:	b2db      	uxtb	r3, r3
 8001832:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001836:	9300      	str	r3, [sp, #0]
 8001838:	4613      	mov	r3, r2
 800183a:	220e      	movs	r2, #14
 800183c:	2100      	movs	r1, #0
 800183e:	480e      	ldr	r0, [pc, #56]	@ (8001878 <main+0x1708>)
 8001840:	f006 fd49 	bl	80082d6 <Alcd_PutAt_n>

			//check if any button is pressed
			//check for any keypad input
			Keypad_Refresh(&kp);
 8001844:	4810      	ldr	r0, [pc, #64]	@ (8001888 <main+0x1718>)
 8001846:	f006 fe0d 	bl	8008464 <Keypad_Refresh>

			//in case 1 is selected -> AM (status 29)
			if (Keypad_Get_Key(&kp, kp_button_1)
 800184a:	2100      	movs	r1, #0
 800184c:	480e      	ldr	r0, [pc, #56]	@ (8001888 <main+0x1718>)
 800184e:	f006 fea5 	bl	800859c <Keypad_Get_Key>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d021      	beq.n	800189c <main+0x172c>
					&& (current_tick >= general_delay)) {
 8001858:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800185a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800185c:	429a      	cmp	r2, r3
 800185e:	d31d      	bcc.n	800189c <main+0x172c>

				//set to AM
				CLK.AM_PM = 0;
 8001860:	4a0c      	ldr	r2, [pc, #48]	@ (8001894 <main+0x1724>)
 8001862:	7c53      	ldrb	r3, [r2, #17]
 8001864:	f36f 0341 	bfc	r3, #1, #1
 8001868:	7453      	strb	r3, [r2, #17]
				Alcd_Clear(&lcd);
 800186a:	4803      	ldr	r0, [pc, #12]	@ (8001878 <main+0x1708>)
 800186c:	f006 fd4c 	bl	8008308 <Alcd_Clear>

				status = 17;
 8001870:	2311      	movs	r3, #17
 8001872:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 8001876:	e036      	b.n	80018e6 <main+0x1776>
 8001878:	2000001c 	.word	0x2000001c
 800187c:	0800c320 	.word	0x0800c320
 8001880:	0800c328 	.word	0x0800c328
 8001884:	0800c280 	.word	0x0800c280
 8001888:	20000000 	.word	0x20000000
 800188c:	0800c330 	.word	0x0800c330
 8001890:	0800c338 	.word	0x0800c338
 8001894:	20000150 	.word	0x20000150
 8001898:	0800c34c 	.word	0x0800c34c

			}

			//2 is selected -> PM (status 29)
			else if (Keypad_Get_Key(&kp, kp_button_2)
 800189c:	2101      	movs	r1, #1
 800189e:	48b7      	ldr	r0, [pc, #732]	@ (8001b7c <main+0x1a0c>)
 80018a0:	f006 fe7c 	bl	800859c <Keypad_Get_Key>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d00f      	beq.n	80018ca <main+0x175a>
					&& (current_tick >= general_delay)) {
 80018aa:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80018ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d30b      	bcc.n	80018ca <main+0x175a>

				//set to pm
				CLK.AM_PM = 1;
 80018b2:	4ab3      	ldr	r2, [pc, #716]	@ (8001b80 <main+0x1a10>)
 80018b4:	7c53      	ldrb	r3, [r2, #17]
 80018b6:	f043 0302 	orr.w	r3, r3, #2
 80018ba:	7453      	strb	r3, [r2, #17]
				Alcd_Clear(&lcd);
 80018bc:	48b1      	ldr	r0, [pc, #708]	@ (8001b84 <main+0x1a14>)
 80018be:	f006 fd23 	bl	8008308 <Alcd_Clear>

				status = 17;
 80018c2:	2311      	movs	r3, #17
 80018c4:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 80018c8:	e00d      	b.n	80018e6 <main+0x1776>

			}

			//back is selected
			else if (Keypad_Get_Key(&kp, kp_button_no_back)
 80018ca:	210e      	movs	r1, #14
 80018cc:	48ab      	ldr	r0, [pc, #684]	@ (8001b7c <main+0x1a0c>)
 80018ce:	f006 fe65 	bl	800859c <Keypad_Get_Key>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d006      	beq.n	80018e6 <main+0x1776>
					&& (current_tick >= general_delay)) {
 80018d8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80018da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80018dc:	429a      	cmp	r2, r3
 80018de:	d302      	bcc.n	80018e6 <main+0x1776>

				//back to previous menu
				status = 25;
 80018e0:	2319      	movs	r3, #25
 80018e2:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83

			}

			general_delay = HAL_GetTick() + 250;
 80018e6:	f006 fec9 	bl	800867c <HAL_GetTick>
 80018ea:	4603      	mov	r3, r0
 80018ec:	33fa      	adds	r3, #250	@ 0xfa
 80018ee:	677b      	str	r3, [r7, #116]	@ 0x74
		while ((status == 28) && (current_tick >= general_delay)) {
 80018f0:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 80018f4:	2b1c      	cmp	r3, #28
 80018f6:	d113      	bne.n	8001920 <main+0x17b0>
 80018f8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80018fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80018fc:	429a      	cmp	r2, r3
 80018fe:	f4bf af6b 	bcs.w	80017d8 <main+0x1668>
		}

		//transition state to clear the display
		while ((status == 17) && (current_tick >= general_delay)) {
 8001902:	e00d      	b.n	8001920 <main+0x17b0>

			//get the current tick number
			current_tick = HAL_GetTick();
 8001904:	f006 feba 	bl	800867c <HAL_GetTick>
 8001908:	67f8      	str	r0, [r7, #124]	@ 0x7c

			Alcd_Clear(&lcd);
 800190a:	489e      	ldr	r0, [pc, #632]	@ (8001b84 <main+0x1a14>)
 800190c:	f006 fcfc 	bl	8008308 <Alcd_Clear>
			status = 29;
 8001910:	231d      	movs	r3, #29
 8001912:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
			general_delay = HAL_GetTick() + 50;
 8001916:	f006 feb1 	bl	800867c <HAL_GetTick>
 800191a:	4603      	mov	r3, r0
 800191c:	3332      	adds	r3, #50	@ 0x32
 800191e:	677b      	str	r3, [r7, #116]	@ 0x74
		while ((status == 17) && (current_tick >= general_delay)) {
 8001920:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 8001924:	2b11      	cmp	r3, #17
 8001926:	f040 837a 	bne.w	800201e <main+0x1eae>
 800192a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800192c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800192e:	429a      	cmp	r2, r3
 8001930:	d2e8      	bcs.n	8001904 <main+0x1794>
		}

		//entering the hours state (29)
		while ((status == 29) && (current_tick >= general_delay)) {
 8001932:	e374      	b.n	800201e <main+0x1eae>

			//get the current tick number
			current_tick = HAL_GetTick();
 8001934:	f006 fea2 	bl	800867c <HAL_GetTick>
 8001938:	67f8      	str	r0, [r7, #124]	@ 0x7c

			//Alcd_Clear(&lcd);
			Alcd_PutAt(&lcd, 0, 0, "Enter hours");
 800193a:	4893      	ldr	r0, [pc, #588]	@ (8001b88 <main+0x1a18>)
 800193c:	f006 fd38 	bl	80083b0 <Str_Len>
 8001940:	4603      	mov	r3, r0
 8001942:	b2db      	uxtb	r3, r3
 8001944:	9300      	str	r3, [sp, #0]
 8001946:	4b90      	ldr	r3, [pc, #576]	@ (8001b88 <main+0x1a18>)
 8001948:	2200      	movs	r2, #0
 800194a:	2100      	movs	r1, #0
 800194c:	488d      	ldr	r0, [pc, #564]	@ (8001b84 <main+0x1a14>)
 800194e:	f006 fcc2 	bl	80082d6 <Alcd_PutAt_n>

			snprintf(timeString, sizeof(timeString), "%02d", status);
 8001952:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 8001956:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800195a:	4a8c      	ldr	r2, [pc, #560]	@ (8001b8c <main+0x1a1c>)
 800195c:	2132      	movs	r1, #50	@ 0x32
 800195e:	f009 ffa7 	bl	800b8b0 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 8001962:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001966:	4618      	mov	r0, r3
 8001968:	f7fe fbfa 	bl	8000160 <strlen>
 800196c:	4603      	mov	r3, r0
 800196e:	b2db      	uxtb	r3, r3
 8001970:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001974:	9300      	str	r3, [sp, #0]
 8001976:	4613      	mov	r3, r2
 8001978:	220e      	movs	r2, #14
 800197a:	2100      	movs	r1, #0
 800197c:	4881      	ldr	r0, [pc, #516]	@ (8001b84 <main+0x1a14>)
 800197e:	f006 fcaa 	bl	80082d6 <Alcd_PutAt_n>

			Alcd_CursorAt(&lcd, 1, input_index);
 8001982:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001986:	461a      	mov	r2, r3
 8001988:	2101      	movs	r1, #1
 800198a:	487e      	ldr	r0, [pc, #504]	@ (8001b84 <main+0x1a14>)
 800198c:	f006 fc67 	bl	800825e <Alcd_CursorAt>
			Alcd_Display_Control(&lcd, 1, 1, 1);
 8001990:	2301      	movs	r3, #1
 8001992:	2201      	movs	r2, #1
 8001994:	2101      	movs	r1, #1
 8001996:	487b      	ldr	r0, [pc, #492]	@ (8001b84 <main+0x1a14>)
 8001998:	f006 fcc7 	bl	800832a <Alcd_Display_Control>

			//check if any button is pressed
			//check for any keypad input
			Keypad_Refresh(&kp);
 800199c:	4877      	ldr	r0, [pc, #476]	@ (8001b7c <main+0x1a0c>)
 800199e:	f006 fd61 	bl	8008464 <Keypad_Refresh>

			//if back is entered
			if (Keypad_Get_Key(&kp, kp_button_no_back)
 80019a2:	210e      	movs	r1, #14
 80019a4:	4875      	ldr	r0, [pc, #468]	@ (8001b7c <main+0x1a0c>)
 80019a6:	f006 fdf9 	bl	800859c <Keypad_Get_Key>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d007      	beq.n	80019c0 <main+0x1850>
					&& (current_tick >= general_delay)) {
 80019b0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80019b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d303      	bcc.n	80019c0 <main+0x1850>

				//back to previous menu
				status = 25;
 80019b8:	2319      	movs	r3, #25
 80019ba:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 80019be:	e300      	b.n	8001fc2 <main+0x1e52>

			}

			//0 is entered
			else if (Keypad_Get_Key(&kp, kp_button_0)
 80019c0:	210d      	movs	r1, #13
 80019c2:	486e      	ldr	r0, [pc, #440]	@ (8001b7c <main+0x1a0c>)
 80019c4:	f006 fdea 	bl	800859c <Keypad_Get_Key>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d042      	beq.n	8001a54 <main+0x18e4>
					&& (current_tick >= general_delay)) {
 80019ce:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80019d0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d33e      	bcc.n	8001a54 <main+0x18e4>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80019d6:	2300      	movs	r3, #0
 80019d8:	2200      	movs	r2, #0
 80019da:	2101      	movs	r1, #1
 80019dc:	4869      	ldr	r0, [pc, #420]	@ (8001b84 <main+0x1a14>)
 80019de:	f006 fca4 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 80019e2:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d827      	bhi.n	8001a3a <main+0x18ca>
					time_date_buffer[input_index] = '0';
 80019ea:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80019ee:	3388      	adds	r3, #136	@ 0x88
 80019f0:	443b      	add	r3, r7
 80019f2:	2230      	movs	r2, #48	@ 0x30
 80019f4:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 80019f8:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80019fc:	3301      	adds	r3, #1
 80019fe:	3388      	adds	r3, #136	@ 0x88
 8001a00:	443b      	add	r3, r7
 8001a02:	2200      	movs	r2, #0
 8001a04:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "0");
 8001a08:	4861      	ldr	r0, [pc, #388]	@ (8001b90 <main+0x1a20>)
 8001a0a:	f006 fcd1 	bl	80083b0 <Str_Len>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8001a16:	9300      	str	r3, [sp, #0]
 8001a18:	4b5d      	ldr	r3, [pc, #372]	@ (8001b90 <main+0x1a20>)
 8001a1a:	2101      	movs	r1, #1
 8001a1c:	4859      	ldr	r0, [pc, #356]	@ (8001b84 <main+0x1a14>)
 8001a1e:	f006 fc5a 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 8001a22:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001a26:	3301      	adds	r3, #1
 8001a28:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8001a2c:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001a30:	461a      	mov	r2, r3
 8001a32:	2101      	movs	r1, #1
 8001a34:	4853      	ldr	r0, [pc, #332]	@ (8001b84 <main+0x1a14>)
 8001a36:	f006 fc12 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8001a3a:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8001a3e:	2301      	movs	r3, #1
 8001a40:	2101      	movs	r1, #1
 8001a42:	4850      	ldr	r0, [pc, #320]	@ (8001b84 <main+0x1a14>)
 8001a44:	f006 fc71 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8001a48:	f006 fe18 	bl	800867c <HAL_GetTick>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	33fa      	adds	r3, #250	@ 0xfa
 8001a50:	677b      	str	r3, [r7, #116]	@ 0x74
 8001a52:	e2b6      	b.n	8001fc2 <main+0x1e52>

			}
			//1 is entered
			else if (Keypad_Get_Key(&kp, kp_button_1)
 8001a54:	2100      	movs	r1, #0
 8001a56:	4849      	ldr	r0, [pc, #292]	@ (8001b7c <main+0x1a0c>)
 8001a58:	f006 fda0 	bl	800859c <Keypad_Get_Key>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d042      	beq.n	8001ae8 <main+0x1978>
					&& (current_tick >= general_delay)) {
 8001a62:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001a64:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d33e      	bcc.n	8001ae8 <main+0x1978>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	2101      	movs	r1, #1
 8001a70:	4844      	ldr	r0, [pc, #272]	@ (8001b84 <main+0x1a14>)
 8001a72:	f006 fc5a 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8001a76:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d827      	bhi.n	8001ace <main+0x195e>
					time_date_buffer[input_index] = '1';
 8001a7e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001a82:	3388      	adds	r3, #136	@ 0x88
 8001a84:	443b      	add	r3, r7
 8001a86:	2231      	movs	r2, #49	@ 0x31
 8001a88:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8001a8c:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001a90:	3301      	adds	r3, #1
 8001a92:	3388      	adds	r3, #136	@ 0x88
 8001a94:	443b      	add	r3, r7
 8001a96:	2200      	movs	r2, #0
 8001a98:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "1");
 8001a9c:	483d      	ldr	r0, [pc, #244]	@ (8001b94 <main+0x1a24>)
 8001a9e:	f006 fc87 	bl	80083b0 <Str_Len>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8001aaa:	9300      	str	r3, [sp, #0]
 8001aac:	4b39      	ldr	r3, [pc, #228]	@ (8001b94 <main+0x1a24>)
 8001aae:	2101      	movs	r1, #1
 8001ab0:	4834      	ldr	r0, [pc, #208]	@ (8001b84 <main+0x1a14>)
 8001ab2:	f006 fc10 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 8001ab6:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001aba:	3301      	adds	r3, #1
 8001abc:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8001ac0:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	2101      	movs	r1, #1
 8001ac8:	482e      	ldr	r0, [pc, #184]	@ (8001b84 <main+0x1a14>)
 8001aca:	f006 fbc8 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8001ace:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	2101      	movs	r1, #1
 8001ad6:	482b      	ldr	r0, [pc, #172]	@ (8001b84 <main+0x1a14>)
 8001ad8:	f006 fc27 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8001adc:	f006 fdce 	bl	800867c <HAL_GetTick>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	33fa      	adds	r3, #250	@ 0xfa
 8001ae4:	677b      	str	r3, [r7, #116]	@ 0x74
 8001ae6:	e26c      	b.n	8001fc2 <main+0x1e52>

			}
			//2 is entered
			else if (Keypad_Get_Key(&kp, kp_button_2)
 8001ae8:	2101      	movs	r1, #1
 8001aea:	4824      	ldr	r0, [pc, #144]	@ (8001b7c <main+0x1a0c>)
 8001aec:	f006 fd56 	bl	800859c <Keypad_Get_Key>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d052      	beq.n	8001b9c <main+0x1a2c>
					&& (current_tick >= general_delay)) {
 8001af6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001af8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d34e      	bcc.n	8001b9c <main+0x1a2c>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8001afe:	2300      	movs	r3, #0
 8001b00:	2200      	movs	r2, #0
 8001b02:	2101      	movs	r1, #1
 8001b04:	481f      	ldr	r0, [pc, #124]	@ (8001b84 <main+0x1a14>)
 8001b06:	f006 fc10 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8001b0a:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d827      	bhi.n	8001b62 <main+0x19f2>
					time_date_buffer[input_index] = '2';
 8001b12:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001b16:	3388      	adds	r3, #136	@ 0x88
 8001b18:	443b      	add	r3, r7
 8001b1a:	2232      	movs	r2, #50	@ 0x32
 8001b1c:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8001b20:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001b24:	3301      	adds	r3, #1
 8001b26:	3388      	adds	r3, #136	@ 0x88
 8001b28:	443b      	add	r3, r7
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "2");
 8001b30:	4819      	ldr	r0, [pc, #100]	@ (8001b98 <main+0x1a28>)
 8001b32:	f006 fc3d 	bl	80083b0 <Str_Len>
 8001b36:	4603      	mov	r3, r0
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8001b3e:	9300      	str	r3, [sp, #0]
 8001b40:	4b15      	ldr	r3, [pc, #84]	@ (8001b98 <main+0x1a28>)
 8001b42:	2101      	movs	r1, #1
 8001b44:	480f      	ldr	r0, [pc, #60]	@ (8001b84 <main+0x1a14>)
 8001b46:	f006 fbc6 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 8001b4a:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001b4e:	3301      	adds	r3, #1
 8001b50:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8001b54:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001b58:	461a      	mov	r2, r3
 8001b5a:	2101      	movs	r1, #1
 8001b5c:	4809      	ldr	r0, [pc, #36]	@ (8001b84 <main+0x1a14>)
 8001b5e:	f006 fb7e 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8001b62:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8001b66:	2301      	movs	r3, #1
 8001b68:	2101      	movs	r1, #1
 8001b6a:	4806      	ldr	r0, [pc, #24]	@ (8001b84 <main+0x1a14>)
 8001b6c:	f006 fbdd 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8001b70:	f006 fd84 	bl	800867c <HAL_GetTick>
 8001b74:	4603      	mov	r3, r0
 8001b76:	33fa      	adds	r3, #250	@ 0xfa
 8001b78:	677b      	str	r3, [r7, #116]	@ 0x74
 8001b7a:	e222      	b.n	8001fc2 <main+0x1e52>
 8001b7c:	20000000 	.word	0x20000000
 8001b80:	20000150 	.word	0x20000150
 8001b84:	2000001c 	.word	0x2000001c
 8001b88:	0800c35c 	.word	0x0800c35c
 8001b8c:	0800c280 	.word	0x0800c280
 8001b90:	0800c368 	.word	0x0800c368
 8001b94:	0800c36c 	.word	0x0800c36c
 8001b98:	0800c370 	.word	0x0800c370

			}
			//3 is entered
			else if (Keypad_Get_Key(&kp, kp_button_3)
 8001b9c:	2102      	movs	r1, #2
 8001b9e:	48b8      	ldr	r0, [pc, #736]	@ (8001e80 <main+0x1d10>)
 8001ba0:	f006 fcfc 	bl	800859c <Keypad_Get_Key>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d042      	beq.n	8001c30 <main+0x1ac0>
					&& (current_tick >= general_delay)) {
 8001baa:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001bac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d33e      	bcc.n	8001c30 <main+0x1ac0>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	2101      	movs	r1, #1
 8001bb8:	48b2      	ldr	r0, [pc, #712]	@ (8001e84 <main+0x1d14>)
 8001bba:	f006 fbb6 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8001bbe:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d827      	bhi.n	8001c16 <main+0x1aa6>
					time_date_buffer[input_index] = '3';
 8001bc6:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001bca:	3388      	adds	r3, #136	@ 0x88
 8001bcc:	443b      	add	r3, r7
 8001bce:	2233      	movs	r2, #51	@ 0x33
 8001bd0:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8001bd4:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001bd8:	3301      	adds	r3, #1
 8001bda:	3388      	adds	r3, #136	@ 0x88
 8001bdc:	443b      	add	r3, r7
 8001bde:	2200      	movs	r2, #0
 8001be0:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "3");
 8001be4:	48a8      	ldr	r0, [pc, #672]	@ (8001e88 <main+0x1d18>)
 8001be6:	f006 fbe3 	bl	80083b0 <Str_Len>
 8001bea:	4603      	mov	r3, r0
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8001bf2:	9300      	str	r3, [sp, #0]
 8001bf4:	4ba4      	ldr	r3, [pc, #656]	@ (8001e88 <main+0x1d18>)
 8001bf6:	2101      	movs	r1, #1
 8001bf8:	48a2      	ldr	r0, [pc, #648]	@ (8001e84 <main+0x1d14>)
 8001bfa:	f006 fb6c 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 8001bfe:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001c02:	3301      	adds	r3, #1
 8001c04:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8001c08:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	2101      	movs	r1, #1
 8001c10:	489c      	ldr	r0, [pc, #624]	@ (8001e84 <main+0x1d14>)
 8001c12:	f006 fb24 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8001c16:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	2101      	movs	r1, #1
 8001c1e:	4899      	ldr	r0, [pc, #612]	@ (8001e84 <main+0x1d14>)
 8001c20:	f006 fb83 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8001c24:	f006 fd2a 	bl	800867c <HAL_GetTick>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	33fa      	adds	r3, #250	@ 0xfa
 8001c2c:	677b      	str	r3, [r7, #116]	@ 0x74
 8001c2e:	e1c8      	b.n	8001fc2 <main+0x1e52>

			}

			//4 is entered
			else if (Keypad_Get_Key(&kp, kp_button_4)
 8001c30:	2104      	movs	r1, #4
 8001c32:	4893      	ldr	r0, [pc, #588]	@ (8001e80 <main+0x1d10>)
 8001c34:	f006 fcb2 	bl	800859c <Keypad_Get_Key>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d042      	beq.n	8001cc4 <main+0x1b54>
					&& (current_tick >= general_delay)) {
 8001c3e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001c40:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d33e      	bcc.n	8001cc4 <main+0x1b54>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8001c46:	2300      	movs	r3, #0
 8001c48:	2200      	movs	r2, #0
 8001c4a:	2101      	movs	r1, #1
 8001c4c:	488d      	ldr	r0, [pc, #564]	@ (8001e84 <main+0x1d14>)
 8001c4e:	f006 fb6c 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8001c52:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d827      	bhi.n	8001caa <main+0x1b3a>
					time_date_buffer[input_index] = '4';
 8001c5a:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001c5e:	3388      	adds	r3, #136	@ 0x88
 8001c60:	443b      	add	r3, r7
 8001c62:	2234      	movs	r2, #52	@ 0x34
 8001c64:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8001c68:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	3388      	adds	r3, #136	@ 0x88
 8001c70:	443b      	add	r3, r7
 8001c72:	2200      	movs	r2, #0
 8001c74:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "4");
 8001c78:	4884      	ldr	r0, [pc, #528]	@ (8001e8c <main+0x1d1c>)
 8001c7a:	f006 fb99 	bl	80083b0 <Str_Len>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8001c86:	9300      	str	r3, [sp, #0]
 8001c88:	4b80      	ldr	r3, [pc, #512]	@ (8001e8c <main+0x1d1c>)
 8001c8a:	2101      	movs	r1, #1
 8001c8c:	487d      	ldr	r0, [pc, #500]	@ (8001e84 <main+0x1d14>)
 8001c8e:	f006 fb22 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 8001c92:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001c96:	3301      	adds	r3, #1
 8001c98:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8001c9c:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	2101      	movs	r1, #1
 8001ca4:	4877      	ldr	r0, [pc, #476]	@ (8001e84 <main+0x1d14>)
 8001ca6:	f006 fada 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8001caa:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8001cae:	2301      	movs	r3, #1
 8001cb0:	2101      	movs	r1, #1
 8001cb2:	4874      	ldr	r0, [pc, #464]	@ (8001e84 <main+0x1d14>)
 8001cb4:	f006 fb39 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8001cb8:	f006 fce0 	bl	800867c <HAL_GetTick>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	33fa      	adds	r3, #250	@ 0xfa
 8001cc0:	677b      	str	r3, [r7, #116]	@ 0x74
 8001cc2:	e17e      	b.n	8001fc2 <main+0x1e52>

			}
			//5 is entered
			else if (Keypad_Get_Key(&kp, kp_button_5)
 8001cc4:	2105      	movs	r1, #5
 8001cc6:	486e      	ldr	r0, [pc, #440]	@ (8001e80 <main+0x1d10>)
 8001cc8:	f006 fc68 	bl	800859c <Keypad_Get_Key>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d042      	beq.n	8001d58 <main+0x1be8>
					&& (current_tick >= general_delay)) {
 8001cd2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001cd4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d33e      	bcc.n	8001d58 <main+0x1be8>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8001cda:	2300      	movs	r3, #0
 8001cdc:	2200      	movs	r2, #0
 8001cde:	2101      	movs	r1, #1
 8001ce0:	4868      	ldr	r0, [pc, #416]	@ (8001e84 <main+0x1d14>)
 8001ce2:	f006 fb22 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8001ce6:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d827      	bhi.n	8001d3e <main+0x1bce>
					time_date_buffer[input_index] = '5';
 8001cee:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001cf2:	3388      	adds	r3, #136	@ 0x88
 8001cf4:	443b      	add	r3, r7
 8001cf6:	2235      	movs	r2, #53	@ 0x35
 8001cf8:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8001cfc:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001d00:	3301      	adds	r3, #1
 8001d02:	3388      	adds	r3, #136	@ 0x88
 8001d04:	443b      	add	r3, r7
 8001d06:	2200      	movs	r2, #0
 8001d08:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "5");
 8001d0c:	4860      	ldr	r0, [pc, #384]	@ (8001e90 <main+0x1d20>)
 8001d0e:	f006 fb4f 	bl	80083b0 <Str_Len>
 8001d12:	4603      	mov	r3, r0
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8001d1a:	9300      	str	r3, [sp, #0]
 8001d1c:	4b5c      	ldr	r3, [pc, #368]	@ (8001e90 <main+0x1d20>)
 8001d1e:	2101      	movs	r1, #1
 8001d20:	4858      	ldr	r0, [pc, #352]	@ (8001e84 <main+0x1d14>)
 8001d22:	f006 fad8 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 8001d26:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8001d30:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001d34:	461a      	mov	r2, r3
 8001d36:	2101      	movs	r1, #1
 8001d38:	4852      	ldr	r0, [pc, #328]	@ (8001e84 <main+0x1d14>)
 8001d3a:	f006 fa90 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8001d3e:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8001d42:	2301      	movs	r3, #1
 8001d44:	2101      	movs	r1, #1
 8001d46:	484f      	ldr	r0, [pc, #316]	@ (8001e84 <main+0x1d14>)
 8001d48:	f006 faef 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8001d4c:	f006 fc96 	bl	800867c <HAL_GetTick>
 8001d50:	4603      	mov	r3, r0
 8001d52:	33fa      	adds	r3, #250	@ 0xfa
 8001d54:	677b      	str	r3, [r7, #116]	@ 0x74
 8001d56:	e134      	b.n	8001fc2 <main+0x1e52>

			}

			//6 is entered
			else if (Keypad_Get_Key(&kp, kp_button_6)
 8001d58:	2106      	movs	r1, #6
 8001d5a:	4849      	ldr	r0, [pc, #292]	@ (8001e80 <main+0x1d10>)
 8001d5c:	f006 fc1e 	bl	800859c <Keypad_Get_Key>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d042      	beq.n	8001dec <main+0x1c7c>
					&& (current_tick >= general_delay)) {
 8001d66:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001d68:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d33e      	bcc.n	8001dec <main+0x1c7c>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8001d6e:	2300      	movs	r3, #0
 8001d70:	2200      	movs	r2, #0
 8001d72:	2101      	movs	r1, #1
 8001d74:	4843      	ldr	r0, [pc, #268]	@ (8001e84 <main+0x1d14>)
 8001d76:	f006 fad8 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8001d7a:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d827      	bhi.n	8001dd2 <main+0x1c62>
					time_date_buffer[input_index] = '6';
 8001d82:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001d86:	3388      	adds	r3, #136	@ 0x88
 8001d88:	443b      	add	r3, r7
 8001d8a:	2236      	movs	r2, #54	@ 0x36
 8001d8c:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8001d90:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001d94:	3301      	adds	r3, #1
 8001d96:	3388      	adds	r3, #136	@ 0x88
 8001d98:	443b      	add	r3, r7
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "6");
 8001da0:	483c      	ldr	r0, [pc, #240]	@ (8001e94 <main+0x1d24>)
 8001da2:	f006 fb05 	bl	80083b0 <Str_Len>
 8001da6:	4603      	mov	r3, r0
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8001dae:	9300      	str	r3, [sp, #0]
 8001db0:	4b38      	ldr	r3, [pc, #224]	@ (8001e94 <main+0x1d24>)
 8001db2:	2101      	movs	r1, #1
 8001db4:	4833      	ldr	r0, [pc, #204]	@ (8001e84 <main+0x1d14>)
 8001db6:	f006 fa8e 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 8001dba:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8001dc4:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001dc8:	461a      	mov	r2, r3
 8001dca:	2101      	movs	r1, #1
 8001dcc:	482d      	ldr	r0, [pc, #180]	@ (8001e84 <main+0x1d14>)
 8001dce:	f006 fa46 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8001dd2:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	2101      	movs	r1, #1
 8001dda:	482a      	ldr	r0, [pc, #168]	@ (8001e84 <main+0x1d14>)
 8001ddc:	f006 faa5 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8001de0:	f006 fc4c 	bl	800867c <HAL_GetTick>
 8001de4:	4603      	mov	r3, r0
 8001de6:	33fa      	adds	r3, #250	@ 0xfa
 8001de8:	677b      	str	r3, [r7, #116]	@ 0x74
 8001dea:	e0ea      	b.n	8001fc2 <main+0x1e52>

			}

			//7 is entered
			else if (Keypad_Get_Key(&kp, kp_button_7)
 8001dec:	2108      	movs	r1, #8
 8001dee:	4824      	ldr	r0, [pc, #144]	@ (8001e80 <main+0x1d10>)
 8001df0:	f006 fbd4 	bl	800859c <Keypad_Get_Key>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d050      	beq.n	8001e9c <main+0x1d2c>
					&& (current_tick >= general_delay)) {
 8001dfa:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001dfc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d34c      	bcc.n	8001e9c <main+0x1d2c>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8001e02:	2300      	movs	r3, #0
 8001e04:	2200      	movs	r2, #0
 8001e06:	2101      	movs	r1, #1
 8001e08:	481e      	ldr	r0, [pc, #120]	@ (8001e84 <main+0x1d14>)
 8001e0a:	f006 fa8e 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8001e0e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d827      	bhi.n	8001e66 <main+0x1cf6>
					time_date_buffer[input_index] = '7';
 8001e16:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001e1a:	3388      	adds	r3, #136	@ 0x88
 8001e1c:	443b      	add	r3, r7
 8001e1e:	2237      	movs	r2, #55	@ 0x37
 8001e20:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8001e24:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001e28:	3301      	adds	r3, #1
 8001e2a:	3388      	adds	r3, #136	@ 0x88
 8001e2c:	443b      	add	r3, r7
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "7");
 8001e34:	4818      	ldr	r0, [pc, #96]	@ (8001e98 <main+0x1d28>)
 8001e36:	f006 fabb 	bl	80083b0 <Str_Len>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8001e42:	9300      	str	r3, [sp, #0]
 8001e44:	4b14      	ldr	r3, [pc, #80]	@ (8001e98 <main+0x1d28>)
 8001e46:	2101      	movs	r1, #1
 8001e48:	480e      	ldr	r0, [pc, #56]	@ (8001e84 <main+0x1d14>)
 8001e4a:	f006 fa44 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 8001e4e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001e52:	3301      	adds	r3, #1
 8001e54:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8001e58:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	2101      	movs	r1, #1
 8001e60:	4808      	ldr	r0, [pc, #32]	@ (8001e84 <main+0x1d14>)
 8001e62:	f006 f9fc 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8001e66:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	2101      	movs	r1, #1
 8001e6e:	4805      	ldr	r0, [pc, #20]	@ (8001e84 <main+0x1d14>)
 8001e70:	f006 fa5b 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8001e74:	f006 fc02 	bl	800867c <HAL_GetTick>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	33fa      	adds	r3, #250	@ 0xfa
 8001e7c:	677b      	str	r3, [r7, #116]	@ 0x74
 8001e7e:	e0a0      	b.n	8001fc2 <main+0x1e52>
 8001e80:	20000000 	.word	0x20000000
 8001e84:	2000001c 	.word	0x2000001c
 8001e88:	0800c374 	.word	0x0800c374
 8001e8c:	0800c378 	.word	0x0800c378
 8001e90:	0800c37c 	.word	0x0800c37c
 8001e94:	0800c380 	.word	0x0800c380
 8001e98:	0800c384 	.word	0x0800c384

			}

			//8 is entered
			else if (Keypad_Get_Key(&kp, kp_button_8)
 8001e9c:	2109      	movs	r1, #9
 8001e9e:	48b3      	ldr	r0, [pc, #716]	@ (800216c <main+0x1ffc>)
 8001ea0:	f006 fb7c 	bl	800859c <Keypad_Get_Key>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d042      	beq.n	8001f30 <main+0x1dc0>
					&& (current_tick >= general_delay)) {
 8001eaa:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001eac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d33e      	bcc.n	8001f30 <main+0x1dc0>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	2101      	movs	r1, #1
 8001eb8:	48ad      	ldr	r0, [pc, #692]	@ (8002170 <main+0x2000>)
 8001eba:	f006 fa36 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8001ebe:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d827      	bhi.n	8001f16 <main+0x1da6>
					time_date_buffer[input_index] = '8';
 8001ec6:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001eca:	3388      	adds	r3, #136	@ 0x88
 8001ecc:	443b      	add	r3, r7
 8001ece:	2238      	movs	r2, #56	@ 0x38
 8001ed0:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8001ed4:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001ed8:	3301      	adds	r3, #1
 8001eda:	3388      	adds	r3, #136	@ 0x88
 8001edc:	443b      	add	r3, r7
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "8");
 8001ee4:	48a3      	ldr	r0, [pc, #652]	@ (8002174 <main+0x2004>)
 8001ee6:	f006 fa63 	bl	80083b0 <Str_Len>
 8001eea:	4603      	mov	r3, r0
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8001ef2:	9300      	str	r3, [sp, #0]
 8001ef4:	4b9f      	ldr	r3, [pc, #636]	@ (8002174 <main+0x2004>)
 8001ef6:	2101      	movs	r1, #1
 8001ef8:	489d      	ldr	r0, [pc, #628]	@ (8002170 <main+0x2000>)
 8001efa:	f006 f9ec 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 8001efe:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001f02:	3301      	adds	r3, #1
 8001f04:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8001f08:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	2101      	movs	r1, #1
 8001f10:	4897      	ldr	r0, [pc, #604]	@ (8002170 <main+0x2000>)
 8001f12:	f006 f9a4 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8001f16:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	2101      	movs	r1, #1
 8001f1e:	4894      	ldr	r0, [pc, #592]	@ (8002170 <main+0x2000>)
 8001f20:	f006 fa03 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8001f24:	f006 fbaa 	bl	800867c <HAL_GetTick>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	33fa      	adds	r3, #250	@ 0xfa
 8001f2c:	677b      	str	r3, [r7, #116]	@ 0x74
 8001f2e:	e048      	b.n	8001fc2 <main+0x1e52>

			}

			//9 is entered
			else if (Keypad_Get_Key(&kp, kp_button_9)
 8001f30:	210a      	movs	r1, #10
 8001f32:	488e      	ldr	r0, [pc, #568]	@ (800216c <main+0x1ffc>)
 8001f34:	f006 fb32 	bl	800859c <Keypad_Get_Key>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d041      	beq.n	8001fc2 <main+0x1e52>
					&& (current_tick >= general_delay)) {
 8001f3e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001f40:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d33d      	bcc.n	8001fc2 <main+0x1e52>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8001f46:	2300      	movs	r3, #0
 8001f48:	2200      	movs	r2, #0
 8001f4a:	2101      	movs	r1, #1
 8001f4c:	4888      	ldr	r0, [pc, #544]	@ (8002170 <main+0x2000>)
 8001f4e:	f006 f9ec 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8001f52:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d827      	bhi.n	8001faa <main+0x1e3a>
					time_date_buffer[input_index] = '9';
 8001f5a:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001f5e:	3388      	adds	r3, #136	@ 0x88
 8001f60:	443b      	add	r3, r7
 8001f62:	2239      	movs	r2, #57	@ 0x39
 8001f64:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8001f68:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	3388      	adds	r3, #136	@ 0x88
 8001f70:	443b      	add	r3, r7
 8001f72:	2200      	movs	r2, #0
 8001f74:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "9");
 8001f78:	487f      	ldr	r0, [pc, #508]	@ (8002178 <main+0x2008>)
 8001f7a:	f006 fa19 	bl	80083b0 <Str_Len>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8001f86:	9300      	str	r3, [sp, #0]
 8001f88:	4b7b      	ldr	r3, [pc, #492]	@ (8002178 <main+0x2008>)
 8001f8a:	2101      	movs	r1, #1
 8001f8c:	4878      	ldr	r0, [pc, #480]	@ (8002170 <main+0x2000>)
 8001f8e:	f006 f9a2 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 8001f92:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001f96:	3301      	adds	r3, #1
 8001f98:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8001f9c:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	2101      	movs	r1, #1
 8001fa4:	4872      	ldr	r0, [pc, #456]	@ (8002170 <main+0x2000>)
 8001fa6:	f006 f95a 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8001faa:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8001fae:	2301      	movs	r3, #1
 8001fb0:	2101      	movs	r1, #1
 8001fb2:	486f      	ldr	r0, [pc, #444]	@ (8002170 <main+0x2000>)
 8001fb4:	f006 f9b9 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8001fb8:	f006 fb60 	bl	800867c <HAL_GetTick>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	33fa      	adds	r3, #250	@ 0xfa
 8001fc0:	677b      	str	r3, [r7, #116]	@ 0x74

			}

			//when yes is entered -> check for hour validity (state 30)
			if (Keypad_Get_Key(&kp, kp_button_yes)
 8001fc2:	210f      	movs	r1, #15
 8001fc4:	4869      	ldr	r0, [pc, #420]	@ (800216c <main+0x1ffc>)
 8001fc6:	f006 fae9 	bl	800859c <Keypad_Get_Key>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d021      	beq.n	8002014 <main+0x1ea4>
					&& (current_tick >= general_delay)) {
 8001fd0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001fd2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d31d      	bcc.n	8002014 <main+0x1ea4>

				Alcd_Clear(&lcd);
 8001fd8:	4865      	ldr	r0, [pc, #404]	@ (8002170 <main+0x2000>)
 8001fda:	f006 f995 	bl	8008308 <Alcd_Clear>

				snprintf(timeString, sizeof(timeString), "%02d", buffer);
 8001fde:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8001fe2:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8001fe6:	4a65      	ldr	r2, [pc, #404]	@ (800217c <main+0x200c>)
 8001fe8:	2132      	movs	r1, #50	@ 0x32
 8001fea:	f009 fc61 	bl	800b8b0 <sniprintf>
				Alcd_PutAt_n(&lcd, 1, 0, timeString, strlen(timeString));
 8001fee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7fe f8b4 	bl	8000160 <strlen>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002000:	9300      	str	r3, [sp, #0]
 8002002:	4613      	mov	r3, r2
 8002004:	2200      	movs	r2, #0
 8002006:	2101      	movs	r1, #1
 8002008:	4859      	ldr	r0, [pc, #356]	@ (8002170 <main+0x2000>)
 800200a:	f006 f964 	bl	80082d6 <Alcd_PutAt_n>

				status = 30;
 800200e:	231e      	movs	r3, #30
 8002010:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83

			}

			//
			general_delay = HAL_GetTick() + 250;
 8002014:	f006 fb32 	bl	800867c <HAL_GetTick>
 8002018:	4603      	mov	r3, r0
 800201a:	33fa      	adds	r3, #250	@ 0xfa
 800201c:	677b      	str	r3, [r7, #116]	@ 0x74
		while ((status == 29) && (current_tick >= general_delay)) {
 800201e:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 8002022:	2b1d      	cmp	r3, #29
 8002024:	f040 80e3 	bne.w	80021ee <main+0x207e>
 8002028:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800202a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800202c:	429a      	cmp	r2, r3
 800202e:	f4bf ac81 	bcs.w	8001934 <main+0x17c4>
		}

		//hours validation phase
		while ((status == 30) && (current_tick >= general_delay)) {
 8002032:	e0dc      	b.n	80021ee <main+0x207e>

			//get the current tick number
			current_tick = HAL_GetTick();
 8002034:	f006 fb22 	bl	800867c <HAL_GetTick>
 8002038:	67f8      	str	r0, [r7, #124]	@ 0x7c

			Alcd_Clear(&lcd);
 800203a:	484d      	ldr	r0, [pc, #308]	@ (8002170 <main+0x2000>)
 800203c:	f006 f964 	bl	8008308 <Alcd_Clear>

			snprintf(timeString, sizeof(timeString), "%02d", status);
 8002040:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 8002044:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8002048:	4a4c      	ldr	r2, [pc, #304]	@ (800217c <main+0x200c>)
 800204a:	2132      	movs	r1, #50	@ 0x32
 800204c:	f009 fc30 	bl	800b8b0 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 8002050:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002054:	4618      	mov	r0, r3
 8002056:	f7fe f883 	bl	8000160 <strlen>
 800205a:	4603      	mov	r3, r0
 800205c:	b2db      	uxtb	r3, r3
 800205e:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002062:	9300      	str	r3, [sp, #0]
 8002064:	4613      	mov	r3, r2
 8002066:	220e      	movs	r2, #14
 8002068:	2100      	movs	r1, #0
 800206a:	4841      	ldr	r0, [pc, #260]	@ (8002170 <main+0x2000>)
 800206c:	f006 f933 	bl	80082d6 <Alcd_PutAt_n>

			buffer = atoi(time_date_buffer);
 8002070:	f107 0310 	add.w	r3, r7, #16
 8002074:	4618      	mov	r0, r3
 8002076:	f009 fb92 	bl	800b79e <atoi>
 800207a:	4603      	mov	r3, r0
 800207c:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

			//in case of 12h format
			if (CLK.format == 1) {
 8002080:	4b3f      	ldr	r3, [pc, #252]	@ (8002180 <main+0x2010>)
 8002082:	7c5b      	ldrb	r3, [r3, #17]
 8002084:	f003 0301 	and.w	r3, r3, #1
 8002088:	b2db      	uxtb	r3, r3
 800208a:	2b00      	cmp	r3, #0
 800208c:	d048      	beq.n	8002120 <main+0x1fb0>

				//check if time is within rang 1 to 12
				if (buffer > 0 && buffer < 13) {
 800208e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8002092:	2b00      	cmp	r3, #0
 8002094:	d01c      	beq.n	80020d0 <main+0x1f60>
 8002096:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800209a:	2b0c      	cmp	r3, #12
 800209c:	d818      	bhi.n	80020d0 <main+0x1f60>

					//move to the minutes state
					status = 31;
 800209e:	231f      	movs	r3, #31
 80020a0:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83

					//set the hours to the value
					CLK.hour = buffer;
 80020a4:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80020a8:	b2da      	uxtb	r2, r3
 80020aa:	4b35      	ldr	r3, [pc, #212]	@ (8002180 <main+0x2010>)
 80020ac:	729a      	strb	r2, [r3, #10]

					input_index = 0;
 80020ae:	2300      	movs	r3, #0
 80020b0:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					//turn off the blinking
					Alcd_Display_Control(&lcd, 1, 0, 0);
 80020b4:	2300      	movs	r3, #0
 80020b6:	2200      	movs	r2, #0
 80020b8:	2101      	movs	r1, #1
 80020ba:	482d      	ldr	r0, [pc, #180]	@ (8002170 <main+0x2000>)
 80020bc:	f006 f935 	bl	800832a <Alcd_Display_Control>
					//turn on the blinking again
					Alcd_Display_Control(&lcd, 1, input_index, 1);
 80020c0:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 80020c4:	2301      	movs	r3, #1
 80020c6:	2101      	movs	r1, #1
 80020c8:	4829      	ldr	r0, [pc, #164]	@ (8002170 <main+0x2000>)
 80020ca:	f006 f92e 	bl	800832a <Alcd_Display_Control>
 80020ce:	e027      	b.n	8002120 <main+0x1fb0>

				} else {
					Alcd_PutAt(&lcd, 0, 0, "invalid");
 80020d0:	482c      	ldr	r0, [pc, #176]	@ (8002184 <main+0x2014>)
 80020d2:	f006 f96d 	bl	80083b0 <Str_Len>
 80020d6:	4603      	mov	r3, r0
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	9300      	str	r3, [sp, #0]
 80020dc:	4b29      	ldr	r3, [pc, #164]	@ (8002184 <main+0x2014>)
 80020de:	2200      	movs	r2, #0
 80020e0:	2100      	movs	r1, #0
 80020e2:	4823      	ldr	r0, [pc, #140]	@ (8002170 <main+0x2000>)
 80020e4:	f006 f8f7 	bl	80082d6 <Alcd_PutAt_n>
					delay_flag = 1;
 80020e8:	2301      	movs	r3, #1
 80020ea:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
					input_index = 0;
 80020ee:	2300      	movs	r3, #0
 80020f0:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d

					//turn off the blinking
					Alcd_Display_Control(&lcd, 1, 0, 0);
 80020f4:	2300      	movs	r3, #0
 80020f6:	2200      	movs	r2, #0
 80020f8:	2101      	movs	r1, #1
 80020fa:	481d      	ldr	r0, [pc, #116]	@ (8002170 <main+0x2000>)
 80020fc:	f006 f915 	bl	800832a <Alcd_Display_Control>
					//turn on the blinking again
					Alcd_Display_Control(&lcd, 1, input_index, 1);
 8002100:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8002104:	2301      	movs	r3, #1
 8002106:	2101      	movs	r1, #1
 8002108:	4819      	ldr	r0, [pc, #100]	@ (8002170 <main+0x2000>)
 800210a:	f006 f90e 	bl	800832a <Alcd_Display_Control>

					//return to entering hours
					status = 29;
 800210e:	231d      	movs	r3, #29
 8002110:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83

					general_delay = HAL_GetTick() + 1000;
 8002114:	f006 fab2 	bl	800867c <HAL_GetTick>
 8002118:	4603      	mov	r3, r0
 800211a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800211e:	677b      	str	r3, [r7, #116]	@ 0x74
				}
			}

			//in case of 24h format
			if (CLK.format == 0) {
 8002120:	4b17      	ldr	r3, [pc, #92]	@ (8002180 <main+0x2010>)
 8002122:	7c5b      	ldrb	r3, [r3, #17]
 8002124:	f003 0301 	and.w	r3, r3, #1
 8002128:	b2db      	uxtb	r3, r3
 800212a:	2b00      	cmp	r3, #0
 800212c:	d154      	bne.n	80021d8 <main+0x2068>

				//check if time is within rang 0 to 24
				if (buffer >= 0 && buffer < 25) {
 800212e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8002132:	2b18      	cmp	r3, #24
 8002134:	d828      	bhi.n	8002188 <main+0x2018>

					//move to the minutes state
					status = 31;
 8002136:	231f      	movs	r3, #31
 8002138:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83

					//set the hours to the value
					CLK.hour = buffer - 20;
 800213c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8002140:	b2db      	uxtb	r3, r3
 8002142:	3b14      	subs	r3, #20
 8002144:	b2da      	uxtb	r2, r3
 8002146:	4b0e      	ldr	r3, [pc, #56]	@ (8002180 <main+0x2010>)
 8002148:	729a      	strb	r2, [r3, #10]

					input_index = 0;
 800214a:	2300      	movs	r3, #0
 800214c:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					//turn off the blinking
					Alcd_Display_Control(&lcd, 1, 0, 0);
 8002150:	2300      	movs	r3, #0
 8002152:	2200      	movs	r2, #0
 8002154:	2101      	movs	r1, #1
 8002156:	4806      	ldr	r0, [pc, #24]	@ (8002170 <main+0x2000>)
 8002158:	f006 f8e7 	bl	800832a <Alcd_Display_Control>
					//turn on the blinking again
					Alcd_Display_Control(&lcd, 1, input_index, 1);
 800215c:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8002160:	2301      	movs	r3, #1
 8002162:	2101      	movs	r1, #1
 8002164:	4802      	ldr	r0, [pc, #8]	@ (8002170 <main+0x2000>)
 8002166:	f006 f8e0 	bl	800832a <Alcd_Display_Control>
 800216a:	e035      	b.n	80021d8 <main+0x2068>
 800216c:	20000000 	.word	0x20000000
 8002170:	2000001c 	.word	0x2000001c
 8002174:	0800c388 	.word	0x0800c388
 8002178:	0800c38c 	.word	0x0800c38c
 800217c:	0800c280 	.word	0x0800c280
 8002180:	20000150 	.word	0x20000150
 8002184:	0800c390 	.word	0x0800c390
				} else {
					Alcd_PutAt(&lcd, 0, 0, "invalid");
 8002188:	48b0      	ldr	r0, [pc, #704]	@ (800244c <main+0x22dc>)
 800218a:	f006 f911 	bl	80083b0 <Str_Len>
 800218e:	4603      	mov	r3, r0
 8002190:	b2db      	uxtb	r3, r3
 8002192:	9300      	str	r3, [sp, #0]
 8002194:	4bad      	ldr	r3, [pc, #692]	@ (800244c <main+0x22dc>)
 8002196:	2200      	movs	r2, #0
 8002198:	2100      	movs	r1, #0
 800219a:	48ad      	ldr	r0, [pc, #692]	@ (8002450 <main+0x22e0>)
 800219c:	f006 f89b 	bl	80082d6 <Alcd_PutAt_n>
					delay_flag = 1;
 80021a0:	2301      	movs	r3, #1
 80021a2:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85

					input_index = 0;
 80021a6:	2300      	movs	r3, #0
 80021a8:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					//turn off the blinking
					Alcd_Display_Control(&lcd, 1, 0, 0);
 80021ac:	2300      	movs	r3, #0
 80021ae:	2200      	movs	r2, #0
 80021b0:	2101      	movs	r1, #1
 80021b2:	48a7      	ldr	r0, [pc, #668]	@ (8002450 <main+0x22e0>)
 80021b4:	f006 f8b9 	bl	800832a <Alcd_Display_Control>
					//turn on the blinking again
					Alcd_Display_Control(&lcd, 1, input_index, 1);
 80021b8:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 80021bc:	2301      	movs	r3, #1
 80021be:	2101      	movs	r1, #1
 80021c0:	48a3      	ldr	r0, [pc, #652]	@ (8002450 <main+0x22e0>)
 80021c2:	f006 f8b2 	bl	800832a <Alcd_Display_Control>
					//return to entering hours
					status = 29;
 80021c6:	231d      	movs	r3, #29
 80021c8:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83

					general_delay = HAL_GetTick() + 1000;
 80021cc:	f006 fa56 	bl	800867c <HAL_GetTick>
 80021d0:	4603      	mov	r3, r0
 80021d2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80021d6:	677b      	str	r3, [r7, #116]	@ 0x74
				}
			}

			//create a delay
			if ((delay_flag == 1) && (current_tick >= general_delay)) {
 80021d8:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d106      	bne.n	80021ee <main+0x207e>
 80021e0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80021e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d302      	bcc.n	80021ee <main+0x207e>

				delay_flag = 0;
 80021e8:	2300      	movs	r3, #0
 80021ea:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
		while ((status == 30) && (current_tick >= general_delay)) {
 80021ee:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 80021f2:	2b1e      	cmp	r3, #30
 80021f4:	f040 837b 	bne.w	80028ee <main+0x277e>
 80021f8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80021fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80021fc:	429a      	cmp	r2, r3
 80021fe:	f4bf af19 	bcs.w	8002034 <main+0x1ec4>
			}

		}

		//entering the minutes state (31)
		while ((status == 31) && (current_tick >= general_delay)) {
 8002202:	e374      	b.n	80028ee <main+0x277e>

			//get the current tick number
			current_tick = HAL_GetTick();
 8002204:	f006 fa3a 	bl	800867c <HAL_GetTick>
 8002208:	67f8      	str	r0, [r7, #124]	@ 0x7c

			//Alcd_Clear(&lcd);
			Alcd_PutAt(&lcd, 0, 0, "Enter minutes");
 800220a:	4892      	ldr	r0, [pc, #584]	@ (8002454 <main+0x22e4>)
 800220c:	f006 f8d0 	bl	80083b0 <Str_Len>
 8002210:	4603      	mov	r3, r0
 8002212:	b2db      	uxtb	r3, r3
 8002214:	9300      	str	r3, [sp, #0]
 8002216:	4b8f      	ldr	r3, [pc, #572]	@ (8002454 <main+0x22e4>)
 8002218:	2200      	movs	r2, #0
 800221a:	2100      	movs	r1, #0
 800221c:	488c      	ldr	r0, [pc, #560]	@ (8002450 <main+0x22e0>)
 800221e:	f006 f85a 	bl	80082d6 <Alcd_PutAt_n>

			snprintf(timeString, sizeof(timeString), "%02d", status);
 8002222:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 8002226:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800222a:	4a8b      	ldr	r2, [pc, #556]	@ (8002458 <main+0x22e8>)
 800222c:	2132      	movs	r1, #50	@ 0x32
 800222e:	f009 fb3f 	bl	800b8b0 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 8002232:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002236:	4618      	mov	r0, r3
 8002238:	f7fd ff92 	bl	8000160 <strlen>
 800223c:	4603      	mov	r3, r0
 800223e:	b2db      	uxtb	r3, r3
 8002240:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002244:	9300      	str	r3, [sp, #0]
 8002246:	4613      	mov	r3, r2
 8002248:	220e      	movs	r2, #14
 800224a:	2100      	movs	r1, #0
 800224c:	4880      	ldr	r0, [pc, #512]	@ (8002450 <main+0x22e0>)
 800224e:	f006 f842 	bl	80082d6 <Alcd_PutAt_n>

			Alcd_CursorAt(&lcd, 1, input_index);
 8002252:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002256:	461a      	mov	r2, r3
 8002258:	2101      	movs	r1, #1
 800225a:	487d      	ldr	r0, [pc, #500]	@ (8002450 <main+0x22e0>)
 800225c:	f005 ffff 	bl	800825e <Alcd_CursorAt>
			Alcd_Display_Control(&lcd, 1, 1, 1);
 8002260:	2301      	movs	r3, #1
 8002262:	2201      	movs	r2, #1
 8002264:	2101      	movs	r1, #1
 8002266:	487a      	ldr	r0, [pc, #488]	@ (8002450 <main+0x22e0>)
 8002268:	f006 f85f 	bl	800832a <Alcd_Display_Control>

			//check if any button is pressed
			//check for any keypad input
			Keypad_Refresh(&kp);
 800226c:	487b      	ldr	r0, [pc, #492]	@ (800245c <main+0x22ec>)
 800226e:	f006 f8f9 	bl	8008464 <Keypad_Refresh>

			//if back is entered
			if (Keypad_Get_Key(&kp, kp_button_no_back)
 8002272:	210e      	movs	r1, #14
 8002274:	4879      	ldr	r0, [pc, #484]	@ (800245c <main+0x22ec>)
 8002276:	f006 f991 	bl	800859c <Keypad_Get_Key>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d007      	beq.n	8002290 <main+0x2120>
					&& (current_tick >= general_delay)) {
 8002280:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002282:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002284:	429a      	cmp	r2, r3
 8002286:	d303      	bcc.n	8002290 <main+0x2120>

				//back to previous menu
				status = 29;
 8002288:	231d      	movs	r3, #29
 800228a:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 800228e:	e300      	b.n	8002892 <main+0x2722>

			}

			//0 is entered
			else if (Keypad_Get_Key(&kp, kp_button_0)
 8002290:	210d      	movs	r1, #13
 8002292:	4872      	ldr	r0, [pc, #456]	@ (800245c <main+0x22ec>)
 8002294:	f006 f982 	bl	800859c <Keypad_Get_Key>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d042      	beq.n	8002324 <main+0x21b4>
					&& (current_tick >= general_delay)) {
 800229e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80022a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d33e      	bcc.n	8002324 <main+0x21b4>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80022a6:	2300      	movs	r3, #0
 80022a8:	2200      	movs	r2, #0
 80022aa:	2101      	movs	r1, #1
 80022ac:	4868      	ldr	r0, [pc, #416]	@ (8002450 <main+0x22e0>)
 80022ae:	f006 f83c 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 80022b2:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d827      	bhi.n	800230a <main+0x219a>
					time_date_buffer[input_index] = '0';
 80022ba:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80022be:	3388      	adds	r3, #136	@ 0x88
 80022c0:	443b      	add	r3, r7
 80022c2:	2230      	movs	r2, #48	@ 0x30
 80022c4:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 80022c8:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80022cc:	3301      	adds	r3, #1
 80022ce:	3388      	adds	r3, #136	@ 0x88
 80022d0:	443b      	add	r3, r7
 80022d2:	2200      	movs	r2, #0
 80022d4:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "0");
 80022d8:	4861      	ldr	r0, [pc, #388]	@ (8002460 <main+0x22f0>)
 80022da:	f006 f869 	bl	80083b0 <Str_Len>
 80022de:	4603      	mov	r3, r0
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 80022e6:	9300      	str	r3, [sp, #0]
 80022e8:	4b5d      	ldr	r3, [pc, #372]	@ (8002460 <main+0x22f0>)
 80022ea:	2101      	movs	r1, #1
 80022ec:	4858      	ldr	r0, [pc, #352]	@ (8002450 <main+0x22e0>)
 80022ee:	f005 fff2 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 80022f2:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80022f6:	3301      	adds	r3, #1
 80022f8:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 80022fc:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002300:	461a      	mov	r2, r3
 8002302:	2101      	movs	r1, #1
 8002304:	4852      	ldr	r0, [pc, #328]	@ (8002450 <main+0x22e0>)
 8002306:	f005 ffaa 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 800230a:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 800230e:	2301      	movs	r3, #1
 8002310:	2101      	movs	r1, #1
 8002312:	484f      	ldr	r0, [pc, #316]	@ (8002450 <main+0x22e0>)
 8002314:	f006 f809 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8002318:	f006 f9b0 	bl	800867c <HAL_GetTick>
 800231c:	4603      	mov	r3, r0
 800231e:	33fa      	adds	r3, #250	@ 0xfa
 8002320:	677b      	str	r3, [r7, #116]	@ 0x74
 8002322:	e2b6      	b.n	8002892 <main+0x2722>

			}
			//1 is entered
			else if (Keypad_Get_Key(&kp, kp_button_1)
 8002324:	2100      	movs	r1, #0
 8002326:	484d      	ldr	r0, [pc, #308]	@ (800245c <main+0x22ec>)
 8002328:	f006 f938 	bl	800859c <Keypad_Get_Key>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d042      	beq.n	80023b8 <main+0x2248>
					&& (current_tick >= general_delay)) {
 8002332:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002334:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002336:	429a      	cmp	r2, r3
 8002338:	d33e      	bcc.n	80023b8 <main+0x2248>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 800233a:	2300      	movs	r3, #0
 800233c:	2200      	movs	r2, #0
 800233e:	2101      	movs	r1, #1
 8002340:	4843      	ldr	r0, [pc, #268]	@ (8002450 <main+0x22e0>)
 8002342:	f005 fff2 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8002346:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800234a:	2b01      	cmp	r3, #1
 800234c:	d827      	bhi.n	800239e <main+0x222e>
					time_date_buffer[input_index] = '1';
 800234e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002352:	3388      	adds	r3, #136	@ 0x88
 8002354:	443b      	add	r3, r7
 8002356:	2231      	movs	r2, #49	@ 0x31
 8002358:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 800235c:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002360:	3301      	adds	r3, #1
 8002362:	3388      	adds	r3, #136	@ 0x88
 8002364:	443b      	add	r3, r7
 8002366:	2200      	movs	r2, #0
 8002368:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "1");
 800236c:	483d      	ldr	r0, [pc, #244]	@ (8002464 <main+0x22f4>)
 800236e:	f006 f81f 	bl	80083b0 <Str_Len>
 8002372:	4603      	mov	r3, r0
 8002374:	b2db      	uxtb	r3, r3
 8002376:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 800237a:	9300      	str	r3, [sp, #0]
 800237c:	4b39      	ldr	r3, [pc, #228]	@ (8002464 <main+0x22f4>)
 800237e:	2101      	movs	r1, #1
 8002380:	4833      	ldr	r0, [pc, #204]	@ (8002450 <main+0x22e0>)
 8002382:	f005 ffa8 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 8002386:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800238a:	3301      	adds	r3, #1
 800238c:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8002390:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002394:	461a      	mov	r2, r3
 8002396:	2101      	movs	r1, #1
 8002398:	482d      	ldr	r0, [pc, #180]	@ (8002450 <main+0x22e0>)
 800239a:	f005 ff60 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 800239e:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 80023a2:	2301      	movs	r3, #1
 80023a4:	2101      	movs	r1, #1
 80023a6:	482a      	ldr	r0, [pc, #168]	@ (8002450 <main+0x22e0>)
 80023a8:	f005 ffbf 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 80023ac:	f006 f966 	bl	800867c <HAL_GetTick>
 80023b0:	4603      	mov	r3, r0
 80023b2:	33fa      	adds	r3, #250	@ 0xfa
 80023b4:	677b      	str	r3, [r7, #116]	@ 0x74
 80023b6:	e26c      	b.n	8002892 <main+0x2722>

			}
			//2 is entered
			else if (Keypad_Get_Key(&kp, kp_button_2)
 80023b8:	2101      	movs	r1, #1
 80023ba:	4828      	ldr	r0, [pc, #160]	@ (800245c <main+0x22ec>)
 80023bc:	f006 f8ee 	bl	800859c <Keypad_Get_Key>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d052      	beq.n	800246c <main+0x22fc>
					&& (current_tick >= general_delay)) {
 80023c6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80023c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d34e      	bcc.n	800246c <main+0x22fc>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80023ce:	2300      	movs	r3, #0
 80023d0:	2200      	movs	r2, #0
 80023d2:	2101      	movs	r1, #1
 80023d4:	481e      	ldr	r0, [pc, #120]	@ (8002450 <main+0x22e0>)
 80023d6:	f005 ffa8 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 80023da:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d827      	bhi.n	8002432 <main+0x22c2>
					time_date_buffer[input_index] = '2';
 80023e2:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80023e6:	3388      	adds	r3, #136	@ 0x88
 80023e8:	443b      	add	r3, r7
 80023ea:	2232      	movs	r2, #50	@ 0x32
 80023ec:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 80023f0:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80023f4:	3301      	adds	r3, #1
 80023f6:	3388      	adds	r3, #136	@ 0x88
 80023f8:	443b      	add	r3, r7
 80023fa:	2200      	movs	r2, #0
 80023fc:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "2");
 8002400:	4819      	ldr	r0, [pc, #100]	@ (8002468 <main+0x22f8>)
 8002402:	f005 ffd5 	bl	80083b0 <Str_Len>
 8002406:	4603      	mov	r3, r0
 8002408:	b2db      	uxtb	r3, r3
 800240a:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 800240e:	9300      	str	r3, [sp, #0]
 8002410:	4b15      	ldr	r3, [pc, #84]	@ (8002468 <main+0x22f8>)
 8002412:	2101      	movs	r1, #1
 8002414:	480e      	ldr	r0, [pc, #56]	@ (8002450 <main+0x22e0>)
 8002416:	f005 ff5e 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 800241a:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800241e:	3301      	adds	r3, #1
 8002420:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8002424:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002428:	461a      	mov	r2, r3
 800242a:	2101      	movs	r1, #1
 800242c:	4808      	ldr	r0, [pc, #32]	@ (8002450 <main+0x22e0>)
 800242e:	f005 ff16 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8002432:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8002436:	2301      	movs	r3, #1
 8002438:	2101      	movs	r1, #1
 800243a:	4805      	ldr	r0, [pc, #20]	@ (8002450 <main+0x22e0>)
 800243c:	f005 ff75 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8002440:	f006 f91c 	bl	800867c <HAL_GetTick>
 8002444:	4603      	mov	r3, r0
 8002446:	33fa      	adds	r3, #250	@ 0xfa
 8002448:	677b      	str	r3, [r7, #116]	@ 0x74
 800244a:	e222      	b.n	8002892 <main+0x2722>
 800244c:	0800c390 	.word	0x0800c390
 8002450:	2000001c 	.word	0x2000001c
 8002454:	0800c398 	.word	0x0800c398
 8002458:	0800c280 	.word	0x0800c280
 800245c:	20000000 	.word	0x20000000
 8002460:	0800c368 	.word	0x0800c368
 8002464:	0800c36c 	.word	0x0800c36c
 8002468:	0800c370 	.word	0x0800c370

			}
			//3 is entered
			else if (Keypad_Get_Key(&kp, kp_button_3)
 800246c:	2102      	movs	r1, #2
 800246e:	48b8      	ldr	r0, [pc, #736]	@ (8002750 <main+0x25e0>)
 8002470:	f006 f894 	bl	800859c <Keypad_Get_Key>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d042      	beq.n	8002500 <main+0x2390>
					&& (current_tick >= general_delay)) {
 800247a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800247c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800247e:	429a      	cmp	r2, r3
 8002480:	d33e      	bcc.n	8002500 <main+0x2390>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8002482:	2300      	movs	r3, #0
 8002484:	2200      	movs	r2, #0
 8002486:	2101      	movs	r1, #1
 8002488:	48b2      	ldr	r0, [pc, #712]	@ (8002754 <main+0x25e4>)
 800248a:	f005 ff4e 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 800248e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002492:	2b01      	cmp	r3, #1
 8002494:	d827      	bhi.n	80024e6 <main+0x2376>
					time_date_buffer[input_index] = '3';
 8002496:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800249a:	3388      	adds	r3, #136	@ 0x88
 800249c:	443b      	add	r3, r7
 800249e:	2233      	movs	r2, #51	@ 0x33
 80024a0:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 80024a4:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80024a8:	3301      	adds	r3, #1
 80024aa:	3388      	adds	r3, #136	@ 0x88
 80024ac:	443b      	add	r3, r7
 80024ae:	2200      	movs	r2, #0
 80024b0:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "3");
 80024b4:	48a8      	ldr	r0, [pc, #672]	@ (8002758 <main+0x25e8>)
 80024b6:	f005 ff7b 	bl	80083b0 <Str_Len>
 80024ba:	4603      	mov	r3, r0
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 80024c2:	9300      	str	r3, [sp, #0]
 80024c4:	4ba4      	ldr	r3, [pc, #656]	@ (8002758 <main+0x25e8>)
 80024c6:	2101      	movs	r1, #1
 80024c8:	48a2      	ldr	r0, [pc, #648]	@ (8002754 <main+0x25e4>)
 80024ca:	f005 ff04 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 80024ce:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80024d2:	3301      	adds	r3, #1
 80024d4:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 80024d8:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80024dc:	461a      	mov	r2, r3
 80024de:	2101      	movs	r1, #1
 80024e0:	489c      	ldr	r0, [pc, #624]	@ (8002754 <main+0x25e4>)
 80024e2:	f005 febc 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 80024e6:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 80024ea:	2301      	movs	r3, #1
 80024ec:	2101      	movs	r1, #1
 80024ee:	4899      	ldr	r0, [pc, #612]	@ (8002754 <main+0x25e4>)
 80024f0:	f005 ff1b 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 80024f4:	f006 f8c2 	bl	800867c <HAL_GetTick>
 80024f8:	4603      	mov	r3, r0
 80024fa:	33fa      	adds	r3, #250	@ 0xfa
 80024fc:	677b      	str	r3, [r7, #116]	@ 0x74
 80024fe:	e1c8      	b.n	8002892 <main+0x2722>

			}

			//4 is entered
			else if (Keypad_Get_Key(&kp, kp_button_4)
 8002500:	2104      	movs	r1, #4
 8002502:	4893      	ldr	r0, [pc, #588]	@ (8002750 <main+0x25e0>)
 8002504:	f006 f84a 	bl	800859c <Keypad_Get_Key>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d042      	beq.n	8002594 <main+0x2424>
					&& (current_tick >= general_delay)) {
 800250e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002510:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002512:	429a      	cmp	r2, r3
 8002514:	d33e      	bcc.n	8002594 <main+0x2424>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8002516:	2300      	movs	r3, #0
 8002518:	2200      	movs	r2, #0
 800251a:	2101      	movs	r1, #1
 800251c:	488d      	ldr	r0, [pc, #564]	@ (8002754 <main+0x25e4>)
 800251e:	f005 ff04 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8002522:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002526:	2b01      	cmp	r3, #1
 8002528:	d827      	bhi.n	800257a <main+0x240a>
					time_date_buffer[input_index] = '4';
 800252a:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800252e:	3388      	adds	r3, #136	@ 0x88
 8002530:	443b      	add	r3, r7
 8002532:	2234      	movs	r2, #52	@ 0x34
 8002534:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8002538:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800253c:	3301      	adds	r3, #1
 800253e:	3388      	adds	r3, #136	@ 0x88
 8002540:	443b      	add	r3, r7
 8002542:	2200      	movs	r2, #0
 8002544:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "4");
 8002548:	4884      	ldr	r0, [pc, #528]	@ (800275c <main+0x25ec>)
 800254a:	f005 ff31 	bl	80083b0 <Str_Len>
 800254e:	4603      	mov	r3, r0
 8002550:	b2db      	uxtb	r3, r3
 8002552:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8002556:	9300      	str	r3, [sp, #0]
 8002558:	4b80      	ldr	r3, [pc, #512]	@ (800275c <main+0x25ec>)
 800255a:	2101      	movs	r1, #1
 800255c:	487d      	ldr	r0, [pc, #500]	@ (8002754 <main+0x25e4>)
 800255e:	f005 feba 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 8002562:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002566:	3301      	adds	r3, #1
 8002568:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 800256c:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002570:	461a      	mov	r2, r3
 8002572:	2101      	movs	r1, #1
 8002574:	4877      	ldr	r0, [pc, #476]	@ (8002754 <main+0x25e4>)
 8002576:	f005 fe72 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 800257a:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 800257e:	2301      	movs	r3, #1
 8002580:	2101      	movs	r1, #1
 8002582:	4874      	ldr	r0, [pc, #464]	@ (8002754 <main+0x25e4>)
 8002584:	f005 fed1 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8002588:	f006 f878 	bl	800867c <HAL_GetTick>
 800258c:	4603      	mov	r3, r0
 800258e:	33fa      	adds	r3, #250	@ 0xfa
 8002590:	677b      	str	r3, [r7, #116]	@ 0x74
 8002592:	e17e      	b.n	8002892 <main+0x2722>

			}
			//5 is entered
			else if (Keypad_Get_Key(&kp, kp_button_5)
 8002594:	2105      	movs	r1, #5
 8002596:	486e      	ldr	r0, [pc, #440]	@ (8002750 <main+0x25e0>)
 8002598:	f006 f800 	bl	800859c <Keypad_Get_Key>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d042      	beq.n	8002628 <main+0x24b8>
					&& (current_tick >= general_delay)) {
 80025a2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80025a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d33e      	bcc.n	8002628 <main+0x24b8>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80025aa:	2300      	movs	r3, #0
 80025ac:	2200      	movs	r2, #0
 80025ae:	2101      	movs	r1, #1
 80025b0:	4868      	ldr	r0, [pc, #416]	@ (8002754 <main+0x25e4>)
 80025b2:	f005 feba 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 80025b6:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d827      	bhi.n	800260e <main+0x249e>
					time_date_buffer[input_index] = '5';
 80025be:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80025c2:	3388      	adds	r3, #136	@ 0x88
 80025c4:	443b      	add	r3, r7
 80025c6:	2235      	movs	r2, #53	@ 0x35
 80025c8:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 80025cc:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80025d0:	3301      	adds	r3, #1
 80025d2:	3388      	adds	r3, #136	@ 0x88
 80025d4:	443b      	add	r3, r7
 80025d6:	2200      	movs	r2, #0
 80025d8:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "5");
 80025dc:	4860      	ldr	r0, [pc, #384]	@ (8002760 <main+0x25f0>)
 80025de:	f005 fee7 	bl	80083b0 <Str_Len>
 80025e2:	4603      	mov	r3, r0
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 80025ea:	9300      	str	r3, [sp, #0]
 80025ec:	4b5c      	ldr	r3, [pc, #368]	@ (8002760 <main+0x25f0>)
 80025ee:	2101      	movs	r1, #1
 80025f0:	4858      	ldr	r0, [pc, #352]	@ (8002754 <main+0x25e4>)
 80025f2:	f005 fe70 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 80025f6:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80025fa:	3301      	adds	r3, #1
 80025fc:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8002600:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002604:	461a      	mov	r2, r3
 8002606:	2101      	movs	r1, #1
 8002608:	4852      	ldr	r0, [pc, #328]	@ (8002754 <main+0x25e4>)
 800260a:	f005 fe28 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 800260e:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8002612:	2301      	movs	r3, #1
 8002614:	2101      	movs	r1, #1
 8002616:	484f      	ldr	r0, [pc, #316]	@ (8002754 <main+0x25e4>)
 8002618:	f005 fe87 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 800261c:	f006 f82e 	bl	800867c <HAL_GetTick>
 8002620:	4603      	mov	r3, r0
 8002622:	33fa      	adds	r3, #250	@ 0xfa
 8002624:	677b      	str	r3, [r7, #116]	@ 0x74
 8002626:	e134      	b.n	8002892 <main+0x2722>

			}

			//6 is entered
			else if (Keypad_Get_Key(&kp, kp_button_6)
 8002628:	2106      	movs	r1, #6
 800262a:	4849      	ldr	r0, [pc, #292]	@ (8002750 <main+0x25e0>)
 800262c:	f005 ffb6 	bl	800859c <Keypad_Get_Key>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d042      	beq.n	80026bc <main+0x254c>
					&& (current_tick >= general_delay)) {
 8002636:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002638:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800263a:	429a      	cmp	r2, r3
 800263c:	d33e      	bcc.n	80026bc <main+0x254c>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 800263e:	2300      	movs	r3, #0
 8002640:	2200      	movs	r2, #0
 8002642:	2101      	movs	r1, #1
 8002644:	4843      	ldr	r0, [pc, #268]	@ (8002754 <main+0x25e4>)
 8002646:	f005 fe70 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 800264a:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800264e:	2b01      	cmp	r3, #1
 8002650:	d827      	bhi.n	80026a2 <main+0x2532>
					time_date_buffer[input_index] = '6';
 8002652:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002656:	3388      	adds	r3, #136	@ 0x88
 8002658:	443b      	add	r3, r7
 800265a:	2236      	movs	r2, #54	@ 0x36
 800265c:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8002660:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002664:	3301      	adds	r3, #1
 8002666:	3388      	adds	r3, #136	@ 0x88
 8002668:	443b      	add	r3, r7
 800266a:	2200      	movs	r2, #0
 800266c:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "6");
 8002670:	483c      	ldr	r0, [pc, #240]	@ (8002764 <main+0x25f4>)
 8002672:	f005 fe9d 	bl	80083b0 <Str_Len>
 8002676:	4603      	mov	r3, r0
 8002678:	b2db      	uxtb	r3, r3
 800267a:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 800267e:	9300      	str	r3, [sp, #0]
 8002680:	4b38      	ldr	r3, [pc, #224]	@ (8002764 <main+0x25f4>)
 8002682:	2101      	movs	r1, #1
 8002684:	4833      	ldr	r0, [pc, #204]	@ (8002754 <main+0x25e4>)
 8002686:	f005 fe26 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 800268a:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800268e:	3301      	adds	r3, #1
 8002690:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8002694:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002698:	461a      	mov	r2, r3
 800269a:	2101      	movs	r1, #1
 800269c:	482d      	ldr	r0, [pc, #180]	@ (8002754 <main+0x25e4>)
 800269e:	f005 fdde 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 80026a2:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 80026a6:	2301      	movs	r3, #1
 80026a8:	2101      	movs	r1, #1
 80026aa:	482a      	ldr	r0, [pc, #168]	@ (8002754 <main+0x25e4>)
 80026ac:	f005 fe3d 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 80026b0:	f005 ffe4 	bl	800867c <HAL_GetTick>
 80026b4:	4603      	mov	r3, r0
 80026b6:	33fa      	adds	r3, #250	@ 0xfa
 80026b8:	677b      	str	r3, [r7, #116]	@ 0x74
 80026ba:	e0ea      	b.n	8002892 <main+0x2722>

			}

			//7 is entered
			else if (Keypad_Get_Key(&kp, kp_button_7)
 80026bc:	2108      	movs	r1, #8
 80026be:	4824      	ldr	r0, [pc, #144]	@ (8002750 <main+0x25e0>)
 80026c0:	f005 ff6c 	bl	800859c <Keypad_Get_Key>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d050      	beq.n	800276c <main+0x25fc>
					&& (current_tick >= general_delay)) {
 80026ca:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80026cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d34c      	bcc.n	800276c <main+0x25fc>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80026d2:	2300      	movs	r3, #0
 80026d4:	2200      	movs	r2, #0
 80026d6:	2101      	movs	r1, #1
 80026d8:	481e      	ldr	r0, [pc, #120]	@ (8002754 <main+0x25e4>)
 80026da:	f005 fe26 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 80026de:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d827      	bhi.n	8002736 <main+0x25c6>
					time_date_buffer[input_index] = '7';
 80026e6:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80026ea:	3388      	adds	r3, #136	@ 0x88
 80026ec:	443b      	add	r3, r7
 80026ee:	2237      	movs	r2, #55	@ 0x37
 80026f0:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 80026f4:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80026f8:	3301      	adds	r3, #1
 80026fa:	3388      	adds	r3, #136	@ 0x88
 80026fc:	443b      	add	r3, r7
 80026fe:	2200      	movs	r2, #0
 8002700:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "7");
 8002704:	4818      	ldr	r0, [pc, #96]	@ (8002768 <main+0x25f8>)
 8002706:	f005 fe53 	bl	80083b0 <Str_Len>
 800270a:	4603      	mov	r3, r0
 800270c:	b2db      	uxtb	r3, r3
 800270e:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8002712:	9300      	str	r3, [sp, #0]
 8002714:	4b14      	ldr	r3, [pc, #80]	@ (8002768 <main+0x25f8>)
 8002716:	2101      	movs	r1, #1
 8002718:	480e      	ldr	r0, [pc, #56]	@ (8002754 <main+0x25e4>)
 800271a:	f005 fddc 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 800271e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002722:	3301      	adds	r3, #1
 8002724:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8002728:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800272c:	461a      	mov	r2, r3
 800272e:	2101      	movs	r1, #1
 8002730:	4808      	ldr	r0, [pc, #32]	@ (8002754 <main+0x25e4>)
 8002732:	f005 fd94 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8002736:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 800273a:	2301      	movs	r3, #1
 800273c:	2101      	movs	r1, #1
 800273e:	4805      	ldr	r0, [pc, #20]	@ (8002754 <main+0x25e4>)
 8002740:	f005 fdf3 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8002744:	f005 ff9a 	bl	800867c <HAL_GetTick>
 8002748:	4603      	mov	r3, r0
 800274a:	33fa      	adds	r3, #250	@ 0xfa
 800274c:	677b      	str	r3, [r7, #116]	@ 0x74
 800274e:	e0a0      	b.n	8002892 <main+0x2722>
 8002750:	20000000 	.word	0x20000000
 8002754:	2000001c 	.word	0x2000001c
 8002758:	0800c374 	.word	0x0800c374
 800275c:	0800c378 	.word	0x0800c378
 8002760:	0800c37c 	.word	0x0800c37c
 8002764:	0800c380 	.word	0x0800c380
 8002768:	0800c384 	.word	0x0800c384

			}

			//8 is entered
			else if (Keypad_Get_Key(&kp, kp_button_8)
 800276c:	2109      	movs	r1, #9
 800276e:	48a5      	ldr	r0, [pc, #660]	@ (8002a04 <main+0x2894>)
 8002770:	f005 ff14 	bl	800859c <Keypad_Get_Key>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d042      	beq.n	8002800 <main+0x2690>
					&& (current_tick >= general_delay)) {
 800277a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800277c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800277e:	429a      	cmp	r2, r3
 8002780:	d33e      	bcc.n	8002800 <main+0x2690>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8002782:	2300      	movs	r3, #0
 8002784:	2200      	movs	r2, #0
 8002786:	2101      	movs	r1, #1
 8002788:	489f      	ldr	r0, [pc, #636]	@ (8002a08 <main+0x2898>)
 800278a:	f005 fdce 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 800278e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002792:	2b01      	cmp	r3, #1
 8002794:	d827      	bhi.n	80027e6 <main+0x2676>
					time_date_buffer[input_index] = '8';
 8002796:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800279a:	3388      	adds	r3, #136	@ 0x88
 800279c:	443b      	add	r3, r7
 800279e:	2238      	movs	r2, #56	@ 0x38
 80027a0:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 80027a4:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80027a8:	3301      	adds	r3, #1
 80027aa:	3388      	adds	r3, #136	@ 0x88
 80027ac:	443b      	add	r3, r7
 80027ae:	2200      	movs	r2, #0
 80027b0:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "8");
 80027b4:	4895      	ldr	r0, [pc, #596]	@ (8002a0c <main+0x289c>)
 80027b6:	f005 fdfb 	bl	80083b0 <Str_Len>
 80027ba:	4603      	mov	r3, r0
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 80027c2:	9300      	str	r3, [sp, #0]
 80027c4:	4b91      	ldr	r3, [pc, #580]	@ (8002a0c <main+0x289c>)
 80027c6:	2101      	movs	r1, #1
 80027c8:	488f      	ldr	r0, [pc, #572]	@ (8002a08 <main+0x2898>)
 80027ca:	f005 fd84 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 80027ce:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80027d2:	3301      	adds	r3, #1
 80027d4:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 80027d8:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80027dc:	461a      	mov	r2, r3
 80027de:	2101      	movs	r1, #1
 80027e0:	4889      	ldr	r0, [pc, #548]	@ (8002a08 <main+0x2898>)
 80027e2:	f005 fd3c 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 80027e6:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 80027ea:	2301      	movs	r3, #1
 80027ec:	2101      	movs	r1, #1
 80027ee:	4886      	ldr	r0, [pc, #536]	@ (8002a08 <main+0x2898>)
 80027f0:	f005 fd9b 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 80027f4:	f005 ff42 	bl	800867c <HAL_GetTick>
 80027f8:	4603      	mov	r3, r0
 80027fa:	33fa      	adds	r3, #250	@ 0xfa
 80027fc:	677b      	str	r3, [r7, #116]	@ 0x74
 80027fe:	e048      	b.n	8002892 <main+0x2722>

			}

			//9 is entered
			else if (Keypad_Get_Key(&kp, kp_button_9)
 8002800:	210a      	movs	r1, #10
 8002802:	4880      	ldr	r0, [pc, #512]	@ (8002a04 <main+0x2894>)
 8002804:	f005 feca 	bl	800859c <Keypad_Get_Key>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d041      	beq.n	8002892 <main+0x2722>
					&& (current_tick >= general_delay)) {
 800280e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002810:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002812:	429a      	cmp	r2, r3
 8002814:	d33d      	bcc.n	8002892 <main+0x2722>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8002816:	2300      	movs	r3, #0
 8002818:	2200      	movs	r2, #0
 800281a:	2101      	movs	r1, #1
 800281c:	487a      	ldr	r0, [pc, #488]	@ (8002a08 <main+0x2898>)
 800281e:	f005 fd84 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8002822:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002826:	2b01      	cmp	r3, #1
 8002828:	d827      	bhi.n	800287a <main+0x270a>
					time_date_buffer[input_index] = '9';
 800282a:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800282e:	3388      	adds	r3, #136	@ 0x88
 8002830:	443b      	add	r3, r7
 8002832:	2239      	movs	r2, #57	@ 0x39
 8002834:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8002838:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800283c:	3301      	adds	r3, #1
 800283e:	3388      	adds	r3, #136	@ 0x88
 8002840:	443b      	add	r3, r7
 8002842:	2200      	movs	r2, #0
 8002844:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "9");
 8002848:	4871      	ldr	r0, [pc, #452]	@ (8002a10 <main+0x28a0>)
 800284a:	f005 fdb1 	bl	80083b0 <Str_Len>
 800284e:	4603      	mov	r3, r0
 8002850:	b2db      	uxtb	r3, r3
 8002852:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8002856:	9300      	str	r3, [sp, #0]
 8002858:	4b6d      	ldr	r3, [pc, #436]	@ (8002a10 <main+0x28a0>)
 800285a:	2101      	movs	r1, #1
 800285c:	486a      	ldr	r0, [pc, #424]	@ (8002a08 <main+0x2898>)
 800285e:	f005 fd3a 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 8002862:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002866:	3301      	adds	r3, #1
 8002868:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 800286c:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002870:	461a      	mov	r2, r3
 8002872:	2101      	movs	r1, #1
 8002874:	4864      	ldr	r0, [pc, #400]	@ (8002a08 <main+0x2898>)
 8002876:	f005 fcf2 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 800287a:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 800287e:	2301      	movs	r3, #1
 8002880:	2101      	movs	r1, #1
 8002882:	4861      	ldr	r0, [pc, #388]	@ (8002a08 <main+0x2898>)
 8002884:	f005 fd51 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8002888:	f005 fef8 	bl	800867c <HAL_GetTick>
 800288c:	4603      	mov	r3, r0
 800288e:	33fa      	adds	r3, #250	@ 0xfa
 8002890:	677b      	str	r3, [r7, #116]	@ 0x74

			}

			//when yes is entered -> check for miinutes validity (state 32)
			if (Keypad_Get_Key(&kp, kp_button_yes)
 8002892:	210f      	movs	r1, #15
 8002894:	485b      	ldr	r0, [pc, #364]	@ (8002a04 <main+0x2894>)
 8002896:	f005 fe81 	bl	800859c <Keypad_Get_Key>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d021      	beq.n	80028e4 <main+0x2774>
					&& (current_tick >= general_delay)) {
 80028a0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80028a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d31d      	bcc.n	80028e4 <main+0x2774>

				Alcd_Clear(&lcd);
 80028a8:	4857      	ldr	r0, [pc, #348]	@ (8002a08 <main+0x2898>)
 80028aa:	f005 fd2d 	bl	8008308 <Alcd_Clear>

				snprintf(timeString, sizeof(timeString), "%02d", buffer);
 80028ae:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80028b2:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80028b6:	4a57      	ldr	r2, [pc, #348]	@ (8002a14 <main+0x28a4>)
 80028b8:	2132      	movs	r1, #50	@ 0x32
 80028ba:	f008 fff9 	bl	800b8b0 <sniprintf>
				Alcd_PutAt_n(&lcd, 1, 0, timeString, strlen(timeString));
 80028be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7fd fc4c 	bl	8000160 <strlen>
 80028c8:	4603      	mov	r3, r0
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80028d0:	9300      	str	r3, [sp, #0]
 80028d2:	4613      	mov	r3, r2
 80028d4:	2200      	movs	r2, #0
 80028d6:	2101      	movs	r1, #1
 80028d8:	484b      	ldr	r0, [pc, #300]	@ (8002a08 <main+0x2898>)
 80028da:	f005 fcfc 	bl	80082d6 <Alcd_PutAt_n>

				status = 32;
 80028de:	2320      	movs	r3, #32
 80028e0:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83

			}

			//
			general_delay = HAL_GetTick() + 250;
 80028e4:	f005 feca 	bl	800867c <HAL_GetTick>
 80028e8:	4603      	mov	r3, r0
 80028ea:	33fa      	adds	r3, #250	@ 0xfa
 80028ec:	677b      	str	r3, [r7, #116]	@ 0x74
		while ((status == 31) && (current_tick >= general_delay)) {
 80028ee:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 80028f2:	2b1f      	cmp	r3, #31
 80028f4:	d17b      	bne.n	80029ee <main+0x287e>
 80028f6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80028f8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80028fa:	429a      	cmp	r2, r3
 80028fc:	f4bf ac82 	bcs.w	8002204 <main+0x2094>
		}

		//minutes validation phase
		while ((status == 32) && (current_tick >= general_delay)) {
 8002900:	e075      	b.n	80029ee <main+0x287e>

			//get the current tick number
			current_tick = HAL_GetTick();
 8002902:	f005 febb 	bl	800867c <HAL_GetTick>
 8002906:	67f8      	str	r0, [r7, #124]	@ 0x7c

			Alcd_Clear(&lcd);
 8002908:	483f      	ldr	r0, [pc, #252]	@ (8002a08 <main+0x2898>)
 800290a:	f005 fcfd 	bl	8008308 <Alcd_Clear>

			snprintf(timeString, sizeof(timeString), "%02d", status);
 800290e:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 8002912:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8002916:	4a3f      	ldr	r2, [pc, #252]	@ (8002a14 <main+0x28a4>)
 8002918:	2132      	movs	r1, #50	@ 0x32
 800291a:	f008 ffc9 	bl	800b8b0 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 800291e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002922:	4618      	mov	r0, r3
 8002924:	f7fd fc1c 	bl	8000160 <strlen>
 8002928:	4603      	mov	r3, r0
 800292a:	b2db      	uxtb	r3, r3
 800292c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002930:	9300      	str	r3, [sp, #0]
 8002932:	4613      	mov	r3, r2
 8002934:	220e      	movs	r2, #14
 8002936:	2100      	movs	r1, #0
 8002938:	4833      	ldr	r0, [pc, #204]	@ (8002a08 <main+0x2898>)
 800293a:	f005 fccc 	bl	80082d6 <Alcd_PutAt_n>

			buffer = atoi(time_date_buffer);
 800293e:	f107 0310 	add.w	r3, r7, #16
 8002942:	4618      	mov	r0, r3
 8002944:	f008 ff2b 	bl	800b79e <atoi>
 8002948:	4603      	mov	r3, r0
 800294a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

			//check if minutes is within the range 0 to 60
			if (buffer >= 0 && buffer < 61) {
 800294e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8002952:	2b3c      	cmp	r3, #60	@ 0x3c
 8002954:	d818      	bhi.n	8002988 <main+0x2818>

				//move to the seconds state
				status = 33;
 8002956:	2321      	movs	r3, #33	@ 0x21
 8002958:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83

				//set the minutes to the value
				CLK.min = buffer;
 800295c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8002960:	b2da      	uxtb	r2, r3
 8002962:	4b2d      	ldr	r3, [pc, #180]	@ (8002a18 <main+0x28a8>)
 8002964:	725a      	strb	r2, [r3, #9]

				input_index = 0;
 8002966:	2300      	movs	r3, #0
 8002968:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 800296c:	2300      	movs	r3, #0
 800296e:	2200      	movs	r2, #0
 8002970:	2101      	movs	r1, #1
 8002972:	4825      	ldr	r0, [pc, #148]	@ (8002a08 <main+0x2898>)
 8002974:	f005 fcd9 	bl	800832a <Alcd_Display_Control>
				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8002978:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 800297c:	2301      	movs	r3, #1
 800297e:	2101      	movs	r1, #1
 8002980:	4821      	ldr	r0, [pc, #132]	@ (8002a08 <main+0x2898>)
 8002982:	f005 fcd2 	bl	800832a <Alcd_Display_Control>
 8002986:	e027      	b.n	80029d8 <main+0x2868>
			} else {
				Alcd_PutAt(&lcd, 0, 0, "invalid");
 8002988:	4824      	ldr	r0, [pc, #144]	@ (8002a1c <main+0x28ac>)
 800298a:	f005 fd11 	bl	80083b0 <Str_Len>
 800298e:	4603      	mov	r3, r0
 8002990:	b2db      	uxtb	r3, r3
 8002992:	9300      	str	r3, [sp, #0]
 8002994:	4b21      	ldr	r3, [pc, #132]	@ (8002a1c <main+0x28ac>)
 8002996:	2200      	movs	r2, #0
 8002998:	2100      	movs	r1, #0
 800299a:	481b      	ldr	r0, [pc, #108]	@ (8002a08 <main+0x2898>)
 800299c:	f005 fc9b 	bl	80082d6 <Alcd_PutAt_n>
				delay_flag = 1;
 80029a0:	2301      	movs	r3, #1
 80029a2:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85

				input_index = 0;
 80029a6:	2300      	movs	r3, #0
 80029a8:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80029ac:	2300      	movs	r3, #0
 80029ae:	2200      	movs	r2, #0
 80029b0:	2101      	movs	r1, #1
 80029b2:	4815      	ldr	r0, [pc, #84]	@ (8002a08 <main+0x2898>)
 80029b4:	f005 fcb9 	bl	800832a <Alcd_Display_Control>
				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 80029b8:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 80029bc:	2301      	movs	r3, #1
 80029be:	2101      	movs	r1, #1
 80029c0:	4811      	ldr	r0, [pc, #68]	@ (8002a08 <main+0x2898>)
 80029c2:	f005 fcb2 	bl	800832a <Alcd_Display_Control>
				//return to entering hours
				status = 31;
 80029c6:	231f      	movs	r3, #31
 80029c8:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83

				general_delay = HAL_GetTick() + 1000;
 80029cc:	f005 fe56 	bl	800867c <HAL_GetTick>
 80029d0:	4603      	mov	r3, r0
 80029d2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80029d6:	677b      	str	r3, [r7, #116]	@ 0x74
			}

			//create a delay
			if ((delay_flag == 1) && (current_tick >= general_delay)) {
 80029d8:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d106      	bne.n	80029ee <main+0x287e>
 80029e0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80029e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d302      	bcc.n	80029ee <main+0x287e>

				delay_flag = 0;
 80029e8:	2300      	movs	r3, #0
 80029ea:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
		while ((status == 32) && (current_tick >= general_delay)) {
 80029ee:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 80029f2:	2b20      	cmp	r3, #32
 80029f4:	f040 8389 	bne.w	800310a <main+0x2f9a>
 80029f8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80029fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d280      	bcs.n	8002902 <main+0x2792>
			}

		}

		//entering the seconds state (31)
		while ((status == 33) && (current_tick >= general_delay)) {
 8002a00:	e383      	b.n	800310a <main+0x2f9a>
 8002a02:	bf00      	nop
 8002a04:	20000000 	.word	0x20000000
 8002a08:	2000001c 	.word	0x2000001c
 8002a0c:	0800c388 	.word	0x0800c388
 8002a10:	0800c38c 	.word	0x0800c38c
 8002a14:	0800c280 	.word	0x0800c280
 8002a18:	20000150 	.word	0x20000150
 8002a1c:	0800c390 	.word	0x0800c390

			//get the current tick number
			current_tick = HAL_GetTick();
 8002a20:	f005 fe2c 	bl	800867c <HAL_GetTick>
 8002a24:	67f8      	str	r0, [r7, #124]	@ 0x7c

			//Alcd_Clear(&lcd);
			Alcd_PutAt(&lcd, 0, 0, "Enter seconds");
 8002a26:	48b5      	ldr	r0, [pc, #724]	@ (8002cfc <main+0x2b8c>)
 8002a28:	f005 fcc2 	bl	80083b0 <Str_Len>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	9300      	str	r3, [sp, #0]
 8002a32:	4bb2      	ldr	r3, [pc, #712]	@ (8002cfc <main+0x2b8c>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	2100      	movs	r1, #0
 8002a38:	48b1      	ldr	r0, [pc, #708]	@ (8002d00 <main+0x2b90>)
 8002a3a:	f005 fc4c 	bl	80082d6 <Alcd_PutAt_n>

			snprintf(timeString, sizeof(timeString), "%02d", status);
 8002a3e:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 8002a42:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8002a46:	4aaf      	ldr	r2, [pc, #700]	@ (8002d04 <main+0x2b94>)
 8002a48:	2132      	movs	r1, #50	@ 0x32
 8002a4a:	f008 ff31 	bl	800b8b0 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 8002a4e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7fd fb84 	bl	8000160 <strlen>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002a60:	9300      	str	r3, [sp, #0]
 8002a62:	4613      	mov	r3, r2
 8002a64:	220e      	movs	r2, #14
 8002a66:	2100      	movs	r1, #0
 8002a68:	48a5      	ldr	r0, [pc, #660]	@ (8002d00 <main+0x2b90>)
 8002a6a:	f005 fc34 	bl	80082d6 <Alcd_PutAt_n>

			Alcd_CursorAt(&lcd, 1, input_index);
 8002a6e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002a72:	461a      	mov	r2, r3
 8002a74:	2101      	movs	r1, #1
 8002a76:	48a2      	ldr	r0, [pc, #648]	@ (8002d00 <main+0x2b90>)
 8002a78:	f005 fbf1 	bl	800825e <Alcd_CursorAt>
			Alcd_Display_Control(&lcd, 1, 1, 1);
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	2201      	movs	r2, #1
 8002a80:	2101      	movs	r1, #1
 8002a82:	489f      	ldr	r0, [pc, #636]	@ (8002d00 <main+0x2b90>)
 8002a84:	f005 fc51 	bl	800832a <Alcd_Display_Control>

			//check if any button is pressed
			//check for any keypad input
			Keypad_Refresh(&kp);
 8002a88:	489f      	ldr	r0, [pc, #636]	@ (8002d08 <main+0x2b98>)
 8002a8a:	f005 fceb 	bl	8008464 <Keypad_Refresh>

			//if back is entered
			if (Keypad_Get_Key(&kp, kp_button_no_back)
 8002a8e:	210e      	movs	r1, #14
 8002a90:	489d      	ldr	r0, [pc, #628]	@ (8002d08 <main+0x2b98>)
 8002a92:	f005 fd83 	bl	800859c <Keypad_Get_Key>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d007      	beq.n	8002aac <main+0x293c>
					&& (current_tick >= general_delay)) {
 8002a9c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002a9e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d303      	bcc.n	8002aac <main+0x293c>

				//back to previous menu
				status = 31;
 8002aa4:	231f      	movs	r3, #31
 8002aa6:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 8002aaa:	e300      	b.n	80030ae <main+0x2f3e>

			}

			//0 is entered
			else if (Keypad_Get_Key(&kp, kp_button_0)
 8002aac:	210d      	movs	r1, #13
 8002aae:	4896      	ldr	r0, [pc, #600]	@ (8002d08 <main+0x2b98>)
 8002ab0:	f005 fd74 	bl	800859c <Keypad_Get_Key>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d042      	beq.n	8002b40 <main+0x29d0>
					&& (current_tick >= general_delay)) {
 8002aba:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002abc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d33e      	bcc.n	8002b40 <main+0x29d0>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	2101      	movs	r1, #1
 8002ac8:	488d      	ldr	r0, [pc, #564]	@ (8002d00 <main+0x2b90>)
 8002aca:	f005 fc2e 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8002ace:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d827      	bhi.n	8002b26 <main+0x29b6>
					time_date_buffer[input_index] = '0';
 8002ad6:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002ada:	3388      	adds	r3, #136	@ 0x88
 8002adc:	443b      	add	r3, r7
 8002ade:	2230      	movs	r2, #48	@ 0x30
 8002ae0:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8002ae4:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002ae8:	3301      	adds	r3, #1
 8002aea:	3388      	adds	r3, #136	@ 0x88
 8002aec:	443b      	add	r3, r7
 8002aee:	2200      	movs	r2, #0
 8002af0:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "0");
 8002af4:	4885      	ldr	r0, [pc, #532]	@ (8002d0c <main+0x2b9c>)
 8002af6:	f005 fc5b 	bl	80083b0 <Str_Len>
 8002afa:	4603      	mov	r3, r0
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8002b02:	9300      	str	r3, [sp, #0]
 8002b04:	4b81      	ldr	r3, [pc, #516]	@ (8002d0c <main+0x2b9c>)
 8002b06:	2101      	movs	r1, #1
 8002b08:	487d      	ldr	r0, [pc, #500]	@ (8002d00 <main+0x2b90>)
 8002b0a:	f005 fbe4 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 8002b0e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002b12:	3301      	adds	r3, #1
 8002b14:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8002b18:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	2101      	movs	r1, #1
 8002b20:	4877      	ldr	r0, [pc, #476]	@ (8002d00 <main+0x2b90>)
 8002b22:	f005 fb9c 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8002b26:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	2101      	movs	r1, #1
 8002b2e:	4874      	ldr	r0, [pc, #464]	@ (8002d00 <main+0x2b90>)
 8002b30:	f005 fbfb 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8002b34:	f005 fda2 	bl	800867c <HAL_GetTick>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	33fa      	adds	r3, #250	@ 0xfa
 8002b3c:	677b      	str	r3, [r7, #116]	@ 0x74
 8002b3e:	e2b6      	b.n	80030ae <main+0x2f3e>

			}
			//1 is entered
			else if (Keypad_Get_Key(&kp, kp_button_1)
 8002b40:	2100      	movs	r1, #0
 8002b42:	4871      	ldr	r0, [pc, #452]	@ (8002d08 <main+0x2b98>)
 8002b44:	f005 fd2a 	bl	800859c <Keypad_Get_Key>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d042      	beq.n	8002bd4 <main+0x2a64>
					&& (current_tick >= general_delay)) {
 8002b4e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002b50:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d33e      	bcc.n	8002bd4 <main+0x2a64>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8002b56:	2300      	movs	r3, #0
 8002b58:	2200      	movs	r2, #0
 8002b5a:	2101      	movs	r1, #1
 8002b5c:	4868      	ldr	r0, [pc, #416]	@ (8002d00 <main+0x2b90>)
 8002b5e:	f005 fbe4 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8002b62:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d827      	bhi.n	8002bba <main+0x2a4a>
					time_date_buffer[input_index] = '1';
 8002b6a:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002b6e:	3388      	adds	r3, #136	@ 0x88
 8002b70:	443b      	add	r3, r7
 8002b72:	2231      	movs	r2, #49	@ 0x31
 8002b74:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8002b78:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	3388      	adds	r3, #136	@ 0x88
 8002b80:	443b      	add	r3, r7
 8002b82:	2200      	movs	r2, #0
 8002b84:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "1");
 8002b88:	4861      	ldr	r0, [pc, #388]	@ (8002d10 <main+0x2ba0>)
 8002b8a:	f005 fc11 	bl	80083b0 <Str_Len>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8002b96:	9300      	str	r3, [sp, #0]
 8002b98:	4b5d      	ldr	r3, [pc, #372]	@ (8002d10 <main+0x2ba0>)
 8002b9a:	2101      	movs	r1, #1
 8002b9c:	4858      	ldr	r0, [pc, #352]	@ (8002d00 <main+0x2b90>)
 8002b9e:	f005 fb9a 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 8002ba2:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8002bac:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	2101      	movs	r1, #1
 8002bb4:	4852      	ldr	r0, [pc, #328]	@ (8002d00 <main+0x2b90>)
 8002bb6:	f005 fb52 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8002bba:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	2101      	movs	r1, #1
 8002bc2:	484f      	ldr	r0, [pc, #316]	@ (8002d00 <main+0x2b90>)
 8002bc4:	f005 fbb1 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8002bc8:	f005 fd58 	bl	800867c <HAL_GetTick>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	33fa      	adds	r3, #250	@ 0xfa
 8002bd0:	677b      	str	r3, [r7, #116]	@ 0x74
 8002bd2:	e26c      	b.n	80030ae <main+0x2f3e>

			}
			//2 is entered
			else if (Keypad_Get_Key(&kp, kp_button_2)
 8002bd4:	2101      	movs	r1, #1
 8002bd6:	484c      	ldr	r0, [pc, #304]	@ (8002d08 <main+0x2b98>)
 8002bd8:	f005 fce0 	bl	800859c <Keypad_Get_Key>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d042      	beq.n	8002c68 <main+0x2af8>
					&& (current_tick >= general_delay)) {
 8002be2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002be4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d33e      	bcc.n	8002c68 <main+0x2af8>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8002bea:	2300      	movs	r3, #0
 8002bec:	2200      	movs	r2, #0
 8002bee:	2101      	movs	r1, #1
 8002bf0:	4843      	ldr	r0, [pc, #268]	@ (8002d00 <main+0x2b90>)
 8002bf2:	f005 fb9a 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8002bf6:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d827      	bhi.n	8002c4e <main+0x2ade>
					time_date_buffer[input_index] = '2';
 8002bfe:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002c02:	3388      	adds	r3, #136	@ 0x88
 8002c04:	443b      	add	r3, r7
 8002c06:	2232      	movs	r2, #50	@ 0x32
 8002c08:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8002c0c:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002c10:	3301      	adds	r3, #1
 8002c12:	3388      	adds	r3, #136	@ 0x88
 8002c14:	443b      	add	r3, r7
 8002c16:	2200      	movs	r2, #0
 8002c18:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "2");
 8002c1c:	483d      	ldr	r0, [pc, #244]	@ (8002d14 <main+0x2ba4>)
 8002c1e:	f005 fbc7 	bl	80083b0 <Str_Len>
 8002c22:	4603      	mov	r3, r0
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8002c2a:	9300      	str	r3, [sp, #0]
 8002c2c:	4b39      	ldr	r3, [pc, #228]	@ (8002d14 <main+0x2ba4>)
 8002c2e:	2101      	movs	r1, #1
 8002c30:	4833      	ldr	r0, [pc, #204]	@ (8002d00 <main+0x2b90>)
 8002c32:	f005 fb50 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 8002c36:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8002c40:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002c44:	461a      	mov	r2, r3
 8002c46:	2101      	movs	r1, #1
 8002c48:	482d      	ldr	r0, [pc, #180]	@ (8002d00 <main+0x2b90>)
 8002c4a:	f005 fb08 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8002c4e:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8002c52:	2301      	movs	r3, #1
 8002c54:	2101      	movs	r1, #1
 8002c56:	482a      	ldr	r0, [pc, #168]	@ (8002d00 <main+0x2b90>)
 8002c58:	f005 fb67 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8002c5c:	f005 fd0e 	bl	800867c <HAL_GetTick>
 8002c60:	4603      	mov	r3, r0
 8002c62:	33fa      	adds	r3, #250	@ 0xfa
 8002c64:	677b      	str	r3, [r7, #116]	@ 0x74
 8002c66:	e222      	b.n	80030ae <main+0x2f3e>

			}
			//3 is entered
			else if (Keypad_Get_Key(&kp, kp_button_3)
 8002c68:	2102      	movs	r1, #2
 8002c6a:	4827      	ldr	r0, [pc, #156]	@ (8002d08 <main+0x2b98>)
 8002c6c:	f005 fc96 	bl	800859c <Keypad_Get_Key>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d052      	beq.n	8002d1c <main+0x2bac>
					&& (current_tick >= general_delay)) {
 8002c76:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002c78:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d34e      	bcc.n	8002d1c <main+0x2bac>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8002c7e:	2300      	movs	r3, #0
 8002c80:	2200      	movs	r2, #0
 8002c82:	2101      	movs	r1, #1
 8002c84:	481e      	ldr	r0, [pc, #120]	@ (8002d00 <main+0x2b90>)
 8002c86:	f005 fb50 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8002c8a:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d827      	bhi.n	8002ce2 <main+0x2b72>
					time_date_buffer[input_index] = '3';
 8002c92:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002c96:	3388      	adds	r3, #136	@ 0x88
 8002c98:	443b      	add	r3, r7
 8002c9a:	2233      	movs	r2, #51	@ 0x33
 8002c9c:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8002ca0:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	3388      	adds	r3, #136	@ 0x88
 8002ca8:	443b      	add	r3, r7
 8002caa:	2200      	movs	r2, #0
 8002cac:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "3");
 8002cb0:	4819      	ldr	r0, [pc, #100]	@ (8002d18 <main+0x2ba8>)
 8002cb2:	f005 fb7d 	bl	80083b0 <Str_Len>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8002cbe:	9300      	str	r3, [sp, #0]
 8002cc0:	4b15      	ldr	r3, [pc, #84]	@ (8002d18 <main+0x2ba8>)
 8002cc2:	2101      	movs	r1, #1
 8002cc4:	480e      	ldr	r0, [pc, #56]	@ (8002d00 <main+0x2b90>)
 8002cc6:	f005 fb06 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 8002cca:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002cce:	3301      	adds	r3, #1
 8002cd0:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8002cd4:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002cd8:	461a      	mov	r2, r3
 8002cda:	2101      	movs	r1, #1
 8002cdc:	4808      	ldr	r0, [pc, #32]	@ (8002d00 <main+0x2b90>)
 8002cde:	f005 fabe 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8002ce2:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	2101      	movs	r1, #1
 8002cea:	4805      	ldr	r0, [pc, #20]	@ (8002d00 <main+0x2b90>)
 8002cec:	f005 fb1d 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8002cf0:	f005 fcc4 	bl	800867c <HAL_GetTick>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	33fa      	adds	r3, #250	@ 0xfa
 8002cf8:	677b      	str	r3, [r7, #116]	@ 0x74
 8002cfa:	e1d8      	b.n	80030ae <main+0x2f3e>
 8002cfc:	0800c3a8 	.word	0x0800c3a8
 8002d00:	2000001c 	.word	0x2000001c
 8002d04:	0800c280 	.word	0x0800c280
 8002d08:	20000000 	.word	0x20000000
 8002d0c:	0800c368 	.word	0x0800c368
 8002d10:	0800c36c 	.word	0x0800c36c
 8002d14:	0800c370 	.word	0x0800c370
 8002d18:	0800c374 	.word	0x0800c374

			}

			//4 is entered
			else if (Keypad_Get_Key(&kp, kp_button_4)
 8002d1c:	2104      	movs	r1, #4
 8002d1e:	48b8      	ldr	r0, [pc, #736]	@ (8003000 <main+0x2e90>)
 8002d20:	f005 fc3c 	bl	800859c <Keypad_Get_Key>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d042      	beq.n	8002db0 <main+0x2c40>
					&& (current_tick >= general_delay)) {
 8002d2a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002d2c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d33e      	bcc.n	8002db0 <main+0x2c40>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8002d32:	2300      	movs	r3, #0
 8002d34:	2200      	movs	r2, #0
 8002d36:	2101      	movs	r1, #1
 8002d38:	48b2      	ldr	r0, [pc, #712]	@ (8003004 <main+0x2e94>)
 8002d3a:	f005 faf6 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8002d3e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d827      	bhi.n	8002d96 <main+0x2c26>
					time_date_buffer[input_index] = '4';
 8002d46:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002d4a:	3388      	adds	r3, #136	@ 0x88
 8002d4c:	443b      	add	r3, r7
 8002d4e:	2234      	movs	r2, #52	@ 0x34
 8002d50:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8002d54:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002d58:	3301      	adds	r3, #1
 8002d5a:	3388      	adds	r3, #136	@ 0x88
 8002d5c:	443b      	add	r3, r7
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "4");
 8002d64:	48a8      	ldr	r0, [pc, #672]	@ (8003008 <main+0x2e98>)
 8002d66:	f005 fb23 	bl	80083b0 <Str_Len>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8002d72:	9300      	str	r3, [sp, #0]
 8002d74:	4ba4      	ldr	r3, [pc, #656]	@ (8003008 <main+0x2e98>)
 8002d76:	2101      	movs	r1, #1
 8002d78:	48a2      	ldr	r0, [pc, #648]	@ (8003004 <main+0x2e94>)
 8002d7a:	f005 faac 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 8002d7e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002d82:	3301      	adds	r3, #1
 8002d84:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8002d88:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	2101      	movs	r1, #1
 8002d90:	489c      	ldr	r0, [pc, #624]	@ (8003004 <main+0x2e94>)
 8002d92:	f005 fa64 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8002d96:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	2101      	movs	r1, #1
 8002d9e:	4899      	ldr	r0, [pc, #612]	@ (8003004 <main+0x2e94>)
 8002da0:	f005 fac3 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8002da4:	f005 fc6a 	bl	800867c <HAL_GetTick>
 8002da8:	4603      	mov	r3, r0
 8002daa:	33fa      	adds	r3, #250	@ 0xfa
 8002dac:	677b      	str	r3, [r7, #116]	@ 0x74
 8002dae:	e17e      	b.n	80030ae <main+0x2f3e>

			}
			//5 is entered
			else if (Keypad_Get_Key(&kp, kp_button_5)
 8002db0:	2105      	movs	r1, #5
 8002db2:	4893      	ldr	r0, [pc, #588]	@ (8003000 <main+0x2e90>)
 8002db4:	f005 fbf2 	bl	800859c <Keypad_Get_Key>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d042      	beq.n	8002e44 <main+0x2cd4>
					&& (current_tick >= general_delay)) {
 8002dbe:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002dc0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d33e      	bcc.n	8002e44 <main+0x2cd4>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	2200      	movs	r2, #0
 8002dca:	2101      	movs	r1, #1
 8002dcc:	488d      	ldr	r0, [pc, #564]	@ (8003004 <main+0x2e94>)
 8002dce:	f005 faac 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8002dd2:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d827      	bhi.n	8002e2a <main+0x2cba>
					time_date_buffer[input_index] = '5';
 8002dda:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002dde:	3388      	adds	r3, #136	@ 0x88
 8002de0:	443b      	add	r3, r7
 8002de2:	2235      	movs	r2, #53	@ 0x35
 8002de4:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8002de8:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002dec:	3301      	adds	r3, #1
 8002dee:	3388      	adds	r3, #136	@ 0x88
 8002df0:	443b      	add	r3, r7
 8002df2:	2200      	movs	r2, #0
 8002df4:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "5");
 8002df8:	4884      	ldr	r0, [pc, #528]	@ (800300c <main+0x2e9c>)
 8002dfa:	f005 fad9 	bl	80083b0 <Str_Len>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8002e06:	9300      	str	r3, [sp, #0]
 8002e08:	4b80      	ldr	r3, [pc, #512]	@ (800300c <main+0x2e9c>)
 8002e0a:	2101      	movs	r1, #1
 8002e0c:	487d      	ldr	r0, [pc, #500]	@ (8003004 <main+0x2e94>)
 8002e0e:	f005 fa62 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 8002e12:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002e16:	3301      	adds	r3, #1
 8002e18:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8002e1c:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002e20:	461a      	mov	r2, r3
 8002e22:	2101      	movs	r1, #1
 8002e24:	4877      	ldr	r0, [pc, #476]	@ (8003004 <main+0x2e94>)
 8002e26:	f005 fa1a 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8002e2a:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8002e2e:	2301      	movs	r3, #1
 8002e30:	2101      	movs	r1, #1
 8002e32:	4874      	ldr	r0, [pc, #464]	@ (8003004 <main+0x2e94>)
 8002e34:	f005 fa79 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8002e38:	f005 fc20 	bl	800867c <HAL_GetTick>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	33fa      	adds	r3, #250	@ 0xfa
 8002e40:	677b      	str	r3, [r7, #116]	@ 0x74
 8002e42:	e134      	b.n	80030ae <main+0x2f3e>

			}

			//6 is entered
			else if (Keypad_Get_Key(&kp, kp_button_6)
 8002e44:	2106      	movs	r1, #6
 8002e46:	486e      	ldr	r0, [pc, #440]	@ (8003000 <main+0x2e90>)
 8002e48:	f005 fba8 	bl	800859c <Keypad_Get_Key>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d042      	beq.n	8002ed8 <main+0x2d68>
					&& (current_tick >= general_delay)) {
 8002e52:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002e54:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d33e      	bcc.n	8002ed8 <main+0x2d68>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	2101      	movs	r1, #1
 8002e60:	4868      	ldr	r0, [pc, #416]	@ (8003004 <main+0x2e94>)
 8002e62:	f005 fa62 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8002e66:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d827      	bhi.n	8002ebe <main+0x2d4e>
					time_date_buffer[input_index] = '6';
 8002e6e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002e72:	3388      	adds	r3, #136	@ 0x88
 8002e74:	443b      	add	r3, r7
 8002e76:	2236      	movs	r2, #54	@ 0x36
 8002e78:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8002e7c:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002e80:	3301      	adds	r3, #1
 8002e82:	3388      	adds	r3, #136	@ 0x88
 8002e84:	443b      	add	r3, r7
 8002e86:	2200      	movs	r2, #0
 8002e88:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "6");
 8002e8c:	4860      	ldr	r0, [pc, #384]	@ (8003010 <main+0x2ea0>)
 8002e8e:	f005 fa8f 	bl	80083b0 <Str_Len>
 8002e92:	4603      	mov	r3, r0
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8002e9a:	9300      	str	r3, [sp, #0]
 8002e9c:	4b5c      	ldr	r3, [pc, #368]	@ (8003010 <main+0x2ea0>)
 8002e9e:	2101      	movs	r1, #1
 8002ea0:	4858      	ldr	r0, [pc, #352]	@ (8003004 <main+0x2e94>)
 8002ea2:	f005 fa18 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 8002ea6:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002eaa:	3301      	adds	r3, #1
 8002eac:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8002eb0:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	2101      	movs	r1, #1
 8002eb8:	4852      	ldr	r0, [pc, #328]	@ (8003004 <main+0x2e94>)
 8002eba:	f005 f9d0 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8002ebe:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	2101      	movs	r1, #1
 8002ec6:	484f      	ldr	r0, [pc, #316]	@ (8003004 <main+0x2e94>)
 8002ec8:	f005 fa2f 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8002ecc:	f005 fbd6 	bl	800867c <HAL_GetTick>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	33fa      	adds	r3, #250	@ 0xfa
 8002ed4:	677b      	str	r3, [r7, #116]	@ 0x74
 8002ed6:	e0ea      	b.n	80030ae <main+0x2f3e>

			}

			//7 is entered
			else if (Keypad_Get_Key(&kp, kp_button_7)
 8002ed8:	2108      	movs	r1, #8
 8002eda:	4849      	ldr	r0, [pc, #292]	@ (8003000 <main+0x2e90>)
 8002edc:	f005 fb5e 	bl	800859c <Keypad_Get_Key>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d042      	beq.n	8002f6c <main+0x2dfc>
					&& (current_tick >= general_delay)) {
 8002ee6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002ee8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d33e      	bcc.n	8002f6c <main+0x2dfc>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8002eee:	2300      	movs	r3, #0
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	2101      	movs	r1, #1
 8002ef4:	4843      	ldr	r0, [pc, #268]	@ (8003004 <main+0x2e94>)
 8002ef6:	f005 fa18 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8002efa:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d827      	bhi.n	8002f52 <main+0x2de2>
					time_date_buffer[input_index] = '7';
 8002f02:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002f06:	3388      	adds	r3, #136	@ 0x88
 8002f08:	443b      	add	r3, r7
 8002f0a:	2237      	movs	r2, #55	@ 0x37
 8002f0c:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8002f10:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002f14:	3301      	adds	r3, #1
 8002f16:	3388      	adds	r3, #136	@ 0x88
 8002f18:	443b      	add	r3, r7
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "7");
 8002f20:	483c      	ldr	r0, [pc, #240]	@ (8003014 <main+0x2ea4>)
 8002f22:	f005 fa45 	bl	80083b0 <Str_Len>
 8002f26:	4603      	mov	r3, r0
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8002f2e:	9300      	str	r3, [sp, #0]
 8002f30:	4b38      	ldr	r3, [pc, #224]	@ (8003014 <main+0x2ea4>)
 8002f32:	2101      	movs	r1, #1
 8002f34:	4833      	ldr	r0, [pc, #204]	@ (8003004 <main+0x2e94>)
 8002f36:	f005 f9ce 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 8002f3a:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002f3e:	3301      	adds	r3, #1
 8002f40:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8002f44:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002f48:	461a      	mov	r2, r3
 8002f4a:	2101      	movs	r1, #1
 8002f4c:	482d      	ldr	r0, [pc, #180]	@ (8003004 <main+0x2e94>)
 8002f4e:	f005 f986 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8002f52:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8002f56:	2301      	movs	r3, #1
 8002f58:	2101      	movs	r1, #1
 8002f5a:	482a      	ldr	r0, [pc, #168]	@ (8003004 <main+0x2e94>)
 8002f5c:	f005 f9e5 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8002f60:	f005 fb8c 	bl	800867c <HAL_GetTick>
 8002f64:	4603      	mov	r3, r0
 8002f66:	33fa      	adds	r3, #250	@ 0xfa
 8002f68:	677b      	str	r3, [r7, #116]	@ 0x74
 8002f6a:	e0a0      	b.n	80030ae <main+0x2f3e>

			}

			//8 is entered
			else if (Keypad_Get_Key(&kp, kp_button_8)
 8002f6c:	2109      	movs	r1, #9
 8002f6e:	4824      	ldr	r0, [pc, #144]	@ (8003000 <main+0x2e90>)
 8002f70:	f005 fb14 	bl	800859c <Keypad_Get_Key>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d050      	beq.n	800301c <main+0x2eac>
					&& (current_tick >= general_delay)) {
 8002f7a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002f7c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d34c      	bcc.n	800301c <main+0x2eac>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8002f82:	2300      	movs	r3, #0
 8002f84:	2200      	movs	r2, #0
 8002f86:	2101      	movs	r1, #1
 8002f88:	481e      	ldr	r0, [pc, #120]	@ (8003004 <main+0x2e94>)
 8002f8a:	f005 f9ce 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8002f8e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d827      	bhi.n	8002fe6 <main+0x2e76>
					time_date_buffer[input_index] = '8';
 8002f96:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002f9a:	3388      	adds	r3, #136	@ 0x88
 8002f9c:	443b      	add	r3, r7
 8002f9e:	2238      	movs	r2, #56	@ 0x38
 8002fa0:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8002fa4:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002fa8:	3301      	adds	r3, #1
 8002faa:	3388      	adds	r3, #136	@ 0x88
 8002fac:	443b      	add	r3, r7
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "8");
 8002fb4:	4818      	ldr	r0, [pc, #96]	@ (8003018 <main+0x2ea8>)
 8002fb6:	f005 f9fb 	bl	80083b0 <Str_Len>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8002fc2:	9300      	str	r3, [sp, #0]
 8002fc4:	4b14      	ldr	r3, [pc, #80]	@ (8003018 <main+0x2ea8>)
 8002fc6:	2101      	movs	r1, #1
 8002fc8:	480e      	ldr	r0, [pc, #56]	@ (8003004 <main+0x2e94>)
 8002fca:	f005 f984 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 8002fce:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8002fd8:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002fdc:	461a      	mov	r2, r3
 8002fde:	2101      	movs	r1, #1
 8002fe0:	4808      	ldr	r0, [pc, #32]	@ (8003004 <main+0x2e94>)
 8002fe2:	f005 f93c 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8002fe6:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8002fea:	2301      	movs	r3, #1
 8002fec:	2101      	movs	r1, #1
 8002fee:	4805      	ldr	r0, [pc, #20]	@ (8003004 <main+0x2e94>)
 8002ff0:	f005 f99b 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8002ff4:	f005 fb42 	bl	800867c <HAL_GetTick>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	33fa      	adds	r3, #250	@ 0xfa
 8002ffc:	677b      	str	r3, [r7, #116]	@ 0x74
 8002ffe:	e056      	b.n	80030ae <main+0x2f3e>
 8003000:	20000000 	.word	0x20000000
 8003004:	2000001c 	.word	0x2000001c
 8003008:	0800c378 	.word	0x0800c378
 800300c:	0800c37c 	.word	0x0800c37c
 8003010:	0800c380 	.word	0x0800c380
 8003014:	0800c384 	.word	0x0800c384
 8003018:	0800c388 	.word	0x0800c388

			}

			//9 is entered
			else if (Keypad_Get_Key(&kp, kp_button_9)
 800301c:	210a      	movs	r1, #10
 800301e:	48ad      	ldr	r0, [pc, #692]	@ (80032d4 <main+0x3164>)
 8003020:	f005 fabc 	bl	800859c <Keypad_Get_Key>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d041      	beq.n	80030ae <main+0x2f3e>
					&& (current_tick >= general_delay)) {
 800302a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800302c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800302e:	429a      	cmp	r2, r3
 8003030:	d33d      	bcc.n	80030ae <main+0x2f3e>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8003032:	2300      	movs	r3, #0
 8003034:	2200      	movs	r2, #0
 8003036:	2101      	movs	r1, #1
 8003038:	48a7      	ldr	r0, [pc, #668]	@ (80032d8 <main+0x3168>)
 800303a:	f005 f976 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 800303e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003042:	2b01      	cmp	r3, #1
 8003044:	d827      	bhi.n	8003096 <main+0x2f26>
					time_date_buffer[input_index] = '9';
 8003046:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800304a:	3388      	adds	r3, #136	@ 0x88
 800304c:	443b      	add	r3, r7
 800304e:	2239      	movs	r2, #57	@ 0x39
 8003050:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8003054:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003058:	3301      	adds	r3, #1
 800305a:	3388      	adds	r3, #136	@ 0x88
 800305c:	443b      	add	r3, r7
 800305e:	2200      	movs	r2, #0
 8003060:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "9");
 8003064:	489d      	ldr	r0, [pc, #628]	@ (80032dc <main+0x316c>)
 8003066:	f005 f9a3 	bl	80083b0 <Str_Len>
 800306a:	4603      	mov	r3, r0
 800306c:	b2db      	uxtb	r3, r3
 800306e:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8003072:	9300      	str	r3, [sp, #0]
 8003074:	4b99      	ldr	r3, [pc, #612]	@ (80032dc <main+0x316c>)
 8003076:	2101      	movs	r1, #1
 8003078:	4897      	ldr	r0, [pc, #604]	@ (80032d8 <main+0x3168>)
 800307a:	f005 f92c 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 800307e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003082:	3301      	adds	r3, #1
 8003084:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8003088:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800308c:	461a      	mov	r2, r3
 800308e:	2101      	movs	r1, #1
 8003090:	4891      	ldr	r0, [pc, #580]	@ (80032d8 <main+0x3168>)
 8003092:	f005 f8e4 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8003096:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 800309a:	2301      	movs	r3, #1
 800309c:	2101      	movs	r1, #1
 800309e:	488e      	ldr	r0, [pc, #568]	@ (80032d8 <main+0x3168>)
 80030a0:	f005 f943 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 80030a4:	f005 faea 	bl	800867c <HAL_GetTick>
 80030a8:	4603      	mov	r3, r0
 80030aa:	33fa      	adds	r3, #250	@ 0xfa
 80030ac:	677b      	str	r3, [r7, #116]	@ 0x74

			}

			//when yes is entered -> check for seconds validity (state 34)
			if (Keypad_Get_Key(&kp, kp_button_yes)
 80030ae:	210f      	movs	r1, #15
 80030b0:	4888      	ldr	r0, [pc, #544]	@ (80032d4 <main+0x3164>)
 80030b2:	f005 fa73 	bl	800859c <Keypad_Get_Key>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d021      	beq.n	8003100 <main+0x2f90>
					&& (current_tick >= general_delay)) {
 80030bc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80030be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d31d      	bcc.n	8003100 <main+0x2f90>

				Alcd_Clear(&lcd);
 80030c4:	4884      	ldr	r0, [pc, #528]	@ (80032d8 <main+0x3168>)
 80030c6:	f005 f91f 	bl	8008308 <Alcd_Clear>

				snprintf(timeString, sizeof(timeString), "%02d", buffer);
 80030ca:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80030ce:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80030d2:	4a83      	ldr	r2, [pc, #524]	@ (80032e0 <main+0x3170>)
 80030d4:	2132      	movs	r1, #50	@ 0x32
 80030d6:	f008 fbeb 	bl	800b8b0 <sniprintf>
				Alcd_PutAt_n(&lcd, 1, 0, timeString, strlen(timeString));
 80030da:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80030de:	4618      	mov	r0, r3
 80030e0:	f7fd f83e 	bl	8000160 <strlen>
 80030e4:	4603      	mov	r3, r0
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80030ec:	9300      	str	r3, [sp, #0]
 80030ee:	4613      	mov	r3, r2
 80030f0:	2200      	movs	r2, #0
 80030f2:	2101      	movs	r1, #1
 80030f4:	4878      	ldr	r0, [pc, #480]	@ (80032d8 <main+0x3168>)
 80030f6:	f005 f8ee 	bl	80082d6 <Alcd_PutAt_n>

				status = 34;
 80030fa:	2322      	movs	r3, #34	@ 0x22
 80030fc:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83

			}

			//
			general_delay = HAL_GetTick() + 250;
 8003100:	f005 fabc 	bl	800867c <HAL_GetTick>
 8003104:	4603      	mov	r3, r0
 8003106:	33fa      	adds	r3, #250	@ 0xfa
 8003108:	677b      	str	r3, [r7, #116]	@ 0x74
		while ((status == 33) && (current_tick >= general_delay)) {
 800310a:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 800310e:	2b21      	cmp	r3, #33	@ 0x21
 8003110:	d17b      	bne.n	800320a <main+0x309a>
 8003112:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003114:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003116:	429a      	cmp	r2, r3
 8003118:	f4bf ac82 	bcs.w	8002a20 <main+0x28b0>
		}

		//seconds validation phase
		while ((status == 34) && (current_tick >= general_delay)) {
 800311c:	e075      	b.n	800320a <main+0x309a>

			//get the current tick number
			current_tick = HAL_GetTick();
 800311e:	f005 faad 	bl	800867c <HAL_GetTick>
 8003122:	67f8      	str	r0, [r7, #124]	@ 0x7c

			Alcd_Clear(&lcd);
 8003124:	486c      	ldr	r0, [pc, #432]	@ (80032d8 <main+0x3168>)
 8003126:	f005 f8ef 	bl	8008308 <Alcd_Clear>

			snprintf(timeString, sizeof(timeString), "%02d", status);
 800312a:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 800312e:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8003132:	4a6b      	ldr	r2, [pc, #428]	@ (80032e0 <main+0x3170>)
 8003134:	2132      	movs	r1, #50	@ 0x32
 8003136:	f008 fbbb 	bl	800b8b0 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 800313a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800313e:	4618      	mov	r0, r3
 8003140:	f7fd f80e 	bl	8000160 <strlen>
 8003144:	4603      	mov	r3, r0
 8003146:	b2db      	uxtb	r3, r3
 8003148:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800314c:	9300      	str	r3, [sp, #0]
 800314e:	4613      	mov	r3, r2
 8003150:	220e      	movs	r2, #14
 8003152:	2100      	movs	r1, #0
 8003154:	4860      	ldr	r0, [pc, #384]	@ (80032d8 <main+0x3168>)
 8003156:	f005 f8be 	bl	80082d6 <Alcd_PutAt_n>

			buffer = atoi(time_date_buffer);
 800315a:	f107 0310 	add.w	r3, r7, #16
 800315e:	4618      	mov	r0, r3
 8003160:	f008 fb1d 	bl	800b79e <atoi>
 8003164:	4603      	mov	r3, r0
 8003166:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

			//check if minutes is within the range 0 to 60
			if (buffer >= 0 && buffer < 61) {
 800316a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800316e:	2b3c      	cmp	r3, #60	@ 0x3c
 8003170:	d818      	bhi.n	80031a4 <main+0x3034>

				//move to the confirmation state
				status = 35;
 8003172:	2323      	movs	r3, #35	@ 0x23
 8003174:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83

				//set the minutes to the value
				CLK.sec = buffer;
 8003178:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800317c:	b2da      	uxtb	r2, r3
 800317e:	4b59      	ldr	r3, [pc, #356]	@ (80032e4 <main+0x3174>)
 8003180:	721a      	strb	r2, [r3, #8]

				input_index = 0;
 8003182:	2300      	movs	r3, #0
 8003184:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8003188:	2300      	movs	r3, #0
 800318a:	2200      	movs	r2, #0
 800318c:	2101      	movs	r1, #1
 800318e:	4852      	ldr	r0, [pc, #328]	@ (80032d8 <main+0x3168>)
 8003190:	f005 f8cb 	bl	800832a <Alcd_Display_Control>
				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8003194:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8003198:	2301      	movs	r3, #1
 800319a:	2101      	movs	r1, #1
 800319c:	484e      	ldr	r0, [pc, #312]	@ (80032d8 <main+0x3168>)
 800319e:	f005 f8c4 	bl	800832a <Alcd_Display_Control>
 80031a2:	e027      	b.n	80031f4 <main+0x3084>
			} else {
				Alcd_PutAt(&lcd, 0, 0, "invalid");
 80031a4:	4850      	ldr	r0, [pc, #320]	@ (80032e8 <main+0x3178>)
 80031a6:	f005 f903 	bl	80083b0 <Str_Len>
 80031aa:	4603      	mov	r3, r0
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	9300      	str	r3, [sp, #0]
 80031b0:	4b4d      	ldr	r3, [pc, #308]	@ (80032e8 <main+0x3178>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	2100      	movs	r1, #0
 80031b6:	4848      	ldr	r0, [pc, #288]	@ (80032d8 <main+0x3168>)
 80031b8:	f005 f88d 	bl	80082d6 <Alcd_PutAt_n>
				delay_flag = 1;
 80031bc:	2301      	movs	r3, #1
 80031be:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85

				input_index = 0;
 80031c2:	2300      	movs	r3, #0
 80031c4:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80031c8:	2300      	movs	r3, #0
 80031ca:	2200      	movs	r2, #0
 80031cc:	2101      	movs	r1, #1
 80031ce:	4842      	ldr	r0, [pc, #264]	@ (80032d8 <main+0x3168>)
 80031d0:	f005 f8ab 	bl	800832a <Alcd_Display_Control>
				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 80031d4:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 80031d8:	2301      	movs	r3, #1
 80031da:	2101      	movs	r1, #1
 80031dc:	483e      	ldr	r0, [pc, #248]	@ (80032d8 <main+0x3168>)
 80031de:	f005 f8a4 	bl	800832a <Alcd_Display_Control>
				//return to entering hours
				status = 33;
 80031e2:	2321      	movs	r3, #33	@ 0x21
 80031e4:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83

				general_delay = HAL_GetTick() + 1000;
 80031e8:	f005 fa48 	bl	800867c <HAL_GetTick>
 80031ec:	4603      	mov	r3, r0
 80031ee:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80031f2:	677b      	str	r3, [r7, #116]	@ 0x74
			}

			//create a delay
			if ((delay_flag == 1) && (current_tick >= general_delay)) {
 80031f4:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d106      	bne.n	800320a <main+0x309a>
 80031fc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80031fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003200:	429a      	cmp	r2, r3
 8003202:	d302      	bcc.n	800320a <main+0x309a>

				delay_flag = 0;
 8003204:	2300      	movs	r3, #0
 8003206:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
		while ((status == 34) && (current_tick >= general_delay)) {
 800320a:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 800320e:	2b22      	cmp	r3, #34	@ 0x22
 8003210:	d156      	bne.n	80032c0 <main+0x3150>
 8003212:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003214:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003216:	429a      	cmp	r2, r3
 8003218:	d281      	bcs.n	800311e <main+0x2fae>
			}

		}

		//time confirmation menu (state 35)
		while ((status == 35) && (current_tick >= general_delay)) {
 800321a:	e051      	b.n	80032c0 <main+0x3150>

			//get the current tick number
			current_tick = HAL_GetTick();
 800321c:	f005 fa2e 	bl	800867c <HAL_GetTick>
 8003220:	67f8      	str	r0, [r7, #124]	@ 0x7c

			Alcd_Clear(&lcd);
 8003222:	482d      	ldr	r0, [pc, #180]	@ (80032d8 <main+0x3168>)
 8003224:	f005 f870 	bl	8008308 <Alcd_Clear>
			Alcd_PutAt(&lcd, 0, 0, "confirm?");
 8003228:	4830      	ldr	r0, [pc, #192]	@ (80032ec <main+0x317c>)
 800322a:	f005 f8c1 	bl	80083b0 <Str_Len>
 800322e:	4603      	mov	r3, r0
 8003230:	b2db      	uxtb	r3, r3
 8003232:	9300      	str	r3, [sp, #0]
 8003234:	4b2d      	ldr	r3, [pc, #180]	@ (80032ec <main+0x317c>)
 8003236:	2200      	movs	r2, #0
 8003238:	2100      	movs	r1, #0
 800323a:	4827      	ldr	r0, [pc, #156]	@ (80032d8 <main+0x3168>)
 800323c:	f005 f84b 	bl	80082d6 <Alcd_PutAt_n>

			snprintf(timeString, sizeof(timeString), "%02d", status);
 8003240:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 8003244:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8003248:	4a25      	ldr	r2, [pc, #148]	@ (80032e0 <main+0x3170>)
 800324a:	2132      	movs	r1, #50	@ 0x32
 800324c:	f008 fb30 	bl	800b8b0 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 8003250:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003254:	4618      	mov	r0, r3
 8003256:	f7fc ff83 	bl	8000160 <strlen>
 800325a:	4603      	mov	r3, r0
 800325c:	b2db      	uxtb	r3, r3
 800325e:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8003262:	9300      	str	r3, [sp, #0]
 8003264:	4613      	mov	r3, r2
 8003266:	220e      	movs	r2, #14
 8003268:	2100      	movs	r1, #0
 800326a:	481b      	ldr	r0, [pc, #108]	@ (80032d8 <main+0x3168>)
 800326c:	f005 f833 	bl	80082d6 <Alcd_PutAt_n>

			//check if any button is pressed
			//check for any keypad input
			Keypad_Refresh(&kp);
 8003270:	4818      	ldr	r0, [pc, #96]	@ (80032d4 <main+0x3164>)
 8003272:	f005 f8f7 	bl	8008464 <Keypad_Refresh>

			//yes is selected
			if (Keypad_Get_Key(&kp, kp_button_yes)
 8003276:	210f      	movs	r1, #15
 8003278:	4816      	ldr	r0, [pc, #88]	@ (80032d4 <main+0x3164>)
 800327a:	f005 f98f 	bl	800859c <Keypad_Get_Key>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d00a      	beq.n	800329a <main+0x312a>
					&& (current_tick >= general_delay)) {
 8003284:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003286:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003288:	429a      	cmp	r2, r3
 800328a:	d306      	bcc.n	800329a <main+0x312a>

				Ds1307_set(&CLK);
 800328c:	4815      	ldr	r0, [pc, #84]	@ (80032e4 <main+0x3174>)
 800328e:	f004 fd52 	bl	8007d36 <Ds1307_set>

				//return to edit menu
				status = 21;
 8003292:	2315      	movs	r3, #21
 8003294:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 8003298:	e00d      	b.n	80032b6 <main+0x3146>

			}

			//back is selected -> back to seconds state
			else if (Keypad_Get_Key(&kp, kp_button_no_back)
 800329a:	210e      	movs	r1, #14
 800329c:	480d      	ldr	r0, [pc, #52]	@ (80032d4 <main+0x3164>)
 800329e:	f005 f97d 	bl	800859c <Keypad_Get_Key>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d006      	beq.n	80032b6 <main+0x3146>
					&& (current_tick >= general_delay)) {
 80032a8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80032aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d302      	bcc.n	80032b6 <main+0x3146>

				status = 33;
 80032b0:	2321      	movs	r3, #33	@ 0x21
 80032b2:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83

			}

			general_delay = HAL_GetTick() + 250;
 80032b6:	f005 f9e1 	bl	800867c <HAL_GetTick>
 80032ba:	4603      	mov	r3, r0
 80032bc:	33fa      	adds	r3, #250	@ 0xfa
 80032be:	677b      	str	r3, [r7, #116]	@ 0x74
		while ((status == 35) && (current_tick >= general_delay)) {
 80032c0:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 80032c4:	2b23      	cmp	r3, #35	@ 0x23
 80032c6:	f040 838c 	bne.w	80039e2 <main+0x3872>
 80032ca:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80032cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d2a4      	bcs.n	800321c <main+0x30ac>
		}

		//date edit menu -> enter day(state 26)
		while ((status == 26) && (current_tick >= general_delay)) {
 80032d2:	e386      	b.n	80039e2 <main+0x3872>
 80032d4:	20000000 	.word	0x20000000
 80032d8:	2000001c 	.word	0x2000001c
 80032dc:	0800c38c 	.word	0x0800c38c
 80032e0:	0800c280 	.word	0x0800c280
 80032e4:	20000150 	.word	0x20000150
 80032e8:	0800c390 	.word	0x0800c390
 80032ec:	0800c3b8 	.word	0x0800c3b8

			//get the current tick number
			current_tick = HAL_GetTick();
 80032f0:	f005 f9c4 	bl	800867c <HAL_GetTick>
 80032f4:	67f8      	str	r0, [r7, #124]	@ 0x7c

			//Alcd_Clear(&lcd);
			Alcd_PutAt(&lcd, 0, 0, "Enter day");
 80032f6:	48b7      	ldr	r0, [pc, #732]	@ (80035d4 <main+0x3464>)
 80032f8:	f005 f85a 	bl	80083b0 <Str_Len>
 80032fc:	4603      	mov	r3, r0
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	9300      	str	r3, [sp, #0]
 8003302:	4bb4      	ldr	r3, [pc, #720]	@ (80035d4 <main+0x3464>)
 8003304:	2200      	movs	r2, #0
 8003306:	2100      	movs	r1, #0
 8003308:	48b3      	ldr	r0, [pc, #716]	@ (80035d8 <main+0x3468>)
 800330a:	f004 ffe4 	bl	80082d6 <Alcd_PutAt_n>

			snprintf(timeString, sizeof(timeString), "%02d", status);
 800330e:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 8003312:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8003316:	4ab1      	ldr	r2, [pc, #708]	@ (80035dc <main+0x346c>)
 8003318:	2132      	movs	r1, #50	@ 0x32
 800331a:	f008 fac9 	bl	800b8b0 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 800331e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003322:	4618      	mov	r0, r3
 8003324:	f7fc ff1c 	bl	8000160 <strlen>
 8003328:	4603      	mov	r3, r0
 800332a:	b2db      	uxtb	r3, r3
 800332c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8003330:	9300      	str	r3, [sp, #0]
 8003332:	4613      	mov	r3, r2
 8003334:	220e      	movs	r2, #14
 8003336:	2100      	movs	r1, #0
 8003338:	48a7      	ldr	r0, [pc, #668]	@ (80035d8 <main+0x3468>)
 800333a:	f004 ffcc 	bl	80082d6 <Alcd_PutAt_n>

			Alcd_CursorAt(&lcd, 1, input_index);
 800333e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003342:	461a      	mov	r2, r3
 8003344:	2101      	movs	r1, #1
 8003346:	48a4      	ldr	r0, [pc, #656]	@ (80035d8 <main+0x3468>)
 8003348:	f004 ff89 	bl	800825e <Alcd_CursorAt>
			Alcd_Display_Control(&lcd, 1, 1, 1);
 800334c:	2301      	movs	r3, #1
 800334e:	2201      	movs	r2, #1
 8003350:	2101      	movs	r1, #1
 8003352:	48a1      	ldr	r0, [pc, #644]	@ (80035d8 <main+0x3468>)
 8003354:	f004 ffe9 	bl	800832a <Alcd_Display_Control>

			//check if any button is pressed
			//check for any keypad input
			Keypad_Refresh(&kp);
 8003358:	48a1      	ldr	r0, [pc, #644]	@ (80035e0 <main+0x3470>)
 800335a:	f005 f883 	bl	8008464 <Keypad_Refresh>

			//if back is entered
			if (Keypad_Get_Key(&kp, kp_button_no_back)
 800335e:	210e      	movs	r1, #14
 8003360:	489f      	ldr	r0, [pc, #636]	@ (80035e0 <main+0x3470>)
 8003362:	f005 f91b 	bl	800859c <Keypad_Get_Key>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d00a      	beq.n	8003382 <main+0x3212>
					&& (current_tick >= general_delay)) {
 800336c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800336e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003370:	429a      	cmp	r2, r3
 8003372:	d306      	bcc.n	8003382 <main+0x3212>

				input_index = 0;
 8003374:	2300      	movs	r3, #0
 8003376:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d

				//back to previous menu
				status = 22;
 800337a:	2316      	movs	r3, #22
 800337c:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 8003380:	e301      	b.n	8003986 <main+0x3816>

			}

			//0 is entered
			else if (Keypad_Get_Key(&kp, kp_button_0)
 8003382:	210d      	movs	r1, #13
 8003384:	4896      	ldr	r0, [pc, #600]	@ (80035e0 <main+0x3470>)
 8003386:	f005 f909 	bl	800859c <Keypad_Get_Key>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d042      	beq.n	8003416 <main+0x32a6>
					&& (current_tick >= general_delay)) {
 8003390:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003392:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003394:	429a      	cmp	r2, r3
 8003396:	d33e      	bcc.n	8003416 <main+0x32a6>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8003398:	2300      	movs	r3, #0
 800339a:	2200      	movs	r2, #0
 800339c:	2101      	movs	r1, #1
 800339e:	488e      	ldr	r0, [pc, #568]	@ (80035d8 <main+0x3468>)
 80033a0:	f004 ffc3 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 80033a4:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d827      	bhi.n	80033fc <main+0x328c>
					time_date_buffer[input_index] = '0';
 80033ac:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80033b0:	3388      	adds	r3, #136	@ 0x88
 80033b2:	443b      	add	r3, r7
 80033b4:	2230      	movs	r2, #48	@ 0x30
 80033b6:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 80033ba:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80033be:	3301      	adds	r3, #1
 80033c0:	3388      	adds	r3, #136	@ 0x88
 80033c2:	443b      	add	r3, r7
 80033c4:	2200      	movs	r2, #0
 80033c6:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "0");
 80033ca:	4886      	ldr	r0, [pc, #536]	@ (80035e4 <main+0x3474>)
 80033cc:	f004 fff0 	bl	80083b0 <Str_Len>
 80033d0:	4603      	mov	r3, r0
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 80033d8:	9300      	str	r3, [sp, #0]
 80033da:	4b82      	ldr	r3, [pc, #520]	@ (80035e4 <main+0x3474>)
 80033dc:	2101      	movs	r1, #1
 80033de:	487e      	ldr	r0, [pc, #504]	@ (80035d8 <main+0x3468>)
 80033e0:	f004 ff79 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 80033e4:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80033e8:	3301      	adds	r3, #1
 80033ea:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 80033ee:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80033f2:	461a      	mov	r2, r3
 80033f4:	2101      	movs	r1, #1
 80033f6:	4878      	ldr	r0, [pc, #480]	@ (80035d8 <main+0x3468>)
 80033f8:	f004 ff31 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 80033fc:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8003400:	2301      	movs	r3, #1
 8003402:	2101      	movs	r1, #1
 8003404:	4874      	ldr	r0, [pc, #464]	@ (80035d8 <main+0x3468>)
 8003406:	f004 ff90 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 800340a:	f005 f937 	bl	800867c <HAL_GetTick>
 800340e:	4603      	mov	r3, r0
 8003410:	33fa      	adds	r3, #250	@ 0xfa
 8003412:	677b      	str	r3, [r7, #116]	@ 0x74
 8003414:	e2b7      	b.n	8003986 <main+0x3816>

			}
			//1 is entered
			else if (Keypad_Get_Key(&kp, kp_button_1)
 8003416:	2100      	movs	r1, #0
 8003418:	4871      	ldr	r0, [pc, #452]	@ (80035e0 <main+0x3470>)
 800341a:	f005 f8bf 	bl	800859c <Keypad_Get_Key>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d042      	beq.n	80034aa <main+0x333a>
					&& (current_tick >= general_delay)) {
 8003424:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003426:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003428:	429a      	cmp	r2, r3
 800342a:	d33e      	bcc.n	80034aa <main+0x333a>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 800342c:	2300      	movs	r3, #0
 800342e:	2200      	movs	r2, #0
 8003430:	2101      	movs	r1, #1
 8003432:	4869      	ldr	r0, [pc, #420]	@ (80035d8 <main+0x3468>)
 8003434:	f004 ff79 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8003438:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800343c:	2b01      	cmp	r3, #1
 800343e:	d827      	bhi.n	8003490 <main+0x3320>
					time_date_buffer[input_index] = '1';
 8003440:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003444:	3388      	adds	r3, #136	@ 0x88
 8003446:	443b      	add	r3, r7
 8003448:	2231      	movs	r2, #49	@ 0x31
 800344a:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 800344e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003452:	3301      	adds	r3, #1
 8003454:	3388      	adds	r3, #136	@ 0x88
 8003456:	443b      	add	r3, r7
 8003458:	2200      	movs	r2, #0
 800345a:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "1");
 800345e:	4862      	ldr	r0, [pc, #392]	@ (80035e8 <main+0x3478>)
 8003460:	f004 ffa6 	bl	80083b0 <Str_Len>
 8003464:	4603      	mov	r3, r0
 8003466:	b2db      	uxtb	r3, r3
 8003468:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 800346c:	9300      	str	r3, [sp, #0]
 800346e:	4b5e      	ldr	r3, [pc, #376]	@ (80035e8 <main+0x3478>)
 8003470:	2101      	movs	r1, #1
 8003472:	4859      	ldr	r0, [pc, #356]	@ (80035d8 <main+0x3468>)
 8003474:	f004 ff2f 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 8003478:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800347c:	3301      	adds	r3, #1
 800347e:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8003482:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003486:	461a      	mov	r2, r3
 8003488:	2101      	movs	r1, #1
 800348a:	4853      	ldr	r0, [pc, #332]	@ (80035d8 <main+0x3468>)
 800348c:	f004 fee7 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8003490:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8003494:	2301      	movs	r3, #1
 8003496:	2101      	movs	r1, #1
 8003498:	484f      	ldr	r0, [pc, #316]	@ (80035d8 <main+0x3468>)
 800349a:	f004 ff46 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 800349e:	f005 f8ed 	bl	800867c <HAL_GetTick>
 80034a2:	4603      	mov	r3, r0
 80034a4:	33fa      	adds	r3, #250	@ 0xfa
 80034a6:	677b      	str	r3, [r7, #116]	@ 0x74
 80034a8:	e26d      	b.n	8003986 <main+0x3816>

			}
			//2 is entered
			else if (Keypad_Get_Key(&kp, kp_button_2)
 80034aa:	2101      	movs	r1, #1
 80034ac:	484c      	ldr	r0, [pc, #304]	@ (80035e0 <main+0x3470>)
 80034ae:	f005 f875 	bl	800859c <Keypad_Get_Key>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d042      	beq.n	800353e <main+0x33ce>
					&& (current_tick >= general_delay)) {
 80034b8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80034ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034bc:	429a      	cmp	r2, r3
 80034be:	d33e      	bcc.n	800353e <main+0x33ce>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80034c0:	2300      	movs	r3, #0
 80034c2:	2200      	movs	r2, #0
 80034c4:	2101      	movs	r1, #1
 80034c6:	4844      	ldr	r0, [pc, #272]	@ (80035d8 <main+0x3468>)
 80034c8:	f004 ff2f 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 80034cc:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d827      	bhi.n	8003524 <main+0x33b4>
					time_date_buffer[input_index] = '2';
 80034d4:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80034d8:	3388      	adds	r3, #136	@ 0x88
 80034da:	443b      	add	r3, r7
 80034dc:	2232      	movs	r2, #50	@ 0x32
 80034de:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 80034e2:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80034e6:	3301      	adds	r3, #1
 80034e8:	3388      	adds	r3, #136	@ 0x88
 80034ea:	443b      	add	r3, r7
 80034ec:	2200      	movs	r2, #0
 80034ee:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "2");
 80034f2:	483e      	ldr	r0, [pc, #248]	@ (80035ec <main+0x347c>)
 80034f4:	f004 ff5c 	bl	80083b0 <Str_Len>
 80034f8:	4603      	mov	r3, r0
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8003500:	9300      	str	r3, [sp, #0]
 8003502:	4b3a      	ldr	r3, [pc, #232]	@ (80035ec <main+0x347c>)
 8003504:	2101      	movs	r1, #1
 8003506:	4834      	ldr	r0, [pc, #208]	@ (80035d8 <main+0x3468>)
 8003508:	f004 fee5 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 800350c:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003510:	3301      	adds	r3, #1
 8003512:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8003516:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800351a:	461a      	mov	r2, r3
 800351c:	2101      	movs	r1, #1
 800351e:	482e      	ldr	r0, [pc, #184]	@ (80035d8 <main+0x3468>)
 8003520:	f004 fe9d 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8003524:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8003528:	2301      	movs	r3, #1
 800352a:	2101      	movs	r1, #1
 800352c:	482a      	ldr	r0, [pc, #168]	@ (80035d8 <main+0x3468>)
 800352e:	f004 fefc 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8003532:	f005 f8a3 	bl	800867c <HAL_GetTick>
 8003536:	4603      	mov	r3, r0
 8003538:	33fa      	adds	r3, #250	@ 0xfa
 800353a:	677b      	str	r3, [r7, #116]	@ 0x74
 800353c:	e223      	b.n	8003986 <main+0x3816>

			}
			//3 is entered
			else if (Keypad_Get_Key(&kp, kp_button_3)
 800353e:	2102      	movs	r1, #2
 8003540:	4827      	ldr	r0, [pc, #156]	@ (80035e0 <main+0x3470>)
 8003542:	f005 f82b 	bl	800859c <Keypad_Get_Key>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d053      	beq.n	80035f4 <main+0x3484>
					&& (current_tick >= general_delay)) {
 800354c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800354e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003550:	429a      	cmp	r2, r3
 8003552:	d34f      	bcc.n	80035f4 <main+0x3484>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8003554:	2300      	movs	r3, #0
 8003556:	2200      	movs	r2, #0
 8003558:	2101      	movs	r1, #1
 800355a:	481f      	ldr	r0, [pc, #124]	@ (80035d8 <main+0x3468>)
 800355c:	f004 fee5 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8003560:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003564:	2b01      	cmp	r3, #1
 8003566:	d827      	bhi.n	80035b8 <main+0x3448>
					time_date_buffer[input_index] = '3';
 8003568:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800356c:	3388      	adds	r3, #136	@ 0x88
 800356e:	443b      	add	r3, r7
 8003570:	2233      	movs	r2, #51	@ 0x33
 8003572:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8003576:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800357a:	3301      	adds	r3, #1
 800357c:	3388      	adds	r3, #136	@ 0x88
 800357e:	443b      	add	r3, r7
 8003580:	2200      	movs	r2, #0
 8003582:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "3");
 8003586:	481a      	ldr	r0, [pc, #104]	@ (80035f0 <main+0x3480>)
 8003588:	f004 ff12 	bl	80083b0 <Str_Len>
 800358c:	4603      	mov	r3, r0
 800358e:	b2db      	uxtb	r3, r3
 8003590:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8003594:	9300      	str	r3, [sp, #0]
 8003596:	4b16      	ldr	r3, [pc, #88]	@ (80035f0 <main+0x3480>)
 8003598:	2101      	movs	r1, #1
 800359a:	480f      	ldr	r0, [pc, #60]	@ (80035d8 <main+0x3468>)
 800359c:	f004 fe9b 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 80035a0:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80035a4:	3301      	adds	r3, #1
 80035a6:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 80035aa:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80035ae:	461a      	mov	r2, r3
 80035b0:	2101      	movs	r1, #1
 80035b2:	4809      	ldr	r0, [pc, #36]	@ (80035d8 <main+0x3468>)
 80035b4:	f004 fe53 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 80035b8:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 80035bc:	2301      	movs	r3, #1
 80035be:	2101      	movs	r1, #1
 80035c0:	4805      	ldr	r0, [pc, #20]	@ (80035d8 <main+0x3468>)
 80035c2:	f004 feb2 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 80035c6:	f005 f859 	bl	800867c <HAL_GetTick>
 80035ca:	4603      	mov	r3, r0
 80035cc:	33fa      	adds	r3, #250	@ 0xfa
 80035ce:	677b      	str	r3, [r7, #116]	@ 0x74
 80035d0:	e1d9      	b.n	8003986 <main+0x3816>
 80035d2:	bf00      	nop
 80035d4:	0800c3c4 	.word	0x0800c3c4
 80035d8:	2000001c 	.word	0x2000001c
 80035dc:	0800c280 	.word	0x0800c280
 80035e0:	20000000 	.word	0x20000000
 80035e4:	0800c368 	.word	0x0800c368
 80035e8:	0800c36c 	.word	0x0800c36c
 80035ec:	0800c370 	.word	0x0800c370
 80035f0:	0800c374 	.word	0x0800c374

			}

			//4 is entered
			else if (Keypad_Get_Key(&kp, kp_button_4)
 80035f4:	2104      	movs	r1, #4
 80035f6:	48b8      	ldr	r0, [pc, #736]	@ (80038d8 <main+0x3768>)
 80035f8:	f004 ffd0 	bl	800859c <Keypad_Get_Key>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d042      	beq.n	8003688 <main+0x3518>
					&& (current_tick >= general_delay)) {
 8003602:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003604:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003606:	429a      	cmp	r2, r3
 8003608:	d33e      	bcc.n	8003688 <main+0x3518>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 800360a:	2300      	movs	r3, #0
 800360c:	2200      	movs	r2, #0
 800360e:	2101      	movs	r1, #1
 8003610:	48b2      	ldr	r0, [pc, #712]	@ (80038dc <main+0x376c>)
 8003612:	f004 fe8a 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8003616:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800361a:	2b01      	cmp	r3, #1
 800361c:	d827      	bhi.n	800366e <main+0x34fe>
					time_date_buffer[input_index] = '4';
 800361e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003622:	3388      	adds	r3, #136	@ 0x88
 8003624:	443b      	add	r3, r7
 8003626:	2234      	movs	r2, #52	@ 0x34
 8003628:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 800362c:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003630:	3301      	adds	r3, #1
 8003632:	3388      	adds	r3, #136	@ 0x88
 8003634:	443b      	add	r3, r7
 8003636:	2200      	movs	r2, #0
 8003638:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "4");
 800363c:	48a8      	ldr	r0, [pc, #672]	@ (80038e0 <main+0x3770>)
 800363e:	f004 feb7 	bl	80083b0 <Str_Len>
 8003642:	4603      	mov	r3, r0
 8003644:	b2db      	uxtb	r3, r3
 8003646:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 800364a:	9300      	str	r3, [sp, #0]
 800364c:	4ba4      	ldr	r3, [pc, #656]	@ (80038e0 <main+0x3770>)
 800364e:	2101      	movs	r1, #1
 8003650:	48a2      	ldr	r0, [pc, #648]	@ (80038dc <main+0x376c>)
 8003652:	f004 fe40 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 8003656:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800365a:	3301      	adds	r3, #1
 800365c:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8003660:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003664:	461a      	mov	r2, r3
 8003666:	2101      	movs	r1, #1
 8003668:	489c      	ldr	r0, [pc, #624]	@ (80038dc <main+0x376c>)
 800366a:	f004 fdf8 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 800366e:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8003672:	2301      	movs	r3, #1
 8003674:	2101      	movs	r1, #1
 8003676:	4899      	ldr	r0, [pc, #612]	@ (80038dc <main+0x376c>)
 8003678:	f004 fe57 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 800367c:	f004 fffe 	bl	800867c <HAL_GetTick>
 8003680:	4603      	mov	r3, r0
 8003682:	33fa      	adds	r3, #250	@ 0xfa
 8003684:	677b      	str	r3, [r7, #116]	@ 0x74
 8003686:	e17e      	b.n	8003986 <main+0x3816>

			}
			//5 is entered
			else if (Keypad_Get_Key(&kp, kp_button_5)
 8003688:	2105      	movs	r1, #5
 800368a:	4893      	ldr	r0, [pc, #588]	@ (80038d8 <main+0x3768>)
 800368c:	f004 ff86 	bl	800859c <Keypad_Get_Key>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d042      	beq.n	800371c <main+0x35ac>
					&& (current_tick >= general_delay)) {
 8003696:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003698:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800369a:	429a      	cmp	r2, r3
 800369c:	d33e      	bcc.n	800371c <main+0x35ac>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 800369e:	2300      	movs	r3, #0
 80036a0:	2200      	movs	r2, #0
 80036a2:	2101      	movs	r1, #1
 80036a4:	488d      	ldr	r0, [pc, #564]	@ (80038dc <main+0x376c>)
 80036a6:	f004 fe40 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 80036aa:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d827      	bhi.n	8003702 <main+0x3592>
					time_date_buffer[input_index] = '5';
 80036b2:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80036b6:	3388      	adds	r3, #136	@ 0x88
 80036b8:	443b      	add	r3, r7
 80036ba:	2235      	movs	r2, #53	@ 0x35
 80036bc:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 80036c0:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80036c4:	3301      	adds	r3, #1
 80036c6:	3388      	adds	r3, #136	@ 0x88
 80036c8:	443b      	add	r3, r7
 80036ca:	2200      	movs	r2, #0
 80036cc:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "5");
 80036d0:	4884      	ldr	r0, [pc, #528]	@ (80038e4 <main+0x3774>)
 80036d2:	f004 fe6d 	bl	80083b0 <Str_Len>
 80036d6:	4603      	mov	r3, r0
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 80036de:	9300      	str	r3, [sp, #0]
 80036e0:	4b80      	ldr	r3, [pc, #512]	@ (80038e4 <main+0x3774>)
 80036e2:	2101      	movs	r1, #1
 80036e4:	487d      	ldr	r0, [pc, #500]	@ (80038dc <main+0x376c>)
 80036e6:	f004 fdf6 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 80036ea:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80036ee:	3301      	adds	r3, #1
 80036f0:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 80036f4:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80036f8:	461a      	mov	r2, r3
 80036fa:	2101      	movs	r1, #1
 80036fc:	4877      	ldr	r0, [pc, #476]	@ (80038dc <main+0x376c>)
 80036fe:	f004 fdae 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8003702:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8003706:	2301      	movs	r3, #1
 8003708:	2101      	movs	r1, #1
 800370a:	4874      	ldr	r0, [pc, #464]	@ (80038dc <main+0x376c>)
 800370c:	f004 fe0d 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8003710:	f004 ffb4 	bl	800867c <HAL_GetTick>
 8003714:	4603      	mov	r3, r0
 8003716:	33fa      	adds	r3, #250	@ 0xfa
 8003718:	677b      	str	r3, [r7, #116]	@ 0x74
 800371a:	e134      	b.n	8003986 <main+0x3816>

			}

			//6 is entered
			else if (Keypad_Get_Key(&kp, kp_button_6)
 800371c:	2106      	movs	r1, #6
 800371e:	486e      	ldr	r0, [pc, #440]	@ (80038d8 <main+0x3768>)
 8003720:	f004 ff3c 	bl	800859c <Keypad_Get_Key>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d042      	beq.n	80037b0 <main+0x3640>
					&& (current_tick >= general_delay)) {
 800372a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800372c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800372e:	429a      	cmp	r2, r3
 8003730:	d33e      	bcc.n	80037b0 <main+0x3640>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8003732:	2300      	movs	r3, #0
 8003734:	2200      	movs	r2, #0
 8003736:	2101      	movs	r1, #1
 8003738:	4868      	ldr	r0, [pc, #416]	@ (80038dc <main+0x376c>)
 800373a:	f004 fdf6 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 800373e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003742:	2b01      	cmp	r3, #1
 8003744:	d827      	bhi.n	8003796 <main+0x3626>
					time_date_buffer[input_index] = '6';
 8003746:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800374a:	3388      	adds	r3, #136	@ 0x88
 800374c:	443b      	add	r3, r7
 800374e:	2236      	movs	r2, #54	@ 0x36
 8003750:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8003754:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003758:	3301      	adds	r3, #1
 800375a:	3388      	adds	r3, #136	@ 0x88
 800375c:	443b      	add	r3, r7
 800375e:	2200      	movs	r2, #0
 8003760:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "6");
 8003764:	4860      	ldr	r0, [pc, #384]	@ (80038e8 <main+0x3778>)
 8003766:	f004 fe23 	bl	80083b0 <Str_Len>
 800376a:	4603      	mov	r3, r0
 800376c:	b2db      	uxtb	r3, r3
 800376e:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8003772:	9300      	str	r3, [sp, #0]
 8003774:	4b5c      	ldr	r3, [pc, #368]	@ (80038e8 <main+0x3778>)
 8003776:	2101      	movs	r1, #1
 8003778:	4858      	ldr	r0, [pc, #352]	@ (80038dc <main+0x376c>)
 800377a:	f004 fdac 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 800377e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003782:	3301      	adds	r3, #1
 8003784:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8003788:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800378c:	461a      	mov	r2, r3
 800378e:	2101      	movs	r1, #1
 8003790:	4852      	ldr	r0, [pc, #328]	@ (80038dc <main+0x376c>)
 8003792:	f004 fd64 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8003796:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 800379a:	2301      	movs	r3, #1
 800379c:	2101      	movs	r1, #1
 800379e:	484f      	ldr	r0, [pc, #316]	@ (80038dc <main+0x376c>)
 80037a0:	f004 fdc3 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 80037a4:	f004 ff6a 	bl	800867c <HAL_GetTick>
 80037a8:	4603      	mov	r3, r0
 80037aa:	33fa      	adds	r3, #250	@ 0xfa
 80037ac:	677b      	str	r3, [r7, #116]	@ 0x74
 80037ae:	e0ea      	b.n	8003986 <main+0x3816>

			}

			//7 is entered
			else if (Keypad_Get_Key(&kp, kp_button_7)
 80037b0:	2108      	movs	r1, #8
 80037b2:	4849      	ldr	r0, [pc, #292]	@ (80038d8 <main+0x3768>)
 80037b4:	f004 fef2 	bl	800859c <Keypad_Get_Key>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d042      	beq.n	8003844 <main+0x36d4>
					&& (current_tick >= general_delay)) {
 80037be:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80037c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d33e      	bcc.n	8003844 <main+0x36d4>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80037c6:	2300      	movs	r3, #0
 80037c8:	2200      	movs	r2, #0
 80037ca:	2101      	movs	r1, #1
 80037cc:	4843      	ldr	r0, [pc, #268]	@ (80038dc <main+0x376c>)
 80037ce:	f004 fdac 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 80037d2:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d827      	bhi.n	800382a <main+0x36ba>
					time_date_buffer[input_index] = '7';
 80037da:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80037de:	3388      	adds	r3, #136	@ 0x88
 80037e0:	443b      	add	r3, r7
 80037e2:	2237      	movs	r2, #55	@ 0x37
 80037e4:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 80037e8:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80037ec:	3301      	adds	r3, #1
 80037ee:	3388      	adds	r3, #136	@ 0x88
 80037f0:	443b      	add	r3, r7
 80037f2:	2200      	movs	r2, #0
 80037f4:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "7");
 80037f8:	483c      	ldr	r0, [pc, #240]	@ (80038ec <main+0x377c>)
 80037fa:	f004 fdd9 	bl	80083b0 <Str_Len>
 80037fe:	4603      	mov	r3, r0
 8003800:	b2db      	uxtb	r3, r3
 8003802:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8003806:	9300      	str	r3, [sp, #0]
 8003808:	4b38      	ldr	r3, [pc, #224]	@ (80038ec <main+0x377c>)
 800380a:	2101      	movs	r1, #1
 800380c:	4833      	ldr	r0, [pc, #204]	@ (80038dc <main+0x376c>)
 800380e:	f004 fd62 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 8003812:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003816:	3301      	adds	r3, #1
 8003818:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 800381c:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003820:	461a      	mov	r2, r3
 8003822:	2101      	movs	r1, #1
 8003824:	482d      	ldr	r0, [pc, #180]	@ (80038dc <main+0x376c>)
 8003826:	f004 fd1a 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 800382a:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 800382e:	2301      	movs	r3, #1
 8003830:	2101      	movs	r1, #1
 8003832:	482a      	ldr	r0, [pc, #168]	@ (80038dc <main+0x376c>)
 8003834:	f004 fd79 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8003838:	f004 ff20 	bl	800867c <HAL_GetTick>
 800383c:	4603      	mov	r3, r0
 800383e:	33fa      	adds	r3, #250	@ 0xfa
 8003840:	677b      	str	r3, [r7, #116]	@ 0x74
 8003842:	e0a0      	b.n	8003986 <main+0x3816>

			}

			//8 is entered
			else if (Keypad_Get_Key(&kp, kp_button_8)
 8003844:	2109      	movs	r1, #9
 8003846:	4824      	ldr	r0, [pc, #144]	@ (80038d8 <main+0x3768>)
 8003848:	f004 fea8 	bl	800859c <Keypad_Get_Key>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d050      	beq.n	80038f4 <main+0x3784>
					&& (current_tick >= general_delay)) {
 8003852:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003854:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003856:	429a      	cmp	r2, r3
 8003858:	d34c      	bcc.n	80038f4 <main+0x3784>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 800385a:	2300      	movs	r3, #0
 800385c:	2200      	movs	r2, #0
 800385e:	2101      	movs	r1, #1
 8003860:	481e      	ldr	r0, [pc, #120]	@ (80038dc <main+0x376c>)
 8003862:	f004 fd62 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8003866:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800386a:	2b01      	cmp	r3, #1
 800386c:	d827      	bhi.n	80038be <main+0x374e>
					time_date_buffer[input_index] = '8';
 800386e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003872:	3388      	adds	r3, #136	@ 0x88
 8003874:	443b      	add	r3, r7
 8003876:	2238      	movs	r2, #56	@ 0x38
 8003878:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 800387c:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003880:	3301      	adds	r3, #1
 8003882:	3388      	adds	r3, #136	@ 0x88
 8003884:	443b      	add	r3, r7
 8003886:	2200      	movs	r2, #0
 8003888:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "8");
 800388c:	4818      	ldr	r0, [pc, #96]	@ (80038f0 <main+0x3780>)
 800388e:	f004 fd8f 	bl	80083b0 <Str_Len>
 8003892:	4603      	mov	r3, r0
 8003894:	b2db      	uxtb	r3, r3
 8003896:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 800389a:	9300      	str	r3, [sp, #0]
 800389c:	4b14      	ldr	r3, [pc, #80]	@ (80038f0 <main+0x3780>)
 800389e:	2101      	movs	r1, #1
 80038a0:	480e      	ldr	r0, [pc, #56]	@ (80038dc <main+0x376c>)
 80038a2:	f004 fd18 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 80038a6:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80038aa:	3301      	adds	r3, #1
 80038ac:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 80038b0:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80038b4:	461a      	mov	r2, r3
 80038b6:	2101      	movs	r1, #1
 80038b8:	4808      	ldr	r0, [pc, #32]	@ (80038dc <main+0x376c>)
 80038ba:	f004 fcd0 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 80038be:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 80038c2:	2301      	movs	r3, #1
 80038c4:	2101      	movs	r1, #1
 80038c6:	4805      	ldr	r0, [pc, #20]	@ (80038dc <main+0x376c>)
 80038c8:	f004 fd2f 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 80038cc:	f004 fed6 	bl	800867c <HAL_GetTick>
 80038d0:	4603      	mov	r3, r0
 80038d2:	33fa      	adds	r3, #250	@ 0xfa
 80038d4:	677b      	str	r3, [r7, #116]	@ 0x74
 80038d6:	e056      	b.n	8003986 <main+0x3816>
 80038d8:	20000000 	.word	0x20000000
 80038dc:	2000001c 	.word	0x2000001c
 80038e0:	0800c378 	.word	0x0800c378
 80038e4:	0800c37c 	.word	0x0800c37c
 80038e8:	0800c380 	.word	0x0800c380
 80038ec:	0800c384 	.word	0x0800c384
 80038f0:	0800c388 	.word	0x0800c388

			}

			//9 is entered
			else if (Keypad_Get_Key(&kp, kp_button_9)
 80038f4:	210a      	movs	r1, #10
 80038f6:	48a7      	ldr	r0, [pc, #668]	@ (8003b94 <main+0x3a24>)
 80038f8:	f004 fe50 	bl	800859c <Keypad_Get_Key>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d041      	beq.n	8003986 <main+0x3816>
					&& (current_tick >= general_delay)) {
 8003902:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003904:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003906:	429a      	cmp	r2, r3
 8003908:	d33d      	bcc.n	8003986 <main+0x3816>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 800390a:	2300      	movs	r3, #0
 800390c:	2200      	movs	r2, #0
 800390e:	2101      	movs	r1, #1
 8003910:	48a1      	ldr	r0, [pc, #644]	@ (8003b98 <main+0x3a28>)
 8003912:	f004 fd0a 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8003916:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800391a:	2b01      	cmp	r3, #1
 800391c:	d827      	bhi.n	800396e <main+0x37fe>
					time_date_buffer[input_index] = '9';
 800391e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003922:	3388      	adds	r3, #136	@ 0x88
 8003924:	443b      	add	r3, r7
 8003926:	2239      	movs	r2, #57	@ 0x39
 8003928:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 800392c:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003930:	3301      	adds	r3, #1
 8003932:	3388      	adds	r3, #136	@ 0x88
 8003934:	443b      	add	r3, r7
 8003936:	2200      	movs	r2, #0
 8003938:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "9");
 800393c:	4897      	ldr	r0, [pc, #604]	@ (8003b9c <main+0x3a2c>)
 800393e:	f004 fd37 	bl	80083b0 <Str_Len>
 8003942:	4603      	mov	r3, r0
 8003944:	b2db      	uxtb	r3, r3
 8003946:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 800394a:	9300      	str	r3, [sp, #0]
 800394c:	4b93      	ldr	r3, [pc, #588]	@ (8003b9c <main+0x3a2c>)
 800394e:	2101      	movs	r1, #1
 8003950:	4891      	ldr	r0, [pc, #580]	@ (8003b98 <main+0x3a28>)
 8003952:	f004 fcc0 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 8003956:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800395a:	3301      	adds	r3, #1
 800395c:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8003960:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003964:	461a      	mov	r2, r3
 8003966:	2101      	movs	r1, #1
 8003968:	488b      	ldr	r0, [pc, #556]	@ (8003b98 <main+0x3a28>)
 800396a:	f004 fc78 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 800396e:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8003972:	2301      	movs	r3, #1
 8003974:	2101      	movs	r1, #1
 8003976:	4888      	ldr	r0, [pc, #544]	@ (8003b98 <main+0x3a28>)
 8003978:	f004 fcd7 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 800397c:	f004 fe7e 	bl	800867c <HAL_GetTick>
 8003980:	4603      	mov	r3, r0
 8003982:	33fa      	adds	r3, #250	@ 0xfa
 8003984:	677b      	str	r3, [r7, #116]	@ 0x74

			}

			//when yes is entered -> check for day validation (state 36)
			if (Keypad_Get_Key(&kp, kp_button_yes)
 8003986:	210f      	movs	r1, #15
 8003988:	4882      	ldr	r0, [pc, #520]	@ (8003b94 <main+0x3a24>)
 800398a:	f004 fe07 	bl	800859c <Keypad_Get_Key>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d021      	beq.n	80039d8 <main+0x3868>
					&& (current_tick >= general_delay)) {
 8003994:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003996:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003998:	429a      	cmp	r2, r3
 800399a:	d31d      	bcc.n	80039d8 <main+0x3868>

				Alcd_Clear(&lcd);
 800399c:	487e      	ldr	r0, [pc, #504]	@ (8003b98 <main+0x3a28>)
 800399e:	f004 fcb3 	bl	8008308 <Alcd_Clear>

				snprintf(timeString, sizeof(timeString), "%02d", buffer);
 80039a2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80039a6:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80039aa:	4a7d      	ldr	r2, [pc, #500]	@ (8003ba0 <main+0x3a30>)
 80039ac:	2132      	movs	r1, #50	@ 0x32
 80039ae:	f007 ff7f 	bl	800b8b0 <sniprintf>
				Alcd_PutAt_n(&lcd, 1, 0, timeString, strlen(timeString));
 80039b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7fc fbd2 	bl	8000160 <strlen>
 80039bc:	4603      	mov	r3, r0
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80039c4:	9300      	str	r3, [sp, #0]
 80039c6:	4613      	mov	r3, r2
 80039c8:	2200      	movs	r2, #0
 80039ca:	2101      	movs	r1, #1
 80039cc:	4872      	ldr	r0, [pc, #456]	@ (8003b98 <main+0x3a28>)
 80039ce:	f004 fc82 	bl	80082d6 <Alcd_PutAt_n>

				status = 36;
 80039d2:	2324      	movs	r3, #36	@ 0x24
 80039d4:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83

			}

			//
			general_delay = HAL_GetTick() + 250;
 80039d8:	f004 fe50 	bl	800867c <HAL_GetTick>
 80039dc:	4603      	mov	r3, r0
 80039de:	33fa      	adds	r3, #250	@ 0xfa
 80039e0:	677b      	str	r3, [r7, #116]	@ 0x74
		while ((status == 26) && (current_tick >= general_delay)) {
 80039e2:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 80039e6:	2b1a      	cmp	r3, #26
 80039e8:	d17f      	bne.n	8003aea <main+0x397a>
 80039ea:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80039ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039ee:	429a      	cmp	r2, r3
 80039f0:	f4bf ac7e 	bcs.w	80032f0 <main+0x3180>
		}

		//date validation phase
		while ((status == 36) && (current_tick >= general_delay)) {
 80039f4:	e079      	b.n	8003aea <main+0x397a>

			//get the current tick number
			current_tick = HAL_GetTick();
 80039f6:	f004 fe41 	bl	800867c <HAL_GetTick>
 80039fa:	67f8      	str	r0, [r7, #124]	@ 0x7c

			Alcd_Clear(&lcd);
 80039fc:	4866      	ldr	r0, [pc, #408]	@ (8003b98 <main+0x3a28>)
 80039fe:	f004 fc83 	bl	8008308 <Alcd_Clear>

			snprintf(timeString, sizeof(timeString), "%02d", status);
 8003a02:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 8003a06:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8003a0a:	4a65      	ldr	r2, [pc, #404]	@ (8003ba0 <main+0x3a30>)
 8003a0c:	2132      	movs	r1, #50	@ 0x32
 8003a0e:	f007 ff4f 	bl	800b8b0 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 8003a12:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7fc fba2 	bl	8000160 <strlen>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8003a24:	9300      	str	r3, [sp, #0]
 8003a26:	4613      	mov	r3, r2
 8003a28:	220e      	movs	r2, #14
 8003a2a:	2100      	movs	r1, #0
 8003a2c:	485a      	ldr	r0, [pc, #360]	@ (8003b98 <main+0x3a28>)
 8003a2e:	f004 fc52 	bl	80082d6 <Alcd_PutAt_n>

			buffer = atoi(time_date_buffer);
 8003a32:	f107 0310 	add.w	r3, r7, #16
 8003a36:	4618      	mov	r0, r3
 8003a38:	f007 feb1 	bl	800b79e <atoi>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

			//check if day is within the range 1 to 31
			if (buffer > 0 && buffer < 32) {
 8003a42:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d01c      	beq.n	8003a84 <main+0x3914>
 8003a4a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003a4e:	2b1f      	cmp	r3, #31
 8003a50:	d818      	bhi.n	8003a84 <main+0x3914>

				//move to the month state
				status = 37;
 8003a52:	2325      	movs	r3, #37	@ 0x25
 8003a54:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83

				//set the day value
				CLK.date = buffer;
 8003a58:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003a5c:	b2da      	uxtb	r2, r3
 8003a5e:	4b51      	ldr	r3, [pc, #324]	@ (8003ba4 <main+0x3a34>)
 8003a60:	731a      	strb	r2, [r3, #12]

				input_index = 0;
 8003a62:	2300      	movs	r3, #0
 8003a64:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8003a68:	2300      	movs	r3, #0
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	2101      	movs	r1, #1
 8003a6e:	484a      	ldr	r0, [pc, #296]	@ (8003b98 <main+0x3a28>)
 8003a70:	f004 fc5b 	bl	800832a <Alcd_Display_Control>
				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8003a74:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8003a78:	2301      	movs	r3, #1
 8003a7a:	2101      	movs	r1, #1
 8003a7c:	4846      	ldr	r0, [pc, #280]	@ (8003b98 <main+0x3a28>)
 8003a7e:	f004 fc54 	bl	800832a <Alcd_Display_Control>
 8003a82:	e027      	b.n	8003ad4 <main+0x3964>
			} else {
				Alcd_PutAt(&lcd, 0, 0, "invalid");
 8003a84:	4848      	ldr	r0, [pc, #288]	@ (8003ba8 <main+0x3a38>)
 8003a86:	f004 fc93 	bl	80083b0 <Str_Len>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	9300      	str	r3, [sp, #0]
 8003a90:	4b45      	ldr	r3, [pc, #276]	@ (8003ba8 <main+0x3a38>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	2100      	movs	r1, #0
 8003a96:	4840      	ldr	r0, [pc, #256]	@ (8003b98 <main+0x3a28>)
 8003a98:	f004 fc1d 	bl	80082d6 <Alcd_PutAt_n>
				delay_flag = 1;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85

				input_index = 0;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	2200      	movs	r2, #0
 8003aac:	2101      	movs	r1, #1
 8003aae:	483a      	ldr	r0, [pc, #232]	@ (8003b98 <main+0x3a28>)
 8003ab0:	f004 fc3b 	bl	800832a <Alcd_Display_Control>
				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8003ab4:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8003ab8:	2301      	movs	r3, #1
 8003aba:	2101      	movs	r1, #1
 8003abc:	4836      	ldr	r0, [pc, #216]	@ (8003b98 <main+0x3a28>)
 8003abe:	f004 fc34 	bl	800832a <Alcd_Display_Control>
				//return to entering day
				status = 26;
 8003ac2:	231a      	movs	r3, #26
 8003ac4:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83

				general_delay = HAL_GetTick() + 1000;
 8003ac8:	f004 fdd8 	bl	800867c <HAL_GetTick>
 8003acc:	4603      	mov	r3, r0
 8003ace:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8003ad2:	677b      	str	r3, [r7, #116]	@ 0x74
			}

			//create a delay
			if ((delay_flag == 1) && (current_tick >= general_delay)) {
 8003ad4:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d106      	bne.n	8003aea <main+0x397a>
 8003adc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003ade:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d302      	bcc.n	8003aea <main+0x397a>

				delay_flag = 0;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
		while ((status == 36) && (current_tick >= general_delay)) {
 8003aea:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 8003aee:	2b24      	cmp	r3, #36	@ 0x24
 8003af0:	f040 8389 	bne.w	8004206 <main+0x4096>
 8003af4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003af6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003af8:	429a      	cmp	r2, r3
 8003afa:	f4bf af7c 	bcs.w	80039f6 <main+0x3886>
			}

		}

		//month edit menu -> enter month(state 37)
		while ((status == 37) && (current_tick >= general_delay)) {
 8003afe:	e382      	b.n	8004206 <main+0x4096>

			//get the current tick number
			current_tick = HAL_GetTick();
 8003b00:	f004 fdbc 	bl	800867c <HAL_GetTick>
 8003b04:	67f8      	str	r0, [r7, #124]	@ 0x7c

			//Alcd_Clear(&lcd);
			Alcd_PutAt(&lcd, 0, 0, "Enter month");
 8003b06:	4829      	ldr	r0, [pc, #164]	@ (8003bac <main+0x3a3c>)
 8003b08:	f004 fc52 	bl	80083b0 <Str_Len>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	9300      	str	r3, [sp, #0]
 8003b12:	4b26      	ldr	r3, [pc, #152]	@ (8003bac <main+0x3a3c>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	2100      	movs	r1, #0
 8003b18:	481f      	ldr	r0, [pc, #124]	@ (8003b98 <main+0x3a28>)
 8003b1a:	f004 fbdc 	bl	80082d6 <Alcd_PutAt_n>

			snprintf(timeString, sizeof(timeString), "%02d", status);
 8003b1e:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 8003b22:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8003b26:	4a1e      	ldr	r2, [pc, #120]	@ (8003ba0 <main+0x3a30>)
 8003b28:	2132      	movs	r1, #50	@ 0x32
 8003b2a:	f007 fec1 	bl	800b8b0 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 8003b2e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003b32:	4618      	mov	r0, r3
 8003b34:	f7fc fb14 	bl	8000160 <strlen>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8003b40:	9300      	str	r3, [sp, #0]
 8003b42:	4613      	mov	r3, r2
 8003b44:	220e      	movs	r2, #14
 8003b46:	2100      	movs	r1, #0
 8003b48:	4813      	ldr	r0, [pc, #76]	@ (8003b98 <main+0x3a28>)
 8003b4a:	f004 fbc4 	bl	80082d6 <Alcd_PutAt_n>

			Alcd_CursorAt(&lcd, 1, input_index);
 8003b4e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003b52:	461a      	mov	r2, r3
 8003b54:	2101      	movs	r1, #1
 8003b56:	4810      	ldr	r0, [pc, #64]	@ (8003b98 <main+0x3a28>)
 8003b58:	f004 fb81 	bl	800825e <Alcd_CursorAt>
			Alcd_Display_Control(&lcd, 1, 1, 1);
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	2201      	movs	r2, #1
 8003b60:	2101      	movs	r1, #1
 8003b62:	480d      	ldr	r0, [pc, #52]	@ (8003b98 <main+0x3a28>)
 8003b64:	f004 fbe1 	bl	800832a <Alcd_Display_Control>

			//check if any button is pressed
			//check for any keypad input
			Keypad_Refresh(&kp);
 8003b68:	480a      	ldr	r0, [pc, #40]	@ (8003b94 <main+0x3a24>)
 8003b6a:	f004 fc7b 	bl	8008464 <Keypad_Refresh>

			//if back is entered
			if (Keypad_Get_Key(&kp, kp_button_no_back)
 8003b6e:	210e      	movs	r1, #14
 8003b70:	4808      	ldr	r0, [pc, #32]	@ (8003b94 <main+0x3a24>)
 8003b72:	f004 fd13 	bl	800859c <Keypad_Get_Key>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d019      	beq.n	8003bb0 <main+0x3a40>
					&& (current_tick >= general_delay)) {
 8003b7c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003b7e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d315      	bcc.n	8003bb0 <main+0x3a40>

				input_index = 0;
 8003b84:	2300      	movs	r3, #0
 8003b86:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d

				//back to previous menu
				status = 26;
 8003b8a:	231a      	movs	r3, #26
 8003b8c:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 8003b90:	e30b      	b.n	80041aa <main+0x403a>
 8003b92:	bf00      	nop
 8003b94:	20000000 	.word	0x20000000
 8003b98:	2000001c 	.word	0x2000001c
 8003b9c:	0800c38c 	.word	0x0800c38c
 8003ba0:	0800c280 	.word	0x0800c280
 8003ba4:	20000150 	.word	0x20000150
 8003ba8:	0800c390 	.word	0x0800c390
 8003bac:	0800c3d0 	.word	0x0800c3d0

			}

			//0 is entered
			else if (Keypad_Get_Key(&kp, kp_button_0)
 8003bb0:	210d      	movs	r1, #13
 8003bb2:	48b8      	ldr	r0, [pc, #736]	@ (8003e94 <main+0x3d24>)
 8003bb4:	f004 fcf2 	bl	800859c <Keypad_Get_Key>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d042      	beq.n	8003c44 <main+0x3ad4>
					&& (current_tick >= general_delay)) {
 8003bbe:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003bc0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d33e      	bcc.n	8003c44 <main+0x3ad4>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	2200      	movs	r2, #0
 8003bca:	2101      	movs	r1, #1
 8003bcc:	48b2      	ldr	r0, [pc, #712]	@ (8003e98 <main+0x3d28>)
 8003bce:	f004 fbac 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8003bd2:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d827      	bhi.n	8003c2a <main+0x3aba>
					time_date_buffer[input_index] = '0';
 8003bda:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003bde:	3388      	adds	r3, #136	@ 0x88
 8003be0:	443b      	add	r3, r7
 8003be2:	2230      	movs	r2, #48	@ 0x30
 8003be4:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8003be8:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003bec:	3301      	adds	r3, #1
 8003bee:	3388      	adds	r3, #136	@ 0x88
 8003bf0:	443b      	add	r3, r7
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "0");
 8003bf8:	48a8      	ldr	r0, [pc, #672]	@ (8003e9c <main+0x3d2c>)
 8003bfa:	f004 fbd9 	bl	80083b0 <Str_Len>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8003c06:	9300      	str	r3, [sp, #0]
 8003c08:	4ba4      	ldr	r3, [pc, #656]	@ (8003e9c <main+0x3d2c>)
 8003c0a:	2101      	movs	r1, #1
 8003c0c:	48a2      	ldr	r0, [pc, #648]	@ (8003e98 <main+0x3d28>)
 8003c0e:	f004 fb62 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 8003c12:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003c16:	3301      	adds	r3, #1
 8003c18:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8003c1c:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003c20:	461a      	mov	r2, r3
 8003c22:	2101      	movs	r1, #1
 8003c24:	489c      	ldr	r0, [pc, #624]	@ (8003e98 <main+0x3d28>)
 8003c26:	f004 fb1a 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8003c2a:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8003c2e:	2301      	movs	r3, #1
 8003c30:	2101      	movs	r1, #1
 8003c32:	4899      	ldr	r0, [pc, #612]	@ (8003e98 <main+0x3d28>)
 8003c34:	f004 fb79 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8003c38:	f004 fd20 	bl	800867c <HAL_GetTick>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	33fa      	adds	r3, #250	@ 0xfa
 8003c40:	677b      	str	r3, [r7, #116]	@ 0x74
 8003c42:	e2b2      	b.n	80041aa <main+0x403a>

			}
			//1 is entered
			else if (Keypad_Get_Key(&kp, kp_button_1)
 8003c44:	2100      	movs	r1, #0
 8003c46:	4893      	ldr	r0, [pc, #588]	@ (8003e94 <main+0x3d24>)
 8003c48:	f004 fca8 	bl	800859c <Keypad_Get_Key>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d042      	beq.n	8003cd8 <main+0x3b68>
					&& (current_tick >= general_delay)) {
 8003c52:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003c54:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d33e      	bcc.n	8003cd8 <main+0x3b68>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	2101      	movs	r1, #1
 8003c60:	488d      	ldr	r0, [pc, #564]	@ (8003e98 <main+0x3d28>)
 8003c62:	f004 fb62 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8003c66:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d827      	bhi.n	8003cbe <main+0x3b4e>
					time_date_buffer[input_index] = '1';
 8003c6e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003c72:	3388      	adds	r3, #136	@ 0x88
 8003c74:	443b      	add	r3, r7
 8003c76:	2231      	movs	r2, #49	@ 0x31
 8003c78:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8003c7c:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003c80:	3301      	adds	r3, #1
 8003c82:	3388      	adds	r3, #136	@ 0x88
 8003c84:	443b      	add	r3, r7
 8003c86:	2200      	movs	r2, #0
 8003c88:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "1");
 8003c8c:	4884      	ldr	r0, [pc, #528]	@ (8003ea0 <main+0x3d30>)
 8003c8e:	f004 fb8f 	bl	80083b0 <Str_Len>
 8003c92:	4603      	mov	r3, r0
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8003c9a:	9300      	str	r3, [sp, #0]
 8003c9c:	4b80      	ldr	r3, [pc, #512]	@ (8003ea0 <main+0x3d30>)
 8003c9e:	2101      	movs	r1, #1
 8003ca0:	487d      	ldr	r0, [pc, #500]	@ (8003e98 <main+0x3d28>)
 8003ca2:	f004 fb18 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 8003ca6:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003caa:	3301      	adds	r3, #1
 8003cac:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8003cb0:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	2101      	movs	r1, #1
 8003cb8:	4877      	ldr	r0, [pc, #476]	@ (8003e98 <main+0x3d28>)
 8003cba:	f004 fad0 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8003cbe:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	2101      	movs	r1, #1
 8003cc6:	4874      	ldr	r0, [pc, #464]	@ (8003e98 <main+0x3d28>)
 8003cc8:	f004 fb2f 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8003ccc:	f004 fcd6 	bl	800867c <HAL_GetTick>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	33fa      	adds	r3, #250	@ 0xfa
 8003cd4:	677b      	str	r3, [r7, #116]	@ 0x74
 8003cd6:	e268      	b.n	80041aa <main+0x403a>

			}
			//2 is entered
			else if (Keypad_Get_Key(&kp, kp_button_2)
 8003cd8:	2101      	movs	r1, #1
 8003cda:	486e      	ldr	r0, [pc, #440]	@ (8003e94 <main+0x3d24>)
 8003cdc:	f004 fc5e 	bl	800859c <Keypad_Get_Key>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d042      	beq.n	8003d6c <main+0x3bfc>
					&& (current_tick >= general_delay)) {
 8003ce6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003ce8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d33e      	bcc.n	8003d6c <main+0x3bfc>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8003cee:	2300      	movs	r3, #0
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	2101      	movs	r1, #1
 8003cf4:	4868      	ldr	r0, [pc, #416]	@ (8003e98 <main+0x3d28>)
 8003cf6:	f004 fb18 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8003cfa:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d827      	bhi.n	8003d52 <main+0x3be2>
					time_date_buffer[input_index] = '2';
 8003d02:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003d06:	3388      	adds	r3, #136	@ 0x88
 8003d08:	443b      	add	r3, r7
 8003d0a:	2232      	movs	r2, #50	@ 0x32
 8003d0c:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8003d10:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003d14:	3301      	adds	r3, #1
 8003d16:	3388      	adds	r3, #136	@ 0x88
 8003d18:	443b      	add	r3, r7
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "2");
 8003d20:	4860      	ldr	r0, [pc, #384]	@ (8003ea4 <main+0x3d34>)
 8003d22:	f004 fb45 	bl	80083b0 <Str_Len>
 8003d26:	4603      	mov	r3, r0
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8003d2e:	9300      	str	r3, [sp, #0]
 8003d30:	4b5c      	ldr	r3, [pc, #368]	@ (8003ea4 <main+0x3d34>)
 8003d32:	2101      	movs	r1, #1
 8003d34:	4858      	ldr	r0, [pc, #352]	@ (8003e98 <main+0x3d28>)
 8003d36:	f004 face 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 8003d3a:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003d3e:	3301      	adds	r3, #1
 8003d40:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8003d44:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003d48:	461a      	mov	r2, r3
 8003d4a:	2101      	movs	r1, #1
 8003d4c:	4852      	ldr	r0, [pc, #328]	@ (8003e98 <main+0x3d28>)
 8003d4e:	f004 fa86 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8003d52:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8003d56:	2301      	movs	r3, #1
 8003d58:	2101      	movs	r1, #1
 8003d5a:	484f      	ldr	r0, [pc, #316]	@ (8003e98 <main+0x3d28>)
 8003d5c:	f004 fae5 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8003d60:	f004 fc8c 	bl	800867c <HAL_GetTick>
 8003d64:	4603      	mov	r3, r0
 8003d66:	33fa      	adds	r3, #250	@ 0xfa
 8003d68:	677b      	str	r3, [r7, #116]	@ 0x74
 8003d6a:	e21e      	b.n	80041aa <main+0x403a>

			}
			//3 is entered
			else if (Keypad_Get_Key(&kp, kp_button_3)
 8003d6c:	2102      	movs	r1, #2
 8003d6e:	4849      	ldr	r0, [pc, #292]	@ (8003e94 <main+0x3d24>)
 8003d70:	f004 fc14 	bl	800859c <Keypad_Get_Key>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d042      	beq.n	8003e00 <main+0x3c90>
					&& (current_tick >= general_delay)) {
 8003d7a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003d7c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d33e      	bcc.n	8003e00 <main+0x3c90>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8003d82:	2300      	movs	r3, #0
 8003d84:	2200      	movs	r2, #0
 8003d86:	2101      	movs	r1, #1
 8003d88:	4843      	ldr	r0, [pc, #268]	@ (8003e98 <main+0x3d28>)
 8003d8a:	f004 face 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8003d8e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d827      	bhi.n	8003de6 <main+0x3c76>
					time_date_buffer[input_index] = '3';
 8003d96:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003d9a:	3388      	adds	r3, #136	@ 0x88
 8003d9c:	443b      	add	r3, r7
 8003d9e:	2233      	movs	r2, #51	@ 0x33
 8003da0:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8003da4:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003da8:	3301      	adds	r3, #1
 8003daa:	3388      	adds	r3, #136	@ 0x88
 8003dac:	443b      	add	r3, r7
 8003dae:	2200      	movs	r2, #0
 8003db0:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "3");
 8003db4:	483c      	ldr	r0, [pc, #240]	@ (8003ea8 <main+0x3d38>)
 8003db6:	f004 fafb 	bl	80083b0 <Str_Len>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8003dc2:	9300      	str	r3, [sp, #0]
 8003dc4:	4b38      	ldr	r3, [pc, #224]	@ (8003ea8 <main+0x3d38>)
 8003dc6:	2101      	movs	r1, #1
 8003dc8:	4833      	ldr	r0, [pc, #204]	@ (8003e98 <main+0x3d28>)
 8003dca:	f004 fa84 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 8003dce:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8003dd8:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003ddc:	461a      	mov	r2, r3
 8003dde:	2101      	movs	r1, #1
 8003de0:	482d      	ldr	r0, [pc, #180]	@ (8003e98 <main+0x3d28>)
 8003de2:	f004 fa3c 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8003de6:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8003dea:	2301      	movs	r3, #1
 8003dec:	2101      	movs	r1, #1
 8003dee:	482a      	ldr	r0, [pc, #168]	@ (8003e98 <main+0x3d28>)
 8003df0:	f004 fa9b 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8003df4:	f004 fc42 	bl	800867c <HAL_GetTick>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	33fa      	adds	r3, #250	@ 0xfa
 8003dfc:	677b      	str	r3, [r7, #116]	@ 0x74
 8003dfe:	e1d4      	b.n	80041aa <main+0x403a>

			}

			//4 is entered
			else if (Keypad_Get_Key(&kp, kp_button_4)
 8003e00:	2104      	movs	r1, #4
 8003e02:	4824      	ldr	r0, [pc, #144]	@ (8003e94 <main+0x3d24>)
 8003e04:	f004 fbca 	bl	800859c <Keypad_Get_Key>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d050      	beq.n	8003eb0 <main+0x3d40>
					&& (current_tick >= general_delay)) {
 8003e0e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003e10:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d34c      	bcc.n	8003eb0 <main+0x3d40>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8003e16:	2300      	movs	r3, #0
 8003e18:	2200      	movs	r2, #0
 8003e1a:	2101      	movs	r1, #1
 8003e1c:	481e      	ldr	r0, [pc, #120]	@ (8003e98 <main+0x3d28>)
 8003e1e:	f004 fa84 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8003e22:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d827      	bhi.n	8003e7a <main+0x3d0a>
					time_date_buffer[input_index] = '4';
 8003e2a:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003e2e:	3388      	adds	r3, #136	@ 0x88
 8003e30:	443b      	add	r3, r7
 8003e32:	2234      	movs	r2, #52	@ 0x34
 8003e34:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8003e38:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003e3c:	3301      	adds	r3, #1
 8003e3e:	3388      	adds	r3, #136	@ 0x88
 8003e40:	443b      	add	r3, r7
 8003e42:	2200      	movs	r2, #0
 8003e44:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "4");
 8003e48:	4818      	ldr	r0, [pc, #96]	@ (8003eac <main+0x3d3c>)
 8003e4a:	f004 fab1 	bl	80083b0 <Str_Len>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8003e56:	9300      	str	r3, [sp, #0]
 8003e58:	4b14      	ldr	r3, [pc, #80]	@ (8003eac <main+0x3d3c>)
 8003e5a:	2101      	movs	r1, #1
 8003e5c:	480e      	ldr	r0, [pc, #56]	@ (8003e98 <main+0x3d28>)
 8003e5e:	f004 fa3a 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 8003e62:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003e66:	3301      	adds	r3, #1
 8003e68:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8003e6c:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003e70:	461a      	mov	r2, r3
 8003e72:	2101      	movs	r1, #1
 8003e74:	4808      	ldr	r0, [pc, #32]	@ (8003e98 <main+0x3d28>)
 8003e76:	f004 f9f2 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8003e7a:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8003e7e:	2301      	movs	r3, #1
 8003e80:	2101      	movs	r1, #1
 8003e82:	4805      	ldr	r0, [pc, #20]	@ (8003e98 <main+0x3d28>)
 8003e84:	f004 fa51 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8003e88:	f004 fbf8 	bl	800867c <HAL_GetTick>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	33fa      	adds	r3, #250	@ 0xfa
 8003e90:	677b      	str	r3, [r7, #116]	@ 0x74
 8003e92:	e18a      	b.n	80041aa <main+0x403a>
 8003e94:	20000000 	.word	0x20000000
 8003e98:	2000001c 	.word	0x2000001c
 8003e9c:	0800c368 	.word	0x0800c368
 8003ea0:	0800c36c 	.word	0x0800c36c
 8003ea4:	0800c370 	.word	0x0800c370
 8003ea8:	0800c374 	.word	0x0800c374
 8003eac:	0800c378 	.word	0x0800c378

			}
			//5 is entered
			else if (Keypad_Get_Key(&kp, kp_button_5)
 8003eb0:	2105      	movs	r1, #5
 8003eb2:	4893      	ldr	r0, [pc, #588]	@ (8004100 <main+0x3f90>)
 8003eb4:	f004 fb72 	bl	800859c <Keypad_Get_Key>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d042      	beq.n	8003f44 <main+0x3dd4>
					&& (current_tick >= general_delay)) {
 8003ebe:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003ec0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d33e      	bcc.n	8003f44 <main+0x3dd4>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	2200      	movs	r2, #0
 8003eca:	2101      	movs	r1, #1
 8003ecc:	488d      	ldr	r0, [pc, #564]	@ (8004104 <main+0x3f94>)
 8003ece:	f004 fa2c 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8003ed2:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d827      	bhi.n	8003f2a <main+0x3dba>
					time_date_buffer[input_index] = '5';
 8003eda:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003ede:	3388      	adds	r3, #136	@ 0x88
 8003ee0:	443b      	add	r3, r7
 8003ee2:	2235      	movs	r2, #53	@ 0x35
 8003ee4:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8003ee8:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003eec:	3301      	adds	r3, #1
 8003eee:	3388      	adds	r3, #136	@ 0x88
 8003ef0:	443b      	add	r3, r7
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "5");
 8003ef8:	4883      	ldr	r0, [pc, #524]	@ (8004108 <main+0x3f98>)
 8003efa:	f004 fa59 	bl	80083b0 <Str_Len>
 8003efe:	4603      	mov	r3, r0
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8003f06:	9300      	str	r3, [sp, #0]
 8003f08:	4b7f      	ldr	r3, [pc, #508]	@ (8004108 <main+0x3f98>)
 8003f0a:	2101      	movs	r1, #1
 8003f0c:	487d      	ldr	r0, [pc, #500]	@ (8004104 <main+0x3f94>)
 8003f0e:	f004 f9e2 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 8003f12:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003f16:	3301      	adds	r3, #1
 8003f18:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8003f1c:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003f20:	461a      	mov	r2, r3
 8003f22:	2101      	movs	r1, #1
 8003f24:	4877      	ldr	r0, [pc, #476]	@ (8004104 <main+0x3f94>)
 8003f26:	f004 f99a 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8003f2a:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8003f2e:	2301      	movs	r3, #1
 8003f30:	2101      	movs	r1, #1
 8003f32:	4874      	ldr	r0, [pc, #464]	@ (8004104 <main+0x3f94>)
 8003f34:	f004 f9f9 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8003f38:	f004 fba0 	bl	800867c <HAL_GetTick>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	33fa      	adds	r3, #250	@ 0xfa
 8003f40:	677b      	str	r3, [r7, #116]	@ 0x74
 8003f42:	e132      	b.n	80041aa <main+0x403a>

			}

			//6 is entered
			else if (Keypad_Get_Key(&kp, kp_button_6)
 8003f44:	2106      	movs	r1, #6
 8003f46:	486e      	ldr	r0, [pc, #440]	@ (8004100 <main+0x3f90>)
 8003f48:	f004 fb28 	bl	800859c <Keypad_Get_Key>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d042      	beq.n	8003fd8 <main+0x3e68>
					&& (current_tick >= general_delay)) {
 8003f52:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003f54:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d33e      	bcc.n	8003fd8 <main+0x3e68>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	2101      	movs	r1, #1
 8003f60:	4868      	ldr	r0, [pc, #416]	@ (8004104 <main+0x3f94>)
 8003f62:	f004 f9e2 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8003f66:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d827      	bhi.n	8003fbe <main+0x3e4e>
					time_date_buffer[input_index] = '6';
 8003f6e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003f72:	3388      	adds	r3, #136	@ 0x88
 8003f74:	443b      	add	r3, r7
 8003f76:	2236      	movs	r2, #54	@ 0x36
 8003f78:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8003f7c:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003f80:	3301      	adds	r3, #1
 8003f82:	3388      	adds	r3, #136	@ 0x88
 8003f84:	443b      	add	r3, r7
 8003f86:	2200      	movs	r2, #0
 8003f88:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "6");
 8003f8c:	485f      	ldr	r0, [pc, #380]	@ (800410c <main+0x3f9c>)
 8003f8e:	f004 fa0f 	bl	80083b0 <Str_Len>
 8003f92:	4603      	mov	r3, r0
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8003f9a:	9300      	str	r3, [sp, #0]
 8003f9c:	4b5b      	ldr	r3, [pc, #364]	@ (800410c <main+0x3f9c>)
 8003f9e:	2101      	movs	r1, #1
 8003fa0:	4858      	ldr	r0, [pc, #352]	@ (8004104 <main+0x3f94>)
 8003fa2:	f004 f998 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 8003fa6:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003faa:	3301      	adds	r3, #1
 8003fac:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8003fb0:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	2101      	movs	r1, #1
 8003fb8:	4852      	ldr	r0, [pc, #328]	@ (8004104 <main+0x3f94>)
 8003fba:	f004 f950 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8003fbe:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	2101      	movs	r1, #1
 8003fc6:	484f      	ldr	r0, [pc, #316]	@ (8004104 <main+0x3f94>)
 8003fc8:	f004 f9af 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8003fcc:	f004 fb56 	bl	800867c <HAL_GetTick>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	33fa      	adds	r3, #250	@ 0xfa
 8003fd4:	677b      	str	r3, [r7, #116]	@ 0x74
 8003fd6:	e0e8      	b.n	80041aa <main+0x403a>

			}

			//7 is entered
			else if (Keypad_Get_Key(&kp, kp_button_7)
 8003fd8:	2108      	movs	r1, #8
 8003fda:	4849      	ldr	r0, [pc, #292]	@ (8004100 <main+0x3f90>)
 8003fdc:	f004 fade 	bl	800859c <Keypad_Get_Key>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d042      	beq.n	800406c <main+0x3efc>
					&& (current_tick >= general_delay)) {
 8003fe6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003fe8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d33e      	bcc.n	800406c <main+0x3efc>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8003fee:	2300      	movs	r3, #0
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	2101      	movs	r1, #1
 8003ff4:	4843      	ldr	r0, [pc, #268]	@ (8004104 <main+0x3f94>)
 8003ff6:	f004 f998 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8003ffa:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d827      	bhi.n	8004052 <main+0x3ee2>
					time_date_buffer[input_index] = '7';
 8004002:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8004006:	3388      	adds	r3, #136	@ 0x88
 8004008:	443b      	add	r3, r7
 800400a:	2237      	movs	r2, #55	@ 0x37
 800400c:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8004010:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8004014:	3301      	adds	r3, #1
 8004016:	3388      	adds	r3, #136	@ 0x88
 8004018:	443b      	add	r3, r7
 800401a:	2200      	movs	r2, #0
 800401c:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "7");
 8004020:	483b      	ldr	r0, [pc, #236]	@ (8004110 <main+0x3fa0>)
 8004022:	f004 f9c5 	bl	80083b0 <Str_Len>
 8004026:	4603      	mov	r3, r0
 8004028:	b2db      	uxtb	r3, r3
 800402a:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 800402e:	9300      	str	r3, [sp, #0]
 8004030:	4b37      	ldr	r3, [pc, #220]	@ (8004110 <main+0x3fa0>)
 8004032:	2101      	movs	r1, #1
 8004034:	4833      	ldr	r0, [pc, #204]	@ (8004104 <main+0x3f94>)
 8004036:	f004 f94e 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 800403a:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800403e:	3301      	adds	r3, #1
 8004040:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8004044:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8004048:	461a      	mov	r2, r3
 800404a:	2101      	movs	r1, #1
 800404c:	482d      	ldr	r0, [pc, #180]	@ (8004104 <main+0x3f94>)
 800404e:	f004 f906 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8004052:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8004056:	2301      	movs	r3, #1
 8004058:	2101      	movs	r1, #1
 800405a:	482a      	ldr	r0, [pc, #168]	@ (8004104 <main+0x3f94>)
 800405c:	f004 f965 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8004060:	f004 fb0c 	bl	800867c <HAL_GetTick>
 8004064:	4603      	mov	r3, r0
 8004066:	33fa      	adds	r3, #250	@ 0xfa
 8004068:	677b      	str	r3, [r7, #116]	@ 0x74
 800406a:	e09e      	b.n	80041aa <main+0x403a>

			}

			//8 is entered
			else if (Keypad_Get_Key(&kp, kp_button_8)
 800406c:	2109      	movs	r1, #9
 800406e:	4824      	ldr	r0, [pc, #144]	@ (8004100 <main+0x3f90>)
 8004070:	f004 fa94 	bl	800859c <Keypad_Get_Key>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d04e      	beq.n	8004118 <main+0x3fa8>
					&& (current_tick >= general_delay)) {
 800407a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800407c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800407e:	429a      	cmp	r2, r3
 8004080:	d34a      	bcc.n	8004118 <main+0x3fa8>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8004082:	2300      	movs	r3, #0
 8004084:	2200      	movs	r2, #0
 8004086:	2101      	movs	r1, #1
 8004088:	481e      	ldr	r0, [pc, #120]	@ (8004104 <main+0x3f94>)
 800408a:	f004 f94e 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 800408e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8004092:	2b01      	cmp	r3, #1
 8004094:	d827      	bhi.n	80040e6 <main+0x3f76>
					time_date_buffer[input_index] = '8';
 8004096:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800409a:	3388      	adds	r3, #136	@ 0x88
 800409c:	443b      	add	r3, r7
 800409e:	2238      	movs	r2, #56	@ 0x38
 80040a0:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 80040a4:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80040a8:	3301      	adds	r3, #1
 80040aa:	3388      	adds	r3, #136	@ 0x88
 80040ac:	443b      	add	r3, r7
 80040ae:	2200      	movs	r2, #0
 80040b0:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "8");
 80040b4:	4817      	ldr	r0, [pc, #92]	@ (8004114 <main+0x3fa4>)
 80040b6:	f004 f97b 	bl	80083b0 <Str_Len>
 80040ba:	4603      	mov	r3, r0
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 80040c2:	9300      	str	r3, [sp, #0]
 80040c4:	4b13      	ldr	r3, [pc, #76]	@ (8004114 <main+0x3fa4>)
 80040c6:	2101      	movs	r1, #1
 80040c8:	480e      	ldr	r0, [pc, #56]	@ (8004104 <main+0x3f94>)
 80040ca:	f004 f904 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 80040ce:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80040d2:	3301      	adds	r3, #1
 80040d4:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 80040d8:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80040dc:	461a      	mov	r2, r3
 80040de:	2101      	movs	r1, #1
 80040e0:	4808      	ldr	r0, [pc, #32]	@ (8004104 <main+0x3f94>)
 80040e2:	f004 f8bc 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 80040e6:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 80040ea:	2301      	movs	r3, #1
 80040ec:	2101      	movs	r1, #1
 80040ee:	4805      	ldr	r0, [pc, #20]	@ (8004104 <main+0x3f94>)
 80040f0:	f004 f91b 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 80040f4:	f004 fac2 	bl	800867c <HAL_GetTick>
 80040f8:	4603      	mov	r3, r0
 80040fa:	33fa      	adds	r3, #250	@ 0xfa
 80040fc:	677b      	str	r3, [r7, #116]	@ 0x74
 80040fe:	e054      	b.n	80041aa <main+0x403a>
 8004100:	20000000 	.word	0x20000000
 8004104:	2000001c 	.word	0x2000001c
 8004108:	0800c37c 	.word	0x0800c37c
 800410c:	0800c380 	.word	0x0800c380
 8004110:	0800c384 	.word	0x0800c384
 8004114:	0800c388 	.word	0x0800c388

			}

			//9 is entered
			else if (Keypad_Get_Key(&kp, kp_button_9)
 8004118:	210a      	movs	r1, #10
 800411a:	48a7      	ldr	r0, [pc, #668]	@ (80043b8 <main+0x4248>)
 800411c:	f004 fa3e 	bl	800859c <Keypad_Get_Key>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d041      	beq.n	80041aa <main+0x403a>
					&& (current_tick >= general_delay)) {
 8004126:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004128:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800412a:	429a      	cmp	r2, r3
 800412c:	d33d      	bcc.n	80041aa <main+0x403a>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 800412e:	2300      	movs	r3, #0
 8004130:	2200      	movs	r2, #0
 8004132:	2101      	movs	r1, #1
 8004134:	48a1      	ldr	r0, [pc, #644]	@ (80043bc <main+0x424c>)
 8004136:	f004 f8f8 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 800413a:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800413e:	2b01      	cmp	r3, #1
 8004140:	d827      	bhi.n	8004192 <main+0x4022>
					time_date_buffer[input_index] = '9';
 8004142:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8004146:	3388      	adds	r3, #136	@ 0x88
 8004148:	443b      	add	r3, r7
 800414a:	2239      	movs	r2, #57	@ 0x39
 800414c:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8004150:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8004154:	3301      	adds	r3, #1
 8004156:	3388      	adds	r3, #136	@ 0x88
 8004158:	443b      	add	r3, r7
 800415a:	2200      	movs	r2, #0
 800415c:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "9");
 8004160:	4897      	ldr	r0, [pc, #604]	@ (80043c0 <main+0x4250>)
 8004162:	f004 f925 	bl	80083b0 <Str_Len>
 8004166:	4603      	mov	r3, r0
 8004168:	b2db      	uxtb	r3, r3
 800416a:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 800416e:	9300      	str	r3, [sp, #0]
 8004170:	4b93      	ldr	r3, [pc, #588]	@ (80043c0 <main+0x4250>)
 8004172:	2101      	movs	r1, #1
 8004174:	4891      	ldr	r0, [pc, #580]	@ (80043bc <main+0x424c>)
 8004176:	f004 f8ae 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 800417a:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800417e:	3301      	adds	r3, #1
 8004180:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8004184:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8004188:	461a      	mov	r2, r3
 800418a:	2101      	movs	r1, #1
 800418c:	488b      	ldr	r0, [pc, #556]	@ (80043bc <main+0x424c>)
 800418e:	f004 f866 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8004192:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8004196:	2301      	movs	r3, #1
 8004198:	2101      	movs	r1, #1
 800419a:	4888      	ldr	r0, [pc, #544]	@ (80043bc <main+0x424c>)
 800419c:	f004 f8c5 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 80041a0:	f004 fa6c 	bl	800867c <HAL_GetTick>
 80041a4:	4603      	mov	r3, r0
 80041a6:	33fa      	adds	r3, #250	@ 0xfa
 80041a8:	677b      	str	r3, [r7, #116]	@ 0x74

			}

			//when yes is entered -> check for month validation (state 38)
			if (Keypad_Get_Key(&kp, kp_button_yes)
 80041aa:	210f      	movs	r1, #15
 80041ac:	4882      	ldr	r0, [pc, #520]	@ (80043b8 <main+0x4248>)
 80041ae:	f004 f9f5 	bl	800859c <Keypad_Get_Key>
 80041b2:	4603      	mov	r3, r0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d021      	beq.n	80041fc <main+0x408c>
					&& (current_tick >= general_delay)) {
 80041b8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80041ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80041bc:	429a      	cmp	r2, r3
 80041be:	d31d      	bcc.n	80041fc <main+0x408c>

				Alcd_Clear(&lcd);
 80041c0:	487e      	ldr	r0, [pc, #504]	@ (80043bc <main+0x424c>)
 80041c2:	f004 f8a1 	bl	8008308 <Alcd_Clear>

				snprintf(timeString, sizeof(timeString), "%02d", buffer);
 80041c6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80041ca:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80041ce:	4a7d      	ldr	r2, [pc, #500]	@ (80043c4 <main+0x4254>)
 80041d0:	2132      	movs	r1, #50	@ 0x32
 80041d2:	f007 fb6d 	bl	800b8b0 <sniprintf>
				Alcd_PutAt_n(&lcd, 1, 0, timeString, strlen(timeString));
 80041d6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80041da:	4618      	mov	r0, r3
 80041dc:	f7fb ffc0 	bl	8000160 <strlen>
 80041e0:	4603      	mov	r3, r0
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80041e8:	9300      	str	r3, [sp, #0]
 80041ea:	4613      	mov	r3, r2
 80041ec:	2200      	movs	r2, #0
 80041ee:	2101      	movs	r1, #1
 80041f0:	4872      	ldr	r0, [pc, #456]	@ (80043bc <main+0x424c>)
 80041f2:	f004 f870 	bl	80082d6 <Alcd_PutAt_n>

				status = 38;
 80041f6:	2326      	movs	r3, #38	@ 0x26
 80041f8:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83

			}

			//
			general_delay = HAL_GetTick() + 250;
 80041fc:	f004 fa3e 	bl	800867c <HAL_GetTick>
 8004200:	4603      	mov	r3, r0
 8004202:	33fa      	adds	r3, #250	@ 0xfa
 8004204:	677b      	str	r3, [r7, #116]	@ 0x74
		while ((status == 37) && (current_tick >= general_delay)) {
 8004206:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 800420a:	2b25      	cmp	r3, #37	@ 0x25
 800420c:	d17f      	bne.n	800430e <main+0x419e>
 800420e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004210:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004212:	429a      	cmp	r2, r3
 8004214:	f4bf ac74 	bcs.w	8003b00 <main+0x3990>
		}

		//month validation phase
		while ((status == 38) && (current_tick >= general_delay)) {
 8004218:	e079      	b.n	800430e <main+0x419e>

			//get the current tick number
			current_tick = HAL_GetTick();
 800421a:	f004 fa2f 	bl	800867c <HAL_GetTick>
 800421e:	67f8      	str	r0, [r7, #124]	@ 0x7c

			Alcd_Clear(&lcd);
 8004220:	4866      	ldr	r0, [pc, #408]	@ (80043bc <main+0x424c>)
 8004222:	f004 f871 	bl	8008308 <Alcd_Clear>

			snprintf(timeString, sizeof(timeString), "%02d", status);
 8004226:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 800422a:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800422e:	4a65      	ldr	r2, [pc, #404]	@ (80043c4 <main+0x4254>)
 8004230:	2132      	movs	r1, #50	@ 0x32
 8004232:	f007 fb3d 	bl	800b8b0 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 8004236:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800423a:	4618      	mov	r0, r3
 800423c:	f7fb ff90 	bl	8000160 <strlen>
 8004240:	4603      	mov	r3, r0
 8004242:	b2db      	uxtb	r3, r3
 8004244:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8004248:	9300      	str	r3, [sp, #0]
 800424a:	4613      	mov	r3, r2
 800424c:	220e      	movs	r2, #14
 800424e:	2100      	movs	r1, #0
 8004250:	485a      	ldr	r0, [pc, #360]	@ (80043bc <main+0x424c>)
 8004252:	f004 f840 	bl	80082d6 <Alcd_PutAt_n>

			buffer = atoi(time_date_buffer);
 8004256:	f107 0310 	add.w	r3, r7, #16
 800425a:	4618      	mov	r0, r3
 800425c:	f007 fa9f 	bl	800b79e <atoi>
 8004260:	4603      	mov	r3, r0
 8004262:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

			//check if month is within the range 1 to 12
			if (buffer > 0 && buffer < 13) {
 8004266:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800426a:	2b00      	cmp	r3, #0
 800426c:	d01c      	beq.n	80042a8 <main+0x4138>
 800426e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004272:	2b0c      	cmp	r3, #12
 8004274:	d818      	bhi.n	80042a8 <main+0x4138>

				//move to the month state
				status = 39;
 8004276:	2327      	movs	r3, #39	@ 0x27
 8004278:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83

				//set the month value
				CLK.month = buffer;
 800427c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004280:	b2da      	uxtb	r2, r3
 8004282:	4b51      	ldr	r3, [pc, #324]	@ (80043c8 <main+0x4258>)
 8004284:	735a      	strb	r2, [r3, #13]

				input_index = 0;
 8004286:	2300      	movs	r3, #0
 8004288:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 800428c:	2300      	movs	r3, #0
 800428e:	2200      	movs	r2, #0
 8004290:	2101      	movs	r1, #1
 8004292:	484a      	ldr	r0, [pc, #296]	@ (80043bc <main+0x424c>)
 8004294:	f004 f849 	bl	800832a <Alcd_Display_Control>
				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8004298:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 800429c:	2301      	movs	r3, #1
 800429e:	2101      	movs	r1, #1
 80042a0:	4846      	ldr	r0, [pc, #280]	@ (80043bc <main+0x424c>)
 80042a2:	f004 f842 	bl	800832a <Alcd_Display_Control>
 80042a6:	e027      	b.n	80042f8 <main+0x4188>
			} else {
				Alcd_PutAt(&lcd, 0, 0, "invalid");
 80042a8:	4848      	ldr	r0, [pc, #288]	@ (80043cc <main+0x425c>)
 80042aa:	f004 f881 	bl	80083b0 <Str_Len>
 80042ae:	4603      	mov	r3, r0
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	9300      	str	r3, [sp, #0]
 80042b4:	4b45      	ldr	r3, [pc, #276]	@ (80043cc <main+0x425c>)
 80042b6:	2200      	movs	r2, #0
 80042b8:	2100      	movs	r1, #0
 80042ba:	4840      	ldr	r0, [pc, #256]	@ (80043bc <main+0x424c>)
 80042bc:	f004 f80b 	bl	80082d6 <Alcd_PutAt_n>
				delay_flag = 1;
 80042c0:	2301      	movs	r3, #1
 80042c2:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85

				input_index = 0;
 80042c6:	2300      	movs	r3, #0
 80042c8:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80042cc:	2300      	movs	r3, #0
 80042ce:	2200      	movs	r2, #0
 80042d0:	2101      	movs	r1, #1
 80042d2:	483a      	ldr	r0, [pc, #232]	@ (80043bc <main+0x424c>)
 80042d4:	f004 f829 	bl	800832a <Alcd_Display_Control>
				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 80042d8:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 80042dc:	2301      	movs	r3, #1
 80042de:	2101      	movs	r1, #1
 80042e0:	4836      	ldr	r0, [pc, #216]	@ (80043bc <main+0x424c>)
 80042e2:	f004 f822 	bl	800832a <Alcd_Display_Control>
				//return to entering month
				status = 37;
 80042e6:	2325      	movs	r3, #37	@ 0x25
 80042e8:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83

				general_delay = HAL_GetTick() + 1000;
 80042ec:	f004 f9c6 	bl	800867c <HAL_GetTick>
 80042f0:	4603      	mov	r3, r0
 80042f2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80042f6:	677b      	str	r3, [r7, #116]	@ 0x74
			}

			//create a delay
			if ((delay_flag == 1) && (current_tick >= general_delay)) {
 80042f8:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d106      	bne.n	800430e <main+0x419e>
 8004300:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004302:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004304:	429a      	cmp	r2, r3
 8004306:	d302      	bcc.n	800430e <main+0x419e>

				delay_flag = 0;
 8004308:	2300      	movs	r3, #0
 800430a:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
		while ((status == 38) && (current_tick >= general_delay)) {
 800430e:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 8004312:	2b26      	cmp	r3, #38	@ 0x26
 8004314:	f040 8389 	bne.w	8004a2a <main+0x48ba>
 8004318:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800431a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800431c:	429a      	cmp	r2, r3
 800431e:	f4bf af7c 	bcs.w	800421a <main+0x40aa>
			}

		}

		//year edit menu -> enter month(state 39)
		while ((status == 39) && (current_tick >= general_delay)) {
 8004322:	e382      	b.n	8004a2a <main+0x48ba>

			//get the current tick number
			current_tick = HAL_GetTick();
 8004324:	f004 f9aa 	bl	800867c <HAL_GetTick>
 8004328:	67f8      	str	r0, [r7, #124]	@ 0x7c

			//Alcd_Clear(&lcd);
			Alcd_PutAt(&lcd, 0, 0, "Enter year");
 800432a:	4829      	ldr	r0, [pc, #164]	@ (80043d0 <main+0x4260>)
 800432c:	f004 f840 	bl	80083b0 <Str_Len>
 8004330:	4603      	mov	r3, r0
 8004332:	b2db      	uxtb	r3, r3
 8004334:	9300      	str	r3, [sp, #0]
 8004336:	4b26      	ldr	r3, [pc, #152]	@ (80043d0 <main+0x4260>)
 8004338:	2200      	movs	r2, #0
 800433a:	2100      	movs	r1, #0
 800433c:	481f      	ldr	r0, [pc, #124]	@ (80043bc <main+0x424c>)
 800433e:	f003 ffca 	bl	80082d6 <Alcd_PutAt_n>

			snprintf(timeString, sizeof(timeString), "%02d", status);
 8004342:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 8004346:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800434a:	4a1e      	ldr	r2, [pc, #120]	@ (80043c4 <main+0x4254>)
 800434c:	2132      	movs	r1, #50	@ 0x32
 800434e:	f007 faaf 	bl	800b8b0 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 8004352:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004356:	4618      	mov	r0, r3
 8004358:	f7fb ff02 	bl	8000160 <strlen>
 800435c:	4603      	mov	r3, r0
 800435e:	b2db      	uxtb	r3, r3
 8004360:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8004364:	9300      	str	r3, [sp, #0]
 8004366:	4613      	mov	r3, r2
 8004368:	220e      	movs	r2, #14
 800436a:	2100      	movs	r1, #0
 800436c:	4813      	ldr	r0, [pc, #76]	@ (80043bc <main+0x424c>)
 800436e:	f003 ffb2 	bl	80082d6 <Alcd_PutAt_n>

			Alcd_CursorAt(&lcd, 1, input_index);
 8004372:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8004376:	461a      	mov	r2, r3
 8004378:	2101      	movs	r1, #1
 800437a:	4810      	ldr	r0, [pc, #64]	@ (80043bc <main+0x424c>)
 800437c:	f003 ff6f 	bl	800825e <Alcd_CursorAt>
			Alcd_Display_Control(&lcd, 1, 1, 1);
 8004380:	2301      	movs	r3, #1
 8004382:	2201      	movs	r2, #1
 8004384:	2101      	movs	r1, #1
 8004386:	480d      	ldr	r0, [pc, #52]	@ (80043bc <main+0x424c>)
 8004388:	f003 ffcf 	bl	800832a <Alcd_Display_Control>

			//check if any button is pressed
			//check for any keypad input
			Keypad_Refresh(&kp);
 800438c:	480a      	ldr	r0, [pc, #40]	@ (80043b8 <main+0x4248>)
 800438e:	f004 f869 	bl	8008464 <Keypad_Refresh>

			//if back is entered
			if (Keypad_Get_Key(&kp, kp_button_no_back)
 8004392:	210e      	movs	r1, #14
 8004394:	4808      	ldr	r0, [pc, #32]	@ (80043b8 <main+0x4248>)
 8004396:	f004 f901 	bl	800859c <Keypad_Get_Key>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d019      	beq.n	80043d4 <main+0x4264>
					&& (current_tick >= general_delay)) {
 80043a0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80043a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d315      	bcc.n	80043d4 <main+0x4264>

				input_index = 0;
 80043a8:	2300      	movs	r3, #0
 80043aa:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d

				//back to previous menu
				status = 37;
 80043ae:	2325      	movs	r3, #37	@ 0x25
 80043b0:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 80043b4:	e30b      	b.n	80049ce <main+0x485e>
 80043b6:	bf00      	nop
 80043b8:	20000000 	.word	0x20000000
 80043bc:	2000001c 	.word	0x2000001c
 80043c0:	0800c38c 	.word	0x0800c38c
 80043c4:	0800c280 	.word	0x0800c280
 80043c8:	20000150 	.word	0x20000150
 80043cc:	0800c390 	.word	0x0800c390
 80043d0:	0800c3dc 	.word	0x0800c3dc

			}

			//0 is entered
			else if (Keypad_Get_Key(&kp, kp_button_0)
 80043d4:	210d      	movs	r1, #13
 80043d6:	48b8      	ldr	r0, [pc, #736]	@ (80046b8 <main+0x4548>)
 80043d8:	f004 f8e0 	bl	800859c <Keypad_Get_Key>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d042      	beq.n	8004468 <main+0x42f8>
					&& (current_tick >= general_delay)) {
 80043e2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80043e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d33e      	bcc.n	8004468 <main+0x42f8>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80043ea:	2300      	movs	r3, #0
 80043ec:	2200      	movs	r2, #0
 80043ee:	2101      	movs	r1, #1
 80043f0:	48b2      	ldr	r0, [pc, #712]	@ (80046bc <main+0x454c>)
 80043f2:	f003 ff9a 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 4) {
 80043f6:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80043fa:	2b03      	cmp	r3, #3
 80043fc:	d827      	bhi.n	800444e <main+0x42de>
					time_date_buffer[input_index] = '0';
 80043fe:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8004402:	3388      	adds	r3, #136	@ 0x88
 8004404:	443b      	add	r3, r7
 8004406:	2230      	movs	r2, #48	@ 0x30
 8004408:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 800440c:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8004410:	3301      	adds	r3, #1
 8004412:	3388      	adds	r3, #136	@ 0x88
 8004414:	443b      	add	r3, r7
 8004416:	2200      	movs	r2, #0
 8004418:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "0");
 800441c:	48a8      	ldr	r0, [pc, #672]	@ (80046c0 <main+0x4550>)
 800441e:	f003 ffc7 	bl	80083b0 <Str_Len>
 8004422:	4603      	mov	r3, r0
 8004424:	b2db      	uxtb	r3, r3
 8004426:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 800442a:	9300      	str	r3, [sp, #0]
 800442c:	4ba4      	ldr	r3, [pc, #656]	@ (80046c0 <main+0x4550>)
 800442e:	2101      	movs	r1, #1
 8004430:	48a2      	ldr	r0, [pc, #648]	@ (80046bc <main+0x454c>)
 8004432:	f003 ff50 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 8004436:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800443a:	3301      	adds	r3, #1
 800443c:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8004440:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8004444:	461a      	mov	r2, r3
 8004446:	2101      	movs	r1, #1
 8004448:	489c      	ldr	r0, [pc, #624]	@ (80046bc <main+0x454c>)
 800444a:	f003 ff08 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 800444e:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8004452:	2301      	movs	r3, #1
 8004454:	2101      	movs	r1, #1
 8004456:	4899      	ldr	r0, [pc, #612]	@ (80046bc <main+0x454c>)
 8004458:	f003 ff67 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 800445c:	f004 f90e 	bl	800867c <HAL_GetTick>
 8004460:	4603      	mov	r3, r0
 8004462:	33fa      	adds	r3, #250	@ 0xfa
 8004464:	677b      	str	r3, [r7, #116]	@ 0x74
 8004466:	e2b2      	b.n	80049ce <main+0x485e>

			}
			//1 is entered
			else if (Keypad_Get_Key(&kp, kp_button_1)
 8004468:	2100      	movs	r1, #0
 800446a:	4893      	ldr	r0, [pc, #588]	@ (80046b8 <main+0x4548>)
 800446c:	f004 f896 	bl	800859c <Keypad_Get_Key>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d042      	beq.n	80044fc <main+0x438c>
					&& (current_tick >= general_delay)) {
 8004476:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004478:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800447a:	429a      	cmp	r2, r3
 800447c:	d33e      	bcc.n	80044fc <main+0x438c>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 800447e:	2300      	movs	r3, #0
 8004480:	2200      	movs	r2, #0
 8004482:	2101      	movs	r1, #1
 8004484:	488d      	ldr	r0, [pc, #564]	@ (80046bc <main+0x454c>)
 8004486:	f003 ff50 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 4) {
 800448a:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800448e:	2b03      	cmp	r3, #3
 8004490:	d827      	bhi.n	80044e2 <main+0x4372>
					time_date_buffer[input_index] = '1';
 8004492:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8004496:	3388      	adds	r3, #136	@ 0x88
 8004498:	443b      	add	r3, r7
 800449a:	2231      	movs	r2, #49	@ 0x31
 800449c:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 80044a0:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80044a4:	3301      	adds	r3, #1
 80044a6:	3388      	adds	r3, #136	@ 0x88
 80044a8:	443b      	add	r3, r7
 80044aa:	2200      	movs	r2, #0
 80044ac:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "1");
 80044b0:	4884      	ldr	r0, [pc, #528]	@ (80046c4 <main+0x4554>)
 80044b2:	f003 ff7d 	bl	80083b0 <Str_Len>
 80044b6:	4603      	mov	r3, r0
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 80044be:	9300      	str	r3, [sp, #0]
 80044c0:	4b80      	ldr	r3, [pc, #512]	@ (80046c4 <main+0x4554>)
 80044c2:	2101      	movs	r1, #1
 80044c4:	487d      	ldr	r0, [pc, #500]	@ (80046bc <main+0x454c>)
 80044c6:	f003 ff06 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 80044ca:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80044ce:	3301      	adds	r3, #1
 80044d0:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 80044d4:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80044d8:	461a      	mov	r2, r3
 80044da:	2101      	movs	r1, #1
 80044dc:	4877      	ldr	r0, [pc, #476]	@ (80046bc <main+0x454c>)
 80044de:	f003 febe 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 80044e2:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 80044e6:	2301      	movs	r3, #1
 80044e8:	2101      	movs	r1, #1
 80044ea:	4874      	ldr	r0, [pc, #464]	@ (80046bc <main+0x454c>)
 80044ec:	f003 ff1d 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 80044f0:	f004 f8c4 	bl	800867c <HAL_GetTick>
 80044f4:	4603      	mov	r3, r0
 80044f6:	33fa      	adds	r3, #250	@ 0xfa
 80044f8:	677b      	str	r3, [r7, #116]	@ 0x74
 80044fa:	e268      	b.n	80049ce <main+0x485e>

			}
			//2 is entered
			else if (Keypad_Get_Key(&kp, kp_button_2)
 80044fc:	2101      	movs	r1, #1
 80044fe:	486e      	ldr	r0, [pc, #440]	@ (80046b8 <main+0x4548>)
 8004500:	f004 f84c 	bl	800859c <Keypad_Get_Key>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d042      	beq.n	8004590 <main+0x4420>
					&& (current_tick >= general_delay)) {
 800450a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800450c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800450e:	429a      	cmp	r2, r3
 8004510:	d33e      	bcc.n	8004590 <main+0x4420>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8004512:	2300      	movs	r3, #0
 8004514:	2200      	movs	r2, #0
 8004516:	2101      	movs	r1, #1
 8004518:	4868      	ldr	r0, [pc, #416]	@ (80046bc <main+0x454c>)
 800451a:	f003 ff06 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 4) {
 800451e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8004522:	2b03      	cmp	r3, #3
 8004524:	d827      	bhi.n	8004576 <main+0x4406>
					time_date_buffer[input_index] = '2';
 8004526:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800452a:	3388      	adds	r3, #136	@ 0x88
 800452c:	443b      	add	r3, r7
 800452e:	2232      	movs	r2, #50	@ 0x32
 8004530:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8004534:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8004538:	3301      	adds	r3, #1
 800453a:	3388      	adds	r3, #136	@ 0x88
 800453c:	443b      	add	r3, r7
 800453e:	2200      	movs	r2, #0
 8004540:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "2");
 8004544:	4860      	ldr	r0, [pc, #384]	@ (80046c8 <main+0x4558>)
 8004546:	f003 ff33 	bl	80083b0 <Str_Len>
 800454a:	4603      	mov	r3, r0
 800454c:	b2db      	uxtb	r3, r3
 800454e:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8004552:	9300      	str	r3, [sp, #0]
 8004554:	4b5c      	ldr	r3, [pc, #368]	@ (80046c8 <main+0x4558>)
 8004556:	2101      	movs	r1, #1
 8004558:	4858      	ldr	r0, [pc, #352]	@ (80046bc <main+0x454c>)
 800455a:	f003 febc 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 800455e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8004562:	3301      	adds	r3, #1
 8004564:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8004568:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800456c:	461a      	mov	r2, r3
 800456e:	2101      	movs	r1, #1
 8004570:	4852      	ldr	r0, [pc, #328]	@ (80046bc <main+0x454c>)
 8004572:	f003 fe74 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8004576:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 800457a:	2301      	movs	r3, #1
 800457c:	2101      	movs	r1, #1
 800457e:	484f      	ldr	r0, [pc, #316]	@ (80046bc <main+0x454c>)
 8004580:	f003 fed3 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8004584:	f004 f87a 	bl	800867c <HAL_GetTick>
 8004588:	4603      	mov	r3, r0
 800458a:	33fa      	adds	r3, #250	@ 0xfa
 800458c:	677b      	str	r3, [r7, #116]	@ 0x74
 800458e:	e21e      	b.n	80049ce <main+0x485e>

			}
			//3 is entered
			else if (Keypad_Get_Key(&kp, kp_button_3)
 8004590:	2102      	movs	r1, #2
 8004592:	4849      	ldr	r0, [pc, #292]	@ (80046b8 <main+0x4548>)
 8004594:	f004 f802 	bl	800859c <Keypad_Get_Key>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d042      	beq.n	8004624 <main+0x44b4>
					&& (current_tick >= general_delay)) {
 800459e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80045a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d33e      	bcc.n	8004624 <main+0x44b4>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80045a6:	2300      	movs	r3, #0
 80045a8:	2200      	movs	r2, #0
 80045aa:	2101      	movs	r1, #1
 80045ac:	4843      	ldr	r0, [pc, #268]	@ (80046bc <main+0x454c>)
 80045ae:	f003 febc 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 4) {
 80045b2:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80045b6:	2b03      	cmp	r3, #3
 80045b8:	d827      	bhi.n	800460a <main+0x449a>
					time_date_buffer[input_index] = '3';
 80045ba:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80045be:	3388      	adds	r3, #136	@ 0x88
 80045c0:	443b      	add	r3, r7
 80045c2:	2233      	movs	r2, #51	@ 0x33
 80045c4:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 80045c8:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80045cc:	3301      	adds	r3, #1
 80045ce:	3388      	adds	r3, #136	@ 0x88
 80045d0:	443b      	add	r3, r7
 80045d2:	2200      	movs	r2, #0
 80045d4:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "3");
 80045d8:	483c      	ldr	r0, [pc, #240]	@ (80046cc <main+0x455c>)
 80045da:	f003 fee9 	bl	80083b0 <Str_Len>
 80045de:	4603      	mov	r3, r0
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 80045e6:	9300      	str	r3, [sp, #0]
 80045e8:	4b38      	ldr	r3, [pc, #224]	@ (80046cc <main+0x455c>)
 80045ea:	2101      	movs	r1, #1
 80045ec:	4833      	ldr	r0, [pc, #204]	@ (80046bc <main+0x454c>)
 80045ee:	f003 fe72 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 80045f2:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80045f6:	3301      	adds	r3, #1
 80045f8:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 80045fc:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8004600:	461a      	mov	r2, r3
 8004602:	2101      	movs	r1, #1
 8004604:	482d      	ldr	r0, [pc, #180]	@ (80046bc <main+0x454c>)
 8004606:	f003 fe2a 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 800460a:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 800460e:	2301      	movs	r3, #1
 8004610:	2101      	movs	r1, #1
 8004612:	482a      	ldr	r0, [pc, #168]	@ (80046bc <main+0x454c>)
 8004614:	f003 fe89 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8004618:	f004 f830 	bl	800867c <HAL_GetTick>
 800461c:	4603      	mov	r3, r0
 800461e:	33fa      	adds	r3, #250	@ 0xfa
 8004620:	677b      	str	r3, [r7, #116]	@ 0x74
 8004622:	e1d4      	b.n	80049ce <main+0x485e>

			}

			//4 is entered
			else if (Keypad_Get_Key(&kp, kp_button_4)
 8004624:	2104      	movs	r1, #4
 8004626:	4824      	ldr	r0, [pc, #144]	@ (80046b8 <main+0x4548>)
 8004628:	f003 ffb8 	bl	800859c <Keypad_Get_Key>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d050      	beq.n	80046d4 <main+0x4564>
					&& (current_tick >= general_delay)) {
 8004632:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004634:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004636:	429a      	cmp	r2, r3
 8004638:	d34c      	bcc.n	80046d4 <main+0x4564>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 800463a:	2300      	movs	r3, #0
 800463c:	2200      	movs	r2, #0
 800463e:	2101      	movs	r1, #1
 8004640:	481e      	ldr	r0, [pc, #120]	@ (80046bc <main+0x454c>)
 8004642:	f003 fe72 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 4) {
 8004646:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800464a:	2b03      	cmp	r3, #3
 800464c:	d827      	bhi.n	800469e <main+0x452e>
					time_date_buffer[input_index] = '4';
 800464e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8004652:	3388      	adds	r3, #136	@ 0x88
 8004654:	443b      	add	r3, r7
 8004656:	2234      	movs	r2, #52	@ 0x34
 8004658:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 800465c:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8004660:	3301      	adds	r3, #1
 8004662:	3388      	adds	r3, #136	@ 0x88
 8004664:	443b      	add	r3, r7
 8004666:	2200      	movs	r2, #0
 8004668:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "4");
 800466c:	4818      	ldr	r0, [pc, #96]	@ (80046d0 <main+0x4560>)
 800466e:	f003 fe9f 	bl	80083b0 <Str_Len>
 8004672:	4603      	mov	r3, r0
 8004674:	b2db      	uxtb	r3, r3
 8004676:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 800467a:	9300      	str	r3, [sp, #0]
 800467c:	4b14      	ldr	r3, [pc, #80]	@ (80046d0 <main+0x4560>)
 800467e:	2101      	movs	r1, #1
 8004680:	480e      	ldr	r0, [pc, #56]	@ (80046bc <main+0x454c>)
 8004682:	f003 fe28 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 8004686:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800468a:	3301      	adds	r3, #1
 800468c:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8004690:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8004694:	461a      	mov	r2, r3
 8004696:	2101      	movs	r1, #1
 8004698:	4808      	ldr	r0, [pc, #32]	@ (80046bc <main+0x454c>)
 800469a:	f003 fde0 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 800469e:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 80046a2:	2301      	movs	r3, #1
 80046a4:	2101      	movs	r1, #1
 80046a6:	4805      	ldr	r0, [pc, #20]	@ (80046bc <main+0x454c>)
 80046a8:	f003 fe3f 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 80046ac:	f003 ffe6 	bl	800867c <HAL_GetTick>
 80046b0:	4603      	mov	r3, r0
 80046b2:	33fa      	adds	r3, #250	@ 0xfa
 80046b4:	677b      	str	r3, [r7, #116]	@ 0x74
 80046b6:	e18a      	b.n	80049ce <main+0x485e>
 80046b8:	20000000 	.word	0x20000000
 80046bc:	2000001c 	.word	0x2000001c
 80046c0:	0800c368 	.word	0x0800c368
 80046c4:	0800c36c 	.word	0x0800c36c
 80046c8:	0800c370 	.word	0x0800c370
 80046cc:	0800c374 	.word	0x0800c374
 80046d0:	0800c378 	.word	0x0800c378

			}
			//5 is entered
			else if (Keypad_Get_Key(&kp, kp_button_5)
 80046d4:	2105      	movs	r1, #5
 80046d6:	4893      	ldr	r0, [pc, #588]	@ (8004924 <main+0x47b4>)
 80046d8:	f003 ff60 	bl	800859c <Keypad_Get_Key>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d042      	beq.n	8004768 <main+0x45f8>
					&& (current_tick >= general_delay)) {
 80046e2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80046e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d33e      	bcc.n	8004768 <main+0x45f8>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80046ea:	2300      	movs	r3, #0
 80046ec:	2200      	movs	r2, #0
 80046ee:	2101      	movs	r1, #1
 80046f0:	488d      	ldr	r0, [pc, #564]	@ (8004928 <main+0x47b8>)
 80046f2:	f003 fe1a 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 4) {
 80046f6:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80046fa:	2b03      	cmp	r3, #3
 80046fc:	d827      	bhi.n	800474e <main+0x45de>
					time_date_buffer[input_index] = '5';
 80046fe:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8004702:	3388      	adds	r3, #136	@ 0x88
 8004704:	443b      	add	r3, r7
 8004706:	2235      	movs	r2, #53	@ 0x35
 8004708:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 800470c:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8004710:	3301      	adds	r3, #1
 8004712:	3388      	adds	r3, #136	@ 0x88
 8004714:	443b      	add	r3, r7
 8004716:	2200      	movs	r2, #0
 8004718:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "5");
 800471c:	4883      	ldr	r0, [pc, #524]	@ (800492c <main+0x47bc>)
 800471e:	f003 fe47 	bl	80083b0 <Str_Len>
 8004722:	4603      	mov	r3, r0
 8004724:	b2db      	uxtb	r3, r3
 8004726:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 800472a:	9300      	str	r3, [sp, #0]
 800472c:	4b7f      	ldr	r3, [pc, #508]	@ (800492c <main+0x47bc>)
 800472e:	2101      	movs	r1, #1
 8004730:	487d      	ldr	r0, [pc, #500]	@ (8004928 <main+0x47b8>)
 8004732:	f003 fdd0 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 8004736:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800473a:	3301      	adds	r3, #1
 800473c:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8004740:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8004744:	461a      	mov	r2, r3
 8004746:	2101      	movs	r1, #1
 8004748:	4877      	ldr	r0, [pc, #476]	@ (8004928 <main+0x47b8>)
 800474a:	f003 fd88 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 800474e:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8004752:	2301      	movs	r3, #1
 8004754:	2101      	movs	r1, #1
 8004756:	4874      	ldr	r0, [pc, #464]	@ (8004928 <main+0x47b8>)
 8004758:	f003 fde7 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 800475c:	f003 ff8e 	bl	800867c <HAL_GetTick>
 8004760:	4603      	mov	r3, r0
 8004762:	33fa      	adds	r3, #250	@ 0xfa
 8004764:	677b      	str	r3, [r7, #116]	@ 0x74
 8004766:	e132      	b.n	80049ce <main+0x485e>

			}

			//6 is entered
			else if (Keypad_Get_Key(&kp, kp_button_6)
 8004768:	2106      	movs	r1, #6
 800476a:	486e      	ldr	r0, [pc, #440]	@ (8004924 <main+0x47b4>)
 800476c:	f003 ff16 	bl	800859c <Keypad_Get_Key>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d042      	beq.n	80047fc <main+0x468c>
					&& (current_tick >= general_delay)) {
 8004776:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004778:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800477a:	429a      	cmp	r2, r3
 800477c:	d33e      	bcc.n	80047fc <main+0x468c>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 800477e:	2300      	movs	r3, #0
 8004780:	2200      	movs	r2, #0
 8004782:	2101      	movs	r1, #1
 8004784:	4868      	ldr	r0, [pc, #416]	@ (8004928 <main+0x47b8>)
 8004786:	f003 fdd0 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 4) {
 800478a:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800478e:	2b03      	cmp	r3, #3
 8004790:	d827      	bhi.n	80047e2 <main+0x4672>
					time_date_buffer[input_index] = '6';
 8004792:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8004796:	3388      	adds	r3, #136	@ 0x88
 8004798:	443b      	add	r3, r7
 800479a:	2236      	movs	r2, #54	@ 0x36
 800479c:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 80047a0:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80047a4:	3301      	adds	r3, #1
 80047a6:	3388      	adds	r3, #136	@ 0x88
 80047a8:	443b      	add	r3, r7
 80047aa:	2200      	movs	r2, #0
 80047ac:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "6");
 80047b0:	485f      	ldr	r0, [pc, #380]	@ (8004930 <main+0x47c0>)
 80047b2:	f003 fdfd 	bl	80083b0 <Str_Len>
 80047b6:	4603      	mov	r3, r0
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 80047be:	9300      	str	r3, [sp, #0]
 80047c0:	4b5b      	ldr	r3, [pc, #364]	@ (8004930 <main+0x47c0>)
 80047c2:	2101      	movs	r1, #1
 80047c4:	4858      	ldr	r0, [pc, #352]	@ (8004928 <main+0x47b8>)
 80047c6:	f003 fd86 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 80047ca:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80047ce:	3301      	adds	r3, #1
 80047d0:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 80047d4:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80047d8:	461a      	mov	r2, r3
 80047da:	2101      	movs	r1, #1
 80047dc:	4852      	ldr	r0, [pc, #328]	@ (8004928 <main+0x47b8>)
 80047de:	f003 fd3e 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 80047e2:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 80047e6:	2301      	movs	r3, #1
 80047e8:	2101      	movs	r1, #1
 80047ea:	484f      	ldr	r0, [pc, #316]	@ (8004928 <main+0x47b8>)
 80047ec:	f003 fd9d 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 80047f0:	f003 ff44 	bl	800867c <HAL_GetTick>
 80047f4:	4603      	mov	r3, r0
 80047f6:	33fa      	adds	r3, #250	@ 0xfa
 80047f8:	677b      	str	r3, [r7, #116]	@ 0x74
 80047fa:	e0e8      	b.n	80049ce <main+0x485e>

			}

			//7 is entered
			else if (Keypad_Get_Key(&kp, kp_button_7)
 80047fc:	2108      	movs	r1, #8
 80047fe:	4849      	ldr	r0, [pc, #292]	@ (8004924 <main+0x47b4>)
 8004800:	f003 fecc 	bl	800859c <Keypad_Get_Key>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d042      	beq.n	8004890 <main+0x4720>
					&& (current_tick >= general_delay)) {
 800480a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800480c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800480e:	429a      	cmp	r2, r3
 8004810:	d33e      	bcc.n	8004890 <main+0x4720>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8004812:	2300      	movs	r3, #0
 8004814:	2200      	movs	r2, #0
 8004816:	2101      	movs	r1, #1
 8004818:	4843      	ldr	r0, [pc, #268]	@ (8004928 <main+0x47b8>)
 800481a:	f003 fd86 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 4) {
 800481e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8004822:	2b03      	cmp	r3, #3
 8004824:	d827      	bhi.n	8004876 <main+0x4706>
					time_date_buffer[input_index] = '7';
 8004826:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800482a:	3388      	adds	r3, #136	@ 0x88
 800482c:	443b      	add	r3, r7
 800482e:	2237      	movs	r2, #55	@ 0x37
 8004830:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8004834:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8004838:	3301      	adds	r3, #1
 800483a:	3388      	adds	r3, #136	@ 0x88
 800483c:	443b      	add	r3, r7
 800483e:	2200      	movs	r2, #0
 8004840:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "7");
 8004844:	483b      	ldr	r0, [pc, #236]	@ (8004934 <main+0x47c4>)
 8004846:	f003 fdb3 	bl	80083b0 <Str_Len>
 800484a:	4603      	mov	r3, r0
 800484c:	b2db      	uxtb	r3, r3
 800484e:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8004852:	9300      	str	r3, [sp, #0]
 8004854:	4b37      	ldr	r3, [pc, #220]	@ (8004934 <main+0x47c4>)
 8004856:	2101      	movs	r1, #1
 8004858:	4833      	ldr	r0, [pc, #204]	@ (8004928 <main+0x47b8>)
 800485a:	f003 fd3c 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 800485e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8004862:	3301      	adds	r3, #1
 8004864:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8004868:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800486c:	461a      	mov	r2, r3
 800486e:	2101      	movs	r1, #1
 8004870:	482d      	ldr	r0, [pc, #180]	@ (8004928 <main+0x47b8>)
 8004872:	f003 fcf4 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8004876:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 800487a:	2301      	movs	r3, #1
 800487c:	2101      	movs	r1, #1
 800487e:	482a      	ldr	r0, [pc, #168]	@ (8004928 <main+0x47b8>)
 8004880:	f003 fd53 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8004884:	f003 fefa 	bl	800867c <HAL_GetTick>
 8004888:	4603      	mov	r3, r0
 800488a:	33fa      	adds	r3, #250	@ 0xfa
 800488c:	677b      	str	r3, [r7, #116]	@ 0x74
 800488e:	e09e      	b.n	80049ce <main+0x485e>

			}

			//8 is entered
			else if (Keypad_Get_Key(&kp, kp_button_8)
 8004890:	2109      	movs	r1, #9
 8004892:	4824      	ldr	r0, [pc, #144]	@ (8004924 <main+0x47b4>)
 8004894:	f003 fe82 	bl	800859c <Keypad_Get_Key>
 8004898:	4603      	mov	r3, r0
 800489a:	2b00      	cmp	r3, #0
 800489c:	d04e      	beq.n	800493c <main+0x47cc>
					&& (current_tick >= general_delay)) {
 800489e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80048a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d34a      	bcc.n	800493c <main+0x47cc>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80048a6:	2300      	movs	r3, #0
 80048a8:	2200      	movs	r2, #0
 80048aa:	2101      	movs	r1, #1
 80048ac:	481e      	ldr	r0, [pc, #120]	@ (8004928 <main+0x47b8>)
 80048ae:	f003 fd3c 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 4) {
 80048b2:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80048b6:	2b03      	cmp	r3, #3
 80048b8:	d827      	bhi.n	800490a <main+0x479a>
					time_date_buffer[input_index] = '8';
 80048ba:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80048be:	3388      	adds	r3, #136	@ 0x88
 80048c0:	443b      	add	r3, r7
 80048c2:	2238      	movs	r2, #56	@ 0x38
 80048c4:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 80048c8:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80048cc:	3301      	adds	r3, #1
 80048ce:	3388      	adds	r3, #136	@ 0x88
 80048d0:	443b      	add	r3, r7
 80048d2:	2200      	movs	r2, #0
 80048d4:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "8");
 80048d8:	4817      	ldr	r0, [pc, #92]	@ (8004938 <main+0x47c8>)
 80048da:	f003 fd69 	bl	80083b0 <Str_Len>
 80048de:	4603      	mov	r3, r0
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 80048e6:	9300      	str	r3, [sp, #0]
 80048e8:	4b13      	ldr	r3, [pc, #76]	@ (8004938 <main+0x47c8>)
 80048ea:	2101      	movs	r1, #1
 80048ec:	480e      	ldr	r0, [pc, #56]	@ (8004928 <main+0x47b8>)
 80048ee:	f003 fcf2 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 80048f2:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80048f6:	3301      	adds	r3, #1
 80048f8:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 80048fc:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8004900:	461a      	mov	r2, r3
 8004902:	2101      	movs	r1, #1
 8004904:	4808      	ldr	r0, [pc, #32]	@ (8004928 <main+0x47b8>)
 8004906:	f003 fcaa 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 800490a:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 800490e:	2301      	movs	r3, #1
 8004910:	2101      	movs	r1, #1
 8004912:	4805      	ldr	r0, [pc, #20]	@ (8004928 <main+0x47b8>)
 8004914:	f003 fd09 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8004918:	f003 feb0 	bl	800867c <HAL_GetTick>
 800491c:	4603      	mov	r3, r0
 800491e:	33fa      	adds	r3, #250	@ 0xfa
 8004920:	677b      	str	r3, [r7, #116]	@ 0x74
 8004922:	e054      	b.n	80049ce <main+0x485e>
 8004924:	20000000 	.word	0x20000000
 8004928:	2000001c 	.word	0x2000001c
 800492c:	0800c37c 	.word	0x0800c37c
 8004930:	0800c380 	.word	0x0800c380
 8004934:	0800c384 	.word	0x0800c384
 8004938:	0800c388 	.word	0x0800c388

			}

			//9 is entered
			else if (Keypad_Get_Key(&kp, kp_button_9)
 800493c:	210a      	movs	r1, #10
 800493e:	48b1      	ldr	r0, [pc, #708]	@ (8004c04 <main+0x4a94>)
 8004940:	f003 fe2c 	bl	800859c <Keypad_Get_Key>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d041      	beq.n	80049ce <main+0x485e>
					&& (current_tick >= general_delay)) {
 800494a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800494c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800494e:	429a      	cmp	r2, r3
 8004950:	d33d      	bcc.n	80049ce <main+0x485e>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8004952:	2300      	movs	r3, #0
 8004954:	2200      	movs	r2, #0
 8004956:	2101      	movs	r1, #1
 8004958:	48ab      	ldr	r0, [pc, #684]	@ (8004c08 <main+0x4a98>)
 800495a:	f003 fce6 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 4) {
 800495e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8004962:	2b03      	cmp	r3, #3
 8004964:	d827      	bhi.n	80049b6 <main+0x4846>
					time_date_buffer[input_index] = '9';
 8004966:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800496a:	3388      	adds	r3, #136	@ 0x88
 800496c:	443b      	add	r3, r7
 800496e:	2239      	movs	r2, #57	@ 0x39
 8004970:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8004974:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8004978:	3301      	adds	r3, #1
 800497a:	3388      	adds	r3, #136	@ 0x88
 800497c:	443b      	add	r3, r7
 800497e:	2200      	movs	r2, #0
 8004980:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "9");
 8004984:	48a1      	ldr	r0, [pc, #644]	@ (8004c0c <main+0x4a9c>)
 8004986:	f003 fd13 	bl	80083b0 <Str_Len>
 800498a:	4603      	mov	r3, r0
 800498c:	b2db      	uxtb	r3, r3
 800498e:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8004992:	9300      	str	r3, [sp, #0]
 8004994:	4b9d      	ldr	r3, [pc, #628]	@ (8004c0c <main+0x4a9c>)
 8004996:	2101      	movs	r1, #1
 8004998:	489b      	ldr	r0, [pc, #620]	@ (8004c08 <main+0x4a98>)
 800499a:	f003 fc9c 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 800499e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80049a2:	3301      	adds	r3, #1
 80049a4:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 80049a8:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80049ac:	461a      	mov	r2, r3
 80049ae:	2101      	movs	r1, #1
 80049b0:	4895      	ldr	r0, [pc, #596]	@ (8004c08 <main+0x4a98>)
 80049b2:	f003 fc54 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 80049b6:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 80049ba:	2301      	movs	r3, #1
 80049bc:	2101      	movs	r1, #1
 80049be:	4892      	ldr	r0, [pc, #584]	@ (8004c08 <main+0x4a98>)
 80049c0:	f003 fcb3 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 80049c4:	f003 fe5a 	bl	800867c <HAL_GetTick>
 80049c8:	4603      	mov	r3, r0
 80049ca:	33fa      	adds	r3, #250	@ 0xfa
 80049cc:	677b      	str	r3, [r7, #116]	@ 0x74

			}

			//when yes is entered -> check for year validation (state 40)
			if (Keypad_Get_Key(&kp, kp_button_yes)
 80049ce:	210f      	movs	r1, #15
 80049d0:	488c      	ldr	r0, [pc, #560]	@ (8004c04 <main+0x4a94>)
 80049d2:	f003 fde3 	bl	800859c <Keypad_Get_Key>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d021      	beq.n	8004a20 <main+0x48b0>
					&& (current_tick >= general_delay)) {
 80049dc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80049de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d31d      	bcc.n	8004a20 <main+0x48b0>

				Alcd_Clear(&lcd);
 80049e4:	4888      	ldr	r0, [pc, #544]	@ (8004c08 <main+0x4a98>)
 80049e6:	f003 fc8f 	bl	8008308 <Alcd_Clear>

				snprintf(timeString, sizeof(timeString), "%02d", buffer);
 80049ea:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80049ee:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80049f2:	4a87      	ldr	r2, [pc, #540]	@ (8004c10 <main+0x4aa0>)
 80049f4:	2132      	movs	r1, #50	@ 0x32
 80049f6:	f006 ff5b 	bl	800b8b0 <sniprintf>
				Alcd_PutAt_n(&lcd, 1, 0, timeString, strlen(timeString));
 80049fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80049fe:	4618      	mov	r0, r3
 8004a00:	f7fb fbae 	bl	8000160 <strlen>
 8004a04:	4603      	mov	r3, r0
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8004a0c:	9300      	str	r3, [sp, #0]
 8004a0e:	4613      	mov	r3, r2
 8004a10:	2200      	movs	r2, #0
 8004a12:	2101      	movs	r1, #1
 8004a14:	487c      	ldr	r0, [pc, #496]	@ (8004c08 <main+0x4a98>)
 8004a16:	f003 fc5e 	bl	80082d6 <Alcd_PutAt_n>

				status = 40;
 8004a1a:	2328      	movs	r3, #40	@ 0x28
 8004a1c:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83

			}

			//
			general_delay = HAL_GetTick() + 250;
 8004a20:	f003 fe2c 	bl	800867c <HAL_GetTick>
 8004a24:	4603      	mov	r3, r0
 8004a26:	33fa      	adds	r3, #250	@ 0xfa
 8004a28:	677b      	str	r3, [r7, #116]	@ 0x74
		while ((status == 39) && (current_tick >= general_delay)) {
 8004a2a:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 8004a2e:	2b27      	cmp	r3, #39	@ 0x27
 8004a30:	f040 8082 	bne.w	8004b38 <main+0x49c8>
 8004a34:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004a36:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	f4bf ac73 	bcs.w	8004324 <main+0x41b4>
		}

		//year validation phase
		while ((status == 40) && (current_tick >= general_delay)) {
 8004a3e:	e07b      	b.n	8004b38 <main+0x49c8>

			//get the current tick number
			current_tick = HAL_GetTick();
 8004a40:	f003 fe1c 	bl	800867c <HAL_GetTick>
 8004a44:	67f8      	str	r0, [r7, #124]	@ 0x7c

			Alcd_Clear(&lcd);
 8004a46:	4870      	ldr	r0, [pc, #448]	@ (8004c08 <main+0x4a98>)
 8004a48:	f003 fc5e 	bl	8008308 <Alcd_Clear>

			snprintf(timeString, sizeof(timeString), "%02d", status);
 8004a4c:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 8004a50:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8004a54:	4a6e      	ldr	r2, [pc, #440]	@ (8004c10 <main+0x4aa0>)
 8004a56:	2132      	movs	r1, #50	@ 0x32
 8004a58:	f006 ff2a 	bl	800b8b0 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 8004a5c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004a60:	4618      	mov	r0, r3
 8004a62:	f7fb fb7d 	bl	8000160 <strlen>
 8004a66:	4603      	mov	r3, r0
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8004a6e:	9300      	str	r3, [sp, #0]
 8004a70:	4613      	mov	r3, r2
 8004a72:	220e      	movs	r2, #14
 8004a74:	2100      	movs	r1, #0
 8004a76:	4864      	ldr	r0, [pc, #400]	@ (8004c08 <main+0x4a98>)
 8004a78:	f003 fc2d 	bl	80082d6 <Alcd_PutAt_n>

			buffer = atoi(time_date_buffer);
 8004a7c:	f107 0310 	add.w	r3, r7, #16
 8004a80:	4618      	mov	r0, r3
 8004a82:	f006 fe8c 	bl	800b79e <atoi>
 8004a86:	4603      	mov	r3, r0
 8004a88:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

			//check if year is within the range 2024 to 2099
			if (buffer > 2023 && buffer < 2100) {
 8004a8c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004a90:	f5b3 6ffd 	cmp.w	r3, #2024	@ 0x7e8
 8004a94:	d31d      	bcc.n	8004ad2 <main+0x4962>
 8004a96:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004a9a:	f640 0233 	movw	r2, #2099	@ 0x833
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d817      	bhi.n	8004ad2 <main+0x4962>

				//move to confirm save state
				status = 41;
 8004aa2:	2329      	movs	r3, #41	@ 0x29
 8004aa4:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83

				//set the year value
				CLK.year = buffer;
 8004aa8:	4a5a      	ldr	r2, [pc, #360]	@ (8004c14 <main+0x4aa4>)
 8004aaa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004aae:	81d3      	strh	r3, [r2, #14]

				input_index = 0;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	2200      	movs	r2, #0
 8004aba:	2101      	movs	r1, #1
 8004abc:	4852      	ldr	r0, [pc, #328]	@ (8004c08 <main+0x4a98>)
 8004abe:	f003 fc34 	bl	800832a <Alcd_Display_Control>
				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8004ac2:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	2101      	movs	r1, #1
 8004aca:	484f      	ldr	r0, [pc, #316]	@ (8004c08 <main+0x4a98>)
 8004acc:	f003 fc2d 	bl	800832a <Alcd_Display_Control>
 8004ad0:	e027      	b.n	8004b22 <main+0x49b2>
			} else {
				Alcd_PutAt(&lcd, 0, 0, "invalid");
 8004ad2:	4851      	ldr	r0, [pc, #324]	@ (8004c18 <main+0x4aa8>)
 8004ad4:	f003 fc6c 	bl	80083b0 <Str_Len>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	9300      	str	r3, [sp, #0]
 8004ade:	4b4e      	ldr	r3, [pc, #312]	@ (8004c18 <main+0x4aa8>)
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	2100      	movs	r1, #0
 8004ae4:	4848      	ldr	r0, [pc, #288]	@ (8004c08 <main+0x4a98>)
 8004ae6:	f003 fbf6 	bl	80082d6 <Alcd_PutAt_n>
				delay_flag = 1;
 8004aea:	2301      	movs	r3, #1
 8004aec:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85

				input_index = 0;
 8004af0:	2300      	movs	r3, #0
 8004af2:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8004af6:	2300      	movs	r3, #0
 8004af8:	2200      	movs	r2, #0
 8004afa:	2101      	movs	r1, #1
 8004afc:	4842      	ldr	r0, [pc, #264]	@ (8004c08 <main+0x4a98>)
 8004afe:	f003 fc14 	bl	800832a <Alcd_Display_Control>
				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8004b02:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8004b06:	2301      	movs	r3, #1
 8004b08:	2101      	movs	r1, #1
 8004b0a:	483f      	ldr	r0, [pc, #252]	@ (8004c08 <main+0x4a98>)
 8004b0c:	f003 fc0d 	bl	800832a <Alcd_Display_Control>
				//return to entering year
				status = 39;
 8004b10:	2327      	movs	r3, #39	@ 0x27
 8004b12:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83

				general_delay = HAL_GetTick() + 1000;
 8004b16:	f003 fdb1 	bl	800867c <HAL_GetTick>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8004b20:	677b      	str	r3, [r7, #116]	@ 0x74
			}

			//create a delay
			if ((delay_flag == 1) && (current_tick >= general_delay)) {
 8004b22:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d106      	bne.n	8004b38 <main+0x49c8>
 8004b2a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004b2c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d302      	bcc.n	8004b38 <main+0x49c8>

				delay_flag = 0;
 8004b32:	2300      	movs	r3, #0
 8004b34:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
		while ((status == 40) && (current_tick >= general_delay)) {
 8004b38:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 8004b3c:	2b28      	cmp	r3, #40	@ 0x28
 8004b3e:	d157      	bne.n	8004bf0 <main+0x4a80>
 8004b40:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004b42:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b44:	429a      	cmp	r2, r3
 8004b46:	f4bf af7b 	bcs.w	8004a40 <main+0x48d0>
			}

		}

		//date confirmation menu (state 41)
		while ((status == 41) && (current_tick >= general_delay)) {
 8004b4a:	e051      	b.n	8004bf0 <main+0x4a80>

			//get the current tick number
			current_tick = HAL_GetTick();
 8004b4c:	f003 fd96 	bl	800867c <HAL_GetTick>
 8004b50:	67f8      	str	r0, [r7, #124]	@ 0x7c

			Alcd_Clear(&lcd);
 8004b52:	482d      	ldr	r0, [pc, #180]	@ (8004c08 <main+0x4a98>)
 8004b54:	f003 fbd8 	bl	8008308 <Alcd_Clear>
			Alcd_PutAt(&lcd, 0, 0, "confirm?");
 8004b58:	4830      	ldr	r0, [pc, #192]	@ (8004c1c <main+0x4aac>)
 8004b5a:	f003 fc29 	bl	80083b0 <Str_Len>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	9300      	str	r3, [sp, #0]
 8004b64:	4b2d      	ldr	r3, [pc, #180]	@ (8004c1c <main+0x4aac>)
 8004b66:	2200      	movs	r2, #0
 8004b68:	2100      	movs	r1, #0
 8004b6a:	4827      	ldr	r0, [pc, #156]	@ (8004c08 <main+0x4a98>)
 8004b6c:	f003 fbb3 	bl	80082d6 <Alcd_PutAt_n>

			snprintf(timeString, sizeof(timeString), "%02d", status);
 8004b70:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 8004b74:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8004b78:	4a25      	ldr	r2, [pc, #148]	@ (8004c10 <main+0x4aa0>)
 8004b7a:	2132      	movs	r1, #50	@ 0x32
 8004b7c:	f006 fe98 	bl	800b8b0 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 8004b80:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004b84:	4618      	mov	r0, r3
 8004b86:	f7fb faeb 	bl	8000160 <strlen>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8004b92:	9300      	str	r3, [sp, #0]
 8004b94:	4613      	mov	r3, r2
 8004b96:	220e      	movs	r2, #14
 8004b98:	2100      	movs	r1, #0
 8004b9a:	481b      	ldr	r0, [pc, #108]	@ (8004c08 <main+0x4a98>)
 8004b9c:	f003 fb9b 	bl	80082d6 <Alcd_PutAt_n>

			//check if any button is pressed
			//check for any keypad input
			Keypad_Refresh(&kp);
 8004ba0:	4818      	ldr	r0, [pc, #96]	@ (8004c04 <main+0x4a94>)
 8004ba2:	f003 fc5f 	bl	8008464 <Keypad_Refresh>

			//yes is selected
			if (Keypad_Get_Key(&kp, kp_button_yes)
 8004ba6:	210f      	movs	r1, #15
 8004ba8:	4816      	ldr	r0, [pc, #88]	@ (8004c04 <main+0x4a94>)
 8004baa:	f003 fcf7 	bl	800859c <Keypad_Get_Key>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d00a      	beq.n	8004bca <main+0x4a5a>
					&& (current_tick >= general_delay)) {
 8004bb4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004bb6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d306      	bcc.n	8004bca <main+0x4a5a>

				Ds1307_set(&CLK);
 8004bbc:	4815      	ldr	r0, [pc, #84]	@ (8004c14 <main+0x4aa4>)
 8004bbe:	f003 f8ba 	bl	8007d36 <Ds1307_set>

				//return to edit menu
				status = 21;
 8004bc2:	2315      	movs	r3, #21
 8004bc4:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 8004bc8:	e00d      	b.n	8004be6 <main+0x4a76>

			}

			//back is selected -> back to enter year state
			else if (Keypad_Get_Key(&kp, kp_button_no_back)
 8004bca:	210e      	movs	r1, #14
 8004bcc:	480d      	ldr	r0, [pc, #52]	@ (8004c04 <main+0x4a94>)
 8004bce:	f003 fce5 	bl	800859c <Keypad_Get_Key>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d006      	beq.n	8004be6 <main+0x4a76>
					&& (current_tick >= general_delay)) {
 8004bd8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004bda:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d302      	bcc.n	8004be6 <main+0x4a76>

				status = 39;
 8004be0:	2327      	movs	r3, #39	@ 0x27
 8004be2:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83

			}

			general_delay = HAL_GetTick() + 250;
 8004be6:	f003 fd49 	bl	800867c <HAL_GetTick>
 8004bea:	4603      	mov	r3, r0
 8004bec:	33fa      	adds	r3, #250	@ 0xfa
 8004bee:	677b      	str	r3, [r7, #116]	@ 0x74
		while ((status == 41) && (current_tick >= general_delay)) {
 8004bf0:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 8004bf4:	2b29      	cmp	r3, #41	@ 0x29
 8004bf6:	d17c      	bne.n	8004cf2 <main+0x4b82>
 8004bf8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004bfa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d2a5      	bcs.n	8004b4c <main+0x49dc>
		}

		//status 24 -> calibrate dosing
		while ((status == 24) && (current_tick >= general_delay)) {
 8004c00:	e077      	b.n	8004cf2 <main+0x4b82>
 8004c02:	bf00      	nop
 8004c04:	20000000 	.word	0x20000000
 8004c08:	2000001c 	.word	0x2000001c
 8004c0c:	0800c38c 	.word	0x0800c38c
 8004c10:	0800c280 	.word	0x0800c280
 8004c14:	20000150 	.word	0x20000150
 8004c18:	0800c390 	.word	0x0800c390
 8004c1c:	0800c3b8 	.word	0x0800c3b8

			//get the current tick number
			current_tick = HAL_GetTick();
 8004c20:	f003 fd2c 	bl	800867c <HAL_GetTick>
 8004c24:	67f8      	str	r0, [r7, #124]	@ 0x7c

			//moving the motor to the 0 position
			TIM1->CCR1 = 999;
 8004c26:	4bb4      	ldr	r3, [pc, #720]	@ (8004ef8 <main+0x4d88>)
 8004c28:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004c2c:	635a      	str	r2, [r3, #52]	@ 0x34

			Alcd_Clear(&lcd);
 8004c2e:	48b3      	ldr	r0, [pc, #716]	@ (8004efc <main+0x4d8c>)
 8004c30:	f003 fb6a 	bl	8008308 <Alcd_Clear>
			Alcd_PutAt(&lcd, 0, 0, "hold feeding");
 8004c34:	48b2      	ldr	r0, [pc, #712]	@ (8004f00 <main+0x4d90>)
 8004c36:	f003 fbbb 	bl	80083b0 <Str_Len>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	9300      	str	r3, [sp, #0]
 8004c40:	4baf      	ldr	r3, [pc, #700]	@ (8004f00 <main+0x4d90>)
 8004c42:	2200      	movs	r2, #0
 8004c44:	2100      	movs	r1, #0
 8004c46:	48ad      	ldr	r0, [pc, #692]	@ (8004efc <main+0x4d8c>)
 8004c48:	f003 fb45 	bl	80082d6 <Alcd_PutAt_n>
			Alcd_PutAt(&lcd, 1, 0, "till finishing");
 8004c4c:	48ad      	ldr	r0, [pc, #692]	@ (8004f04 <main+0x4d94>)
 8004c4e:	f003 fbaf 	bl	80083b0 <Str_Len>
 8004c52:	4603      	mov	r3, r0
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	9300      	str	r3, [sp, #0]
 8004c58:	4baa      	ldr	r3, [pc, #680]	@ (8004f04 <main+0x4d94>)
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	2101      	movs	r1, #1
 8004c5e:	48a7      	ldr	r0, [pc, #668]	@ (8004efc <main+0x4d8c>)
 8004c60:	f003 fb39 	bl	80082d6 <Alcd_PutAt_n>
			snprintf(timeString, sizeof(timeString), "%02d", status);
 8004c64:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 8004c68:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8004c6c:	4aa6      	ldr	r2, [pc, #664]	@ (8004f08 <main+0x4d98>)
 8004c6e:	2132      	movs	r1, #50	@ 0x32
 8004c70:	f006 fe1e 	bl	800b8b0 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 8004c74:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f7fb fa71 	bl	8000160 <strlen>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8004c86:	9300      	str	r3, [sp, #0]
 8004c88:	4613      	mov	r3, r2
 8004c8a:	220e      	movs	r2, #14
 8004c8c:	2100      	movs	r1, #0
 8004c8e:	489b      	ldr	r0, [pc, #620]	@ (8004efc <main+0x4d8c>)
 8004c90:	f003 fb21 	bl	80082d6 <Alcd_PutAt_n>

			//start_tick = HAL_GetTick();

			//check if any button is pressed
			//check for any keypad input
			Keypad_Refresh(&kp);
 8004c94:	489d      	ldr	r0, [pc, #628]	@ (8004f0c <main+0x4d9c>)
 8004c96:	f003 fbe5 	bl	8008464 <Keypad_Refresh>

			//in case feeding is selected -> start moving the motor
			if (Keypad_Get_Key(&kp, kp_button_force_feed)
 8004c9a:	210b      	movs	r1, #11
 8004c9c:	489b      	ldr	r0, [pc, #620]	@ (8004f0c <main+0x4d9c>)
 8004c9e:	f003 fc7d 	bl	800859c <Keypad_Get_Key>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d011      	beq.n	8004ccc <main+0x4b5c>
					&& (current_tick >= general_delay)) {
 8004ca8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004caa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d30d      	bcc.n	8004ccc <main+0x4b5c>
				Alcd_Clear(&lcd);
 8004cb0:	4892      	ldr	r0, [pc, #584]	@ (8004efc <main+0x4d8c>)
 8004cb2:	f003 fb29 	bl	8008308 <Alcd_Clear>

				//moving the motor to the 180 position
				TIM1->CCR1 = 1999;
 8004cb6:	4b90      	ldr	r3, [pc, #576]	@ (8004ef8 <main+0x4d88>)
 8004cb8:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8004cbc:	635a      	str	r2, [r3, #52]	@ 0x34
				start_tick = HAL_GetTick();
 8004cbe:	f003 fcdd 	bl	800867c <HAL_GetTick>
 8004cc2:	6738      	str	r0, [r7, #112]	@ 0x70

				status = 42;
 8004cc4:	232a      	movs	r3, #42	@ 0x2a
 8004cc6:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 8004cca:	e00d      	b.n	8004ce8 <main+0x4b78>

			}

			//back is selected
			else if (Keypad_Get_Key(&kp, kp_button_no_back)
 8004ccc:	210e      	movs	r1, #14
 8004cce:	488f      	ldr	r0, [pc, #572]	@ (8004f0c <main+0x4d9c>)
 8004cd0:	f003 fc64 	bl	800859c <Keypad_Get_Key>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d006      	beq.n	8004ce8 <main+0x4b78>
					&& (current_tick >= general_delay)) {
 8004cda:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004cdc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d302      	bcc.n	8004ce8 <main+0x4b78>

				status = 21;
 8004ce2:	2315      	movs	r3, #21
 8004ce4:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83

			}

			general_delay = HAL_GetTick() + 25;
 8004ce8:	f003 fcc8 	bl	800867c <HAL_GetTick>
 8004cec:	4603      	mov	r3, r0
 8004cee:	3319      	adds	r3, #25
 8004cf0:	677b      	str	r3, [r7, #116]	@ 0x74
		while ((status == 24) && (current_tick >= general_delay)) {
 8004cf2:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 8004cf6:	2b18      	cmp	r3, #24
 8004cf8:	d159      	bne.n	8004dae <main+0x4c3e>
 8004cfa:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004cfc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d28e      	bcs.n	8004c20 <main+0x4ab0>
		}

		//status 42 -> measuring for calibrating
		while ((status == 42) && (current_tick >= general_delay)) {
 8004d02:	e054      	b.n	8004dae <main+0x4c3e>

			// Update current_tick to the current time
			current_tick = HAL_GetTick();
 8004d04:	f003 fcba 	bl	800867c <HAL_GetTick>
 8004d08:	67f8      	str	r0, [r7, #124]	@ 0x7c

			snprintf(timeString, sizeof(timeString), "%02d", status);
 8004d0a:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 8004d0e:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8004d12:	4a7d      	ldr	r2, [pc, #500]	@ (8004f08 <main+0x4d98>)
 8004d14:	2132      	movs	r1, #50	@ 0x32
 8004d16:	f006 fdcb 	bl	800b8b0 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 8004d1a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f7fb fa1e 	bl	8000160 <strlen>
 8004d24:	4603      	mov	r3, r0
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8004d2c:	9300      	str	r3, [sp, #0]
 8004d2e:	4613      	mov	r3, r2
 8004d30:	220e      	movs	r2, #14
 8004d32:	2100      	movs	r1, #0
 8004d34:	4871      	ldr	r0, [pc, #452]	@ (8004efc <main+0x4d8c>)
 8004d36:	f003 face 	bl	80082d6 <Alcd_PutAt_n>

			//check if any button is pressed
			//check for any keypad input
			Keypad_Refresh(&kp);
 8004d3a:	4874      	ldr	r0, [pc, #464]	@ (8004f0c <main+0x4d9c>)
 8004d3c:	f003 fb92 	bl	8008464 <Keypad_Refresh>

			//in case feeding is selected -> start moving the motor
			if (Keypad_Get_Key(&kp, kp_button_force_feed)
 8004d40:	210b      	movs	r1, #11
 8004d42:	4872      	ldr	r0, [pc, #456]	@ (8004f0c <main+0x4d9c>)
 8004d44:	f003 fc2a 	bl	800859c <Keypad_Get_Key>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d00a      	beq.n	8004d64 <main+0x4bf4>
					&& (current_tick >= general_delay)) {
 8004d4e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004d50:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d306      	bcc.n	8004d64 <main+0x4bf4>
				Alcd_Clear(&lcd);
 8004d56:	4869      	ldr	r0, [pc, #420]	@ (8004efc <main+0x4d8c>)
 8004d58:	f003 fad6 	bl	8008308 <Alcd_Clear>

				status = 42;
 8004d5c:	232a      	movs	r3, #42	@ 0x2a
 8004d5e:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 8004d62:	e012      	b.n	8004d8a <main+0x4c1a>
			}

			//when force feed is released
			else {
				//moving the motor to the 0 position
				TIM1->CCR1 = 999;
 8004d64:	4b64      	ldr	r3, [pc, #400]	@ (8004ef8 <main+0x4d88>)
 8004d66:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004d6a:	635a      	str	r2, [r3, #52]	@ 0x34
				dosing_tick = dosing_tick - start_tick;
 8004d6c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004d6e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	67bb      	str	r3, [r7, #120]	@ 0x78
				dosing_tick_sec = dosing_tick / 1000;
 8004d74:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004d76:	4a66      	ldr	r2, [pc, #408]	@ (8004f10 <main+0x4da0>)
 8004d78:	fba2 2303 	umull	r2, r3, r2, r3
 8004d7c:	099b      	lsrs	r3, r3, #6
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
				status = 56;
 8004d84:	2338      	movs	r3, #56	@ 0x38
 8004d86:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83

			}
			Alcd_Clear(&lcd);
 8004d8a:	485c      	ldr	r0, [pc, #368]	@ (8004efc <main+0x4d8c>)
 8004d8c:	f003 fabc 	bl	8008308 <Alcd_Clear>
			Alcd_PutAt(&lcd, 0, 0, "calibrating");
 8004d90:	4860      	ldr	r0, [pc, #384]	@ (8004f14 <main+0x4da4>)
 8004d92:	f003 fb0d 	bl	80083b0 <Str_Len>
 8004d96:	4603      	mov	r3, r0
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	9300      	str	r3, [sp, #0]
 8004d9c:	4b5d      	ldr	r3, [pc, #372]	@ (8004f14 <main+0x4da4>)
 8004d9e:	2200      	movs	r2, #0
 8004da0:	2100      	movs	r1, #0
 8004da2:	4856      	ldr	r0, [pc, #344]	@ (8004efc <main+0x4d8c>)
 8004da4:	f003 fa97 	bl	80082d6 <Alcd_PutAt_n>

			dosing_tick = HAL_GetTick();
 8004da8:	f003 fc68 	bl	800867c <HAL_GetTick>
 8004dac:	67b8      	str	r0, [r7, #120]	@ 0x78
		while ((status == 42) && (current_tick >= general_delay)) {
 8004dae:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 8004db2:	2b2a      	cmp	r3, #42	@ 0x2a
 8004db4:	f040 8095 	bne.w	8004ee2 <main+0x4d72>
 8004db8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004dba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d2a1      	bcs.n	8004d04 <main+0x4b94>

		}

		//edit parameters state 23
		while ((status == 23) && (current_tick >= general_delay)) {
 8004dc0:	e08f      	b.n	8004ee2 <main+0x4d72>

			//get the current tick number
			current_tick = HAL_GetTick();
 8004dc2:	f003 fc5b 	bl	800867c <HAL_GetTick>
 8004dc6:	67f8      	str	r0, [r7, #124]	@ 0x7c

			Alcd_Clear(&lcd);
 8004dc8:	484c      	ldr	r0, [pc, #304]	@ (8004efc <main+0x4d8c>)
 8004dca:	f003 fa9d 	bl	8008308 <Alcd_Clear>
			Alcd_PutAt(&lcd, 0, 0, "1: doses no.");
 8004dce:	4852      	ldr	r0, [pc, #328]	@ (8004f18 <main+0x4da8>)
 8004dd0:	f003 faee 	bl	80083b0 <Str_Len>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	9300      	str	r3, [sp, #0]
 8004dda:	4b4f      	ldr	r3, [pc, #316]	@ (8004f18 <main+0x4da8>)
 8004ddc:	2200      	movs	r2, #0
 8004dde:	2100      	movs	r1, #0
 8004de0:	4846      	ldr	r0, [pc, #280]	@ (8004efc <main+0x4d8c>)
 8004de2:	f003 fa78 	bl	80082d6 <Alcd_PutAt_n>
			Alcd_PutAt(&lcd, 1, 0, "2: dosing hour");
 8004de6:	484d      	ldr	r0, [pc, #308]	@ (8004f1c <main+0x4dac>)
 8004de8:	f003 fae2 	bl	80083b0 <Str_Len>
 8004dec:	4603      	mov	r3, r0
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	9300      	str	r3, [sp, #0]
 8004df2:	4b4a      	ldr	r3, [pc, #296]	@ (8004f1c <main+0x4dac>)
 8004df4:	2200      	movs	r2, #0
 8004df6:	2101      	movs	r1, #1
 8004df8:	4840      	ldr	r0, [pc, #256]	@ (8004efc <main+0x4d8c>)
 8004dfa:	f003 fa6c 	bl	80082d6 <Alcd_PutAt_n>
			snprintf(timeString, sizeof(timeString), "%02d", status);
 8004dfe:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 8004e02:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8004e06:	4a40      	ldr	r2, [pc, #256]	@ (8004f08 <main+0x4d98>)
 8004e08:	2132      	movs	r1, #50	@ 0x32
 8004e0a:	f006 fd51 	bl	800b8b0 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 8004e0e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004e12:	4618      	mov	r0, r3
 8004e14:	f7fb f9a4 	bl	8000160 <strlen>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8004e20:	9300      	str	r3, [sp, #0]
 8004e22:	4613      	mov	r3, r2
 8004e24:	220e      	movs	r2, #14
 8004e26:	2100      	movs	r1, #0
 8004e28:	4834      	ldr	r0, [pc, #208]	@ (8004efc <main+0x4d8c>)
 8004e2a:	f003 fa54 	bl	80082d6 <Alcd_PutAt_n>
			Alcd_Display_Control(&lcd, 1, 0, 0);
 8004e2e:	2300      	movs	r3, #0
 8004e30:	2200      	movs	r2, #0
 8004e32:	2101      	movs	r1, #1
 8004e34:	4831      	ldr	r0, [pc, #196]	@ (8004efc <main+0x4d8c>)
 8004e36:	f003 fa78 	bl	800832a <Alcd_Display_Control>
			Alcd_CursorAt(&lcd, 1, 0);
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	2101      	movs	r1, #1
 8004e3e:	482f      	ldr	r0, [pc, #188]	@ (8004efc <main+0x4d8c>)
 8004e40:	f003 fa0d 	bl	800825e <Alcd_CursorAt>

			//check if any button is pressed
			//check for any keypad input
			Keypad_Refresh(&kp);
 8004e44:	4831      	ldr	r0, [pc, #196]	@ (8004f0c <main+0x4d9c>)
 8004e46:	f003 fb0d 	bl	8008464 <Keypad_Refresh>

			//in case 1 is selected -> no. of doses (status 43)
			if (Keypad_Get_Key(&kp, kp_button_1)
 8004e4a:	2100      	movs	r1, #0
 8004e4c:	482f      	ldr	r0, [pc, #188]	@ (8004f0c <main+0x4d9c>)
 8004e4e:	f003 fba5 	bl	800859c <Keypad_Get_Key>
 8004e52:	4603      	mov	r3, r0
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d00a      	beq.n	8004e6e <main+0x4cfe>
					&& (current_tick >= general_delay)) {
 8004e58:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004e5a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d306      	bcc.n	8004e6e <main+0x4cfe>
				Alcd_Clear(&lcd);
 8004e60:	4826      	ldr	r0, [pc, #152]	@ (8004efc <main+0x4d8c>)
 8004e62:	f003 fa51 	bl	8008308 <Alcd_Clear>

				status = 43;
 8004e66:	232b      	movs	r3, #43	@ 0x2b
 8004e68:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 8004e6c:	e034      	b.n	8004ed8 <main+0x4d68>

			}

			//2 is selected -> edit hour
			else if (Keypad_Get_Key(&kp, kp_button_2)
 8004e6e:	2101      	movs	r1, #1
 8004e70:	4826      	ldr	r0, [pc, #152]	@ (8004f0c <main+0x4d9c>)
 8004e72:	f003 fb93 	bl	800859c <Keypad_Get_Key>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d00a      	beq.n	8004e92 <main+0x4d22>
					&& (current_tick >= general_delay)) {
 8004e7c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004e7e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d306      	bcc.n	8004e92 <main+0x4d22>

				Alcd_Clear(&lcd);
 8004e84:	481d      	ldr	r0, [pc, #116]	@ (8004efc <main+0x4d8c>)
 8004e86:	f003 fa3f 	bl	8008308 <Alcd_Clear>
				status = 44;
 8004e8a:	232c      	movs	r3, #44	@ 0x2c
 8004e8c:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 8004e90:	e022      	b.n	8004ed8 <main+0x4d68>

			}

			//back is selected
			else if (Keypad_Get_Key(&kp, kp_button_no_back)
 8004e92:	210e      	movs	r1, #14
 8004e94:	481d      	ldr	r0, [pc, #116]	@ (8004f0c <main+0x4d9c>)
 8004e96:	f003 fb81 	bl	800859c <Keypad_Get_Key>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d00a      	beq.n	8004eb6 <main+0x4d46>
					&& (current_tick >= general_delay)) {
 8004ea0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004ea2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d306      	bcc.n	8004eb6 <main+0x4d46>

				Alcd_Clear(&lcd);
 8004ea8:	4814      	ldr	r0, [pc, #80]	@ (8004efc <main+0x4d8c>)
 8004eaa:	f003 fa2d 	bl	8008308 <Alcd_Clear>
				//save? menu
				status = 48;
 8004eae:	2330      	movs	r3, #48	@ 0x30
 8004eb0:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 8004eb4:	e010      	b.n	8004ed8 <main+0x4d68>

			}

			//next is selected
			else if (Keypad_Get_Key(&kp, kp_button_next)
 8004eb6:	2103      	movs	r1, #3
 8004eb8:	4814      	ldr	r0, [pc, #80]	@ (8004f0c <main+0x4d9c>)
 8004eba:	f003 fb6f 	bl	800859c <Keypad_Get_Key>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d009      	beq.n	8004ed8 <main+0x4d68>
					&& (current_tick >= general_delay)) {
 8004ec4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004ec6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d305      	bcc.n	8004ed8 <main+0x4d68>

				Alcd_Clear(&lcd);
 8004ecc:	480b      	ldr	r0, [pc, #44]	@ (8004efc <main+0x4d8c>)
 8004ece:	f003 fa1b 	bl	8008308 <Alcd_Clear>
				//go to extended parameters menu (state 49)
				status = 49;
 8004ed2:	2331      	movs	r3, #49	@ 0x31
 8004ed4:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83

			}

			general_delay = HAL_GetTick() + 250;
 8004ed8:	f003 fbd0 	bl	800867c <HAL_GetTick>
 8004edc:	4603      	mov	r3, r0
 8004ede:	33fa      	adds	r3, #250	@ 0xfa
 8004ee0:	677b      	str	r3, [r7, #116]	@ 0x74
		while ((status == 23) && (current_tick >= general_delay)) {
 8004ee2:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 8004ee6:	2b17      	cmp	r3, #23
 8004ee8:	f040 8388 	bne.w	80055fc <main+0x548c>
 8004eec:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004eee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	f4bf af66 	bcs.w	8004dc2 <main+0x4c52>
		}

		//enter no. of doses (state 43)
		while ((status == 43) && (current_tick >= general_delay)) {
 8004ef6:	e381      	b.n	80055fc <main+0x548c>
 8004ef8:	40012c00 	.word	0x40012c00
 8004efc:	2000001c 	.word	0x2000001c
 8004f00:	0800c3e8 	.word	0x0800c3e8
 8004f04:	0800c3f8 	.word	0x0800c3f8
 8004f08:	0800c280 	.word	0x0800c280
 8004f0c:	20000000 	.word	0x20000000
 8004f10:	10624dd3 	.word	0x10624dd3
 8004f14:	0800c408 	.word	0x0800c408
 8004f18:	0800c414 	.word	0x0800c414
 8004f1c:	0800c424 	.word	0x0800c424

			//get the current tick number
			current_tick = HAL_GetTick();
 8004f20:	f003 fbac 	bl	800867c <HAL_GetTick>
 8004f24:	67f8      	str	r0, [r7, #124]	@ 0x7c

			Alcd_PutAt(&lcd, 0, 0, "doses no.?");
 8004f26:	48b7      	ldr	r0, [pc, #732]	@ (8005204 <main+0x5094>)
 8004f28:	f003 fa42 	bl	80083b0 <Str_Len>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	9300      	str	r3, [sp, #0]
 8004f32:	4bb4      	ldr	r3, [pc, #720]	@ (8005204 <main+0x5094>)
 8004f34:	2200      	movs	r2, #0
 8004f36:	2100      	movs	r1, #0
 8004f38:	48b3      	ldr	r0, [pc, #716]	@ (8005208 <main+0x5098>)
 8004f3a:	f003 f9cc 	bl	80082d6 <Alcd_PutAt_n>
			snprintf(timeString, sizeof(timeString), "%02d", status);
 8004f3e:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 8004f42:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8004f46:	4ab1      	ldr	r2, [pc, #708]	@ (800520c <main+0x509c>)
 8004f48:	2132      	movs	r1, #50	@ 0x32
 8004f4a:	f006 fcb1 	bl	800b8b0 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 8004f4e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004f52:	4618      	mov	r0, r3
 8004f54:	f7fb f904 	bl	8000160 <strlen>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8004f60:	9300      	str	r3, [sp, #0]
 8004f62:	4613      	mov	r3, r2
 8004f64:	220e      	movs	r2, #14
 8004f66:	2100      	movs	r1, #0
 8004f68:	48a7      	ldr	r0, [pc, #668]	@ (8005208 <main+0x5098>)
 8004f6a:	f003 f9b4 	bl	80082d6 <Alcd_PutAt_n>

			Alcd_CursorAt(&lcd, 1, input_index);
 8004f6e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8004f72:	461a      	mov	r2, r3
 8004f74:	2101      	movs	r1, #1
 8004f76:	48a4      	ldr	r0, [pc, #656]	@ (8005208 <main+0x5098>)
 8004f78:	f003 f971 	bl	800825e <Alcd_CursorAt>
			Alcd_Display_Control(&lcd, 1, 1, 1);
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	2201      	movs	r2, #1
 8004f80:	2101      	movs	r1, #1
 8004f82:	48a1      	ldr	r0, [pc, #644]	@ (8005208 <main+0x5098>)
 8004f84:	f003 f9d1 	bl	800832a <Alcd_Display_Control>

			Keypad_Refresh(&kp);
 8004f88:	48a1      	ldr	r0, [pc, #644]	@ (8005210 <main+0x50a0>)
 8004f8a:	f003 fa6b 	bl	8008464 <Keypad_Refresh>

			//in case back is selected
			if (Keypad_Get_Key(&kp, kp_button_no_back)
 8004f8e:	210e      	movs	r1, #14
 8004f90:	489f      	ldr	r0, [pc, #636]	@ (8005210 <main+0x50a0>)
 8004f92:	f003 fb03 	bl	800859c <Keypad_Get_Key>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d00a      	beq.n	8004fb2 <main+0x4e42>
					&& (current_tick >= general_delay)) {
 8004f9c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004f9e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d306      	bcc.n	8004fb2 <main+0x4e42>

				input_index = 0;  // Reset input index
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d

				//back to previous menu
				status = 23;
 8004faa:	2317      	movs	r3, #23
 8004fac:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 8004fb0:	e324      	b.n	80055fc <main+0x548c>

			}

			//if 0 is pressed
			else if (Keypad_Get_Key(&kp, kp_button_0)
 8004fb2:	210d      	movs	r1, #13
 8004fb4:	4896      	ldr	r0, [pc, #600]	@ (8005210 <main+0x50a0>)
 8004fb6:	f003 faf1 	bl	800859c <Keypad_Get_Key>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d042      	beq.n	8005046 <main+0x4ed6>
					&& (current_tick >= general_delay)) {
 8004fc0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004fc2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d33e      	bcc.n	8005046 <main+0x4ed6>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8004fc8:	2300      	movs	r3, #0
 8004fca:	2200      	movs	r2, #0
 8004fcc:	2101      	movs	r1, #1
 8004fce:	488e      	ldr	r0, [pc, #568]	@ (8005208 <main+0x5098>)
 8004fd0:	f003 f9ab 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered password
				if (input_index < 2) {
 8004fd4:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d827      	bhi.n	800502c <main+0x4ebc>
					entered_password[input_index] = '0';
 8004fdc:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8004fe0:	3388      	adds	r3, #136	@ 0x88
 8004fe2:	443b      	add	r3, r7
 8004fe4:	2230      	movs	r2, #48	@ 0x30
 8004fe6:	f803 2c70 	strb.w	r2, [r3, #-112]
					entered_password[input_index + 1] = '\0'; // Null-terminate the string
 8004fea:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8004fee:	3301      	adds	r3, #1
 8004ff0:	3388      	adds	r3, #136	@ 0x88
 8004ff2:	443b      	add	r3, r7
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f803 2c70 	strb.w	r2, [r3, #-112]
					Alcd_PutAt(&lcd, 1, input_index, "0");
 8004ffa:	4886      	ldr	r0, [pc, #536]	@ (8005214 <main+0x50a4>)
 8004ffc:	f003 f9d8 	bl	80083b0 <Str_Len>
 8005000:	4603      	mov	r3, r0
 8005002:	b2db      	uxtb	r3, r3
 8005004:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8005008:	9300      	str	r3, [sp, #0]
 800500a:	4b82      	ldr	r3, [pc, #520]	@ (8005214 <main+0x50a4>)
 800500c:	2101      	movs	r1, #1
 800500e:	487e      	ldr	r0, [pc, #504]	@ (8005208 <main+0x5098>)
 8005010:	f003 f961 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 8005014:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8005018:	3301      	adds	r3, #1
 800501a:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 800501e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8005022:	461a      	mov	r2, r3
 8005024:	2101      	movs	r1, #1
 8005026:	4878      	ldr	r0, [pc, #480]	@ (8005208 <main+0x5098>)
 8005028:	f003 f919 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 800502c:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8005030:	2301      	movs	r3, #1
 8005032:	2101      	movs	r1, #1
 8005034:	4874      	ldr	r0, [pc, #464]	@ (8005208 <main+0x5098>)
 8005036:	f003 f978 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 800503a:	f003 fb1f 	bl	800867c <HAL_GetTick>
 800503e:	4603      	mov	r3, r0
 8005040:	33fa      	adds	r3, #250	@ 0xfa
 8005042:	677b      	str	r3, [r7, #116]	@ 0x74
 8005044:	e2da      	b.n	80055fc <main+0x548c>
			}

			//if 1 is pressed
			else if (Keypad_Get_Key(&kp, kp_button_1)
 8005046:	2100      	movs	r1, #0
 8005048:	4871      	ldr	r0, [pc, #452]	@ (8005210 <main+0x50a0>)
 800504a:	f003 faa7 	bl	800859c <Keypad_Get_Key>
 800504e:	4603      	mov	r3, r0
 8005050:	2b00      	cmp	r3, #0
 8005052:	d042      	beq.n	80050da <main+0x4f6a>
					&& (current_tick >= general_delay)) {
 8005054:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005056:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005058:	429a      	cmp	r2, r3
 800505a:	d33e      	bcc.n	80050da <main+0x4f6a>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 800505c:	2300      	movs	r3, #0
 800505e:	2200      	movs	r2, #0
 8005060:	2101      	movs	r1, #1
 8005062:	4869      	ldr	r0, [pc, #420]	@ (8005208 <main+0x5098>)
 8005064:	f003 f961 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered password
				if (input_index < 2) {
 8005068:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800506c:	2b01      	cmp	r3, #1
 800506e:	d827      	bhi.n	80050c0 <main+0x4f50>
					entered_password[input_index] = '1';
 8005070:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8005074:	3388      	adds	r3, #136	@ 0x88
 8005076:	443b      	add	r3, r7
 8005078:	2231      	movs	r2, #49	@ 0x31
 800507a:	f803 2c70 	strb.w	r2, [r3, #-112]
					entered_password[input_index + 1] = '\0'; // Null-terminate the string
 800507e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8005082:	3301      	adds	r3, #1
 8005084:	3388      	adds	r3, #136	@ 0x88
 8005086:	443b      	add	r3, r7
 8005088:	2200      	movs	r2, #0
 800508a:	f803 2c70 	strb.w	r2, [r3, #-112]
					Alcd_PutAt(&lcd, 1, input_index, "1");
 800508e:	4862      	ldr	r0, [pc, #392]	@ (8005218 <main+0x50a8>)
 8005090:	f003 f98e 	bl	80083b0 <Str_Len>
 8005094:	4603      	mov	r3, r0
 8005096:	b2db      	uxtb	r3, r3
 8005098:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 800509c:	9300      	str	r3, [sp, #0]
 800509e:	4b5e      	ldr	r3, [pc, #376]	@ (8005218 <main+0x50a8>)
 80050a0:	2101      	movs	r1, #1
 80050a2:	4859      	ldr	r0, [pc, #356]	@ (8005208 <main+0x5098>)
 80050a4:	f003 f917 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 80050a8:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80050ac:	3301      	adds	r3, #1
 80050ae:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 80050b2:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80050b6:	461a      	mov	r2, r3
 80050b8:	2101      	movs	r1, #1
 80050ba:	4853      	ldr	r0, [pc, #332]	@ (8005208 <main+0x5098>)
 80050bc:	f003 f8cf 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 80050c0:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 80050c4:	2301      	movs	r3, #1
 80050c6:	2101      	movs	r1, #1
 80050c8:	484f      	ldr	r0, [pc, #316]	@ (8005208 <main+0x5098>)
 80050ca:	f003 f92e 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 80050ce:	f003 fad5 	bl	800867c <HAL_GetTick>
 80050d2:	4603      	mov	r3, r0
 80050d4:	33fa      	adds	r3, #250	@ 0xfa
 80050d6:	677b      	str	r3, [r7, #116]	@ 0x74
 80050d8:	e290      	b.n	80055fc <main+0x548c>
			}

			//if 2 is pressed
			else if (Keypad_Get_Key(&kp, kp_button_2)
 80050da:	2101      	movs	r1, #1
 80050dc:	484c      	ldr	r0, [pc, #304]	@ (8005210 <main+0x50a0>)
 80050de:	f003 fa5d 	bl	800859c <Keypad_Get_Key>
 80050e2:	4603      	mov	r3, r0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d042      	beq.n	800516e <main+0x4ffe>
					&& (current_tick >= general_delay)) {
 80050e8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80050ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d33e      	bcc.n	800516e <main+0x4ffe>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80050f0:	2300      	movs	r3, #0
 80050f2:	2200      	movs	r2, #0
 80050f4:	2101      	movs	r1, #1
 80050f6:	4844      	ldr	r0, [pc, #272]	@ (8005208 <main+0x5098>)
 80050f8:	f003 f917 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered password
				if (input_index < 2) {
 80050fc:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8005100:	2b01      	cmp	r3, #1
 8005102:	d827      	bhi.n	8005154 <main+0x4fe4>
					entered_password[input_index] = '2';
 8005104:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8005108:	3388      	adds	r3, #136	@ 0x88
 800510a:	443b      	add	r3, r7
 800510c:	2232      	movs	r2, #50	@ 0x32
 800510e:	f803 2c70 	strb.w	r2, [r3, #-112]
					entered_password[input_index + 1] = '\0'; // Null-terminate the string
 8005112:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8005116:	3301      	adds	r3, #1
 8005118:	3388      	adds	r3, #136	@ 0x88
 800511a:	443b      	add	r3, r7
 800511c:	2200      	movs	r2, #0
 800511e:	f803 2c70 	strb.w	r2, [r3, #-112]
					Alcd_PutAt(&lcd, 1, input_index, "2");
 8005122:	483e      	ldr	r0, [pc, #248]	@ (800521c <main+0x50ac>)
 8005124:	f003 f944 	bl	80083b0 <Str_Len>
 8005128:	4603      	mov	r3, r0
 800512a:	b2db      	uxtb	r3, r3
 800512c:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8005130:	9300      	str	r3, [sp, #0]
 8005132:	4b3a      	ldr	r3, [pc, #232]	@ (800521c <main+0x50ac>)
 8005134:	2101      	movs	r1, #1
 8005136:	4834      	ldr	r0, [pc, #208]	@ (8005208 <main+0x5098>)
 8005138:	f003 f8cd 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 800513c:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8005140:	3301      	adds	r3, #1
 8005142:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8005146:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800514a:	461a      	mov	r2, r3
 800514c:	2101      	movs	r1, #1
 800514e:	482e      	ldr	r0, [pc, #184]	@ (8005208 <main+0x5098>)
 8005150:	f003 f885 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8005154:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8005158:	2301      	movs	r3, #1
 800515a:	2101      	movs	r1, #1
 800515c:	482a      	ldr	r0, [pc, #168]	@ (8005208 <main+0x5098>)
 800515e:	f003 f8e4 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8005162:	f003 fa8b 	bl	800867c <HAL_GetTick>
 8005166:	4603      	mov	r3, r0
 8005168:	33fa      	adds	r3, #250	@ 0xfa
 800516a:	677b      	str	r3, [r7, #116]	@ 0x74
 800516c:	e246      	b.n	80055fc <main+0x548c>
			}

			//if 3 is pressed
			else if (Keypad_Get_Key(&kp, kp_button_3)
 800516e:	2102      	movs	r1, #2
 8005170:	4827      	ldr	r0, [pc, #156]	@ (8005210 <main+0x50a0>)
 8005172:	f003 fa13 	bl	800859c <Keypad_Get_Key>
 8005176:	4603      	mov	r3, r0
 8005178:	2b00      	cmp	r3, #0
 800517a:	d053      	beq.n	8005224 <main+0x50b4>
					&& (current_tick >= general_delay)) {
 800517c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800517e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005180:	429a      	cmp	r2, r3
 8005182:	d34f      	bcc.n	8005224 <main+0x50b4>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8005184:	2300      	movs	r3, #0
 8005186:	2200      	movs	r2, #0
 8005188:	2101      	movs	r1, #1
 800518a:	481f      	ldr	r0, [pc, #124]	@ (8005208 <main+0x5098>)
 800518c:	f003 f8cd 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered password
				if (input_index < 2) {
 8005190:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8005194:	2b01      	cmp	r3, #1
 8005196:	d827      	bhi.n	80051e8 <main+0x5078>
					entered_password[input_index] = '3';
 8005198:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800519c:	3388      	adds	r3, #136	@ 0x88
 800519e:	443b      	add	r3, r7
 80051a0:	2233      	movs	r2, #51	@ 0x33
 80051a2:	f803 2c70 	strb.w	r2, [r3, #-112]
					entered_password[input_index + 1] = '\0'; // Null-terminate the string
 80051a6:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80051aa:	3301      	adds	r3, #1
 80051ac:	3388      	adds	r3, #136	@ 0x88
 80051ae:	443b      	add	r3, r7
 80051b0:	2200      	movs	r2, #0
 80051b2:	f803 2c70 	strb.w	r2, [r3, #-112]
					Alcd_PutAt(&lcd, 1, input_index, "3");
 80051b6:	481a      	ldr	r0, [pc, #104]	@ (8005220 <main+0x50b0>)
 80051b8:	f003 f8fa 	bl	80083b0 <Str_Len>
 80051bc:	4603      	mov	r3, r0
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 80051c4:	9300      	str	r3, [sp, #0]
 80051c6:	4b16      	ldr	r3, [pc, #88]	@ (8005220 <main+0x50b0>)
 80051c8:	2101      	movs	r1, #1
 80051ca:	480f      	ldr	r0, [pc, #60]	@ (8005208 <main+0x5098>)
 80051cc:	f003 f883 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 80051d0:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80051d4:	3301      	adds	r3, #1
 80051d6:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 80051da:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80051de:	461a      	mov	r2, r3
 80051e0:	2101      	movs	r1, #1
 80051e2:	4809      	ldr	r0, [pc, #36]	@ (8005208 <main+0x5098>)
 80051e4:	f003 f83b 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 80051e8:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 80051ec:	2301      	movs	r3, #1
 80051ee:	2101      	movs	r1, #1
 80051f0:	4805      	ldr	r0, [pc, #20]	@ (8005208 <main+0x5098>)
 80051f2:	f003 f89a 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 80051f6:	f003 fa41 	bl	800867c <HAL_GetTick>
 80051fa:	4603      	mov	r3, r0
 80051fc:	33fa      	adds	r3, #250	@ 0xfa
 80051fe:	677b      	str	r3, [r7, #116]	@ 0x74
 8005200:	e1fc      	b.n	80055fc <main+0x548c>
 8005202:	bf00      	nop
 8005204:	0800c434 	.word	0x0800c434
 8005208:	2000001c 	.word	0x2000001c
 800520c:	0800c280 	.word	0x0800c280
 8005210:	20000000 	.word	0x20000000
 8005214:	0800c368 	.word	0x0800c368
 8005218:	0800c36c 	.word	0x0800c36c
 800521c:	0800c370 	.word	0x0800c370
 8005220:	0800c374 	.word	0x0800c374
			}
			//if 4 is pressed
			else if (Keypad_Get_Key(&kp, kp_button_4)
 8005224:	2104      	movs	r1, #4
 8005226:	48b8      	ldr	r0, [pc, #736]	@ (8005508 <main+0x5398>)
 8005228:	f003 f9b8 	bl	800859c <Keypad_Get_Key>
 800522c:	4603      	mov	r3, r0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d042      	beq.n	80052b8 <main+0x5148>
					&& (current_tick >= general_delay)) {
 8005232:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005234:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005236:	429a      	cmp	r2, r3
 8005238:	d33e      	bcc.n	80052b8 <main+0x5148>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 800523a:	2300      	movs	r3, #0
 800523c:	2200      	movs	r2, #0
 800523e:	2101      	movs	r1, #1
 8005240:	48b2      	ldr	r0, [pc, #712]	@ (800550c <main+0x539c>)
 8005242:	f003 f872 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered password
				if (input_index < 2) {
 8005246:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800524a:	2b01      	cmp	r3, #1
 800524c:	d827      	bhi.n	800529e <main+0x512e>
					entered_password[input_index] = '4';
 800524e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8005252:	3388      	adds	r3, #136	@ 0x88
 8005254:	443b      	add	r3, r7
 8005256:	2234      	movs	r2, #52	@ 0x34
 8005258:	f803 2c70 	strb.w	r2, [r3, #-112]
					entered_password[input_index + 1] = '\0'; // Null-terminate the string
 800525c:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8005260:	3301      	adds	r3, #1
 8005262:	3388      	adds	r3, #136	@ 0x88
 8005264:	443b      	add	r3, r7
 8005266:	2200      	movs	r2, #0
 8005268:	f803 2c70 	strb.w	r2, [r3, #-112]
					Alcd_PutAt(&lcd, 1, input_index, "4");
 800526c:	48a8      	ldr	r0, [pc, #672]	@ (8005510 <main+0x53a0>)
 800526e:	f003 f89f 	bl	80083b0 <Str_Len>
 8005272:	4603      	mov	r3, r0
 8005274:	b2db      	uxtb	r3, r3
 8005276:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 800527a:	9300      	str	r3, [sp, #0]
 800527c:	4ba4      	ldr	r3, [pc, #656]	@ (8005510 <main+0x53a0>)
 800527e:	2101      	movs	r1, #1
 8005280:	48a2      	ldr	r0, [pc, #648]	@ (800550c <main+0x539c>)
 8005282:	f003 f828 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 8005286:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800528a:	3301      	adds	r3, #1
 800528c:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8005290:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8005294:	461a      	mov	r2, r3
 8005296:	2101      	movs	r1, #1
 8005298:	489c      	ldr	r0, [pc, #624]	@ (800550c <main+0x539c>)
 800529a:	f002 ffe0 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 800529e:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 80052a2:	2301      	movs	r3, #1
 80052a4:	2101      	movs	r1, #1
 80052a6:	4899      	ldr	r0, [pc, #612]	@ (800550c <main+0x539c>)
 80052a8:	f003 f83f 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 80052ac:	f003 f9e6 	bl	800867c <HAL_GetTick>
 80052b0:	4603      	mov	r3, r0
 80052b2:	33fa      	adds	r3, #250	@ 0xfa
 80052b4:	677b      	str	r3, [r7, #116]	@ 0x74
 80052b6:	e1a1      	b.n	80055fc <main+0x548c>
			}

			//if 5 is pressed
			else if (Keypad_Get_Key(&kp, kp_button_5)
 80052b8:	2105      	movs	r1, #5
 80052ba:	4893      	ldr	r0, [pc, #588]	@ (8005508 <main+0x5398>)
 80052bc:	f003 f96e 	bl	800859c <Keypad_Get_Key>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d042      	beq.n	800534c <main+0x51dc>
					&& (current_tick >= general_delay)) {
 80052c6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80052c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d33e      	bcc.n	800534c <main+0x51dc>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80052ce:	2300      	movs	r3, #0
 80052d0:	2200      	movs	r2, #0
 80052d2:	2101      	movs	r1, #1
 80052d4:	488d      	ldr	r0, [pc, #564]	@ (800550c <main+0x539c>)
 80052d6:	f003 f828 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered password
				if (input_index < 2) {
 80052da:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d827      	bhi.n	8005332 <main+0x51c2>
					entered_password[input_index] = '5';
 80052e2:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80052e6:	3388      	adds	r3, #136	@ 0x88
 80052e8:	443b      	add	r3, r7
 80052ea:	2235      	movs	r2, #53	@ 0x35
 80052ec:	f803 2c70 	strb.w	r2, [r3, #-112]
					entered_password[input_index + 1] = '\0'; // Null-terminate the string
 80052f0:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80052f4:	3301      	adds	r3, #1
 80052f6:	3388      	adds	r3, #136	@ 0x88
 80052f8:	443b      	add	r3, r7
 80052fa:	2200      	movs	r2, #0
 80052fc:	f803 2c70 	strb.w	r2, [r3, #-112]
					Alcd_PutAt(&lcd, 1, input_index, "5");
 8005300:	4884      	ldr	r0, [pc, #528]	@ (8005514 <main+0x53a4>)
 8005302:	f003 f855 	bl	80083b0 <Str_Len>
 8005306:	4603      	mov	r3, r0
 8005308:	b2db      	uxtb	r3, r3
 800530a:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 800530e:	9300      	str	r3, [sp, #0]
 8005310:	4b80      	ldr	r3, [pc, #512]	@ (8005514 <main+0x53a4>)
 8005312:	2101      	movs	r1, #1
 8005314:	487d      	ldr	r0, [pc, #500]	@ (800550c <main+0x539c>)
 8005316:	f002 ffde 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 800531a:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800531e:	3301      	adds	r3, #1
 8005320:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8005324:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8005328:	461a      	mov	r2, r3
 800532a:	2101      	movs	r1, #1
 800532c:	4877      	ldr	r0, [pc, #476]	@ (800550c <main+0x539c>)
 800532e:	f002 ff96 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8005332:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8005336:	2301      	movs	r3, #1
 8005338:	2101      	movs	r1, #1
 800533a:	4874      	ldr	r0, [pc, #464]	@ (800550c <main+0x539c>)
 800533c:	f002 fff5 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8005340:	f003 f99c 	bl	800867c <HAL_GetTick>
 8005344:	4603      	mov	r3, r0
 8005346:	33fa      	adds	r3, #250	@ 0xfa
 8005348:	677b      	str	r3, [r7, #116]	@ 0x74
 800534a:	e157      	b.n	80055fc <main+0x548c>
			}

			//if 6 is pressed
			else if (Keypad_Get_Key(&kp, kp_button_6)
 800534c:	2106      	movs	r1, #6
 800534e:	486e      	ldr	r0, [pc, #440]	@ (8005508 <main+0x5398>)
 8005350:	f003 f924 	bl	800859c <Keypad_Get_Key>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d042      	beq.n	80053e0 <main+0x5270>
					&& (current_tick >= general_delay)) {
 800535a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800535c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800535e:	429a      	cmp	r2, r3
 8005360:	d33e      	bcc.n	80053e0 <main+0x5270>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8005362:	2300      	movs	r3, #0
 8005364:	2200      	movs	r2, #0
 8005366:	2101      	movs	r1, #1
 8005368:	4868      	ldr	r0, [pc, #416]	@ (800550c <main+0x539c>)
 800536a:	f002 ffde 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered password
				if (input_index < 2) {
 800536e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8005372:	2b01      	cmp	r3, #1
 8005374:	d827      	bhi.n	80053c6 <main+0x5256>
					entered_password[input_index] = '6';
 8005376:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800537a:	3388      	adds	r3, #136	@ 0x88
 800537c:	443b      	add	r3, r7
 800537e:	2236      	movs	r2, #54	@ 0x36
 8005380:	f803 2c70 	strb.w	r2, [r3, #-112]
					entered_password[input_index + 1] = '\0'; // Null-terminate the string
 8005384:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8005388:	3301      	adds	r3, #1
 800538a:	3388      	adds	r3, #136	@ 0x88
 800538c:	443b      	add	r3, r7
 800538e:	2200      	movs	r2, #0
 8005390:	f803 2c70 	strb.w	r2, [r3, #-112]
					Alcd_PutAt(&lcd, 1, input_index, "6");
 8005394:	4860      	ldr	r0, [pc, #384]	@ (8005518 <main+0x53a8>)
 8005396:	f003 f80b 	bl	80083b0 <Str_Len>
 800539a:	4603      	mov	r3, r0
 800539c:	b2db      	uxtb	r3, r3
 800539e:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 80053a2:	9300      	str	r3, [sp, #0]
 80053a4:	4b5c      	ldr	r3, [pc, #368]	@ (8005518 <main+0x53a8>)
 80053a6:	2101      	movs	r1, #1
 80053a8:	4858      	ldr	r0, [pc, #352]	@ (800550c <main+0x539c>)
 80053aa:	f002 ff94 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 80053ae:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80053b2:	3301      	adds	r3, #1
 80053b4:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 80053b8:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80053bc:	461a      	mov	r2, r3
 80053be:	2101      	movs	r1, #1
 80053c0:	4852      	ldr	r0, [pc, #328]	@ (800550c <main+0x539c>)
 80053c2:	f002 ff4c 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 80053c6:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 80053ca:	2301      	movs	r3, #1
 80053cc:	2101      	movs	r1, #1
 80053ce:	484f      	ldr	r0, [pc, #316]	@ (800550c <main+0x539c>)
 80053d0:	f002 ffab 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 80053d4:	f003 f952 	bl	800867c <HAL_GetTick>
 80053d8:	4603      	mov	r3, r0
 80053da:	33fa      	adds	r3, #250	@ 0xfa
 80053dc:	677b      	str	r3, [r7, #116]	@ 0x74
 80053de:	e10d      	b.n	80055fc <main+0x548c>
			}
			//if 7 is pressed
			else if (Keypad_Get_Key(&kp, kp_button_7)
 80053e0:	2108      	movs	r1, #8
 80053e2:	4849      	ldr	r0, [pc, #292]	@ (8005508 <main+0x5398>)
 80053e4:	f003 f8da 	bl	800859c <Keypad_Get_Key>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d042      	beq.n	8005474 <main+0x5304>
					&& (current_tick >= general_delay)) {
 80053ee:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80053f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d33e      	bcc.n	8005474 <main+0x5304>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80053f6:	2300      	movs	r3, #0
 80053f8:	2200      	movs	r2, #0
 80053fa:	2101      	movs	r1, #1
 80053fc:	4843      	ldr	r0, [pc, #268]	@ (800550c <main+0x539c>)
 80053fe:	f002 ff94 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered password
				if (input_index < 2) {
 8005402:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8005406:	2b01      	cmp	r3, #1
 8005408:	d827      	bhi.n	800545a <main+0x52ea>
					entered_password[input_index] = '7';
 800540a:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800540e:	3388      	adds	r3, #136	@ 0x88
 8005410:	443b      	add	r3, r7
 8005412:	2237      	movs	r2, #55	@ 0x37
 8005414:	f803 2c70 	strb.w	r2, [r3, #-112]
					entered_password[input_index + 1] = '\0'; // Null-terminate the string
 8005418:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800541c:	3301      	adds	r3, #1
 800541e:	3388      	adds	r3, #136	@ 0x88
 8005420:	443b      	add	r3, r7
 8005422:	2200      	movs	r2, #0
 8005424:	f803 2c70 	strb.w	r2, [r3, #-112]
					Alcd_PutAt(&lcd, 1, input_index, "7");
 8005428:	483c      	ldr	r0, [pc, #240]	@ (800551c <main+0x53ac>)
 800542a:	f002 ffc1 	bl	80083b0 <Str_Len>
 800542e:	4603      	mov	r3, r0
 8005430:	b2db      	uxtb	r3, r3
 8005432:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8005436:	9300      	str	r3, [sp, #0]
 8005438:	4b38      	ldr	r3, [pc, #224]	@ (800551c <main+0x53ac>)
 800543a:	2101      	movs	r1, #1
 800543c:	4833      	ldr	r0, [pc, #204]	@ (800550c <main+0x539c>)
 800543e:	f002 ff4a 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 8005442:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8005446:	3301      	adds	r3, #1
 8005448:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 800544c:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8005450:	461a      	mov	r2, r3
 8005452:	2101      	movs	r1, #1
 8005454:	482d      	ldr	r0, [pc, #180]	@ (800550c <main+0x539c>)
 8005456:	f002 ff02 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 800545a:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 800545e:	2301      	movs	r3, #1
 8005460:	2101      	movs	r1, #1
 8005462:	482a      	ldr	r0, [pc, #168]	@ (800550c <main+0x539c>)
 8005464:	f002 ff61 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8005468:	f003 f908 	bl	800867c <HAL_GetTick>
 800546c:	4603      	mov	r3, r0
 800546e:	33fa      	adds	r3, #250	@ 0xfa
 8005470:	677b      	str	r3, [r7, #116]	@ 0x74
 8005472:	e0c3      	b.n	80055fc <main+0x548c>
			}
			//if 8 is pressed
			else if (Keypad_Get_Key(&kp, kp_button_8)
 8005474:	2109      	movs	r1, #9
 8005476:	4824      	ldr	r0, [pc, #144]	@ (8005508 <main+0x5398>)
 8005478:	f003 f890 	bl	800859c <Keypad_Get_Key>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d050      	beq.n	8005524 <main+0x53b4>
					&& (current_tick >= general_delay)) {
 8005482:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005484:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005486:	429a      	cmp	r2, r3
 8005488:	d34c      	bcc.n	8005524 <main+0x53b4>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 800548a:	2300      	movs	r3, #0
 800548c:	2200      	movs	r2, #0
 800548e:	2101      	movs	r1, #1
 8005490:	481e      	ldr	r0, [pc, #120]	@ (800550c <main+0x539c>)
 8005492:	f002 ff4a 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered password
				if (input_index < 2) {
 8005496:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800549a:	2b01      	cmp	r3, #1
 800549c:	d827      	bhi.n	80054ee <main+0x537e>
					entered_password[input_index] = '8';
 800549e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80054a2:	3388      	adds	r3, #136	@ 0x88
 80054a4:	443b      	add	r3, r7
 80054a6:	2238      	movs	r2, #56	@ 0x38
 80054a8:	f803 2c70 	strb.w	r2, [r3, #-112]
					entered_password[input_index + 1] = '\0'; // Null-terminate the string
 80054ac:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80054b0:	3301      	adds	r3, #1
 80054b2:	3388      	adds	r3, #136	@ 0x88
 80054b4:	443b      	add	r3, r7
 80054b6:	2200      	movs	r2, #0
 80054b8:	f803 2c70 	strb.w	r2, [r3, #-112]
					Alcd_PutAt(&lcd, 1, input_index, "8");
 80054bc:	4818      	ldr	r0, [pc, #96]	@ (8005520 <main+0x53b0>)
 80054be:	f002 ff77 	bl	80083b0 <Str_Len>
 80054c2:	4603      	mov	r3, r0
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 80054ca:	9300      	str	r3, [sp, #0]
 80054cc:	4b14      	ldr	r3, [pc, #80]	@ (8005520 <main+0x53b0>)
 80054ce:	2101      	movs	r1, #1
 80054d0:	480e      	ldr	r0, [pc, #56]	@ (800550c <main+0x539c>)
 80054d2:	f002 ff00 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 80054d6:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80054da:	3301      	adds	r3, #1
 80054dc:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 80054e0:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80054e4:	461a      	mov	r2, r3
 80054e6:	2101      	movs	r1, #1
 80054e8:	4808      	ldr	r0, [pc, #32]	@ (800550c <main+0x539c>)
 80054ea:	f002 feb8 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 80054ee:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 80054f2:	2301      	movs	r3, #1
 80054f4:	2101      	movs	r1, #1
 80054f6:	4805      	ldr	r0, [pc, #20]	@ (800550c <main+0x539c>)
 80054f8:	f002 ff17 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 80054fc:	f003 f8be 	bl	800867c <HAL_GetTick>
 8005500:	4603      	mov	r3, r0
 8005502:	33fa      	adds	r3, #250	@ 0xfa
 8005504:	677b      	str	r3, [r7, #116]	@ 0x74
 8005506:	e079      	b.n	80055fc <main+0x548c>
 8005508:	20000000 	.word	0x20000000
 800550c:	2000001c 	.word	0x2000001c
 8005510:	0800c378 	.word	0x0800c378
 8005514:	0800c37c 	.word	0x0800c37c
 8005518:	0800c380 	.word	0x0800c380
 800551c:	0800c384 	.word	0x0800c384
 8005520:	0800c388 	.word	0x0800c388
			}
			//if 9 is pressed
			else if (Keypad_Get_Key(&kp, kp_button_9)
 8005524:	210a      	movs	r1, #10
 8005526:	48ab      	ldr	r0, [pc, #684]	@ (80057d4 <main+0x5664>)
 8005528:	f003 f838 	bl	800859c <Keypad_Get_Key>
 800552c:	4603      	mov	r3, r0
 800552e:	2b00      	cmp	r3, #0
 8005530:	d042      	beq.n	80055b8 <main+0x5448>
					&& (current_tick >= general_delay)) {
 8005532:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005534:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005536:	429a      	cmp	r2, r3
 8005538:	d33e      	bcc.n	80055b8 <main+0x5448>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 800553a:	2300      	movs	r3, #0
 800553c:	2200      	movs	r2, #0
 800553e:	2101      	movs	r1, #1
 8005540:	48a5      	ldr	r0, [pc, #660]	@ (80057d8 <main+0x5668>)
 8005542:	f002 fef2 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered password
				if (input_index < 2) {
 8005546:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800554a:	2b01      	cmp	r3, #1
 800554c:	d827      	bhi.n	800559e <main+0x542e>
					entered_password[input_index] = '9';
 800554e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8005552:	3388      	adds	r3, #136	@ 0x88
 8005554:	443b      	add	r3, r7
 8005556:	2239      	movs	r2, #57	@ 0x39
 8005558:	f803 2c70 	strb.w	r2, [r3, #-112]
					entered_password[input_index + 1] = '\0'; // Null-terminate the string
 800555c:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8005560:	3301      	adds	r3, #1
 8005562:	3388      	adds	r3, #136	@ 0x88
 8005564:	443b      	add	r3, r7
 8005566:	2200      	movs	r2, #0
 8005568:	f803 2c70 	strb.w	r2, [r3, #-112]
					Alcd_PutAt(&lcd, 1, input_index, "9");
 800556c:	489b      	ldr	r0, [pc, #620]	@ (80057dc <main+0x566c>)
 800556e:	f002 ff1f 	bl	80083b0 <Str_Len>
 8005572:	4603      	mov	r3, r0
 8005574:	b2db      	uxtb	r3, r3
 8005576:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 800557a:	9300      	str	r3, [sp, #0]
 800557c:	4b97      	ldr	r3, [pc, #604]	@ (80057dc <main+0x566c>)
 800557e:	2101      	movs	r1, #1
 8005580:	4895      	ldr	r0, [pc, #596]	@ (80057d8 <main+0x5668>)
 8005582:	f002 fea8 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 8005586:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800558a:	3301      	adds	r3, #1
 800558c:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8005590:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8005594:	461a      	mov	r2, r3
 8005596:	2101      	movs	r1, #1
 8005598:	488f      	ldr	r0, [pc, #572]	@ (80057d8 <main+0x5668>)
 800559a:	f002 fe60 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 800559e:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 80055a2:	2301      	movs	r3, #1
 80055a4:	2101      	movs	r1, #1
 80055a6:	488c      	ldr	r0, [pc, #560]	@ (80057d8 <main+0x5668>)
 80055a8:	f002 febf 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 80055ac:	f003 f866 	bl	800867c <HAL_GetTick>
 80055b0:	4603      	mov	r3, r0
 80055b2:	33fa      	adds	r3, #250	@ 0xfa
 80055b4:	677b      	str	r3, [r7, #116]	@ 0x74
 80055b6:	e021      	b.n	80055fc <main+0x548c>
			}

			//if yes is pressed
			else if (Keypad_Get_Key(&kp, kp_button_yes)
 80055b8:	210f      	movs	r1, #15
 80055ba:	4886      	ldr	r0, [pc, #536]	@ (80057d4 <main+0x5664>)
 80055bc:	f002 ffee 	bl	800859c <Keypad_Get_Key>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d01a      	beq.n	80055fc <main+0x548c>
					&& (current_tick >= general_delay)) {
 80055c6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80055c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d316      	bcc.n	80055fc <main+0x548c>

				//convert the string into integer
				buffer = atoi(entered_password);
 80055ce:	f107 0318 	add.w	r3, r7, #24
 80055d2:	4618      	mov	r0, r3
 80055d4:	f006 f8e3 	bl	800b79e <atoi>
 80055d8:	4603      	mov	r3, r0
 80055da:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

				//write the value to eeprom
				eeprom24c32_write(&memory, buffer, doses_number);
 80055de:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	4a7e      	ldr	r2, [pc, #504]	@ (80057e0 <main+0x5670>)
 80055e6:	b292      	uxth	r2, r2
 80055e8:	4619      	mov	r1, r3
 80055ea:	487e      	ldr	r0, [pc, #504]	@ (80057e4 <main+0x5674>)
 80055ec:	f002 faa0 	bl	8007b30 <eeprom24c32_write>

				input_index = 0;
 80055f0:	2300      	movs	r3, #0
 80055f2:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d

				//return to the previous menu
				status = 23;
 80055f6:	2317      	movs	r3, #23
 80055f8:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		while ((status == 43) && (current_tick >= general_delay)) {
 80055fc:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 8005600:	2b2b      	cmp	r3, #43	@ 0x2b
 8005602:	f040 8095 	bne.w	8005730 <main+0x55c0>
 8005606:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005608:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800560a:	429a      	cmp	r2, r3
 800560c:	f4bf ac88 	bcs.w	8004f20 <main+0x4db0>
			}
		}

		//time entry state 44
		while ((status == 44) && (current_tick >= general_delay)) {
 8005610:	e08e      	b.n	8005730 <main+0x55c0>

			//get the current tick number
			current_tick = HAL_GetTick();
 8005612:	f003 f833 	bl	800867c <HAL_GetTick>
 8005616:	67f8      	str	r0, [r7, #124]	@ 0x7c

			Alcd_Clear(&lcd);
 8005618:	486f      	ldr	r0, [pc, #444]	@ (80057d8 <main+0x5668>)
 800561a:	f002 fe75 	bl	8008308 <Alcd_Clear>
			snprintf(timeString, sizeof(timeString), "%02d", status);
 800561e:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 8005622:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8005626:	4a70      	ldr	r2, [pc, #448]	@ (80057e8 <main+0x5678>)
 8005628:	2132      	movs	r1, #50	@ 0x32
 800562a:	f006 f941 	bl	800b8b0 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 800562e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005632:	4618      	mov	r0, r3
 8005634:	f7fa fd94 	bl	8000160 <strlen>
 8005638:	4603      	mov	r3, r0
 800563a:	b2db      	uxtb	r3, r3
 800563c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8005640:	9300      	str	r3, [sp, #0]
 8005642:	4613      	mov	r3, r2
 8005644:	220e      	movs	r2, #14
 8005646:	2100      	movs	r1, #0
 8005648:	4863      	ldr	r0, [pc, #396]	@ (80057d8 <main+0x5668>)
 800564a:	f002 fe44 	bl	80082d6 <Alcd_PutAt_n>

			//check if the time format is 12h or 24h
			//in case 12h
			if (CLK.format == 1) {
 800564e:	4b67      	ldr	r3, [pc, #412]	@ (80057ec <main+0x567c>)
 8005650:	7c5b      	ldrb	r3, [r3, #17]
 8005652:	f003 0301 	and.w	r3, r3, #1
 8005656:	b2db      	uxtb	r3, r3
 8005658:	2b00      	cmp	r3, #0
 800565a:	d05a      	beq.n	8005712 <main+0x55a2>

				Alcd_PutAt(&lcd, 0, 0, "select time");
 800565c:	4864      	ldr	r0, [pc, #400]	@ (80057f0 <main+0x5680>)
 800565e:	f002 fea7 	bl	80083b0 <Str_Len>
 8005662:	4603      	mov	r3, r0
 8005664:	b2db      	uxtb	r3, r3
 8005666:	9300      	str	r3, [sp, #0]
 8005668:	4b61      	ldr	r3, [pc, #388]	@ (80057f0 <main+0x5680>)
 800566a:	2200      	movs	r2, #0
 800566c:	2100      	movs	r1, #0
 800566e:	485a      	ldr	r0, [pc, #360]	@ (80057d8 <main+0x5668>)
 8005670:	f002 fe31 	bl	80082d6 <Alcd_PutAt_n>
				Alcd_PutAt(&lcd, 1, 0, "1: AM   2: PM");
 8005674:	485f      	ldr	r0, [pc, #380]	@ (80057f4 <main+0x5684>)
 8005676:	f002 fe9b 	bl	80083b0 <Str_Len>
 800567a:	4603      	mov	r3, r0
 800567c:	b2db      	uxtb	r3, r3
 800567e:	9300      	str	r3, [sp, #0]
 8005680:	4b5c      	ldr	r3, [pc, #368]	@ (80057f4 <main+0x5684>)
 8005682:	2200      	movs	r2, #0
 8005684:	2101      	movs	r1, #1
 8005686:	4854      	ldr	r0, [pc, #336]	@ (80057d8 <main+0x5668>)
 8005688:	f002 fe25 	bl	80082d6 <Alcd_PutAt_n>

				//check for any keypad input
				Keypad_Refresh(&kp);
 800568c:	4851      	ldr	r0, [pc, #324]	@ (80057d4 <main+0x5664>)
 800568e:	f002 fee9 	bl	8008464 <Keypad_Refresh>

				//in case 1 is selected -> AM
				if (Keypad_Get_Key(&kp, kp_button_1)
 8005692:	2100      	movs	r1, #0
 8005694:	484f      	ldr	r0, [pc, #316]	@ (80057d4 <main+0x5664>)
 8005696:	f002 ff81 	bl	800859c <Keypad_Get_Key>
 800569a:	4603      	mov	r3, r0
 800569c:	2b00      	cmp	r3, #0
 800569e:	d00f      	beq.n	80056c0 <main+0x5550>
						&& (current_tick >= general_delay)) {
 80056a0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80056a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d30b      	bcc.n	80056c0 <main+0x5550>
					CLK.AM_PM = 0;
 80056a8:	4a50      	ldr	r2, [pc, #320]	@ (80057ec <main+0x567c>)
 80056aa:	7c53      	ldrb	r3, [r2, #17]
 80056ac:	f36f 0341 	bfc	r3, #1, #1
 80056b0:	7453      	strb	r3, [r2, #17]

					Alcd_Clear(&lcd);
 80056b2:	4849      	ldr	r0, [pc, #292]	@ (80057d8 <main+0x5668>)
 80056b4:	f002 fe28 	bl	8008308 <Alcd_Clear>

					status = 46;
 80056b8:	232e      	movs	r3, #46	@ 0x2e
 80056ba:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 80056be:	e032      	b.n	8005726 <main+0x55b6>

				}

				//2 is selected -> PM
				else if (Keypad_Get_Key(&kp, kp_button_2)
 80056c0:	2101      	movs	r1, #1
 80056c2:	4844      	ldr	r0, [pc, #272]	@ (80057d4 <main+0x5664>)
 80056c4:	f002 ff6a 	bl	800859c <Keypad_Get_Key>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d00f      	beq.n	80056ee <main+0x557e>
						&& (current_tick >= general_delay)) {
 80056ce:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80056d0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d30b      	bcc.n	80056ee <main+0x557e>

					CLK.AM_PM = 1;
 80056d6:	4a45      	ldr	r2, [pc, #276]	@ (80057ec <main+0x567c>)
 80056d8:	7c53      	ldrb	r3, [r2, #17]
 80056da:	f043 0302 	orr.w	r3, r3, #2
 80056de:	7453      	strb	r3, [r2, #17]
					Alcd_Clear(&lcd);
 80056e0:	483d      	ldr	r0, [pc, #244]	@ (80057d8 <main+0x5668>)
 80056e2:	f002 fe11 	bl	8008308 <Alcd_Clear>
					status = 46;
 80056e6:	232e      	movs	r3, #46	@ 0x2e
 80056e8:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 80056ec:	e01b      	b.n	8005726 <main+0x55b6>

				}

				//back is selected
				else if (Keypad_Get_Key(&kp, kp_button_no_back)
 80056ee:	210e      	movs	r1, #14
 80056f0:	4838      	ldr	r0, [pc, #224]	@ (80057d4 <main+0x5664>)
 80056f2:	f002 ff53 	bl	800859c <Keypad_Get_Key>
 80056f6:	4603      	mov	r3, r0
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d014      	beq.n	8005726 <main+0x55b6>
						&& (current_tick >= general_delay)) {
 80056fc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80056fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005700:	429a      	cmp	r2, r3
 8005702:	d310      	bcc.n	8005726 <main+0x55b6>

					Alcd_Clear(&lcd);
 8005704:	4834      	ldr	r0, [pc, #208]	@ (80057d8 <main+0x5668>)
 8005706:	f002 fdff 	bl	8008308 <Alcd_Clear>
					//go to previous menu
					status = 23;
 800570a:	2317      	movs	r3, #23
 800570c:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 8005710:	e009      	b.n	8005726 <main+0x55b6>

				}

			}

			else if (CLK.format == 0) {
 8005712:	4b36      	ldr	r3, [pc, #216]	@ (80057ec <main+0x567c>)
 8005714:	7c5b      	ldrb	r3, [r3, #17]
 8005716:	f003 0301 	and.w	r3, r3, #1
 800571a:	b2db      	uxtb	r3, r3
 800571c:	2b00      	cmp	r3, #0
 800571e:	d102      	bne.n	8005726 <main+0x55b6>

				status = 46;
 8005720:	232e      	movs	r3, #46	@ 0x2e
 8005722:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83

			}

			general_delay = HAL_GetTick() + 250;
 8005726:	f002 ffa9 	bl	800867c <HAL_GetTick>
 800572a:	4603      	mov	r3, r0
 800572c:	33fa      	adds	r3, #250	@ 0xfa
 800572e:	677b      	str	r3, [r7, #116]	@ 0x74
		while ((status == 44) && (current_tick >= general_delay)) {
 8005730:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 8005734:	2b2c      	cmp	r3, #44	@ 0x2c
 8005736:	f040 838c 	bne.w	8005e52 <main+0x5ce2>
 800573a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800573c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800573e:	429a      	cmp	r2, r3
 8005740:	f4bf af67 	bcs.w	8005612 <main+0x54a2>
		}

		//entering the hours state (46)
		while ((status == 46) && (current_tick >= general_delay)) {
 8005744:	e385      	b.n	8005e52 <main+0x5ce2>

			//get the current tick number
			current_tick = HAL_GetTick();
 8005746:	f002 ff99 	bl	800867c <HAL_GetTick>
 800574a:	67f8      	str	r0, [r7, #124]	@ 0x7c

			//Alcd_Clear(&lcd);
			Alcd_PutAt(&lcd, 0, 0, "Enter hours");
 800574c:	482a      	ldr	r0, [pc, #168]	@ (80057f8 <main+0x5688>)
 800574e:	f002 fe2f 	bl	80083b0 <Str_Len>
 8005752:	4603      	mov	r3, r0
 8005754:	b2db      	uxtb	r3, r3
 8005756:	9300      	str	r3, [sp, #0]
 8005758:	4b27      	ldr	r3, [pc, #156]	@ (80057f8 <main+0x5688>)
 800575a:	2200      	movs	r2, #0
 800575c:	2100      	movs	r1, #0
 800575e:	481e      	ldr	r0, [pc, #120]	@ (80057d8 <main+0x5668>)
 8005760:	f002 fdb9 	bl	80082d6 <Alcd_PutAt_n>

			snprintf(timeString, sizeof(timeString), "%02d", status);
 8005764:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 8005768:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800576c:	4a1e      	ldr	r2, [pc, #120]	@ (80057e8 <main+0x5678>)
 800576e:	2132      	movs	r1, #50	@ 0x32
 8005770:	f006 f89e 	bl	800b8b0 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 8005774:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005778:	4618      	mov	r0, r3
 800577a:	f7fa fcf1 	bl	8000160 <strlen>
 800577e:	4603      	mov	r3, r0
 8005780:	b2db      	uxtb	r3, r3
 8005782:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8005786:	9300      	str	r3, [sp, #0]
 8005788:	4613      	mov	r3, r2
 800578a:	220e      	movs	r2, #14
 800578c:	2100      	movs	r1, #0
 800578e:	4812      	ldr	r0, [pc, #72]	@ (80057d8 <main+0x5668>)
 8005790:	f002 fda1 	bl	80082d6 <Alcd_PutAt_n>

			Alcd_CursorAt(&lcd, 1, input_index);
 8005794:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8005798:	461a      	mov	r2, r3
 800579a:	2101      	movs	r1, #1
 800579c:	480e      	ldr	r0, [pc, #56]	@ (80057d8 <main+0x5668>)
 800579e:	f002 fd5e 	bl	800825e <Alcd_CursorAt>
			Alcd_Display_Control(&lcd, 1, 1, 1);
 80057a2:	2301      	movs	r3, #1
 80057a4:	2201      	movs	r2, #1
 80057a6:	2101      	movs	r1, #1
 80057a8:	480b      	ldr	r0, [pc, #44]	@ (80057d8 <main+0x5668>)
 80057aa:	f002 fdbe 	bl	800832a <Alcd_Display_Control>

			//check if any button is pressed
			//check for any keypad input
			Keypad_Refresh(&kp);
 80057ae:	4809      	ldr	r0, [pc, #36]	@ (80057d4 <main+0x5664>)
 80057b0:	f002 fe58 	bl	8008464 <Keypad_Refresh>

			//if back is entered
			if (Keypad_Get_Key(&kp, kp_button_no_back)
 80057b4:	210e      	movs	r1, #14
 80057b6:	4807      	ldr	r0, [pc, #28]	@ (80057d4 <main+0x5664>)
 80057b8:	f002 fef0 	bl	800859c <Keypad_Get_Key>
 80057bc:	4603      	mov	r3, r0
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d01c      	beq.n	80057fc <main+0x568c>
					&& (current_tick >= general_delay)) {
 80057c2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80057c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d318      	bcc.n	80057fc <main+0x568c>

				//back to previous menu
				status = 23;
 80057ca:	2317      	movs	r3, #23
 80057cc:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 80057d0:	e311      	b.n	8005df6 <main+0x5c86>
 80057d2:	bf00      	nop
 80057d4:	20000000 	.word	0x20000000
 80057d8:	2000001c 	.word	0x2000001c
 80057dc:	0800c38c 	.word	0x0800c38c
 80057e0:	20000174 	.word	0x20000174
 80057e4:	20000168 	.word	0x20000168
 80057e8:	0800c280 	.word	0x0800c280
 80057ec:	20000150 	.word	0x20000150
 80057f0:	0800c440 	.word	0x0800c440
 80057f4:	0800c44c 	.word	0x0800c44c
 80057f8:	0800c35c 	.word	0x0800c35c

			}

			//0 is entered
			else if (Keypad_Get_Key(&kp, kp_button_0)
 80057fc:	210d      	movs	r1, #13
 80057fe:	48b8      	ldr	r0, [pc, #736]	@ (8005ae0 <main+0x5970>)
 8005800:	f002 fecc 	bl	800859c <Keypad_Get_Key>
 8005804:	4603      	mov	r3, r0
 8005806:	2b00      	cmp	r3, #0
 8005808:	d042      	beq.n	8005890 <main+0x5720>
					&& (current_tick >= general_delay)) {
 800580a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800580c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800580e:	429a      	cmp	r2, r3
 8005810:	d33e      	bcc.n	8005890 <main+0x5720>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8005812:	2300      	movs	r3, #0
 8005814:	2200      	movs	r2, #0
 8005816:	2101      	movs	r1, #1
 8005818:	48b2      	ldr	r0, [pc, #712]	@ (8005ae4 <main+0x5974>)
 800581a:	f002 fd86 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 800581e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8005822:	2b01      	cmp	r3, #1
 8005824:	d827      	bhi.n	8005876 <main+0x5706>
					time_date_buffer[input_index] = '0';
 8005826:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800582a:	3388      	adds	r3, #136	@ 0x88
 800582c:	443b      	add	r3, r7
 800582e:	2230      	movs	r2, #48	@ 0x30
 8005830:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8005834:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8005838:	3301      	adds	r3, #1
 800583a:	3388      	adds	r3, #136	@ 0x88
 800583c:	443b      	add	r3, r7
 800583e:	2200      	movs	r2, #0
 8005840:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "0");
 8005844:	48a8      	ldr	r0, [pc, #672]	@ (8005ae8 <main+0x5978>)
 8005846:	f002 fdb3 	bl	80083b0 <Str_Len>
 800584a:	4603      	mov	r3, r0
 800584c:	b2db      	uxtb	r3, r3
 800584e:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8005852:	9300      	str	r3, [sp, #0]
 8005854:	4ba4      	ldr	r3, [pc, #656]	@ (8005ae8 <main+0x5978>)
 8005856:	2101      	movs	r1, #1
 8005858:	48a2      	ldr	r0, [pc, #648]	@ (8005ae4 <main+0x5974>)
 800585a:	f002 fd3c 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 800585e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8005862:	3301      	adds	r3, #1
 8005864:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8005868:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800586c:	461a      	mov	r2, r3
 800586e:	2101      	movs	r1, #1
 8005870:	489c      	ldr	r0, [pc, #624]	@ (8005ae4 <main+0x5974>)
 8005872:	f002 fcf4 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8005876:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 800587a:	2301      	movs	r3, #1
 800587c:	2101      	movs	r1, #1
 800587e:	4899      	ldr	r0, [pc, #612]	@ (8005ae4 <main+0x5974>)
 8005880:	f002 fd53 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8005884:	f002 fefa 	bl	800867c <HAL_GetTick>
 8005888:	4603      	mov	r3, r0
 800588a:	33fa      	adds	r3, #250	@ 0xfa
 800588c:	677b      	str	r3, [r7, #116]	@ 0x74
 800588e:	e2b2      	b.n	8005df6 <main+0x5c86>

			}
			//1 is entered
			else if (Keypad_Get_Key(&kp, kp_button_1)
 8005890:	2100      	movs	r1, #0
 8005892:	4893      	ldr	r0, [pc, #588]	@ (8005ae0 <main+0x5970>)
 8005894:	f002 fe82 	bl	800859c <Keypad_Get_Key>
 8005898:	4603      	mov	r3, r0
 800589a:	2b00      	cmp	r3, #0
 800589c:	d042      	beq.n	8005924 <main+0x57b4>
					&& (current_tick >= general_delay)) {
 800589e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80058a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d33e      	bcc.n	8005924 <main+0x57b4>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80058a6:	2300      	movs	r3, #0
 80058a8:	2200      	movs	r2, #0
 80058aa:	2101      	movs	r1, #1
 80058ac:	488d      	ldr	r0, [pc, #564]	@ (8005ae4 <main+0x5974>)
 80058ae:	f002 fd3c 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 80058b2:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d827      	bhi.n	800590a <main+0x579a>
					time_date_buffer[input_index] = '1';
 80058ba:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80058be:	3388      	adds	r3, #136	@ 0x88
 80058c0:	443b      	add	r3, r7
 80058c2:	2231      	movs	r2, #49	@ 0x31
 80058c4:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 80058c8:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80058cc:	3301      	adds	r3, #1
 80058ce:	3388      	adds	r3, #136	@ 0x88
 80058d0:	443b      	add	r3, r7
 80058d2:	2200      	movs	r2, #0
 80058d4:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "1");
 80058d8:	4884      	ldr	r0, [pc, #528]	@ (8005aec <main+0x597c>)
 80058da:	f002 fd69 	bl	80083b0 <Str_Len>
 80058de:	4603      	mov	r3, r0
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 80058e6:	9300      	str	r3, [sp, #0]
 80058e8:	4b80      	ldr	r3, [pc, #512]	@ (8005aec <main+0x597c>)
 80058ea:	2101      	movs	r1, #1
 80058ec:	487d      	ldr	r0, [pc, #500]	@ (8005ae4 <main+0x5974>)
 80058ee:	f002 fcf2 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 80058f2:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80058f6:	3301      	adds	r3, #1
 80058f8:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 80058fc:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8005900:	461a      	mov	r2, r3
 8005902:	2101      	movs	r1, #1
 8005904:	4877      	ldr	r0, [pc, #476]	@ (8005ae4 <main+0x5974>)
 8005906:	f002 fcaa 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 800590a:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 800590e:	2301      	movs	r3, #1
 8005910:	2101      	movs	r1, #1
 8005912:	4874      	ldr	r0, [pc, #464]	@ (8005ae4 <main+0x5974>)
 8005914:	f002 fd09 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8005918:	f002 feb0 	bl	800867c <HAL_GetTick>
 800591c:	4603      	mov	r3, r0
 800591e:	33fa      	adds	r3, #250	@ 0xfa
 8005920:	677b      	str	r3, [r7, #116]	@ 0x74
 8005922:	e268      	b.n	8005df6 <main+0x5c86>

			}
			//2 is entered
			else if (Keypad_Get_Key(&kp, kp_button_2)
 8005924:	2101      	movs	r1, #1
 8005926:	486e      	ldr	r0, [pc, #440]	@ (8005ae0 <main+0x5970>)
 8005928:	f002 fe38 	bl	800859c <Keypad_Get_Key>
 800592c:	4603      	mov	r3, r0
 800592e:	2b00      	cmp	r3, #0
 8005930:	d042      	beq.n	80059b8 <main+0x5848>
					&& (current_tick >= general_delay)) {
 8005932:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005934:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005936:	429a      	cmp	r2, r3
 8005938:	d33e      	bcc.n	80059b8 <main+0x5848>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 800593a:	2300      	movs	r3, #0
 800593c:	2200      	movs	r2, #0
 800593e:	2101      	movs	r1, #1
 8005940:	4868      	ldr	r0, [pc, #416]	@ (8005ae4 <main+0x5974>)
 8005942:	f002 fcf2 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8005946:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800594a:	2b01      	cmp	r3, #1
 800594c:	d827      	bhi.n	800599e <main+0x582e>
					time_date_buffer[input_index] = '2';
 800594e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8005952:	3388      	adds	r3, #136	@ 0x88
 8005954:	443b      	add	r3, r7
 8005956:	2232      	movs	r2, #50	@ 0x32
 8005958:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 800595c:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8005960:	3301      	adds	r3, #1
 8005962:	3388      	adds	r3, #136	@ 0x88
 8005964:	443b      	add	r3, r7
 8005966:	2200      	movs	r2, #0
 8005968:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "2");
 800596c:	4860      	ldr	r0, [pc, #384]	@ (8005af0 <main+0x5980>)
 800596e:	f002 fd1f 	bl	80083b0 <Str_Len>
 8005972:	4603      	mov	r3, r0
 8005974:	b2db      	uxtb	r3, r3
 8005976:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 800597a:	9300      	str	r3, [sp, #0]
 800597c:	4b5c      	ldr	r3, [pc, #368]	@ (8005af0 <main+0x5980>)
 800597e:	2101      	movs	r1, #1
 8005980:	4858      	ldr	r0, [pc, #352]	@ (8005ae4 <main+0x5974>)
 8005982:	f002 fca8 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 8005986:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800598a:	3301      	adds	r3, #1
 800598c:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8005990:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8005994:	461a      	mov	r2, r3
 8005996:	2101      	movs	r1, #1
 8005998:	4852      	ldr	r0, [pc, #328]	@ (8005ae4 <main+0x5974>)
 800599a:	f002 fc60 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 800599e:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 80059a2:	2301      	movs	r3, #1
 80059a4:	2101      	movs	r1, #1
 80059a6:	484f      	ldr	r0, [pc, #316]	@ (8005ae4 <main+0x5974>)
 80059a8:	f002 fcbf 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 80059ac:	f002 fe66 	bl	800867c <HAL_GetTick>
 80059b0:	4603      	mov	r3, r0
 80059b2:	33fa      	adds	r3, #250	@ 0xfa
 80059b4:	677b      	str	r3, [r7, #116]	@ 0x74
 80059b6:	e21e      	b.n	8005df6 <main+0x5c86>

			}
			//3 is entered
			else if (Keypad_Get_Key(&kp, kp_button_3)
 80059b8:	2102      	movs	r1, #2
 80059ba:	4849      	ldr	r0, [pc, #292]	@ (8005ae0 <main+0x5970>)
 80059bc:	f002 fdee 	bl	800859c <Keypad_Get_Key>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d042      	beq.n	8005a4c <main+0x58dc>
					&& (current_tick >= general_delay)) {
 80059c6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80059c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d33e      	bcc.n	8005a4c <main+0x58dc>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80059ce:	2300      	movs	r3, #0
 80059d0:	2200      	movs	r2, #0
 80059d2:	2101      	movs	r1, #1
 80059d4:	4843      	ldr	r0, [pc, #268]	@ (8005ae4 <main+0x5974>)
 80059d6:	f002 fca8 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 80059da:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d827      	bhi.n	8005a32 <main+0x58c2>
					time_date_buffer[input_index] = '3';
 80059e2:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80059e6:	3388      	adds	r3, #136	@ 0x88
 80059e8:	443b      	add	r3, r7
 80059ea:	2233      	movs	r2, #51	@ 0x33
 80059ec:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 80059f0:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80059f4:	3301      	adds	r3, #1
 80059f6:	3388      	adds	r3, #136	@ 0x88
 80059f8:	443b      	add	r3, r7
 80059fa:	2200      	movs	r2, #0
 80059fc:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "3");
 8005a00:	483c      	ldr	r0, [pc, #240]	@ (8005af4 <main+0x5984>)
 8005a02:	f002 fcd5 	bl	80083b0 <Str_Len>
 8005a06:	4603      	mov	r3, r0
 8005a08:	b2db      	uxtb	r3, r3
 8005a0a:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8005a0e:	9300      	str	r3, [sp, #0]
 8005a10:	4b38      	ldr	r3, [pc, #224]	@ (8005af4 <main+0x5984>)
 8005a12:	2101      	movs	r1, #1
 8005a14:	4833      	ldr	r0, [pc, #204]	@ (8005ae4 <main+0x5974>)
 8005a16:	f002 fc5e 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 8005a1a:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8005a1e:	3301      	adds	r3, #1
 8005a20:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8005a24:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8005a28:	461a      	mov	r2, r3
 8005a2a:	2101      	movs	r1, #1
 8005a2c:	482d      	ldr	r0, [pc, #180]	@ (8005ae4 <main+0x5974>)
 8005a2e:	f002 fc16 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8005a32:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8005a36:	2301      	movs	r3, #1
 8005a38:	2101      	movs	r1, #1
 8005a3a:	482a      	ldr	r0, [pc, #168]	@ (8005ae4 <main+0x5974>)
 8005a3c:	f002 fc75 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8005a40:	f002 fe1c 	bl	800867c <HAL_GetTick>
 8005a44:	4603      	mov	r3, r0
 8005a46:	33fa      	adds	r3, #250	@ 0xfa
 8005a48:	677b      	str	r3, [r7, #116]	@ 0x74
 8005a4a:	e1d4      	b.n	8005df6 <main+0x5c86>

			}

			//4 is entered
			else if (Keypad_Get_Key(&kp, kp_button_4)
 8005a4c:	2104      	movs	r1, #4
 8005a4e:	4824      	ldr	r0, [pc, #144]	@ (8005ae0 <main+0x5970>)
 8005a50:	f002 fda4 	bl	800859c <Keypad_Get_Key>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d050      	beq.n	8005afc <main+0x598c>
					&& (current_tick >= general_delay)) {
 8005a5a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005a5c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d34c      	bcc.n	8005afc <main+0x598c>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8005a62:	2300      	movs	r3, #0
 8005a64:	2200      	movs	r2, #0
 8005a66:	2101      	movs	r1, #1
 8005a68:	481e      	ldr	r0, [pc, #120]	@ (8005ae4 <main+0x5974>)
 8005a6a:	f002 fc5e 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8005a6e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d827      	bhi.n	8005ac6 <main+0x5956>
					time_date_buffer[input_index] = '4';
 8005a76:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8005a7a:	3388      	adds	r3, #136	@ 0x88
 8005a7c:	443b      	add	r3, r7
 8005a7e:	2234      	movs	r2, #52	@ 0x34
 8005a80:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8005a84:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8005a88:	3301      	adds	r3, #1
 8005a8a:	3388      	adds	r3, #136	@ 0x88
 8005a8c:	443b      	add	r3, r7
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "4");
 8005a94:	4818      	ldr	r0, [pc, #96]	@ (8005af8 <main+0x5988>)
 8005a96:	f002 fc8b 	bl	80083b0 <Str_Len>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8005aa2:	9300      	str	r3, [sp, #0]
 8005aa4:	4b14      	ldr	r3, [pc, #80]	@ (8005af8 <main+0x5988>)
 8005aa6:	2101      	movs	r1, #1
 8005aa8:	480e      	ldr	r0, [pc, #56]	@ (8005ae4 <main+0x5974>)
 8005aaa:	f002 fc14 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 8005aae:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8005ab2:	3301      	adds	r3, #1
 8005ab4:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8005ab8:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8005abc:	461a      	mov	r2, r3
 8005abe:	2101      	movs	r1, #1
 8005ac0:	4808      	ldr	r0, [pc, #32]	@ (8005ae4 <main+0x5974>)
 8005ac2:	f002 fbcc 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8005ac6:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8005aca:	2301      	movs	r3, #1
 8005acc:	2101      	movs	r1, #1
 8005ace:	4805      	ldr	r0, [pc, #20]	@ (8005ae4 <main+0x5974>)
 8005ad0:	f002 fc2b 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8005ad4:	f002 fdd2 	bl	800867c <HAL_GetTick>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	33fa      	adds	r3, #250	@ 0xfa
 8005adc:	677b      	str	r3, [r7, #116]	@ 0x74
 8005ade:	e18a      	b.n	8005df6 <main+0x5c86>
 8005ae0:	20000000 	.word	0x20000000
 8005ae4:	2000001c 	.word	0x2000001c
 8005ae8:	0800c368 	.word	0x0800c368
 8005aec:	0800c36c 	.word	0x0800c36c
 8005af0:	0800c370 	.word	0x0800c370
 8005af4:	0800c374 	.word	0x0800c374
 8005af8:	0800c378 	.word	0x0800c378

			}
			//5 is entered
			else if (Keypad_Get_Key(&kp, kp_button_5)
 8005afc:	2105      	movs	r1, #5
 8005afe:	4893      	ldr	r0, [pc, #588]	@ (8005d4c <main+0x5bdc>)
 8005b00:	f002 fd4c 	bl	800859c <Keypad_Get_Key>
 8005b04:	4603      	mov	r3, r0
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d042      	beq.n	8005b90 <main+0x5a20>
					&& (current_tick >= general_delay)) {
 8005b0a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005b0c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d33e      	bcc.n	8005b90 <main+0x5a20>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8005b12:	2300      	movs	r3, #0
 8005b14:	2200      	movs	r2, #0
 8005b16:	2101      	movs	r1, #1
 8005b18:	488d      	ldr	r0, [pc, #564]	@ (8005d50 <main+0x5be0>)
 8005b1a:	f002 fc06 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8005b1e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d827      	bhi.n	8005b76 <main+0x5a06>
					time_date_buffer[input_index] = '5';
 8005b26:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8005b2a:	3388      	adds	r3, #136	@ 0x88
 8005b2c:	443b      	add	r3, r7
 8005b2e:	2235      	movs	r2, #53	@ 0x35
 8005b30:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8005b34:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8005b38:	3301      	adds	r3, #1
 8005b3a:	3388      	adds	r3, #136	@ 0x88
 8005b3c:	443b      	add	r3, r7
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "5");
 8005b44:	4883      	ldr	r0, [pc, #524]	@ (8005d54 <main+0x5be4>)
 8005b46:	f002 fc33 	bl	80083b0 <Str_Len>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8005b52:	9300      	str	r3, [sp, #0]
 8005b54:	4b7f      	ldr	r3, [pc, #508]	@ (8005d54 <main+0x5be4>)
 8005b56:	2101      	movs	r1, #1
 8005b58:	487d      	ldr	r0, [pc, #500]	@ (8005d50 <main+0x5be0>)
 8005b5a:	f002 fbbc 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 8005b5e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8005b62:	3301      	adds	r3, #1
 8005b64:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8005b68:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	2101      	movs	r1, #1
 8005b70:	4877      	ldr	r0, [pc, #476]	@ (8005d50 <main+0x5be0>)
 8005b72:	f002 fb74 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8005b76:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	2101      	movs	r1, #1
 8005b7e:	4874      	ldr	r0, [pc, #464]	@ (8005d50 <main+0x5be0>)
 8005b80:	f002 fbd3 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8005b84:	f002 fd7a 	bl	800867c <HAL_GetTick>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	33fa      	adds	r3, #250	@ 0xfa
 8005b8c:	677b      	str	r3, [r7, #116]	@ 0x74
 8005b8e:	e132      	b.n	8005df6 <main+0x5c86>

			}

			//6 is entered
			else if (Keypad_Get_Key(&kp, kp_button_6)
 8005b90:	2106      	movs	r1, #6
 8005b92:	486e      	ldr	r0, [pc, #440]	@ (8005d4c <main+0x5bdc>)
 8005b94:	f002 fd02 	bl	800859c <Keypad_Get_Key>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d042      	beq.n	8005c24 <main+0x5ab4>
					&& (current_tick >= general_delay)) {
 8005b9e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005ba0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d33e      	bcc.n	8005c24 <main+0x5ab4>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	2200      	movs	r2, #0
 8005baa:	2101      	movs	r1, #1
 8005bac:	4868      	ldr	r0, [pc, #416]	@ (8005d50 <main+0x5be0>)
 8005bae:	f002 fbbc 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8005bb2:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d827      	bhi.n	8005c0a <main+0x5a9a>
					time_date_buffer[input_index] = '6';
 8005bba:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8005bbe:	3388      	adds	r3, #136	@ 0x88
 8005bc0:	443b      	add	r3, r7
 8005bc2:	2236      	movs	r2, #54	@ 0x36
 8005bc4:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8005bc8:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8005bcc:	3301      	adds	r3, #1
 8005bce:	3388      	adds	r3, #136	@ 0x88
 8005bd0:	443b      	add	r3, r7
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "6");
 8005bd8:	485f      	ldr	r0, [pc, #380]	@ (8005d58 <main+0x5be8>)
 8005bda:	f002 fbe9 	bl	80083b0 <Str_Len>
 8005bde:	4603      	mov	r3, r0
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8005be6:	9300      	str	r3, [sp, #0]
 8005be8:	4b5b      	ldr	r3, [pc, #364]	@ (8005d58 <main+0x5be8>)
 8005bea:	2101      	movs	r1, #1
 8005bec:	4858      	ldr	r0, [pc, #352]	@ (8005d50 <main+0x5be0>)
 8005bee:	f002 fb72 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 8005bf2:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8005bf6:	3301      	adds	r3, #1
 8005bf8:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8005bfc:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8005c00:	461a      	mov	r2, r3
 8005c02:	2101      	movs	r1, #1
 8005c04:	4852      	ldr	r0, [pc, #328]	@ (8005d50 <main+0x5be0>)
 8005c06:	f002 fb2a 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8005c0a:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8005c0e:	2301      	movs	r3, #1
 8005c10:	2101      	movs	r1, #1
 8005c12:	484f      	ldr	r0, [pc, #316]	@ (8005d50 <main+0x5be0>)
 8005c14:	f002 fb89 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8005c18:	f002 fd30 	bl	800867c <HAL_GetTick>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	33fa      	adds	r3, #250	@ 0xfa
 8005c20:	677b      	str	r3, [r7, #116]	@ 0x74
 8005c22:	e0e8      	b.n	8005df6 <main+0x5c86>

			}

			//7 is entered
			else if (Keypad_Get_Key(&kp, kp_button_7)
 8005c24:	2108      	movs	r1, #8
 8005c26:	4849      	ldr	r0, [pc, #292]	@ (8005d4c <main+0x5bdc>)
 8005c28:	f002 fcb8 	bl	800859c <Keypad_Get_Key>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d042      	beq.n	8005cb8 <main+0x5b48>
					&& (current_tick >= general_delay)) {
 8005c32:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005c34:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d33e      	bcc.n	8005cb8 <main+0x5b48>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	2101      	movs	r1, #1
 8005c40:	4843      	ldr	r0, [pc, #268]	@ (8005d50 <main+0x5be0>)
 8005c42:	f002 fb72 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8005c46:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d827      	bhi.n	8005c9e <main+0x5b2e>
					time_date_buffer[input_index] = '7';
 8005c4e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8005c52:	3388      	adds	r3, #136	@ 0x88
 8005c54:	443b      	add	r3, r7
 8005c56:	2237      	movs	r2, #55	@ 0x37
 8005c58:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8005c5c:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8005c60:	3301      	adds	r3, #1
 8005c62:	3388      	adds	r3, #136	@ 0x88
 8005c64:	443b      	add	r3, r7
 8005c66:	2200      	movs	r2, #0
 8005c68:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "7");
 8005c6c:	483b      	ldr	r0, [pc, #236]	@ (8005d5c <main+0x5bec>)
 8005c6e:	f002 fb9f 	bl	80083b0 <Str_Len>
 8005c72:	4603      	mov	r3, r0
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8005c7a:	9300      	str	r3, [sp, #0]
 8005c7c:	4b37      	ldr	r3, [pc, #220]	@ (8005d5c <main+0x5bec>)
 8005c7e:	2101      	movs	r1, #1
 8005c80:	4833      	ldr	r0, [pc, #204]	@ (8005d50 <main+0x5be0>)
 8005c82:	f002 fb28 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 8005c86:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8005c8a:	3301      	adds	r3, #1
 8005c8c:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8005c90:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8005c94:	461a      	mov	r2, r3
 8005c96:	2101      	movs	r1, #1
 8005c98:	482d      	ldr	r0, [pc, #180]	@ (8005d50 <main+0x5be0>)
 8005c9a:	f002 fae0 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8005c9e:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	2101      	movs	r1, #1
 8005ca6:	482a      	ldr	r0, [pc, #168]	@ (8005d50 <main+0x5be0>)
 8005ca8:	f002 fb3f 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8005cac:	f002 fce6 	bl	800867c <HAL_GetTick>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	33fa      	adds	r3, #250	@ 0xfa
 8005cb4:	677b      	str	r3, [r7, #116]	@ 0x74
 8005cb6:	e09e      	b.n	8005df6 <main+0x5c86>

			}

			//8 is entered
			else if (Keypad_Get_Key(&kp, kp_button_8)
 8005cb8:	2109      	movs	r1, #9
 8005cba:	4824      	ldr	r0, [pc, #144]	@ (8005d4c <main+0x5bdc>)
 8005cbc:	f002 fc6e 	bl	800859c <Keypad_Get_Key>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d04e      	beq.n	8005d64 <main+0x5bf4>
					&& (current_tick >= general_delay)) {
 8005cc6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005cc8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d34a      	bcc.n	8005d64 <main+0x5bf4>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8005cce:	2300      	movs	r3, #0
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	2101      	movs	r1, #1
 8005cd4:	481e      	ldr	r0, [pc, #120]	@ (8005d50 <main+0x5be0>)
 8005cd6:	f002 fb28 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8005cda:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d827      	bhi.n	8005d32 <main+0x5bc2>
					time_date_buffer[input_index] = '8';
 8005ce2:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8005ce6:	3388      	adds	r3, #136	@ 0x88
 8005ce8:	443b      	add	r3, r7
 8005cea:	2238      	movs	r2, #56	@ 0x38
 8005cec:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8005cf0:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	3388      	adds	r3, #136	@ 0x88
 8005cf8:	443b      	add	r3, r7
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "8");
 8005d00:	4817      	ldr	r0, [pc, #92]	@ (8005d60 <main+0x5bf0>)
 8005d02:	f002 fb55 	bl	80083b0 <Str_Len>
 8005d06:	4603      	mov	r3, r0
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8005d0e:	9300      	str	r3, [sp, #0]
 8005d10:	4b13      	ldr	r3, [pc, #76]	@ (8005d60 <main+0x5bf0>)
 8005d12:	2101      	movs	r1, #1
 8005d14:	480e      	ldr	r0, [pc, #56]	@ (8005d50 <main+0x5be0>)
 8005d16:	f002 fade 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 8005d1a:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8005d1e:	3301      	adds	r3, #1
 8005d20:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8005d24:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8005d28:	461a      	mov	r2, r3
 8005d2a:	2101      	movs	r1, #1
 8005d2c:	4808      	ldr	r0, [pc, #32]	@ (8005d50 <main+0x5be0>)
 8005d2e:	f002 fa96 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8005d32:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8005d36:	2301      	movs	r3, #1
 8005d38:	2101      	movs	r1, #1
 8005d3a:	4805      	ldr	r0, [pc, #20]	@ (8005d50 <main+0x5be0>)
 8005d3c:	f002 faf5 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8005d40:	f002 fc9c 	bl	800867c <HAL_GetTick>
 8005d44:	4603      	mov	r3, r0
 8005d46:	33fa      	adds	r3, #250	@ 0xfa
 8005d48:	677b      	str	r3, [r7, #116]	@ 0x74
 8005d4a:	e054      	b.n	8005df6 <main+0x5c86>
 8005d4c:	20000000 	.word	0x20000000
 8005d50:	2000001c 	.word	0x2000001c
 8005d54:	0800c37c 	.word	0x0800c37c
 8005d58:	0800c380 	.word	0x0800c380
 8005d5c:	0800c384 	.word	0x0800c384
 8005d60:	0800c388 	.word	0x0800c388

			}

			//9 is entered
			else if (Keypad_Get_Key(&kp, kp_button_9)
 8005d64:	210a      	movs	r1, #10
 8005d66:	48ad      	ldr	r0, [pc, #692]	@ (800601c <main+0x5eac>)
 8005d68:	f002 fc18 	bl	800859c <Keypad_Get_Key>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d041      	beq.n	8005df6 <main+0x5c86>
					&& (current_tick >= general_delay)) {
 8005d72:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005d74:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d33d      	bcc.n	8005df6 <main+0x5c86>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	2101      	movs	r1, #1
 8005d80:	48a7      	ldr	r0, [pc, #668]	@ (8006020 <main+0x5eb0>)
 8005d82:	f002 fad2 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8005d86:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d827      	bhi.n	8005dde <main+0x5c6e>
					time_date_buffer[input_index] = '9';
 8005d8e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8005d92:	3388      	adds	r3, #136	@ 0x88
 8005d94:	443b      	add	r3, r7
 8005d96:	2239      	movs	r2, #57	@ 0x39
 8005d98:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8005d9c:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8005da0:	3301      	adds	r3, #1
 8005da2:	3388      	adds	r3, #136	@ 0x88
 8005da4:	443b      	add	r3, r7
 8005da6:	2200      	movs	r2, #0
 8005da8:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "9");
 8005dac:	489d      	ldr	r0, [pc, #628]	@ (8006024 <main+0x5eb4>)
 8005dae:	f002 faff 	bl	80083b0 <Str_Len>
 8005db2:	4603      	mov	r3, r0
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8005dba:	9300      	str	r3, [sp, #0]
 8005dbc:	4b99      	ldr	r3, [pc, #612]	@ (8006024 <main+0x5eb4>)
 8005dbe:	2101      	movs	r1, #1
 8005dc0:	4897      	ldr	r0, [pc, #604]	@ (8006020 <main+0x5eb0>)
 8005dc2:	f002 fa88 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 8005dc6:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8005dca:	3301      	adds	r3, #1
 8005dcc:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8005dd0:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	2101      	movs	r1, #1
 8005dd8:	4891      	ldr	r0, [pc, #580]	@ (8006020 <main+0x5eb0>)
 8005dda:	f002 fa40 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8005dde:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8005de2:	2301      	movs	r3, #1
 8005de4:	2101      	movs	r1, #1
 8005de6:	488e      	ldr	r0, [pc, #568]	@ (8006020 <main+0x5eb0>)
 8005de8:	f002 fa9f 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8005dec:	f002 fc46 	bl	800867c <HAL_GetTick>
 8005df0:	4603      	mov	r3, r0
 8005df2:	33fa      	adds	r3, #250	@ 0xfa
 8005df4:	677b      	str	r3, [r7, #116]	@ 0x74

			}

			//when yes is entered -> check for hour validity (state 47)
			if (Keypad_Get_Key(&kp, kp_button_yes)
 8005df6:	210f      	movs	r1, #15
 8005df8:	4888      	ldr	r0, [pc, #544]	@ (800601c <main+0x5eac>)
 8005dfa:	f002 fbcf 	bl	800859c <Keypad_Get_Key>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d021      	beq.n	8005e48 <main+0x5cd8>
					&& (current_tick >= general_delay)) {
 8005e04:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005e06:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d31d      	bcc.n	8005e48 <main+0x5cd8>

				Alcd_Clear(&lcd);
 8005e0c:	4884      	ldr	r0, [pc, #528]	@ (8006020 <main+0x5eb0>)
 8005e0e:	f002 fa7b 	bl	8008308 <Alcd_Clear>

				snprintf(timeString, sizeof(timeString), "%02d", buffer);
 8005e12:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005e16:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8005e1a:	4a83      	ldr	r2, [pc, #524]	@ (8006028 <main+0x5eb8>)
 8005e1c:	2132      	movs	r1, #50	@ 0x32
 8005e1e:	f005 fd47 	bl	800b8b0 <sniprintf>
				Alcd_PutAt_n(&lcd, 1, 0, timeString, strlen(timeString));
 8005e22:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005e26:	4618      	mov	r0, r3
 8005e28:	f7fa f99a 	bl	8000160 <strlen>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8005e34:	9300      	str	r3, [sp, #0]
 8005e36:	4613      	mov	r3, r2
 8005e38:	2200      	movs	r2, #0
 8005e3a:	2101      	movs	r1, #1
 8005e3c:	4878      	ldr	r0, [pc, #480]	@ (8006020 <main+0x5eb0>)
 8005e3e:	f002 fa4a 	bl	80082d6 <Alcd_PutAt_n>

				status = 47;
 8005e42:	232f      	movs	r3, #47	@ 0x2f
 8005e44:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83

			}

			//
			general_delay = HAL_GetTick() + 250;
 8005e48:	f002 fc18 	bl	800867c <HAL_GetTick>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	33fa      	adds	r3, #250	@ 0xfa
 8005e50:	677b      	str	r3, [r7, #116]	@ 0x74
		while ((status == 46) && (current_tick >= general_delay)) {
 8005e52:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 8005e56:	2b2e      	cmp	r3, #46	@ 0x2e
 8005e58:	f040 80d6 	bne.w	8006008 <main+0x5e98>
 8005e5c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005e5e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005e60:	429a      	cmp	r2, r3
 8005e62:	f4bf ac70 	bcs.w	8005746 <main+0x55d6>
		}

		//hours validation phase
		while ((status == 47) && (current_tick >= general_delay)) {
 8005e66:	e0cf      	b.n	8006008 <main+0x5e98>

			//get the current tick number
			current_tick = HAL_GetTick();
 8005e68:	f002 fc08 	bl	800867c <HAL_GetTick>
 8005e6c:	67f8      	str	r0, [r7, #124]	@ 0x7c
			input_index = 0;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d

			Alcd_Clear(&lcd);
 8005e74:	486a      	ldr	r0, [pc, #424]	@ (8006020 <main+0x5eb0>)
 8005e76:	f002 fa47 	bl	8008308 <Alcd_Clear>

			snprintf(timeString, sizeof(timeString), "%02d", status);
 8005e7a:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 8005e7e:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8005e82:	4a69      	ldr	r2, [pc, #420]	@ (8006028 <main+0x5eb8>)
 8005e84:	2132      	movs	r1, #50	@ 0x32
 8005e86:	f005 fd13 	bl	800b8b0 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 8005e8a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f7fa f966 	bl	8000160 <strlen>
 8005e94:	4603      	mov	r3, r0
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8005e9c:	9300      	str	r3, [sp, #0]
 8005e9e:	4613      	mov	r3, r2
 8005ea0:	220e      	movs	r2, #14
 8005ea2:	2100      	movs	r1, #0
 8005ea4:	485e      	ldr	r0, [pc, #376]	@ (8006020 <main+0x5eb0>)
 8005ea6:	f002 fa16 	bl	80082d6 <Alcd_PutAt_n>

			buffer = atoi(time_date_buffer);
 8005eaa:	f107 0310 	add.w	r3, r7, #16
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f005 fc75 	bl	800b79e <atoi>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

			//in case of 12h format
			if (CLK.format == 1) {
 8005eba:	4b5c      	ldr	r3, [pc, #368]	@ (800602c <main+0x5ebc>)
 8005ebc:	7c5b      	ldrb	r3, [r3, #17]
 8005ebe:	f003 0301 	and.w	r3, r3, #1
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d048      	beq.n	8005f5a <main+0x5dea>

				//check if time is within rang 1 to 12
				if (buffer > 0 && buffer < 13) {
 8005ec8:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d01c      	beq.n	8005f0a <main+0x5d9a>
 8005ed0:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005ed4:	2b0c      	cmp	r3, #12
 8005ed6:	d818      	bhi.n	8005f0a <main+0x5d9a>

					//move to the previous menu
					status = 23;
 8005ed8:	2317      	movs	r3, #23
 8005eda:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83

					//set the hours to the value
					dose_h = buffer;
 8005ede:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

					input_index = 0;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					//turn off the blinking
					Alcd_Display_Control(&lcd, 1, 0, 0);
 8005eee:	2300      	movs	r3, #0
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	2101      	movs	r1, #1
 8005ef4:	484a      	ldr	r0, [pc, #296]	@ (8006020 <main+0x5eb0>)
 8005ef6:	f002 fa18 	bl	800832a <Alcd_Display_Control>
					//turn on the blinking again
					Alcd_Display_Control(&lcd, 1, input_index, 1);
 8005efa:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8005efe:	2301      	movs	r3, #1
 8005f00:	2101      	movs	r1, #1
 8005f02:	4847      	ldr	r0, [pc, #284]	@ (8006020 <main+0x5eb0>)
 8005f04:	f002 fa11 	bl	800832a <Alcd_Display_Control>
 8005f08:	e027      	b.n	8005f5a <main+0x5dea>

				} else {
					Alcd_PutAt(&lcd, 0, 0, "invalid");
 8005f0a:	4849      	ldr	r0, [pc, #292]	@ (8006030 <main+0x5ec0>)
 8005f0c:	f002 fa50 	bl	80083b0 <Str_Len>
 8005f10:	4603      	mov	r3, r0
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	9300      	str	r3, [sp, #0]
 8005f16:	4b46      	ldr	r3, [pc, #280]	@ (8006030 <main+0x5ec0>)
 8005f18:	2200      	movs	r2, #0
 8005f1a:	2100      	movs	r1, #0
 8005f1c:	4840      	ldr	r0, [pc, #256]	@ (8006020 <main+0x5eb0>)
 8005f1e:	f002 f9da 	bl	80082d6 <Alcd_PutAt_n>
					delay_flag = 1;
 8005f22:	2301      	movs	r3, #1
 8005f24:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
					input_index = 0;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d

					//turn off the blinking
					Alcd_Display_Control(&lcd, 1, 0, 0);
 8005f2e:	2300      	movs	r3, #0
 8005f30:	2200      	movs	r2, #0
 8005f32:	2101      	movs	r1, #1
 8005f34:	483a      	ldr	r0, [pc, #232]	@ (8006020 <main+0x5eb0>)
 8005f36:	f002 f9f8 	bl	800832a <Alcd_Display_Control>
					//turn on the blinking again
					Alcd_Display_Control(&lcd, 1, input_index, 1);
 8005f3a:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8005f3e:	2301      	movs	r3, #1
 8005f40:	2101      	movs	r1, #1
 8005f42:	4837      	ldr	r0, [pc, #220]	@ (8006020 <main+0x5eb0>)
 8005f44:	f002 f9f1 	bl	800832a <Alcd_Display_Control>

					//return to entering hours
					status = 46;
 8005f48:	232e      	movs	r3, #46	@ 0x2e
 8005f4a:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83

					general_delay = HAL_GetTick() + 1000;
 8005f4e:	f002 fb95 	bl	800867c <HAL_GetTick>
 8005f52:	4603      	mov	r3, r0
 8005f54:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8005f58:	677b      	str	r3, [r7, #116]	@ 0x74
				}
			}

			//in case of 24h format
			if (CLK.format == 0) {
 8005f5a:	4b34      	ldr	r3, [pc, #208]	@ (800602c <main+0x5ebc>)
 8005f5c:	7c5b      	ldrb	r3, [r3, #17]
 8005f5e:	f003 0301 	and.w	r3, r3, #1
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d144      	bne.n	8005ff2 <main+0x5e82>

				//check if time is within rang 0 to 24
				if (buffer >= 0 && buffer < 25) {
 8005f68:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005f6c:	2b18      	cmp	r3, #24
 8005f6e:	d818      	bhi.n	8005fa2 <main+0x5e32>

					//move to menu
					status = 23;
 8005f70:	2317      	movs	r3, #23
 8005f72:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83

					//set the hours to the value
					dose_h = buffer;
 8005f76:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

					input_index = 0;
 8005f80:	2300      	movs	r3, #0
 8005f82:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					//turn off the blinking
					Alcd_Display_Control(&lcd, 1, 0, 0);
 8005f86:	2300      	movs	r3, #0
 8005f88:	2200      	movs	r2, #0
 8005f8a:	2101      	movs	r1, #1
 8005f8c:	4824      	ldr	r0, [pc, #144]	@ (8006020 <main+0x5eb0>)
 8005f8e:	f002 f9cc 	bl	800832a <Alcd_Display_Control>
					//turn on the blinking again
					Alcd_Display_Control(&lcd, 1, input_index, 1);
 8005f92:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8005f96:	2301      	movs	r3, #1
 8005f98:	2101      	movs	r1, #1
 8005f9a:	4821      	ldr	r0, [pc, #132]	@ (8006020 <main+0x5eb0>)
 8005f9c:	f002 f9c5 	bl	800832a <Alcd_Display_Control>
 8005fa0:	e027      	b.n	8005ff2 <main+0x5e82>
				} else {
					Alcd_PutAt(&lcd, 0, 0, "invalid");
 8005fa2:	4823      	ldr	r0, [pc, #140]	@ (8006030 <main+0x5ec0>)
 8005fa4:	f002 fa04 	bl	80083b0 <Str_Len>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	b2db      	uxtb	r3, r3
 8005fac:	9300      	str	r3, [sp, #0]
 8005fae:	4b20      	ldr	r3, [pc, #128]	@ (8006030 <main+0x5ec0>)
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	2100      	movs	r1, #0
 8005fb4:	481a      	ldr	r0, [pc, #104]	@ (8006020 <main+0x5eb0>)
 8005fb6:	f002 f98e 	bl	80082d6 <Alcd_PutAt_n>
					delay_flag = 1;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85

					input_index = 0;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					//turn off the blinking
					Alcd_Display_Control(&lcd, 1, 0, 0);
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	2200      	movs	r2, #0
 8005fca:	2101      	movs	r1, #1
 8005fcc:	4814      	ldr	r0, [pc, #80]	@ (8006020 <main+0x5eb0>)
 8005fce:	f002 f9ac 	bl	800832a <Alcd_Display_Control>
					//turn on the blinking again
					Alcd_Display_Control(&lcd, 1, input_index, 1);
 8005fd2:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	2101      	movs	r1, #1
 8005fda:	4811      	ldr	r0, [pc, #68]	@ (8006020 <main+0x5eb0>)
 8005fdc:	f002 f9a5 	bl	800832a <Alcd_Display_Control>
					//return to entering hours
					status = 46;
 8005fe0:	232e      	movs	r3, #46	@ 0x2e
 8005fe2:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83

					general_delay = HAL_GetTick() + 1000;
 8005fe6:	f002 fb49 	bl	800867c <HAL_GetTick>
 8005fea:	4603      	mov	r3, r0
 8005fec:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8005ff0:	677b      	str	r3, [r7, #116]	@ 0x74
				}
			}

			//create a delay
			if ((delay_flag == 1) && (current_tick >= general_delay)) {
 8005ff2:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d106      	bne.n	8006008 <main+0x5e98>
 8005ffa:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005ffc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d302      	bcc.n	8006008 <main+0x5e98>

				delay_flag = 0;
 8006002:	2300      	movs	r3, #0
 8006004:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
		while ((status == 47) && (current_tick >= general_delay)) {
 8006008:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 800600c:	2b2f      	cmp	r3, #47	@ 0x2f
 800600e:	d178      	bne.n	8006102 <main+0x5f92>
 8006010:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006012:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006014:	429a      	cmp	r2, r3
 8006016:	f4bf af27 	bcs.w	8005e68 <main+0x5cf8>
			}

		}

		//save parameters? (state 48)
		while ((status == 48) && (current_tick >= general_delay)) {
 800601a:	e072      	b.n	8006102 <main+0x5f92>
 800601c:	20000000 	.word	0x20000000
 8006020:	2000001c 	.word	0x2000001c
 8006024:	0800c38c 	.word	0x0800c38c
 8006028:	0800c280 	.word	0x0800c280
 800602c:	20000150 	.word	0x20000150
 8006030:	0800c390 	.word	0x0800c390

			//get the current tick number
			current_tick = HAL_GetTick();
 8006034:	f002 fb22 	bl	800867c <HAL_GetTick>
 8006038:	67f8      	str	r0, [r7, #124]	@ 0x7c

			Alcd_Clear(&lcd);
 800603a:	48a4      	ldr	r0, [pc, #656]	@ (80062cc <main+0x615c>)
 800603c:	f002 f964 	bl	8008308 <Alcd_Clear>
			Alcd_PutAt(&lcd, 0, 0, "save?");
 8006040:	48a3      	ldr	r0, [pc, #652]	@ (80062d0 <main+0x6160>)
 8006042:	f002 f9b5 	bl	80083b0 <Str_Len>
 8006046:	4603      	mov	r3, r0
 8006048:	b2db      	uxtb	r3, r3
 800604a:	9300      	str	r3, [sp, #0]
 800604c:	4ba0      	ldr	r3, [pc, #640]	@ (80062d0 <main+0x6160>)
 800604e:	2200      	movs	r2, #0
 8006050:	2100      	movs	r1, #0
 8006052:	489e      	ldr	r0, [pc, #632]	@ (80062cc <main+0x615c>)
 8006054:	f002 f93f 	bl	80082d6 <Alcd_PutAt_n>
			snprintf(timeString, sizeof(timeString), "%02d", status);
 8006058:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 800605c:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8006060:	4a9c      	ldr	r2, [pc, #624]	@ (80062d4 <main+0x6164>)
 8006062:	2132      	movs	r1, #50	@ 0x32
 8006064:	f005 fc24 	bl	800b8b0 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 8006068:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800606c:	4618      	mov	r0, r3
 800606e:	f7fa f877 	bl	8000160 <strlen>
 8006072:	4603      	mov	r3, r0
 8006074:	b2db      	uxtb	r3, r3
 8006076:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800607a:	9300      	str	r3, [sp, #0]
 800607c:	4613      	mov	r3, r2
 800607e:	220e      	movs	r2, #14
 8006080:	2100      	movs	r1, #0
 8006082:	4892      	ldr	r0, [pc, #584]	@ (80062cc <main+0x615c>)
 8006084:	f002 f927 	bl	80082d6 <Alcd_PutAt_n>

			//check if any button is pressed
			//check for any keypad input
			Keypad_Refresh(&kp);
 8006088:	4893      	ldr	r0, [pc, #588]	@ (80062d8 <main+0x6168>)
 800608a:	f002 f9eb 	bl	8008464 <Keypad_Refresh>

			//in case of yes
			if (Keypad_Get_Key(&kp, kp_button_yes)
 800608e:	210f      	movs	r1, #15
 8006090:	4891      	ldr	r0, [pc, #580]	@ (80062d8 <main+0x6168>)
 8006092:	f002 fa83 	bl	800859c <Keypad_Get_Key>
 8006096:	4603      	mov	r3, r0
 8006098:	2b00      	cmp	r3, #0
 800609a:	d01f      	beq.n	80060dc <main+0x5f6c>
					&& (current_tick >= general_delay)) {
 800609c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800609e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d31b      	bcc.n	80060dc <main+0x5f6c>

				//save the parameters
				eeprom24c32_write(&memory, dose_h, dosing_time_hours);
 80060a4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80060a8:	4a8c      	ldr	r2, [pc, #560]	@ (80062dc <main+0x616c>)
 80060aa:	b292      	uxth	r2, r2
 80060ac:	4619      	mov	r1, r3
 80060ae:	488b      	ldr	r0, [pc, #556]	@ (80062dc <main+0x616c>)
 80060b0:	f001 fd3e 	bl	8007b30 <eeprom24c32_write>
				eeprom24c32_write(&memory, dose_m, dosing_time_minutes);
 80060b4:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 80060b8:	4a89      	ldr	r2, [pc, #548]	@ (80062e0 <main+0x6170>)
 80060ba:	b292      	uxth	r2, r2
 80060bc:	4619      	mov	r1, r3
 80060be:	4887      	ldr	r0, [pc, #540]	@ (80062dc <main+0x616c>)
 80060c0:	f001 fd36 	bl	8007b30 <eeprom24c32_write>
				eeprom24c32_write(&memory, dose_s, dosing_time_seconds);
 80060c4:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 80060c8:	4a86      	ldr	r2, [pc, #536]	@ (80062e4 <main+0x6174>)
 80060ca:	b292      	uxth	r2, r2
 80060cc:	4619      	mov	r1, r3
 80060ce:	4883      	ldr	r0, [pc, #524]	@ (80062dc <main+0x616c>)
 80060d0:	f001 fd2e 	bl	8007b30 <eeprom24c32_write>
				status = 21;
 80060d4:	2315      	movs	r3, #21
 80060d6:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 80060da:	e00d      	b.n	80060f8 <main+0x5f88>

			}

			//no is selected
			else if (Keypad_Get_Key(&kp, kp_button_no_back)
 80060dc:	210e      	movs	r1, #14
 80060de:	487e      	ldr	r0, [pc, #504]	@ (80062d8 <main+0x6168>)
 80060e0:	f002 fa5c 	bl	800859c <Keypad_Get_Key>
 80060e4:	4603      	mov	r3, r0
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d006      	beq.n	80060f8 <main+0x5f88>
					&& (current_tick >= general_delay)) {
 80060ea:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80060ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d302      	bcc.n	80060f8 <main+0x5f88>

				status = 21;
 80060f2:	2315      	movs	r3, #21
 80060f4:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83

			}

			general_delay = HAL_GetTick() + 250;
 80060f8:	f002 fac0 	bl	800867c <HAL_GetTick>
 80060fc:	4603      	mov	r3, r0
 80060fe:	33fa      	adds	r3, #250	@ 0xfa
 8006100:	677b      	str	r3, [r7, #116]	@ 0x74
		while ((status == 48) && (current_tick >= general_delay)) {
 8006102:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 8006106:	2b30      	cmp	r3, #48	@ 0x30
 8006108:	f040 808f 	bne.w	800622a <main+0x60ba>
 800610c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800610e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006110:	429a      	cmp	r2, r3
 8006112:	d28f      	bcs.n	8006034 <main+0x5ec4>
		}

		//extended edit parameters menu (state 49)
		while ((status == 49) && (current_tick >= general_delay)) {
 8006114:	e089      	b.n	800622a <main+0x60ba>

			//get the current tick number
			current_tick = HAL_GetTick();
 8006116:	f002 fab1 	bl	800867c <HAL_GetTick>
 800611a:	67f8      	str	r0, [r7, #124]	@ 0x7c

			Alcd_Clear(&lcd);
 800611c:	486b      	ldr	r0, [pc, #428]	@ (80062cc <main+0x615c>)
 800611e:	f002 f8f3 	bl	8008308 <Alcd_Clear>
			Alcd_PutAt(&lcd, 0, 0, "3: minutes");
 8006122:	4871      	ldr	r0, [pc, #452]	@ (80062e8 <main+0x6178>)
 8006124:	f002 f944 	bl	80083b0 <Str_Len>
 8006128:	4603      	mov	r3, r0
 800612a:	b2db      	uxtb	r3, r3
 800612c:	9300      	str	r3, [sp, #0]
 800612e:	4b6e      	ldr	r3, [pc, #440]	@ (80062e8 <main+0x6178>)
 8006130:	2200      	movs	r2, #0
 8006132:	2100      	movs	r1, #0
 8006134:	4865      	ldr	r0, [pc, #404]	@ (80062cc <main+0x615c>)
 8006136:	f002 f8ce 	bl	80082d6 <Alcd_PutAt_n>
			Alcd_PutAt(&lcd, 1, 0, "4: seconds");
 800613a:	486c      	ldr	r0, [pc, #432]	@ (80062ec <main+0x617c>)
 800613c:	f002 f938 	bl	80083b0 <Str_Len>
 8006140:	4603      	mov	r3, r0
 8006142:	b2db      	uxtb	r3, r3
 8006144:	9300      	str	r3, [sp, #0]
 8006146:	4b69      	ldr	r3, [pc, #420]	@ (80062ec <main+0x617c>)
 8006148:	2200      	movs	r2, #0
 800614a:	2101      	movs	r1, #1
 800614c:	485f      	ldr	r0, [pc, #380]	@ (80062cc <main+0x615c>)
 800614e:	f002 f8c2 	bl	80082d6 <Alcd_PutAt_n>
			snprintf(timeString, sizeof(timeString), "%02d", status);
 8006152:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 8006156:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800615a:	4a5e      	ldr	r2, [pc, #376]	@ (80062d4 <main+0x6164>)
 800615c:	2132      	movs	r1, #50	@ 0x32
 800615e:	f005 fba7 	bl	800b8b0 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 8006162:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006166:	4618      	mov	r0, r3
 8006168:	f7f9 fffa 	bl	8000160 <strlen>
 800616c:	4603      	mov	r3, r0
 800616e:	b2db      	uxtb	r3, r3
 8006170:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8006174:	9300      	str	r3, [sp, #0]
 8006176:	4613      	mov	r3, r2
 8006178:	220e      	movs	r2, #14
 800617a:	2100      	movs	r1, #0
 800617c:	4853      	ldr	r0, [pc, #332]	@ (80062cc <main+0x615c>)
 800617e:	f002 f8aa 	bl	80082d6 <Alcd_PutAt_n>
			Alcd_Display_Control(&lcd, 1, 0, 0);
 8006182:	2300      	movs	r3, #0
 8006184:	2200      	movs	r2, #0
 8006186:	2101      	movs	r1, #1
 8006188:	4850      	ldr	r0, [pc, #320]	@ (80062cc <main+0x615c>)
 800618a:	f002 f8ce 	bl	800832a <Alcd_Display_Control>
			Alcd_CursorAt(&lcd, 1, 0);
 800618e:	2200      	movs	r2, #0
 8006190:	2101      	movs	r1, #1
 8006192:	484e      	ldr	r0, [pc, #312]	@ (80062cc <main+0x615c>)
 8006194:	f002 f863 	bl	800825e <Alcd_CursorAt>

			//check if any button is pressed
			//check for any keypad input
			Keypad_Refresh(&kp);
 8006198:	484f      	ldr	r0, [pc, #316]	@ (80062d8 <main+0x6168>)
 800619a:	f002 f963 	bl	8008464 <Keypad_Refresh>

			//in case 3 is selected -> edit minutes
			if (Keypad_Get_Key(&kp, kp_button_3)
 800619e:	2102      	movs	r1, #2
 80061a0:	484d      	ldr	r0, [pc, #308]	@ (80062d8 <main+0x6168>)
 80061a2:	f002 f9fb 	bl	800859c <Keypad_Get_Key>
 80061a6:	4603      	mov	r3, r0
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d00a      	beq.n	80061c2 <main+0x6052>
					&& (current_tick >= general_delay)) {
 80061ac:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80061ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d306      	bcc.n	80061c2 <main+0x6052>
				Alcd_Clear(&lcd);
 80061b4:	4845      	ldr	r0, [pc, #276]	@ (80062cc <main+0x615c>)
 80061b6:	f002 f8a7 	bl	8008308 <Alcd_Clear>

				status = 50;
 80061ba:	2332      	movs	r3, #50	@ 0x32
 80061bc:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 80061c0:	e02e      	b.n	8006220 <main+0x60b0>

			}

			//4 is selected -> enter seconds
			else if (Keypad_Get_Key(&kp, kp_button_4)
 80061c2:	2104      	movs	r1, #4
 80061c4:	4844      	ldr	r0, [pc, #272]	@ (80062d8 <main+0x6168>)
 80061c6:	f002 f9e9 	bl	800859c <Keypad_Get_Key>
 80061ca:	4603      	mov	r3, r0
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d00a      	beq.n	80061e6 <main+0x6076>
					&& (current_tick >= general_delay)) {
 80061d0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80061d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d306      	bcc.n	80061e6 <main+0x6076>

				Alcd_Clear(&lcd);
 80061d8:	483c      	ldr	r0, [pc, #240]	@ (80062cc <main+0x615c>)
 80061da:	f002 f895 	bl	8008308 <Alcd_Clear>
				status = 51;
 80061de:	2333      	movs	r3, #51	@ 0x33
 80061e0:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 80061e4:	e01c      	b.n	8006220 <main+0x60b0>

			}

			//back is selected
			else if (Keypad_Get_Key(&kp, kp_button_no_back)
 80061e6:	210e      	movs	r1, #14
 80061e8:	483b      	ldr	r0, [pc, #236]	@ (80062d8 <main+0x6168>)
 80061ea:	f002 f9d7 	bl	800859c <Keypad_Get_Key>
 80061ee:	4603      	mov	r3, r0
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d007      	beq.n	8006204 <main+0x6094>
					&& (current_tick >= general_delay)) {
 80061f4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80061f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d303      	bcc.n	8006204 <main+0x6094>

				status = 23;
 80061fc:	2317      	movs	r3, #23
 80061fe:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 8006202:	e00d      	b.n	8006220 <main+0x60b0>

			}

			//previous is selected
			else if (Keypad_Get_Key(&kp, kp_button_previous)
 8006204:	2107      	movs	r1, #7
 8006206:	4834      	ldr	r0, [pc, #208]	@ (80062d8 <main+0x6168>)
 8006208:	f002 f9c8 	bl	800859c <Keypad_Get_Key>
 800620c:	4603      	mov	r3, r0
 800620e:	2b00      	cmp	r3, #0
 8006210:	d006      	beq.n	8006220 <main+0x60b0>
					&& (current_tick >= general_delay)) {
 8006212:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006214:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006216:	429a      	cmp	r2, r3
 8006218:	d302      	bcc.n	8006220 <main+0x60b0>

				status = 23;
 800621a:	2317      	movs	r3, #23
 800621c:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83

			}

			general_delay = HAL_GetTick() + 250;
 8006220:	f002 fa2c 	bl	800867c <HAL_GetTick>
 8006224:	4603      	mov	r3, r0
 8006226:	33fa      	adds	r3, #250	@ 0xfa
 8006228:	677b      	str	r3, [r7, #116]	@ 0x74
		while ((status == 49) && (current_tick >= general_delay)) {
 800622a:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 800622e:	2b31      	cmp	r3, #49	@ 0x31
 8006230:	f040 838b 	bne.w	800694a <main+0x67da>
 8006234:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006236:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006238:	429a      	cmp	r2, r3
 800623a:	f4bf af6c 	bcs.w	8006116 <main+0x5fa6>
		}

		//entering the minutes state (50)
		while ((status == 50) && (current_tick >= general_delay)) {
 800623e:	e384      	b.n	800694a <main+0x67da>

			//get the current tick number
			current_tick = HAL_GetTick();
 8006240:	f002 fa1c 	bl	800867c <HAL_GetTick>
 8006244:	67f8      	str	r0, [r7, #124]	@ 0x7c

			//Alcd_Clear(&lcd);
			Alcd_PutAt(&lcd, 0, 0, "Enter minutes");
 8006246:	482a      	ldr	r0, [pc, #168]	@ (80062f0 <main+0x6180>)
 8006248:	f002 f8b2 	bl	80083b0 <Str_Len>
 800624c:	4603      	mov	r3, r0
 800624e:	b2db      	uxtb	r3, r3
 8006250:	9300      	str	r3, [sp, #0]
 8006252:	4b27      	ldr	r3, [pc, #156]	@ (80062f0 <main+0x6180>)
 8006254:	2200      	movs	r2, #0
 8006256:	2100      	movs	r1, #0
 8006258:	481c      	ldr	r0, [pc, #112]	@ (80062cc <main+0x615c>)
 800625a:	f002 f83c 	bl	80082d6 <Alcd_PutAt_n>

			snprintf(timeString, sizeof(timeString), "%02d", status);
 800625e:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 8006262:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8006266:	4a1b      	ldr	r2, [pc, #108]	@ (80062d4 <main+0x6164>)
 8006268:	2132      	movs	r1, #50	@ 0x32
 800626a:	f005 fb21 	bl	800b8b0 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 800626e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006272:	4618      	mov	r0, r3
 8006274:	f7f9 ff74 	bl	8000160 <strlen>
 8006278:	4603      	mov	r3, r0
 800627a:	b2db      	uxtb	r3, r3
 800627c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8006280:	9300      	str	r3, [sp, #0]
 8006282:	4613      	mov	r3, r2
 8006284:	220e      	movs	r2, #14
 8006286:	2100      	movs	r1, #0
 8006288:	4810      	ldr	r0, [pc, #64]	@ (80062cc <main+0x615c>)
 800628a:	f002 f824 	bl	80082d6 <Alcd_PutAt_n>

			Alcd_CursorAt(&lcd, 1, input_index);
 800628e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8006292:	461a      	mov	r2, r3
 8006294:	2101      	movs	r1, #1
 8006296:	480d      	ldr	r0, [pc, #52]	@ (80062cc <main+0x615c>)
 8006298:	f001 ffe1 	bl	800825e <Alcd_CursorAt>
			Alcd_Display_Control(&lcd, 1, 1, 1);
 800629c:	2301      	movs	r3, #1
 800629e:	2201      	movs	r2, #1
 80062a0:	2101      	movs	r1, #1
 80062a2:	480a      	ldr	r0, [pc, #40]	@ (80062cc <main+0x615c>)
 80062a4:	f002 f841 	bl	800832a <Alcd_Display_Control>

			//check if any button is pressed
			//check for any keypad input
			Keypad_Refresh(&kp);
 80062a8:	480b      	ldr	r0, [pc, #44]	@ (80062d8 <main+0x6168>)
 80062aa:	f002 f8db 	bl	8008464 <Keypad_Refresh>

			//if back is entered
			if (Keypad_Get_Key(&kp, kp_button_no_back)
 80062ae:	210e      	movs	r1, #14
 80062b0:	4809      	ldr	r0, [pc, #36]	@ (80062d8 <main+0x6168>)
 80062b2:	f002 f973 	bl	800859c <Keypad_Get_Key>
 80062b6:	4603      	mov	r3, r0
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d01b      	beq.n	80062f4 <main+0x6184>
					&& (current_tick >= general_delay)) {
 80062bc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80062be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d317      	bcc.n	80062f4 <main+0x6184>

				//back to previous menu
				status = 49;
 80062c4:	2331      	movs	r3, #49	@ 0x31
 80062c6:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 80062ca:	e310      	b.n	80068ee <main+0x677e>
 80062cc:	2000001c 	.word	0x2000001c
 80062d0:	0800c45c 	.word	0x0800c45c
 80062d4:	0800c280 	.word	0x0800c280
 80062d8:	20000000 	.word	0x20000000
 80062dc:	20000168 	.word	0x20000168
 80062e0:	2000016c 	.word	0x2000016c
 80062e4:	20000170 	.word	0x20000170
 80062e8:	0800c464 	.word	0x0800c464
 80062ec:	0800c470 	.word	0x0800c470
 80062f0:	0800c398 	.word	0x0800c398

			}

			//0 is entered
			else if (Keypad_Get_Key(&kp, kp_button_0)
 80062f4:	210d      	movs	r1, #13
 80062f6:	48b8      	ldr	r0, [pc, #736]	@ (80065d8 <main+0x6468>)
 80062f8:	f002 f950 	bl	800859c <Keypad_Get_Key>
 80062fc:	4603      	mov	r3, r0
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d042      	beq.n	8006388 <main+0x6218>
					&& (current_tick >= general_delay)) {
 8006302:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006304:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006306:	429a      	cmp	r2, r3
 8006308:	d33e      	bcc.n	8006388 <main+0x6218>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 800630a:	2300      	movs	r3, #0
 800630c:	2200      	movs	r2, #0
 800630e:	2101      	movs	r1, #1
 8006310:	48b2      	ldr	r0, [pc, #712]	@ (80065dc <main+0x646c>)
 8006312:	f002 f80a 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8006316:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800631a:	2b01      	cmp	r3, #1
 800631c:	d827      	bhi.n	800636e <main+0x61fe>
					time_date_buffer[input_index] = '0';
 800631e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8006322:	3388      	adds	r3, #136	@ 0x88
 8006324:	443b      	add	r3, r7
 8006326:	2230      	movs	r2, #48	@ 0x30
 8006328:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 800632c:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8006330:	3301      	adds	r3, #1
 8006332:	3388      	adds	r3, #136	@ 0x88
 8006334:	443b      	add	r3, r7
 8006336:	2200      	movs	r2, #0
 8006338:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "0");
 800633c:	48a8      	ldr	r0, [pc, #672]	@ (80065e0 <main+0x6470>)
 800633e:	f002 f837 	bl	80083b0 <Str_Len>
 8006342:	4603      	mov	r3, r0
 8006344:	b2db      	uxtb	r3, r3
 8006346:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 800634a:	9300      	str	r3, [sp, #0]
 800634c:	4ba4      	ldr	r3, [pc, #656]	@ (80065e0 <main+0x6470>)
 800634e:	2101      	movs	r1, #1
 8006350:	48a2      	ldr	r0, [pc, #648]	@ (80065dc <main+0x646c>)
 8006352:	f001 ffc0 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 8006356:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800635a:	3301      	adds	r3, #1
 800635c:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8006360:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8006364:	461a      	mov	r2, r3
 8006366:	2101      	movs	r1, #1
 8006368:	489c      	ldr	r0, [pc, #624]	@ (80065dc <main+0x646c>)
 800636a:	f001 ff78 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 800636e:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8006372:	2301      	movs	r3, #1
 8006374:	2101      	movs	r1, #1
 8006376:	4899      	ldr	r0, [pc, #612]	@ (80065dc <main+0x646c>)
 8006378:	f001 ffd7 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 800637c:	f002 f97e 	bl	800867c <HAL_GetTick>
 8006380:	4603      	mov	r3, r0
 8006382:	33fa      	adds	r3, #250	@ 0xfa
 8006384:	677b      	str	r3, [r7, #116]	@ 0x74
 8006386:	e2b2      	b.n	80068ee <main+0x677e>

			}
			//1 is entered
			else if (Keypad_Get_Key(&kp, kp_button_1)
 8006388:	2100      	movs	r1, #0
 800638a:	4893      	ldr	r0, [pc, #588]	@ (80065d8 <main+0x6468>)
 800638c:	f002 f906 	bl	800859c <Keypad_Get_Key>
 8006390:	4603      	mov	r3, r0
 8006392:	2b00      	cmp	r3, #0
 8006394:	d042      	beq.n	800641c <main+0x62ac>
					&& (current_tick >= general_delay)) {
 8006396:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006398:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800639a:	429a      	cmp	r2, r3
 800639c:	d33e      	bcc.n	800641c <main+0x62ac>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 800639e:	2300      	movs	r3, #0
 80063a0:	2200      	movs	r2, #0
 80063a2:	2101      	movs	r1, #1
 80063a4:	488d      	ldr	r0, [pc, #564]	@ (80065dc <main+0x646c>)
 80063a6:	f001 ffc0 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 80063aa:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d827      	bhi.n	8006402 <main+0x6292>
					time_date_buffer[input_index] = '1';
 80063b2:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80063b6:	3388      	adds	r3, #136	@ 0x88
 80063b8:	443b      	add	r3, r7
 80063ba:	2231      	movs	r2, #49	@ 0x31
 80063bc:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 80063c0:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80063c4:	3301      	adds	r3, #1
 80063c6:	3388      	adds	r3, #136	@ 0x88
 80063c8:	443b      	add	r3, r7
 80063ca:	2200      	movs	r2, #0
 80063cc:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "1");
 80063d0:	4884      	ldr	r0, [pc, #528]	@ (80065e4 <main+0x6474>)
 80063d2:	f001 ffed 	bl	80083b0 <Str_Len>
 80063d6:	4603      	mov	r3, r0
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 80063de:	9300      	str	r3, [sp, #0]
 80063e0:	4b80      	ldr	r3, [pc, #512]	@ (80065e4 <main+0x6474>)
 80063e2:	2101      	movs	r1, #1
 80063e4:	487d      	ldr	r0, [pc, #500]	@ (80065dc <main+0x646c>)
 80063e6:	f001 ff76 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 80063ea:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80063ee:	3301      	adds	r3, #1
 80063f0:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 80063f4:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80063f8:	461a      	mov	r2, r3
 80063fa:	2101      	movs	r1, #1
 80063fc:	4877      	ldr	r0, [pc, #476]	@ (80065dc <main+0x646c>)
 80063fe:	f001 ff2e 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8006402:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8006406:	2301      	movs	r3, #1
 8006408:	2101      	movs	r1, #1
 800640a:	4874      	ldr	r0, [pc, #464]	@ (80065dc <main+0x646c>)
 800640c:	f001 ff8d 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8006410:	f002 f934 	bl	800867c <HAL_GetTick>
 8006414:	4603      	mov	r3, r0
 8006416:	33fa      	adds	r3, #250	@ 0xfa
 8006418:	677b      	str	r3, [r7, #116]	@ 0x74
 800641a:	e268      	b.n	80068ee <main+0x677e>

			}
			//2 is entered
			else if (Keypad_Get_Key(&kp, kp_button_2)
 800641c:	2101      	movs	r1, #1
 800641e:	486e      	ldr	r0, [pc, #440]	@ (80065d8 <main+0x6468>)
 8006420:	f002 f8bc 	bl	800859c <Keypad_Get_Key>
 8006424:	4603      	mov	r3, r0
 8006426:	2b00      	cmp	r3, #0
 8006428:	d042      	beq.n	80064b0 <main+0x6340>
					&& (current_tick >= general_delay)) {
 800642a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800642c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800642e:	429a      	cmp	r2, r3
 8006430:	d33e      	bcc.n	80064b0 <main+0x6340>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8006432:	2300      	movs	r3, #0
 8006434:	2200      	movs	r2, #0
 8006436:	2101      	movs	r1, #1
 8006438:	4868      	ldr	r0, [pc, #416]	@ (80065dc <main+0x646c>)
 800643a:	f001 ff76 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 800643e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8006442:	2b01      	cmp	r3, #1
 8006444:	d827      	bhi.n	8006496 <main+0x6326>
					time_date_buffer[input_index] = '2';
 8006446:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800644a:	3388      	adds	r3, #136	@ 0x88
 800644c:	443b      	add	r3, r7
 800644e:	2232      	movs	r2, #50	@ 0x32
 8006450:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8006454:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8006458:	3301      	adds	r3, #1
 800645a:	3388      	adds	r3, #136	@ 0x88
 800645c:	443b      	add	r3, r7
 800645e:	2200      	movs	r2, #0
 8006460:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "2");
 8006464:	4860      	ldr	r0, [pc, #384]	@ (80065e8 <main+0x6478>)
 8006466:	f001 ffa3 	bl	80083b0 <Str_Len>
 800646a:	4603      	mov	r3, r0
 800646c:	b2db      	uxtb	r3, r3
 800646e:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8006472:	9300      	str	r3, [sp, #0]
 8006474:	4b5c      	ldr	r3, [pc, #368]	@ (80065e8 <main+0x6478>)
 8006476:	2101      	movs	r1, #1
 8006478:	4858      	ldr	r0, [pc, #352]	@ (80065dc <main+0x646c>)
 800647a:	f001 ff2c 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 800647e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8006482:	3301      	adds	r3, #1
 8006484:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8006488:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800648c:	461a      	mov	r2, r3
 800648e:	2101      	movs	r1, #1
 8006490:	4852      	ldr	r0, [pc, #328]	@ (80065dc <main+0x646c>)
 8006492:	f001 fee4 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8006496:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 800649a:	2301      	movs	r3, #1
 800649c:	2101      	movs	r1, #1
 800649e:	484f      	ldr	r0, [pc, #316]	@ (80065dc <main+0x646c>)
 80064a0:	f001 ff43 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 80064a4:	f002 f8ea 	bl	800867c <HAL_GetTick>
 80064a8:	4603      	mov	r3, r0
 80064aa:	33fa      	adds	r3, #250	@ 0xfa
 80064ac:	677b      	str	r3, [r7, #116]	@ 0x74
 80064ae:	e21e      	b.n	80068ee <main+0x677e>

			}
			//3 is entered
			else if (Keypad_Get_Key(&kp, kp_button_3)
 80064b0:	2102      	movs	r1, #2
 80064b2:	4849      	ldr	r0, [pc, #292]	@ (80065d8 <main+0x6468>)
 80064b4:	f002 f872 	bl	800859c <Keypad_Get_Key>
 80064b8:	4603      	mov	r3, r0
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d042      	beq.n	8006544 <main+0x63d4>
					&& (current_tick >= general_delay)) {
 80064be:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80064c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80064c2:	429a      	cmp	r2, r3
 80064c4:	d33e      	bcc.n	8006544 <main+0x63d4>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80064c6:	2300      	movs	r3, #0
 80064c8:	2200      	movs	r2, #0
 80064ca:	2101      	movs	r1, #1
 80064cc:	4843      	ldr	r0, [pc, #268]	@ (80065dc <main+0x646c>)
 80064ce:	f001 ff2c 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 80064d2:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d827      	bhi.n	800652a <main+0x63ba>
					time_date_buffer[input_index] = '3';
 80064da:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80064de:	3388      	adds	r3, #136	@ 0x88
 80064e0:	443b      	add	r3, r7
 80064e2:	2233      	movs	r2, #51	@ 0x33
 80064e4:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 80064e8:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80064ec:	3301      	adds	r3, #1
 80064ee:	3388      	adds	r3, #136	@ 0x88
 80064f0:	443b      	add	r3, r7
 80064f2:	2200      	movs	r2, #0
 80064f4:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "3");
 80064f8:	483c      	ldr	r0, [pc, #240]	@ (80065ec <main+0x647c>)
 80064fa:	f001 ff59 	bl	80083b0 <Str_Len>
 80064fe:	4603      	mov	r3, r0
 8006500:	b2db      	uxtb	r3, r3
 8006502:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8006506:	9300      	str	r3, [sp, #0]
 8006508:	4b38      	ldr	r3, [pc, #224]	@ (80065ec <main+0x647c>)
 800650a:	2101      	movs	r1, #1
 800650c:	4833      	ldr	r0, [pc, #204]	@ (80065dc <main+0x646c>)
 800650e:	f001 fee2 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 8006512:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8006516:	3301      	adds	r3, #1
 8006518:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 800651c:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8006520:	461a      	mov	r2, r3
 8006522:	2101      	movs	r1, #1
 8006524:	482d      	ldr	r0, [pc, #180]	@ (80065dc <main+0x646c>)
 8006526:	f001 fe9a 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 800652a:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 800652e:	2301      	movs	r3, #1
 8006530:	2101      	movs	r1, #1
 8006532:	482a      	ldr	r0, [pc, #168]	@ (80065dc <main+0x646c>)
 8006534:	f001 fef9 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8006538:	f002 f8a0 	bl	800867c <HAL_GetTick>
 800653c:	4603      	mov	r3, r0
 800653e:	33fa      	adds	r3, #250	@ 0xfa
 8006540:	677b      	str	r3, [r7, #116]	@ 0x74
 8006542:	e1d4      	b.n	80068ee <main+0x677e>

			}

			//4 is entered
			else if (Keypad_Get_Key(&kp, kp_button_4)
 8006544:	2104      	movs	r1, #4
 8006546:	4824      	ldr	r0, [pc, #144]	@ (80065d8 <main+0x6468>)
 8006548:	f002 f828 	bl	800859c <Keypad_Get_Key>
 800654c:	4603      	mov	r3, r0
 800654e:	2b00      	cmp	r3, #0
 8006550:	d050      	beq.n	80065f4 <main+0x6484>
					&& (current_tick >= general_delay)) {
 8006552:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006554:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006556:	429a      	cmp	r2, r3
 8006558:	d34c      	bcc.n	80065f4 <main+0x6484>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 800655a:	2300      	movs	r3, #0
 800655c:	2200      	movs	r2, #0
 800655e:	2101      	movs	r1, #1
 8006560:	481e      	ldr	r0, [pc, #120]	@ (80065dc <main+0x646c>)
 8006562:	f001 fee2 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8006566:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800656a:	2b01      	cmp	r3, #1
 800656c:	d827      	bhi.n	80065be <main+0x644e>
					time_date_buffer[input_index] = '4';
 800656e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8006572:	3388      	adds	r3, #136	@ 0x88
 8006574:	443b      	add	r3, r7
 8006576:	2234      	movs	r2, #52	@ 0x34
 8006578:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 800657c:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8006580:	3301      	adds	r3, #1
 8006582:	3388      	adds	r3, #136	@ 0x88
 8006584:	443b      	add	r3, r7
 8006586:	2200      	movs	r2, #0
 8006588:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "4");
 800658c:	4818      	ldr	r0, [pc, #96]	@ (80065f0 <main+0x6480>)
 800658e:	f001 ff0f 	bl	80083b0 <Str_Len>
 8006592:	4603      	mov	r3, r0
 8006594:	b2db      	uxtb	r3, r3
 8006596:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 800659a:	9300      	str	r3, [sp, #0]
 800659c:	4b14      	ldr	r3, [pc, #80]	@ (80065f0 <main+0x6480>)
 800659e:	2101      	movs	r1, #1
 80065a0:	480e      	ldr	r0, [pc, #56]	@ (80065dc <main+0x646c>)
 80065a2:	f001 fe98 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 80065a6:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80065aa:	3301      	adds	r3, #1
 80065ac:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 80065b0:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80065b4:	461a      	mov	r2, r3
 80065b6:	2101      	movs	r1, #1
 80065b8:	4808      	ldr	r0, [pc, #32]	@ (80065dc <main+0x646c>)
 80065ba:	f001 fe50 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 80065be:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 80065c2:	2301      	movs	r3, #1
 80065c4:	2101      	movs	r1, #1
 80065c6:	4805      	ldr	r0, [pc, #20]	@ (80065dc <main+0x646c>)
 80065c8:	f001 feaf 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 80065cc:	f002 f856 	bl	800867c <HAL_GetTick>
 80065d0:	4603      	mov	r3, r0
 80065d2:	33fa      	adds	r3, #250	@ 0xfa
 80065d4:	677b      	str	r3, [r7, #116]	@ 0x74
 80065d6:	e18a      	b.n	80068ee <main+0x677e>
 80065d8:	20000000 	.word	0x20000000
 80065dc:	2000001c 	.word	0x2000001c
 80065e0:	0800c368 	.word	0x0800c368
 80065e4:	0800c36c 	.word	0x0800c36c
 80065e8:	0800c370 	.word	0x0800c370
 80065ec:	0800c374 	.word	0x0800c374
 80065f0:	0800c378 	.word	0x0800c378

			}
			//5 is entered
			else if (Keypad_Get_Key(&kp, kp_button_5)
 80065f4:	2105      	movs	r1, #5
 80065f6:	4893      	ldr	r0, [pc, #588]	@ (8006844 <main+0x66d4>)
 80065f8:	f001 ffd0 	bl	800859c <Keypad_Get_Key>
 80065fc:	4603      	mov	r3, r0
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d042      	beq.n	8006688 <main+0x6518>
					&& (current_tick >= general_delay)) {
 8006602:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006604:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006606:	429a      	cmp	r2, r3
 8006608:	d33e      	bcc.n	8006688 <main+0x6518>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 800660a:	2300      	movs	r3, #0
 800660c:	2200      	movs	r2, #0
 800660e:	2101      	movs	r1, #1
 8006610:	488d      	ldr	r0, [pc, #564]	@ (8006848 <main+0x66d8>)
 8006612:	f001 fe8a 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8006616:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800661a:	2b01      	cmp	r3, #1
 800661c:	d827      	bhi.n	800666e <main+0x64fe>
					time_date_buffer[input_index] = '5';
 800661e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8006622:	3388      	adds	r3, #136	@ 0x88
 8006624:	443b      	add	r3, r7
 8006626:	2235      	movs	r2, #53	@ 0x35
 8006628:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 800662c:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8006630:	3301      	adds	r3, #1
 8006632:	3388      	adds	r3, #136	@ 0x88
 8006634:	443b      	add	r3, r7
 8006636:	2200      	movs	r2, #0
 8006638:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "5");
 800663c:	4883      	ldr	r0, [pc, #524]	@ (800684c <main+0x66dc>)
 800663e:	f001 feb7 	bl	80083b0 <Str_Len>
 8006642:	4603      	mov	r3, r0
 8006644:	b2db      	uxtb	r3, r3
 8006646:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 800664a:	9300      	str	r3, [sp, #0]
 800664c:	4b7f      	ldr	r3, [pc, #508]	@ (800684c <main+0x66dc>)
 800664e:	2101      	movs	r1, #1
 8006650:	487d      	ldr	r0, [pc, #500]	@ (8006848 <main+0x66d8>)
 8006652:	f001 fe40 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 8006656:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800665a:	3301      	adds	r3, #1
 800665c:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8006660:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8006664:	461a      	mov	r2, r3
 8006666:	2101      	movs	r1, #1
 8006668:	4877      	ldr	r0, [pc, #476]	@ (8006848 <main+0x66d8>)
 800666a:	f001 fdf8 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 800666e:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8006672:	2301      	movs	r3, #1
 8006674:	2101      	movs	r1, #1
 8006676:	4874      	ldr	r0, [pc, #464]	@ (8006848 <main+0x66d8>)
 8006678:	f001 fe57 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 800667c:	f001 fffe 	bl	800867c <HAL_GetTick>
 8006680:	4603      	mov	r3, r0
 8006682:	33fa      	adds	r3, #250	@ 0xfa
 8006684:	677b      	str	r3, [r7, #116]	@ 0x74
 8006686:	e132      	b.n	80068ee <main+0x677e>

			}

			//6 is entered
			else if (Keypad_Get_Key(&kp, kp_button_6)
 8006688:	2106      	movs	r1, #6
 800668a:	486e      	ldr	r0, [pc, #440]	@ (8006844 <main+0x66d4>)
 800668c:	f001 ff86 	bl	800859c <Keypad_Get_Key>
 8006690:	4603      	mov	r3, r0
 8006692:	2b00      	cmp	r3, #0
 8006694:	d042      	beq.n	800671c <main+0x65ac>
					&& (current_tick >= general_delay)) {
 8006696:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006698:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800669a:	429a      	cmp	r2, r3
 800669c:	d33e      	bcc.n	800671c <main+0x65ac>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 800669e:	2300      	movs	r3, #0
 80066a0:	2200      	movs	r2, #0
 80066a2:	2101      	movs	r1, #1
 80066a4:	4868      	ldr	r0, [pc, #416]	@ (8006848 <main+0x66d8>)
 80066a6:	f001 fe40 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 80066aa:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d827      	bhi.n	8006702 <main+0x6592>
					time_date_buffer[input_index] = '6';
 80066b2:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80066b6:	3388      	adds	r3, #136	@ 0x88
 80066b8:	443b      	add	r3, r7
 80066ba:	2236      	movs	r2, #54	@ 0x36
 80066bc:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 80066c0:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80066c4:	3301      	adds	r3, #1
 80066c6:	3388      	adds	r3, #136	@ 0x88
 80066c8:	443b      	add	r3, r7
 80066ca:	2200      	movs	r2, #0
 80066cc:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "6");
 80066d0:	485f      	ldr	r0, [pc, #380]	@ (8006850 <main+0x66e0>)
 80066d2:	f001 fe6d 	bl	80083b0 <Str_Len>
 80066d6:	4603      	mov	r3, r0
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 80066de:	9300      	str	r3, [sp, #0]
 80066e0:	4b5b      	ldr	r3, [pc, #364]	@ (8006850 <main+0x66e0>)
 80066e2:	2101      	movs	r1, #1
 80066e4:	4858      	ldr	r0, [pc, #352]	@ (8006848 <main+0x66d8>)
 80066e6:	f001 fdf6 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 80066ea:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80066ee:	3301      	adds	r3, #1
 80066f0:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 80066f4:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80066f8:	461a      	mov	r2, r3
 80066fa:	2101      	movs	r1, #1
 80066fc:	4852      	ldr	r0, [pc, #328]	@ (8006848 <main+0x66d8>)
 80066fe:	f001 fdae 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8006702:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8006706:	2301      	movs	r3, #1
 8006708:	2101      	movs	r1, #1
 800670a:	484f      	ldr	r0, [pc, #316]	@ (8006848 <main+0x66d8>)
 800670c:	f001 fe0d 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8006710:	f001 ffb4 	bl	800867c <HAL_GetTick>
 8006714:	4603      	mov	r3, r0
 8006716:	33fa      	adds	r3, #250	@ 0xfa
 8006718:	677b      	str	r3, [r7, #116]	@ 0x74
 800671a:	e0e8      	b.n	80068ee <main+0x677e>

			}

			//7 is entered
			else if (Keypad_Get_Key(&kp, kp_button_7)
 800671c:	2108      	movs	r1, #8
 800671e:	4849      	ldr	r0, [pc, #292]	@ (8006844 <main+0x66d4>)
 8006720:	f001 ff3c 	bl	800859c <Keypad_Get_Key>
 8006724:	4603      	mov	r3, r0
 8006726:	2b00      	cmp	r3, #0
 8006728:	d042      	beq.n	80067b0 <main+0x6640>
					&& (current_tick >= general_delay)) {
 800672a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800672c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800672e:	429a      	cmp	r2, r3
 8006730:	d33e      	bcc.n	80067b0 <main+0x6640>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8006732:	2300      	movs	r3, #0
 8006734:	2200      	movs	r2, #0
 8006736:	2101      	movs	r1, #1
 8006738:	4843      	ldr	r0, [pc, #268]	@ (8006848 <main+0x66d8>)
 800673a:	f001 fdf6 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 800673e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8006742:	2b01      	cmp	r3, #1
 8006744:	d827      	bhi.n	8006796 <main+0x6626>
					time_date_buffer[input_index] = '7';
 8006746:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800674a:	3388      	adds	r3, #136	@ 0x88
 800674c:	443b      	add	r3, r7
 800674e:	2237      	movs	r2, #55	@ 0x37
 8006750:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8006754:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8006758:	3301      	adds	r3, #1
 800675a:	3388      	adds	r3, #136	@ 0x88
 800675c:	443b      	add	r3, r7
 800675e:	2200      	movs	r2, #0
 8006760:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "7");
 8006764:	483b      	ldr	r0, [pc, #236]	@ (8006854 <main+0x66e4>)
 8006766:	f001 fe23 	bl	80083b0 <Str_Len>
 800676a:	4603      	mov	r3, r0
 800676c:	b2db      	uxtb	r3, r3
 800676e:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8006772:	9300      	str	r3, [sp, #0]
 8006774:	4b37      	ldr	r3, [pc, #220]	@ (8006854 <main+0x66e4>)
 8006776:	2101      	movs	r1, #1
 8006778:	4833      	ldr	r0, [pc, #204]	@ (8006848 <main+0x66d8>)
 800677a:	f001 fdac 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 800677e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8006782:	3301      	adds	r3, #1
 8006784:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8006788:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800678c:	461a      	mov	r2, r3
 800678e:	2101      	movs	r1, #1
 8006790:	482d      	ldr	r0, [pc, #180]	@ (8006848 <main+0x66d8>)
 8006792:	f001 fd64 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8006796:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 800679a:	2301      	movs	r3, #1
 800679c:	2101      	movs	r1, #1
 800679e:	482a      	ldr	r0, [pc, #168]	@ (8006848 <main+0x66d8>)
 80067a0:	f001 fdc3 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 80067a4:	f001 ff6a 	bl	800867c <HAL_GetTick>
 80067a8:	4603      	mov	r3, r0
 80067aa:	33fa      	adds	r3, #250	@ 0xfa
 80067ac:	677b      	str	r3, [r7, #116]	@ 0x74
 80067ae:	e09e      	b.n	80068ee <main+0x677e>

			}

			//8 is entered
			else if (Keypad_Get_Key(&kp, kp_button_8)
 80067b0:	2109      	movs	r1, #9
 80067b2:	4824      	ldr	r0, [pc, #144]	@ (8006844 <main+0x66d4>)
 80067b4:	f001 fef2 	bl	800859c <Keypad_Get_Key>
 80067b8:	4603      	mov	r3, r0
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d04e      	beq.n	800685c <main+0x66ec>
					&& (current_tick >= general_delay)) {
 80067be:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80067c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d34a      	bcc.n	800685c <main+0x66ec>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80067c6:	2300      	movs	r3, #0
 80067c8:	2200      	movs	r2, #0
 80067ca:	2101      	movs	r1, #1
 80067cc:	481e      	ldr	r0, [pc, #120]	@ (8006848 <main+0x66d8>)
 80067ce:	f001 fdac 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 80067d2:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	d827      	bhi.n	800682a <main+0x66ba>
					time_date_buffer[input_index] = '8';
 80067da:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80067de:	3388      	adds	r3, #136	@ 0x88
 80067e0:	443b      	add	r3, r7
 80067e2:	2238      	movs	r2, #56	@ 0x38
 80067e4:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 80067e8:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80067ec:	3301      	adds	r3, #1
 80067ee:	3388      	adds	r3, #136	@ 0x88
 80067f0:	443b      	add	r3, r7
 80067f2:	2200      	movs	r2, #0
 80067f4:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "8");
 80067f8:	4817      	ldr	r0, [pc, #92]	@ (8006858 <main+0x66e8>)
 80067fa:	f001 fdd9 	bl	80083b0 <Str_Len>
 80067fe:	4603      	mov	r3, r0
 8006800:	b2db      	uxtb	r3, r3
 8006802:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8006806:	9300      	str	r3, [sp, #0]
 8006808:	4b13      	ldr	r3, [pc, #76]	@ (8006858 <main+0x66e8>)
 800680a:	2101      	movs	r1, #1
 800680c:	480e      	ldr	r0, [pc, #56]	@ (8006848 <main+0x66d8>)
 800680e:	f001 fd62 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 8006812:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8006816:	3301      	adds	r3, #1
 8006818:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 800681c:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8006820:	461a      	mov	r2, r3
 8006822:	2101      	movs	r1, #1
 8006824:	4808      	ldr	r0, [pc, #32]	@ (8006848 <main+0x66d8>)
 8006826:	f001 fd1a 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 800682a:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 800682e:	2301      	movs	r3, #1
 8006830:	2101      	movs	r1, #1
 8006832:	4805      	ldr	r0, [pc, #20]	@ (8006848 <main+0x66d8>)
 8006834:	f001 fd79 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8006838:	f001 ff20 	bl	800867c <HAL_GetTick>
 800683c:	4603      	mov	r3, r0
 800683e:	33fa      	adds	r3, #250	@ 0xfa
 8006840:	677b      	str	r3, [r7, #116]	@ 0x74
 8006842:	e054      	b.n	80068ee <main+0x677e>
 8006844:	20000000 	.word	0x20000000
 8006848:	2000001c 	.word	0x2000001c
 800684c:	0800c37c 	.word	0x0800c37c
 8006850:	0800c380 	.word	0x0800c380
 8006854:	0800c384 	.word	0x0800c384
 8006858:	0800c388 	.word	0x0800c388

			}

			//9 is entered
			else if (Keypad_Get_Key(&kp, kp_button_9)
 800685c:	210a      	movs	r1, #10
 800685e:	48a5      	ldr	r0, [pc, #660]	@ (8006af4 <main+0x6984>)
 8006860:	f001 fe9c 	bl	800859c <Keypad_Get_Key>
 8006864:	4603      	mov	r3, r0
 8006866:	2b00      	cmp	r3, #0
 8006868:	d041      	beq.n	80068ee <main+0x677e>
					&& (current_tick >= general_delay)) {
 800686a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800686c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800686e:	429a      	cmp	r2, r3
 8006870:	d33d      	bcc.n	80068ee <main+0x677e>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8006872:	2300      	movs	r3, #0
 8006874:	2200      	movs	r2, #0
 8006876:	2101      	movs	r1, #1
 8006878:	489f      	ldr	r0, [pc, #636]	@ (8006af8 <main+0x6988>)
 800687a:	f001 fd56 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 800687e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8006882:	2b01      	cmp	r3, #1
 8006884:	d827      	bhi.n	80068d6 <main+0x6766>
					time_date_buffer[input_index] = '9';
 8006886:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800688a:	3388      	adds	r3, #136	@ 0x88
 800688c:	443b      	add	r3, r7
 800688e:	2239      	movs	r2, #57	@ 0x39
 8006890:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8006894:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8006898:	3301      	adds	r3, #1
 800689a:	3388      	adds	r3, #136	@ 0x88
 800689c:	443b      	add	r3, r7
 800689e:	2200      	movs	r2, #0
 80068a0:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "9");
 80068a4:	4895      	ldr	r0, [pc, #596]	@ (8006afc <main+0x698c>)
 80068a6:	f001 fd83 	bl	80083b0 <Str_Len>
 80068aa:	4603      	mov	r3, r0
 80068ac:	b2db      	uxtb	r3, r3
 80068ae:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 80068b2:	9300      	str	r3, [sp, #0]
 80068b4:	4b91      	ldr	r3, [pc, #580]	@ (8006afc <main+0x698c>)
 80068b6:	2101      	movs	r1, #1
 80068b8:	488f      	ldr	r0, [pc, #572]	@ (8006af8 <main+0x6988>)
 80068ba:	f001 fd0c 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 80068be:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80068c2:	3301      	adds	r3, #1
 80068c4:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 80068c8:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80068cc:	461a      	mov	r2, r3
 80068ce:	2101      	movs	r1, #1
 80068d0:	4889      	ldr	r0, [pc, #548]	@ (8006af8 <main+0x6988>)
 80068d2:	f001 fcc4 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 80068d6:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 80068da:	2301      	movs	r3, #1
 80068dc:	2101      	movs	r1, #1
 80068de:	4886      	ldr	r0, [pc, #536]	@ (8006af8 <main+0x6988>)
 80068e0:	f001 fd23 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 80068e4:	f001 feca 	bl	800867c <HAL_GetTick>
 80068e8:	4603      	mov	r3, r0
 80068ea:	33fa      	adds	r3, #250	@ 0xfa
 80068ec:	677b      	str	r3, [r7, #116]	@ 0x74

			}

			//when yes is entered -> check for miinutes validity (state 32)
			if (Keypad_Get_Key(&kp, kp_button_yes)
 80068ee:	210f      	movs	r1, #15
 80068f0:	4880      	ldr	r0, [pc, #512]	@ (8006af4 <main+0x6984>)
 80068f2:	f001 fe53 	bl	800859c <Keypad_Get_Key>
 80068f6:	4603      	mov	r3, r0
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d021      	beq.n	8006940 <main+0x67d0>
					&& (current_tick >= general_delay)) {
 80068fc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80068fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006900:	429a      	cmp	r2, r3
 8006902:	d31d      	bcc.n	8006940 <main+0x67d0>

				Alcd_Clear(&lcd);
 8006904:	487c      	ldr	r0, [pc, #496]	@ (8006af8 <main+0x6988>)
 8006906:	f001 fcff 	bl	8008308 <Alcd_Clear>

				snprintf(timeString, sizeof(timeString), "%02d", buffer);
 800690a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800690e:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8006912:	4a7b      	ldr	r2, [pc, #492]	@ (8006b00 <main+0x6990>)
 8006914:	2132      	movs	r1, #50	@ 0x32
 8006916:	f004 ffcb 	bl	800b8b0 <sniprintf>
				Alcd_PutAt_n(&lcd, 1, 0, timeString, strlen(timeString));
 800691a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800691e:	4618      	mov	r0, r3
 8006920:	f7f9 fc1e 	bl	8000160 <strlen>
 8006924:	4603      	mov	r3, r0
 8006926:	b2db      	uxtb	r3, r3
 8006928:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800692c:	9300      	str	r3, [sp, #0]
 800692e:	4613      	mov	r3, r2
 8006930:	2200      	movs	r2, #0
 8006932:	2101      	movs	r1, #1
 8006934:	4870      	ldr	r0, [pc, #448]	@ (8006af8 <main+0x6988>)
 8006936:	f001 fcce 	bl	80082d6 <Alcd_PutAt_n>

				//go to validation phase
				status = 52;
 800693a:	2334      	movs	r3, #52	@ 0x34
 800693c:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83

			}

			//
			general_delay = HAL_GetTick() + 250;
 8006940:	f001 fe9c 	bl	800867c <HAL_GetTick>
 8006944:	4603      	mov	r3, r0
 8006946:	33fa      	adds	r3, #250	@ 0xfa
 8006948:	677b      	str	r3, [r7, #116]	@ 0x74
		while ((status == 50) && (current_tick >= general_delay)) {
 800694a:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 800694e:	2b32      	cmp	r3, #50	@ 0x32
 8006950:	d17e      	bne.n	8006a50 <main+0x68e0>
 8006952:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006954:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006956:	429a      	cmp	r2, r3
 8006958:	f4bf ac72 	bcs.w	8006240 <main+0x60d0>
		}

		//minutes validation phase
		while ((status == 52) && (current_tick >= general_delay)) {
 800695c:	e078      	b.n	8006a50 <main+0x68e0>

			//get the current tick number
			current_tick = HAL_GetTick();
 800695e:	f001 fe8d 	bl	800867c <HAL_GetTick>
 8006962:	67f8      	str	r0, [r7, #124]	@ 0x7c
			input_index = 0;
 8006964:	2300      	movs	r3, #0
 8006966:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d

			Alcd_Clear(&lcd);
 800696a:	4863      	ldr	r0, [pc, #396]	@ (8006af8 <main+0x6988>)
 800696c:	f001 fccc 	bl	8008308 <Alcd_Clear>

			snprintf(timeString, sizeof(timeString), "%02d", status);
 8006970:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 8006974:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8006978:	4a61      	ldr	r2, [pc, #388]	@ (8006b00 <main+0x6990>)
 800697a:	2132      	movs	r1, #50	@ 0x32
 800697c:	f004 ff98 	bl	800b8b0 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 8006980:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006984:	4618      	mov	r0, r3
 8006986:	f7f9 fbeb 	bl	8000160 <strlen>
 800698a:	4603      	mov	r3, r0
 800698c:	b2db      	uxtb	r3, r3
 800698e:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8006992:	9300      	str	r3, [sp, #0]
 8006994:	4613      	mov	r3, r2
 8006996:	220e      	movs	r2, #14
 8006998:	2100      	movs	r1, #0
 800699a:	4857      	ldr	r0, [pc, #348]	@ (8006af8 <main+0x6988>)
 800699c:	f001 fc9b 	bl	80082d6 <Alcd_PutAt_n>

			buffer = atoi(time_date_buffer);
 80069a0:	f107 0310 	add.w	r3, r7, #16
 80069a4:	4618      	mov	r0, r3
 80069a6:	f004 fefa 	bl	800b79e <atoi>
 80069aa:	4603      	mov	r3, r0
 80069ac:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

			//check if minutes is within the range 0 to 60
			if (buffer >= 0 && buffer < 61) {
 80069b0:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80069b4:	2b3c      	cmp	r3, #60	@ 0x3c
 80069b6:	d818      	bhi.n	80069ea <main+0x687a>

				status = 49;
 80069b8:	2331      	movs	r3, #49	@ 0x31
 80069ba:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83

				//set the minutes to the value
				dose_m = buffer;
 80069be:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e

				input_index = 0;
 80069c8:	2300      	movs	r3, #0
 80069ca:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80069ce:	2300      	movs	r3, #0
 80069d0:	2200      	movs	r2, #0
 80069d2:	2101      	movs	r1, #1
 80069d4:	4848      	ldr	r0, [pc, #288]	@ (8006af8 <main+0x6988>)
 80069d6:	f001 fca8 	bl	800832a <Alcd_Display_Control>
				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 80069da:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 80069de:	2301      	movs	r3, #1
 80069e0:	2101      	movs	r1, #1
 80069e2:	4845      	ldr	r0, [pc, #276]	@ (8006af8 <main+0x6988>)
 80069e4:	f001 fca1 	bl	800832a <Alcd_Display_Control>
 80069e8:	e027      	b.n	8006a3a <main+0x68ca>
			} else {
				Alcd_PutAt(&lcd, 0, 0, "invalid");
 80069ea:	4846      	ldr	r0, [pc, #280]	@ (8006b04 <main+0x6994>)
 80069ec:	f001 fce0 	bl	80083b0 <Str_Len>
 80069f0:	4603      	mov	r3, r0
 80069f2:	b2db      	uxtb	r3, r3
 80069f4:	9300      	str	r3, [sp, #0]
 80069f6:	4b43      	ldr	r3, [pc, #268]	@ (8006b04 <main+0x6994>)
 80069f8:	2200      	movs	r2, #0
 80069fa:	2100      	movs	r1, #0
 80069fc:	483e      	ldr	r0, [pc, #248]	@ (8006af8 <main+0x6988>)
 80069fe:	f001 fc6a 	bl	80082d6 <Alcd_PutAt_n>
				delay_flag = 1;
 8006a02:	2301      	movs	r3, #1
 8006a04:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85

				input_index = 0;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8006a0e:	2300      	movs	r3, #0
 8006a10:	2200      	movs	r2, #0
 8006a12:	2101      	movs	r1, #1
 8006a14:	4838      	ldr	r0, [pc, #224]	@ (8006af8 <main+0x6988>)
 8006a16:	f001 fc88 	bl	800832a <Alcd_Display_Control>
				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8006a1a:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8006a1e:	2301      	movs	r3, #1
 8006a20:	2101      	movs	r1, #1
 8006a22:	4835      	ldr	r0, [pc, #212]	@ (8006af8 <main+0x6988>)
 8006a24:	f001 fc81 	bl	800832a <Alcd_Display_Control>
				//return to entering hours
				status = 50;
 8006a28:	2332      	movs	r3, #50	@ 0x32
 8006a2a:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83

				general_delay = HAL_GetTick() + 1000;
 8006a2e:	f001 fe25 	bl	800867c <HAL_GetTick>
 8006a32:	4603      	mov	r3, r0
 8006a34:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8006a38:	677b      	str	r3, [r7, #116]	@ 0x74
			}

			//create a delay
			if ((delay_flag == 1) && (current_tick >= general_delay)) {
 8006a3a:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	d106      	bne.n	8006a50 <main+0x68e0>
 8006a42:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006a44:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d302      	bcc.n	8006a50 <main+0x68e0>

				delay_flag = 0;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
		while ((status == 52) && (current_tick >= general_delay)) {
 8006a50:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 8006a54:	2b34      	cmp	r3, #52	@ 0x34
 8006a56:	f040 8384 	bne.w	8007162 <main+0x6ff2>
 8006a5a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006a5c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	f4bf af7d 	bcs.w	800695e <main+0x67ee>
			}

		}

		//entering the seconds state (51)
		while ((status == 51) && (current_tick >= general_delay)) {
 8006a64:	e37d      	b.n	8007162 <main+0x6ff2>

			//get the current tick number
			current_tick = HAL_GetTick();
 8006a66:	f001 fe09 	bl	800867c <HAL_GetTick>
 8006a6a:	67f8      	str	r0, [r7, #124]	@ 0x7c

			//Alcd_Clear(&lcd);
			Alcd_PutAt(&lcd, 0, 0, "Enter seconds");
 8006a6c:	4826      	ldr	r0, [pc, #152]	@ (8006b08 <main+0x6998>)
 8006a6e:	f001 fc9f 	bl	80083b0 <Str_Len>
 8006a72:	4603      	mov	r3, r0
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	9300      	str	r3, [sp, #0]
 8006a78:	4b23      	ldr	r3, [pc, #140]	@ (8006b08 <main+0x6998>)
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	2100      	movs	r1, #0
 8006a7e:	481e      	ldr	r0, [pc, #120]	@ (8006af8 <main+0x6988>)
 8006a80:	f001 fc29 	bl	80082d6 <Alcd_PutAt_n>

			snprintf(timeString, sizeof(timeString), "%02d", status);
 8006a84:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 8006a88:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8006a8c:	4a1c      	ldr	r2, [pc, #112]	@ (8006b00 <main+0x6990>)
 8006a8e:	2132      	movs	r1, #50	@ 0x32
 8006a90:	f004 ff0e 	bl	800b8b0 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 8006a94:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f7f9 fb61 	bl	8000160 <strlen>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8006aa6:	9300      	str	r3, [sp, #0]
 8006aa8:	4613      	mov	r3, r2
 8006aaa:	220e      	movs	r2, #14
 8006aac:	2100      	movs	r1, #0
 8006aae:	4812      	ldr	r0, [pc, #72]	@ (8006af8 <main+0x6988>)
 8006ab0:	f001 fc11 	bl	80082d6 <Alcd_PutAt_n>

			Alcd_CursorAt(&lcd, 1, input_index);
 8006ab4:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8006ab8:	461a      	mov	r2, r3
 8006aba:	2101      	movs	r1, #1
 8006abc:	480e      	ldr	r0, [pc, #56]	@ (8006af8 <main+0x6988>)
 8006abe:	f001 fbce 	bl	800825e <Alcd_CursorAt>
			Alcd_Display_Control(&lcd, 1, 1, 1);
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	2101      	movs	r1, #1
 8006ac8:	480b      	ldr	r0, [pc, #44]	@ (8006af8 <main+0x6988>)
 8006aca:	f001 fc2e 	bl	800832a <Alcd_Display_Control>

			//check if any button is pressed
			//check for any keypad input
			Keypad_Refresh(&kp);
 8006ace:	4809      	ldr	r0, [pc, #36]	@ (8006af4 <main+0x6984>)
 8006ad0:	f001 fcc8 	bl	8008464 <Keypad_Refresh>

			//if back is entered
			if (Keypad_Get_Key(&kp, kp_button_no_back)
 8006ad4:	210e      	movs	r1, #14
 8006ad6:	4807      	ldr	r0, [pc, #28]	@ (8006af4 <main+0x6984>)
 8006ad8:	f001 fd60 	bl	800859c <Keypad_Get_Key>
 8006adc:	4603      	mov	r3, r0
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d014      	beq.n	8006b0c <main+0x699c>
					&& (current_tick >= general_delay)) {
 8006ae2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006ae4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d310      	bcc.n	8006b0c <main+0x699c>

				//back to previous menu
				status = 49;
 8006aea:	2331      	movs	r3, #49	@ 0x31
 8006aec:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 8006af0:	e309      	b.n	8007106 <main+0x6f96>
 8006af2:	bf00      	nop
 8006af4:	20000000 	.word	0x20000000
 8006af8:	2000001c 	.word	0x2000001c
 8006afc:	0800c38c 	.word	0x0800c38c
 8006b00:	0800c280 	.word	0x0800c280
 8006b04:	0800c390 	.word	0x0800c390
 8006b08:	0800c3a8 	.word	0x0800c3a8

			}

			//0 is entered
			else if (Keypad_Get_Key(&kp, kp_button_0)
 8006b0c:	210d      	movs	r1, #13
 8006b0e:	48b8      	ldr	r0, [pc, #736]	@ (8006df0 <main+0x6c80>)
 8006b10:	f001 fd44 	bl	800859c <Keypad_Get_Key>
 8006b14:	4603      	mov	r3, r0
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d042      	beq.n	8006ba0 <main+0x6a30>
					&& (current_tick >= general_delay)) {
 8006b1a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006b1c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d33e      	bcc.n	8006ba0 <main+0x6a30>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8006b22:	2300      	movs	r3, #0
 8006b24:	2200      	movs	r2, #0
 8006b26:	2101      	movs	r1, #1
 8006b28:	48b2      	ldr	r0, [pc, #712]	@ (8006df4 <main+0x6c84>)
 8006b2a:	f001 fbfe 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8006b2e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	d827      	bhi.n	8006b86 <main+0x6a16>
					time_date_buffer[input_index] = '0';
 8006b36:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8006b3a:	3388      	adds	r3, #136	@ 0x88
 8006b3c:	443b      	add	r3, r7
 8006b3e:	2230      	movs	r2, #48	@ 0x30
 8006b40:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8006b44:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8006b48:	3301      	adds	r3, #1
 8006b4a:	3388      	adds	r3, #136	@ 0x88
 8006b4c:	443b      	add	r3, r7
 8006b4e:	2200      	movs	r2, #0
 8006b50:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "0");
 8006b54:	48a8      	ldr	r0, [pc, #672]	@ (8006df8 <main+0x6c88>)
 8006b56:	f001 fc2b 	bl	80083b0 <Str_Len>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	b2db      	uxtb	r3, r3
 8006b5e:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8006b62:	9300      	str	r3, [sp, #0]
 8006b64:	4ba4      	ldr	r3, [pc, #656]	@ (8006df8 <main+0x6c88>)
 8006b66:	2101      	movs	r1, #1
 8006b68:	48a2      	ldr	r0, [pc, #648]	@ (8006df4 <main+0x6c84>)
 8006b6a:	f001 fbb4 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 8006b6e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8006b72:	3301      	adds	r3, #1
 8006b74:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8006b78:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	2101      	movs	r1, #1
 8006b80:	489c      	ldr	r0, [pc, #624]	@ (8006df4 <main+0x6c84>)
 8006b82:	f001 fb6c 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8006b86:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	2101      	movs	r1, #1
 8006b8e:	4899      	ldr	r0, [pc, #612]	@ (8006df4 <main+0x6c84>)
 8006b90:	f001 fbcb 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8006b94:	f001 fd72 	bl	800867c <HAL_GetTick>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	33fa      	adds	r3, #250	@ 0xfa
 8006b9c:	677b      	str	r3, [r7, #116]	@ 0x74
 8006b9e:	e2b2      	b.n	8007106 <main+0x6f96>

			}
			//1 is entered
			else if (Keypad_Get_Key(&kp, kp_button_1)
 8006ba0:	2100      	movs	r1, #0
 8006ba2:	4893      	ldr	r0, [pc, #588]	@ (8006df0 <main+0x6c80>)
 8006ba4:	f001 fcfa 	bl	800859c <Keypad_Get_Key>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d042      	beq.n	8006c34 <main+0x6ac4>
					&& (current_tick >= general_delay)) {
 8006bae:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006bb0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d33e      	bcc.n	8006c34 <main+0x6ac4>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	2200      	movs	r2, #0
 8006bba:	2101      	movs	r1, #1
 8006bbc:	488d      	ldr	r0, [pc, #564]	@ (8006df4 <main+0x6c84>)
 8006bbe:	f001 fbb4 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8006bc2:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	d827      	bhi.n	8006c1a <main+0x6aaa>
					time_date_buffer[input_index] = '1';
 8006bca:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8006bce:	3388      	adds	r3, #136	@ 0x88
 8006bd0:	443b      	add	r3, r7
 8006bd2:	2231      	movs	r2, #49	@ 0x31
 8006bd4:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8006bd8:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8006bdc:	3301      	adds	r3, #1
 8006bde:	3388      	adds	r3, #136	@ 0x88
 8006be0:	443b      	add	r3, r7
 8006be2:	2200      	movs	r2, #0
 8006be4:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "1");
 8006be8:	4884      	ldr	r0, [pc, #528]	@ (8006dfc <main+0x6c8c>)
 8006bea:	f001 fbe1 	bl	80083b0 <Str_Len>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	b2db      	uxtb	r3, r3
 8006bf2:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8006bf6:	9300      	str	r3, [sp, #0]
 8006bf8:	4b80      	ldr	r3, [pc, #512]	@ (8006dfc <main+0x6c8c>)
 8006bfa:	2101      	movs	r1, #1
 8006bfc:	487d      	ldr	r0, [pc, #500]	@ (8006df4 <main+0x6c84>)
 8006bfe:	f001 fb6a 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 8006c02:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8006c06:	3301      	adds	r3, #1
 8006c08:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8006c0c:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8006c10:	461a      	mov	r2, r3
 8006c12:	2101      	movs	r1, #1
 8006c14:	4877      	ldr	r0, [pc, #476]	@ (8006df4 <main+0x6c84>)
 8006c16:	f001 fb22 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8006c1a:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8006c1e:	2301      	movs	r3, #1
 8006c20:	2101      	movs	r1, #1
 8006c22:	4874      	ldr	r0, [pc, #464]	@ (8006df4 <main+0x6c84>)
 8006c24:	f001 fb81 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8006c28:	f001 fd28 	bl	800867c <HAL_GetTick>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	33fa      	adds	r3, #250	@ 0xfa
 8006c30:	677b      	str	r3, [r7, #116]	@ 0x74
 8006c32:	e268      	b.n	8007106 <main+0x6f96>

			}
			//2 is entered
			else if (Keypad_Get_Key(&kp, kp_button_2)
 8006c34:	2101      	movs	r1, #1
 8006c36:	486e      	ldr	r0, [pc, #440]	@ (8006df0 <main+0x6c80>)
 8006c38:	f001 fcb0 	bl	800859c <Keypad_Get_Key>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d042      	beq.n	8006cc8 <main+0x6b58>
					&& (current_tick >= general_delay)) {
 8006c42:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006c44:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d33e      	bcc.n	8006cc8 <main+0x6b58>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	2101      	movs	r1, #1
 8006c50:	4868      	ldr	r0, [pc, #416]	@ (8006df4 <main+0x6c84>)
 8006c52:	f001 fb6a 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8006c56:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d827      	bhi.n	8006cae <main+0x6b3e>
					time_date_buffer[input_index] = '2';
 8006c5e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8006c62:	3388      	adds	r3, #136	@ 0x88
 8006c64:	443b      	add	r3, r7
 8006c66:	2232      	movs	r2, #50	@ 0x32
 8006c68:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8006c6c:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8006c70:	3301      	adds	r3, #1
 8006c72:	3388      	adds	r3, #136	@ 0x88
 8006c74:	443b      	add	r3, r7
 8006c76:	2200      	movs	r2, #0
 8006c78:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "2");
 8006c7c:	4860      	ldr	r0, [pc, #384]	@ (8006e00 <main+0x6c90>)
 8006c7e:	f001 fb97 	bl	80083b0 <Str_Len>
 8006c82:	4603      	mov	r3, r0
 8006c84:	b2db      	uxtb	r3, r3
 8006c86:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8006c8a:	9300      	str	r3, [sp, #0]
 8006c8c:	4b5c      	ldr	r3, [pc, #368]	@ (8006e00 <main+0x6c90>)
 8006c8e:	2101      	movs	r1, #1
 8006c90:	4858      	ldr	r0, [pc, #352]	@ (8006df4 <main+0x6c84>)
 8006c92:	f001 fb20 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 8006c96:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8006ca0:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	2101      	movs	r1, #1
 8006ca8:	4852      	ldr	r0, [pc, #328]	@ (8006df4 <main+0x6c84>)
 8006caa:	f001 fad8 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8006cae:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	2101      	movs	r1, #1
 8006cb6:	484f      	ldr	r0, [pc, #316]	@ (8006df4 <main+0x6c84>)
 8006cb8:	f001 fb37 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8006cbc:	f001 fcde 	bl	800867c <HAL_GetTick>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	33fa      	adds	r3, #250	@ 0xfa
 8006cc4:	677b      	str	r3, [r7, #116]	@ 0x74
 8006cc6:	e21e      	b.n	8007106 <main+0x6f96>

			}
			//3 is entered
			else if (Keypad_Get_Key(&kp, kp_button_3)
 8006cc8:	2102      	movs	r1, #2
 8006cca:	4849      	ldr	r0, [pc, #292]	@ (8006df0 <main+0x6c80>)
 8006ccc:	f001 fc66 	bl	800859c <Keypad_Get_Key>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d042      	beq.n	8006d5c <main+0x6bec>
					&& (current_tick >= general_delay)) {
 8006cd6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006cd8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	d33e      	bcc.n	8006d5c <main+0x6bec>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8006cde:	2300      	movs	r3, #0
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	2101      	movs	r1, #1
 8006ce4:	4843      	ldr	r0, [pc, #268]	@ (8006df4 <main+0x6c84>)
 8006ce6:	f001 fb20 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8006cea:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d827      	bhi.n	8006d42 <main+0x6bd2>
					time_date_buffer[input_index] = '3';
 8006cf2:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8006cf6:	3388      	adds	r3, #136	@ 0x88
 8006cf8:	443b      	add	r3, r7
 8006cfa:	2233      	movs	r2, #51	@ 0x33
 8006cfc:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8006d00:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8006d04:	3301      	adds	r3, #1
 8006d06:	3388      	adds	r3, #136	@ 0x88
 8006d08:	443b      	add	r3, r7
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "3");
 8006d10:	483c      	ldr	r0, [pc, #240]	@ (8006e04 <main+0x6c94>)
 8006d12:	f001 fb4d 	bl	80083b0 <Str_Len>
 8006d16:	4603      	mov	r3, r0
 8006d18:	b2db      	uxtb	r3, r3
 8006d1a:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8006d1e:	9300      	str	r3, [sp, #0]
 8006d20:	4b38      	ldr	r3, [pc, #224]	@ (8006e04 <main+0x6c94>)
 8006d22:	2101      	movs	r1, #1
 8006d24:	4833      	ldr	r0, [pc, #204]	@ (8006df4 <main+0x6c84>)
 8006d26:	f001 fad6 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 8006d2a:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8006d2e:	3301      	adds	r3, #1
 8006d30:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8006d34:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8006d38:	461a      	mov	r2, r3
 8006d3a:	2101      	movs	r1, #1
 8006d3c:	482d      	ldr	r0, [pc, #180]	@ (8006df4 <main+0x6c84>)
 8006d3e:	f001 fa8e 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8006d42:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8006d46:	2301      	movs	r3, #1
 8006d48:	2101      	movs	r1, #1
 8006d4a:	482a      	ldr	r0, [pc, #168]	@ (8006df4 <main+0x6c84>)
 8006d4c:	f001 faed 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8006d50:	f001 fc94 	bl	800867c <HAL_GetTick>
 8006d54:	4603      	mov	r3, r0
 8006d56:	33fa      	adds	r3, #250	@ 0xfa
 8006d58:	677b      	str	r3, [r7, #116]	@ 0x74
 8006d5a:	e1d4      	b.n	8007106 <main+0x6f96>

			}

			//4 is entered
			else if (Keypad_Get_Key(&kp, kp_button_4)
 8006d5c:	2104      	movs	r1, #4
 8006d5e:	4824      	ldr	r0, [pc, #144]	@ (8006df0 <main+0x6c80>)
 8006d60:	f001 fc1c 	bl	800859c <Keypad_Get_Key>
 8006d64:	4603      	mov	r3, r0
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d050      	beq.n	8006e0c <main+0x6c9c>
					&& (current_tick >= general_delay)) {
 8006d6a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006d6c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	d34c      	bcc.n	8006e0c <main+0x6c9c>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8006d72:	2300      	movs	r3, #0
 8006d74:	2200      	movs	r2, #0
 8006d76:	2101      	movs	r1, #1
 8006d78:	481e      	ldr	r0, [pc, #120]	@ (8006df4 <main+0x6c84>)
 8006d7a:	f001 fad6 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8006d7e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8006d82:	2b01      	cmp	r3, #1
 8006d84:	d827      	bhi.n	8006dd6 <main+0x6c66>
					time_date_buffer[input_index] = '4';
 8006d86:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8006d8a:	3388      	adds	r3, #136	@ 0x88
 8006d8c:	443b      	add	r3, r7
 8006d8e:	2234      	movs	r2, #52	@ 0x34
 8006d90:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8006d94:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8006d98:	3301      	adds	r3, #1
 8006d9a:	3388      	adds	r3, #136	@ 0x88
 8006d9c:	443b      	add	r3, r7
 8006d9e:	2200      	movs	r2, #0
 8006da0:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "4");
 8006da4:	4818      	ldr	r0, [pc, #96]	@ (8006e08 <main+0x6c98>)
 8006da6:	f001 fb03 	bl	80083b0 <Str_Len>
 8006daa:	4603      	mov	r3, r0
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8006db2:	9300      	str	r3, [sp, #0]
 8006db4:	4b14      	ldr	r3, [pc, #80]	@ (8006e08 <main+0x6c98>)
 8006db6:	2101      	movs	r1, #1
 8006db8:	480e      	ldr	r0, [pc, #56]	@ (8006df4 <main+0x6c84>)
 8006dba:	f001 fa8c 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 8006dbe:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8006dc2:	3301      	adds	r3, #1
 8006dc4:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8006dc8:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8006dcc:	461a      	mov	r2, r3
 8006dce:	2101      	movs	r1, #1
 8006dd0:	4808      	ldr	r0, [pc, #32]	@ (8006df4 <main+0x6c84>)
 8006dd2:	f001 fa44 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8006dd6:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8006dda:	2301      	movs	r3, #1
 8006ddc:	2101      	movs	r1, #1
 8006dde:	4805      	ldr	r0, [pc, #20]	@ (8006df4 <main+0x6c84>)
 8006de0:	f001 faa3 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8006de4:	f001 fc4a 	bl	800867c <HAL_GetTick>
 8006de8:	4603      	mov	r3, r0
 8006dea:	33fa      	adds	r3, #250	@ 0xfa
 8006dec:	677b      	str	r3, [r7, #116]	@ 0x74
 8006dee:	e18a      	b.n	8007106 <main+0x6f96>
 8006df0:	20000000 	.word	0x20000000
 8006df4:	2000001c 	.word	0x2000001c
 8006df8:	0800c368 	.word	0x0800c368
 8006dfc:	0800c36c 	.word	0x0800c36c
 8006e00:	0800c370 	.word	0x0800c370
 8006e04:	0800c374 	.word	0x0800c374
 8006e08:	0800c378 	.word	0x0800c378

			}
			//5 is entered
			else if (Keypad_Get_Key(&kp, kp_button_5)
 8006e0c:	2105      	movs	r1, #5
 8006e0e:	4893      	ldr	r0, [pc, #588]	@ (800705c <main+0x6eec>)
 8006e10:	f001 fbc4 	bl	800859c <Keypad_Get_Key>
 8006e14:	4603      	mov	r3, r0
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d042      	beq.n	8006ea0 <main+0x6d30>
					&& (current_tick >= general_delay)) {
 8006e1a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006e1c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	d33e      	bcc.n	8006ea0 <main+0x6d30>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8006e22:	2300      	movs	r3, #0
 8006e24:	2200      	movs	r2, #0
 8006e26:	2101      	movs	r1, #1
 8006e28:	488d      	ldr	r0, [pc, #564]	@ (8007060 <main+0x6ef0>)
 8006e2a:	f001 fa7e 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8006e2e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8006e32:	2b01      	cmp	r3, #1
 8006e34:	d827      	bhi.n	8006e86 <main+0x6d16>
					time_date_buffer[input_index] = '5';
 8006e36:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8006e3a:	3388      	adds	r3, #136	@ 0x88
 8006e3c:	443b      	add	r3, r7
 8006e3e:	2235      	movs	r2, #53	@ 0x35
 8006e40:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8006e44:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8006e48:	3301      	adds	r3, #1
 8006e4a:	3388      	adds	r3, #136	@ 0x88
 8006e4c:	443b      	add	r3, r7
 8006e4e:	2200      	movs	r2, #0
 8006e50:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "5");
 8006e54:	4883      	ldr	r0, [pc, #524]	@ (8007064 <main+0x6ef4>)
 8006e56:	f001 faab 	bl	80083b0 <Str_Len>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	b2db      	uxtb	r3, r3
 8006e5e:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8006e62:	9300      	str	r3, [sp, #0]
 8006e64:	4b7f      	ldr	r3, [pc, #508]	@ (8007064 <main+0x6ef4>)
 8006e66:	2101      	movs	r1, #1
 8006e68:	487d      	ldr	r0, [pc, #500]	@ (8007060 <main+0x6ef0>)
 8006e6a:	f001 fa34 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 8006e6e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8006e72:	3301      	adds	r3, #1
 8006e74:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8006e78:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	2101      	movs	r1, #1
 8006e80:	4877      	ldr	r0, [pc, #476]	@ (8007060 <main+0x6ef0>)
 8006e82:	f001 f9ec 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8006e86:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	2101      	movs	r1, #1
 8006e8e:	4874      	ldr	r0, [pc, #464]	@ (8007060 <main+0x6ef0>)
 8006e90:	f001 fa4b 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8006e94:	f001 fbf2 	bl	800867c <HAL_GetTick>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	33fa      	adds	r3, #250	@ 0xfa
 8006e9c:	677b      	str	r3, [r7, #116]	@ 0x74
 8006e9e:	e132      	b.n	8007106 <main+0x6f96>

			}

			//6 is entered
			else if (Keypad_Get_Key(&kp, kp_button_6)
 8006ea0:	2106      	movs	r1, #6
 8006ea2:	486e      	ldr	r0, [pc, #440]	@ (800705c <main+0x6eec>)
 8006ea4:	f001 fb7a 	bl	800859c <Keypad_Get_Key>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d042      	beq.n	8006f34 <main+0x6dc4>
					&& (current_tick >= general_delay)) {
 8006eae:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006eb0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d33e      	bcc.n	8006f34 <main+0x6dc4>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	2200      	movs	r2, #0
 8006eba:	2101      	movs	r1, #1
 8006ebc:	4868      	ldr	r0, [pc, #416]	@ (8007060 <main+0x6ef0>)
 8006ebe:	f001 fa34 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8006ec2:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d827      	bhi.n	8006f1a <main+0x6daa>
					time_date_buffer[input_index] = '6';
 8006eca:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8006ece:	3388      	adds	r3, #136	@ 0x88
 8006ed0:	443b      	add	r3, r7
 8006ed2:	2236      	movs	r2, #54	@ 0x36
 8006ed4:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8006ed8:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8006edc:	3301      	adds	r3, #1
 8006ede:	3388      	adds	r3, #136	@ 0x88
 8006ee0:	443b      	add	r3, r7
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "6");
 8006ee8:	485f      	ldr	r0, [pc, #380]	@ (8007068 <main+0x6ef8>)
 8006eea:	f001 fa61 	bl	80083b0 <Str_Len>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8006ef6:	9300      	str	r3, [sp, #0]
 8006ef8:	4b5b      	ldr	r3, [pc, #364]	@ (8007068 <main+0x6ef8>)
 8006efa:	2101      	movs	r1, #1
 8006efc:	4858      	ldr	r0, [pc, #352]	@ (8007060 <main+0x6ef0>)
 8006efe:	f001 f9ea 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 8006f02:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8006f06:	3301      	adds	r3, #1
 8006f08:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8006f0c:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8006f10:	461a      	mov	r2, r3
 8006f12:	2101      	movs	r1, #1
 8006f14:	4852      	ldr	r0, [pc, #328]	@ (8007060 <main+0x6ef0>)
 8006f16:	f001 f9a2 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8006f1a:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8006f1e:	2301      	movs	r3, #1
 8006f20:	2101      	movs	r1, #1
 8006f22:	484f      	ldr	r0, [pc, #316]	@ (8007060 <main+0x6ef0>)
 8006f24:	f001 fa01 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8006f28:	f001 fba8 	bl	800867c <HAL_GetTick>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	33fa      	adds	r3, #250	@ 0xfa
 8006f30:	677b      	str	r3, [r7, #116]	@ 0x74
 8006f32:	e0e8      	b.n	8007106 <main+0x6f96>

			}

			//7 is entered
			else if (Keypad_Get_Key(&kp, kp_button_7)
 8006f34:	2108      	movs	r1, #8
 8006f36:	4849      	ldr	r0, [pc, #292]	@ (800705c <main+0x6eec>)
 8006f38:	f001 fb30 	bl	800859c <Keypad_Get_Key>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d042      	beq.n	8006fc8 <main+0x6e58>
					&& (current_tick >= general_delay)) {
 8006f42:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006f44:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d33e      	bcc.n	8006fc8 <main+0x6e58>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	2101      	movs	r1, #1
 8006f50:	4843      	ldr	r0, [pc, #268]	@ (8007060 <main+0x6ef0>)
 8006f52:	f001 f9ea 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8006f56:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	d827      	bhi.n	8006fae <main+0x6e3e>
					time_date_buffer[input_index] = '7';
 8006f5e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8006f62:	3388      	adds	r3, #136	@ 0x88
 8006f64:	443b      	add	r3, r7
 8006f66:	2237      	movs	r2, #55	@ 0x37
 8006f68:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8006f6c:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8006f70:	3301      	adds	r3, #1
 8006f72:	3388      	adds	r3, #136	@ 0x88
 8006f74:	443b      	add	r3, r7
 8006f76:	2200      	movs	r2, #0
 8006f78:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "7");
 8006f7c:	483b      	ldr	r0, [pc, #236]	@ (800706c <main+0x6efc>)
 8006f7e:	f001 fa17 	bl	80083b0 <Str_Len>
 8006f82:	4603      	mov	r3, r0
 8006f84:	b2db      	uxtb	r3, r3
 8006f86:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8006f8a:	9300      	str	r3, [sp, #0]
 8006f8c:	4b37      	ldr	r3, [pc, #220]	@ (800706c <main+0x6efc>)
 8006f8e:	2101      	movs	r1, #1
 8006f90:	4833      	ldr	r0, [pc, #204]	@ (8007060 <main+0x6ef0>)
 8006f92:	f001 f9a0 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 8006f96:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8006f9a:	3301      	adds	r3, #1
 8006f9c:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8006fa0:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8006fa4:	461a      	mov	r2, r3
 8006fa6:	2101      	movs	r1, #1
 8006fa8:	482d      	ldr	r0, [pc, #180]	@ (8007060 <main+0x6ef0>)
 8006faa:	f001 f958 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8006fae:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	2101      	movs	r1, #1
 8006fb6:	482a      	ldr	r0, [pc, #168]	@ (8007060 <main+0x6ef0>)
 8006fb8:	f001 f9b7 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8006fbc:	f001 fb5e 	bl	800867c <HAL_GetTick>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	33fa      	adds	r3, #250	@ 0xfa
 8006fc4:	677b      	str	r3, [r7, #116]	@ 0x74
 8006fc6:	e09e      	b.n	8007106 <main+0x6f96>

			}

			//8 is entered
			else if (Keypad_Get_Key(&kp, kp_button_8)
 8006fc8:	2109      	movs	r1, #9
 8006fca:	4824      	ldr	r0, [pc, #144]	@ (800705c <main+0x6eec>)
 8006fcc:	f001 fae6 	bl	800859c <Keypad_Get_Key>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d04e      	beq.n	8007074 <main+0x6f04>
					&& (current_tick >= general_delay)) {
 8006fd6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006fd8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d34a      	bcc.n	8007074 <main+0x6f04>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8006fde:	2300      	movs	r3, #0
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	2101      	movs	r1, #1
 8006fe4:	481e      	ldr	r0, [pc, #120]	@ (8007060 <main+0x6ef0>)
 8006fe6:	f001 f9a0 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8006fea:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	d827      	bhi.n	8007042 <main+0x6ed2>
					time_date_buffer[input_index] = '8';
 8006ff2:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8006ff6:	3388      	adds	r3, #136	@ 0x88
 8006ff8:	443b      	add	r3, r7
 8006ffa:	2238      	movs	r2, #56	@ 0x38
 8006ffc:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8007000:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8007004:	3301      	adds	r3, #1
 8007006:	3388      	adds	r3, #136	@ 0x88
 8007008:	443b      	add	r3, r7
 800700a:	2200      	movs	r2, #0
 800700c:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "8");
 8007010:	4817      	ldr	r0, [pc, #92]	@ (8007070 <main+0x6f00>)
 8007012:	f001 f9cd 	bl	80083b0 <Str_Len>
 8007016:	4603      	mov	r3, r0
 8007018:	b2db      	uxtb	r3, r3
 800701a:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 800701e:	9300      	str	r3, [sp, #0]
 8007020:	4b13      	ldr	r3, [pc, #76]	@ (8007070 <main+0x6f00>)
 8007022:	2101      	movs	r1, #1
 8007024:	480e      	ldr	r0, [pc, #56]	@ (8007060 <main+0x6ef0>)
 8007026:	f001 f956 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 800702a:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800702e:	3301      	adds	r3, #1
 8007030:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8007034:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8007038:	461a      	mov	r2, r3
 800703a:	2101      	movs	r1, #1
 800703c:	4808      	ldr	r0, [pc, #32]	@ (8007060 <main+0x6ef0>)
 800703e:	f001 f90e 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8007042:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8007046:	2301      	movs	r3, #1
 8007048:	2101      	movs	r1, #1
 800704a:	4805      	ldr	r0, [pc, #20]	@ (8007060 <main+0x6ef0>)
 800704c:	f001 f96d 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8007050:	f001 fb14 	bl	800867c <HAL_GetTick>
 8007054:	4603      	mov	r3, r0
 8007056:	33fa      	adds	r3, #250	@ 0xfa
 8007058:	677b      	str	r3, [r7, #116]	@ 0x74
 800705a:	e054      	b.n	8007106 <main+0x6f96>
 800705c:	20000000 	.word	0x20000000
 8007060:	2000001c 	.word	0x2000001c
 8007064:	0800c37c 	.word	0x0800c37c
 8007068:	0800c380 	.word	0x0800c380
 800706c:	0800c384 	.word	0x0800c384
 8007070:	0800c388 	.word	0x0800c388

			}

			//9 is entered
			else if (Keypad_Get_Key(&kp, kp_button_9)
 8007074:	210a      	movs	r1, #10
 8007076:	48ae      	ldr	r0, [pc, #696]	@ (8007330 <main+0x71c0>)
 8007078:	f001 fa90 	bl	800859c <Keypad_Get_Key>
 800707c:	4603      	mov	r3, r0
 800707e:	2b00      	cmp	r3, #0
 8007080:	d041      	beq.n	8007106 <main+0x6f96>
					&& (current_tick >= general_delay)) {
 8007082:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007084:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007086:	429a      	cmp	r2, r3
 8007088:	d33d      	bcc.n	8007106 <main+0x6f96>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 800708a:	2300      	movs	r3, #0
 800708c:	2200      	movs	r2, #0
 800708e:	2101      	movs	r1, #1
 8007090:	48a8      	ldr	r0, [pc, #672]	@ (8007334 <main+0x71c4>)
 8007092:	f001 f94a 	bl	800832a <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8007096:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800709a:	2b01      	cmp	r3, #1
 800709c:	d827      	bhi.n	80070ee <main+0x6f7e>
					time_date_buffer[input_index] = '9';
 800709e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80070a2:	3388      	adds	r3, #136	@ 0x88
 80070a4:	443b      	add	r3, r7
 80070a6:	2239      	movs	r2, #57	@ 0x39
 80070a8:	f803 2c78 	strb.w	r2, [r3, #-120]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 80070ac:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80070b0:	3301      	adds	r3, #1
 80070b2:	3388      	adds	r3, #136	@ 0x88
 80070b4:	443b      	add	r3, r7
 80070b6:	2200      	movs	r2, #0
 80070b8:	f803 2c78 	strb.w	r2, [r3, #-120]
					Alcd_PutAt(&lcd, 1, input_index, "9");
 80070bc:	489e      	ldr	r0, [pc, #632]	@ (8007338 <main+0x71c8>)
 80070be:	f001 f977 	bl	80083b0 <Str_Len>
 80070c2:	4603      	mov	r3, r0
 80070c4:	b2db      	uxtb	r3, r3
 80070c6:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 80070ca:	9300      	str	r3, [sp, #0]
 80070cc:	4b9a      	ldr	r3, [pc, #616]	@ (8007338 <main+0x71c8>)
 80070ce:	2101      	movs	r1, #1
 80070d0:	4898      	ldr	r0, [pc, #608]	@ (8007334 <main+0x71c4>)
 80070d2:	f001 f900 	bl	80082d6 <Alcd_PutAt_n>
					input_index++;
 80070d6:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80070da:	3301      	adds	r3, #1
 80070dc:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 80070e0:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80070e4:	461a      	mov	r2, r3
 80070e6:	2101      	movs	r1, #1
 80070e8:	4892      	ldr	r0, [pc, #584]	@ (8007334 <main+0x71c4>)
 80070ea:	f001 f8b8 	bl	800825e <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 80070ee:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 80070f2:	2301      	movs	r3, #1
 80070f4:	2101      	movs	r1, #1
 80070f6:	488f      	ldr	r0, [pc, #572]	@ (8007334 <main+0x71c4>)
 80070f8:	f001 f917 	bl	800832a <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 80070fc:	f001 fabe 	bl	800867c <HAL_GetTick>
 8007100:	4603      	mov	r3, r0
 8007102:	33fa      	adds	r3, #250	@ 0xfa
 8007104:	677b      	str	r3, [r7, #116]	@ 0x74

			}

			//when yes is entered -> check for seconds validity (state 34)
			if (Keypad_Get_Key(&kp, kp_button_yes)
 8007106:	210f      	movs	r1, #15
 8007108:	4889      	ldr	r0, [pc, #548]	@ (8007330 <main+0x71c0>)
 800710a:	f001 fa47 	bl	800859c <Keypad_Get_Key>
 800710e:	4603      	mov	r3, r0
 8007110:	2b00      	cmp	r3, #0
 8007112:	d021      	beq.n	8007158 <main+0x6fe8>
					&& (current_tick >= general_delay)) {
 8007114:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007116:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007118:	429a      	cmp	r2, r3
 800711a:	d31d      	bcc.n	8007158 <main+0x6fe8>

				Alcd_Clear(&lcd);
 800711c:	4885      	ldr	r0, [pc, #532]	@ (8007334 <main+0x71c4>)
 800711e:	f001 f8f3 	bl	8008308 <Alcd_Clear>

				snprintf(timeString, sizeof(timeString), "%02d", buffer);
 8007122:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007126:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800712a:	4a84      	ldr	r2, [pc, #528]	@ (800733c <main+0x71cc>)
 800712c:	2132      	movs	r1, #50	@ 0x32
 800712e:	f004 fbbf 	bl	800b8b0 <sniprintf>
				Alcd_PutAt_n(&lcd, 1, 0, timeString, strlen(timeString));
 8007132:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007136:	4618      	mov	r0, r3
 8007138:	f7f9 f812 	bl	8000160 <strlen>
 800713c:	4603      	mov	r3, r0
 800713e:	b2db      	uxtb	r3, r3
 8007140:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8007144:	9300      	str	r3, [sp, #0]
 8007146:	4613      	mov	r3, r2
 8007148:	2200      	movs	r2, #0
 800714a:	2101      	movs	r1, #1
 800714c:	4879      	ldr	r0, [pc, #484]	@ (8007334 <main+0x71c4>)
 800714e:	f001 f8c2 	bl	80082d6 <Alcd_PutAt_n>

				status = 53;
 8007152:	2335      	movs	r3, #53	@ 0x35
 8007154:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83

			}

			//
			general_delay = HAL_GetTick() + 250;
 8007158:	f001 fa90 	bl	800867c <HAL_GetTick>
 800715c:	4603      	mov	r3, r0
 800715e:	33fa      	adds	r3, #250	@ 0xfa
 8007160:	677b      	str	r3, [r7, #116]	@ 0x74
		while ((status == 51) && (current_tick >= general_delay)) {
 8007162:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 8007166:	2b33      	cmp	r3, #51	@ 0x33
 8007168:	d17e      	bne.n	8007268 <main+0x70f8>
 800716a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800716c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800716e:	429a      	cmp	r2, r3
 8007170:	f4bf ac79 	bcs.w	8006a66 <main+0x68f6>
		}

		//seconds validation phase
		while ((status == 53) && (current_tick >= general_delay)) {
 8007174:	e078      	b.n	8007268 <main+0x70f8>

			//get the current tick number
			current_tick = HAL_GetTick();
 8007176:	f001 fa81 	bl	800867c <HAL_GetTick>
 800717a:	67f8      	str	r0, [r7, #124]	@ 0x7c

			input_index = 0;
 800717c:	2300      	movs	r3, #0
 800717e:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d

			Alcd_Clear(&lcd);
 8007182:	486c      	ldr	r0, [pc, #432]	@ (8007334 <main+0x71c4>)
 8007184:	f001 f8c0 	bl	8008308 <Alcd_Clear>

			snprintf(timeString, sizeof(timeString), "%02d", status);
 8007188:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 800718c:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8007190:	4a6a      	ldr	r2, [pc, #424]	@ (800733c <main+0x71cc>)
 8007192:	2132      	movs	r1, #50	@ 0x32
 8007194:	f004 fb8c 	bl	800b8b0 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 8007198:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800719c:	4618      	mov	r0, r3
 800719e:	f7f8 ffdf 	bl	8000160 <strlen>
 80071a2:	4603      	mov	r3, r0
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80071aa:	9300      	str	r3, [sp, #0]
 80071ac:	4613      	mov	r3, r2
 80071ae:	220e      	movs	r2, #14
 80071b0:	2100      	movs	r1, #0
 80071b2:	4860      	ldr	r0, [pc, #384]	@ (8007334 <main+0x71c4>)
 80071b4:	f001 f88f 	bl	80082d6 <Alcd_PutAt_n>

			buffer = atoi(time_date_buffer);
 80071b8:	f107 0310 	add.w	r3, r7, #16
 80071bc:	4618      	mov	r0, r3
 80071be:	f004 faee 	bl	800b79e <atoi>
 80071c2:	4603      	mov	r3, r0
 80071c4:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

			//check if seconds is within the range 0 to 60
			if (buffer >= 0 && buffer < 61) {
 80071c8:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80071cc:	2b3c      	cmp	r3, #60	@ 0x3c
 80071ce:	d818      	bhi.n	8007202 <main+0x7092>

				status = 49;
 80071d0:	2331      	movs	r3, #49	@ 0x31
 80071d2:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83

				//set the seconds to the value
				dose_s = buffer;
 80071d6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80071da:	b2db      	uxtb	r3, r3
 80071dc:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d

				input_index = 0;
 80071e0:	2300      	movs	r3, #0
 80071e2:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80071e6:	2300      	movs	r3, #0
 80071e8:	2200      	movs	r2, #0
 80071ea:	2101      	movs	r1, #1
 80071ec:	4851      	ldr	r0, [pc, #324]	@ (8007334 <main+0x71c4>)
 80071ee:	f001 f89c 	bl	800832a <Alcd_Display_Control>
				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 80071f2:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 80071f6:	2301      	movs	r3, #1
 80071f8:	2101      	movs	r1, #1
 80071fa:	484e      	ldr	r0, [pc, #312]	@ (8007334 <main+0x71c4>)
 80071fc:	f001 f895 	bl	800832a <Alcd_Display_Control>
 8007200:	e027      	b.n	8007252 <main+0x70e2>
			} else {
				Alcd_PutAt(&lcd, 0, 0, "invalid");
 8007202:	484f      	ldr	r0, [pc, #316]	@ (8007340 <main+0x71d0>)
 8007204:	f001 f8d4 	bl	80083b0 <Str_Len>
 8007208:	4603      	mov	r3, r0
 800720a:	b2db      	uxtb	r3, r3
 800720c:	9300      	str	r3, [sp, #0]
 800720e:	4b4c      	ldr	r3, [pc, #304]	@ (8007340 <main+0x71d0>)
 8007210:	2200      	movs	r2, #0
 8007212:	2100      	movs	r1, #0
 8007214:	4847      	ldr	r0, [pc, #284]	@ (8007334 <main+0x71c4>)
 8007216:	f001 f85e 	bl	80082d6 <Alcd_PutAt_n>
				delay_flag = 1;
 800721a:	2301      	movs	r3, #1
 800721c:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85

				input_index = 0;
 8007220:	2300      	movs	r3, #0
 8007222:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8007226:	2300      	movs	r3, #0
 8007228:	2200      	movs	r2, #0
 800722a:	2101      	movs	r1, #1
 800722c:	4841      	ldr	r0, [pc, #260]	@ (8007334 <main+0x71c4>)
 800722e:	f001 f87c 	bl	800832a <Alcd_Display_Control>
				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8007232:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8007236:	2301      	movs	r3, #1
 8007238:	2101      	movs	r1, #1
 800723a:	483e      	ldr	r0, [pc, #248]	@ (8007334 <main+0x71c4>)
 800723c:	f001 f875 	bl	800832a <Alcd_Display_Control>
				//return to entering hours
				status = 51;
 8007240:	2333      	movs	r3, #51	@ 0x33
 8007242:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83

				general_delay = HAL_GetTick() + 1000;
 8007246:	f001 fa19 	bl	800867c <HAL_GetTick>
 800724a:	4603      	mov	r3, r0
 800724c:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8007250:	677b      	str	r3, [r7, #116]	@ 0x74
			}

			//create a delay
			if ((delay_flag == 1) && (current_tick >= general_delay)) {
 8007252:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 8007256:	2b01      	cmp	r3, #1
 8007258:	d106      	bne.n	8007268 <main+0x70f8>
 800725a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800725c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800725e:	429a      	cmp	r2, r3
 8007260:	d302      	bcc.n	8007268 <main+0x70f8>

				delay_flag = 0;
 8007262:	2300      	movs	r3, #0
 8007264:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
		while ((status == 53) && (current_tick >= general_delay)) {
 8007268:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 800726c:	2b35      	cmp	r3, #53	@ 0x35
 800726e:	d155      	bne.n	800731c <main+0x71ac>
 8007270:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007272:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007274:	429a      	cmp	r2, r3
 8007276:	f4bf af7e 	bcs.w	8007176 <main+0x7006>
			}

		}

		//status 54 -> force feeding
		while ((status == 54) && (current_tick >= general_delay)) {
 800727a:	e04f      	b.n	800731c <main+0x71ac>

			//get the current tick number
			current_tick = HAL_GetTick();
 800727c:	f001 f9fe 	bl	800867c <HAL_GetTick>
 8007280:	67f8      	str	r0, [r7, #124]	@ 0x7c

			//moving the motor to the 180 position (feeding position)
			TIM1->CCR1 = 1999;
 8007282:	4b30      	ldr	r3, [pc, #192]	@ (8007344 <main+0x71d4>)
 8007284:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8007288:	635a      	str	r2, [r3, #52]	@ 0x34

			Alcd_Clear(&lcd);
 800728a:	482a      	ldr	r0, [pc, #168]	@ (8007334 <main+0x71c4>)
 800728c:	f001 f83c 	bl	8008308 <Alcd_Clear>
			Alcd_PutAt(&lcd, 0, 0, "hold button");
 8007290:	482d      	ldr	r0, [pc, #180]	@ (8007348 <main+0x71d8>)
 8007292:	f001 f88d 	bl	80083b0 <Str_Len>
 8007296:	4603      	mov	r3, r0
 8007298:	b2db      	uxtb	r3, r3
 800729a:	9300      	str	r3, [sp, #0]
 800729c:	4b2a      	ldr	r3, [pc, #168]	@ (8007348 <main+0x71d8>)
 800729e:	2200      	movs	r2, #0
 80072a0:	2100      	movs	r1, #0
 80072a2:	4824      	ldr	r0, [pc, #144]	@ (8007334 <main+0x71c4>)
 80072a4:	f001 f817 	bl	80082d6 <Alcd_PutAt_n>
			Alcd_PutAt(&lcd, 1, 0, "for feeding");
 80072a8:	4828      	ldr	r0, [pc, #160]	@ (800734c <main+0x71dc>)
 80072aa:	f001 f881 	bl	80083b0 <Str_Len>
 80072ae:	4603      	mov	r3, r0
 80072b0:	b2db      	uxtb	r3, r3
 80072b2:	9300      	str	r3, [sp, #0]
 80072b4:	4b25      	ldr	r3, [pc, #148]	@ (800734c <main+0x71dc>)
 80072b6:	2200      	movs	r2, #0
 80072b8:	2101      	movs	r1, #1
 80072ba:	481e      	ldr	r0, [pc, #120]	@ (8007334 <main+0x71c4>)
 80072bc:	f001 f80b 	bl	80082d6 <Alcd_PutAt_n>
			snprintf(timeString, sizeof(timeString), "%02d", status);
 80072c0:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 80072c4:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80072c8:	4a1c      	ldr	r2, [pc, #112]	@ (800733c <main+0x71cc>)
 80072ca:	2132      	movs	r1, #50	@ 0x32
 80072cc:	f004 faf0 	bl	800b8b0 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 80072d0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80072d4:	4618      	mov	r0, r3
 80072d6:	f7f8 ff43 	bl	8000160 <strlen>
 80072da:	4603      	mov	r3, r0
 80072dc:	b2db      	uxtb	r3, r3
 80072de:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80072e2:	9300      	str	r3, [sp, #0]
 80072e4:	4613      	mov	r3, r2
 80072e6:	220e      	movs	r2, #14
 80072e8:	2100      	movs	r1, #0
 80072ea:	4812      	ldr	r0, [pc, #72]	@ (8007334 <main+0x71c4>)
 80072ec:	f000 fff3 	bl	80082d6 <Alcd_PutAt_n>

			//check if any button is pressed
			//check for any keypad input
			Keypad_Refresh(&kp);
 80072f0:	480f      	ldr	r0, [pc, #60]	@ (8007330 <main+0x71c0>)
 80072f2:	f001 f8b7 	bl	8008464 <Keypad_Refresh>

			//in case feeding is selected -> keep the state
			if (Keypad_Get_Key(&kp, kp_button_force_feed)) {
 80072f6:	210b      	movs	r1, #11
 80072f8:	480d      	ldr	r0, [pc, #52]	@ (8007330 <main+0x71c0>)
 80072fa:	f001 f94f 	bl	800859c <Keypad_Get_Key>
 80072fe:	4603      	mov	r3, r0
 8007300:	2b00      	cmp	r3, #0
 8007302:	d003      	beq.n	800730c <main+0x719c>
				status = 54;
 8007304:	2336      	movs	r3, #54	@ 0x36
 8007306:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 800730a:	e002      	b.n	8007312 <main+0x71a2>

			//when the force feed is released
			else {

				//return to the idle state
				status = 0;
 800730c:	2300      	movs	r3, #0
 800730e:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83

			}
			general_delay = HAL_GetTick() + 250;
 8007312:	f001 f9b3 	bl	800867c <HAL_GetTick>
 8007316:	4603      	mov	r3, r0
 8007318:	33fa      	adds	r3, #250	@ 0xfa
 800731a:	677b      	str	r3, [r7, #116]	@ 0x74
		while ((status == 54) && (current_tick >= general_delay)) {
 800731c:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 8007320:	2b36      	cmp	r3, #54	@ 0x36
 8007322:	f040 809e 	bne.w	8007462 <main+0x72f2>
 8007326:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007328:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800732a:	429a      	cmp	r2, r3
 800732c:	d2a6      	bcs.n	800727c <main+0x710c>
		}

		//feeding phase
		while ((status == 55) && (current_tick >= general_delay)) {
 800732e:	e098      	b.n	8007462 <main+0x72f2>
 8007330:	20000000 	.word	0x20000000
 8007334:	2000001c 	.word	0x2000001c
 8007338:	0800c38c 	.word	0x0800c38c
 800733c:	0800c280 	.word	0x0800c280
 8007340:	0800c390 	.word	0x0800c390
 8007344:	40012c00 	.word	0x40012c00
 8007348:	0800c47c 	.word	0x0800c47c
 800734c:	0800c488 	.word	0x0800c488
			//get the current tick number
			current_tick = HAL_GetTick();
 8007350:	f001 f994 	bl	800867c <HAL_GetTick>
 8007354:	67f8      	str	r0, [r7, #124]	@ 0x7c

			//moving the motor to the 0 position
			TIM1->CCR1 = 999;
 8007356:	4b83      	ldr	r3, [pc, #524]	@ (8007564 <main+0x73f4>)
 8007358:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800735c:	635a      	str	r2, [r3, #52]	@ 0x34

			Alcd_Clear(&lcd);
 800735e:	4882      	ldr	r0, [pc, #520]	@ (8007568 <main+0x73f8>)
 8007360:	f000 ffd2 	bl	8008308 <Alcd_Clear>
			Alcd_PutAt(&lcd, 0, 0, "Feeding");
 8007364:	4881      	ldr	r0, [pc, #516]	@ (800756c <main+0x73fc>)
 8007366:	f001 f823 	bl	80083b0 <Str_Len>
 800736a:	4603      	mov	r3, r0
 800736c:	b2db      	uxtb	r3, r3
 800736e:	9300      	str	r3, [sp, #0]
 8007370:	4b7e      	ldr	r3, [pc, #504]	@ (800756c <main+0x73fc>)
 8007372:	2200      	movs	r2, #0
 8007374:	2100      	movs	r1, #0
 8007376:	487c      	ldr	r0, [pc, #496]	@ (8007568 <main+0x73f8>)
 8007378:	f000 ffad 	bl	80082d6 <Alcd_PutAt_n>

			snprintf(timeString, sizeof(timeString), "%02d", status);
 800737c:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 8007380:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8007384:	4a7a      	ldr	r2, [pc, #488]	@ (8007570 <main+0x7400>)
 8007386:	2132      	movs	r1, #50	@ 0x32
 8007388:	f004 fa92 	bl	800b8b0 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 800738c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007390:	4618      	mov	r0, r3
 8007392:	f7f8 fee5 	bl	8000160 <strlen>
 8007396:	4603      	mov	r3, r0
 8007398:	b2db      	uxtb	r3, r3
 800739a:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800739e:	9300      	str	r3, [sp, #0]
 80073a0:	4613      	mov	r3, r2
 80073a2:	220e      	movs	r2, #14
 80073a4:	2100      	movs	r1, #0
 80073a6:	4870      	ldr	r0, [pc, #448]	@ (8007568 <main+0x73f8>)
 80073a8:	f000 ff95 	bl	80082d6 <Alcd_PutAt_n>

			dosing_tick = dosing_tick_sec * 1000;
 80073ac:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80073b0:	461a      	mov	r2, r3
 80073b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80073b6:	fb02 f303 	mul.w	r3, r2, r3
 80073ba:	67bb      	str	r3, [r7, #120]	@ 0x78

			// Start the outer loop for n iterations
			while (loop_count < dose_num) {
 80073bc:	e03d      	b.n	800743a <main+0x72ca>

				snprintf(timeString, sizeof(timeString), "dose cycle: %02d",
 80073be:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 80073c2:	3301      	adds	r3, #1
 80073c4:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80073c8:	4a6a      	ldr	r2, [pc, #424]	@ (8007574 <main+0x7404>)
 80073ca:	2132      	movs	r1, #50	@ 0x32
 80073cc:	f004 fa70 	bl	800b8b0 <sniprintf>
						(loop_count + 1));
				Alcd_PutAt_n(&lcd, 1, 0, timeString, strlen(timeString));
 80073d0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80073d4:	4618      	mov	r0, r3
 80073d6:	f7f8 fec3 	bl	8000160 <strlen>
 80073da:	4603      	mov	r3, r0
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80073e2:	9300      	str	r3, [sp, #0]
 80073e4:	4613      	mov	r3, r2
 80073e6:	2200      	movs	r2, #0
 80073e8:	2101      	movs	r1, #1
 80073ea:	485f      	ldr	r0, [pc, #380]	@ (8007568 <main+0x73f8>)
 80073ec:	f000 ff73 	bl	80082d6 <Alcd_PutAt_n>

				// Record the start tick for this iteration
				uint32_t start_tick = HAL_GetTick();
 80073f0:	f001 f944 	bl	800867c <HAL_GetTick>
 80073f4:	6678      	str	r0, [r7, #100]	@ 0x64

				// Perform the inner loop for the dosing delay
				while ((HAL_GetTick()) < (start_tick + dosing_tick)) {
 80073f6:	e003      	b.n	8007400 <main+0x7290>
					// Moving the motor to position 999
					TIM1->CCR1 = 1999;
 80073f8:	4b5a      	ldr	r3, [pc, #360]	@ (8007564 <main+0x73f4>)
 80073fa:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80073fe:	635a      	str	r2, [r3, #52]	@ 0x34
				while ((HAL_GetTick()) < (start_tick + dosing_tick)) {
 8007400:	f001 f93c 	bl	800867c <HAL_GetTick>
 8007404:	4601      	mov	r1, r0
 8007406:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007408:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800740a:	4413      	add	r3, r2
 800740c:	4299      	cmp	r1, r3
 800740e:	d3f3      	bcc.n	80073f8 <main+0x7288>

					// Optionally, you can perform other tasks here if necessary
				}

				TIM1->CCR1 = 999;
 8007410:	4b54      	ldr	r3, [pc, #336]	@ (8007564 <main+0x73f4>)
 8007412:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8007416:	635a      	str	r2, [r3, #52]	@ 0x34
				// After completing the inner loop, add a delay of 1000 ms
				uint32_t delay_start_tick = HAL_GetTick(); // Record the start time for delay
 8007418:	f001 f930 	bl	800867c <HAL_GetTick>
 800741c:	6638      	str	r0, [r7, #96]	@ 0x60
				while ((HAL_GetTick()) < (delay_start_tick + 3000)) {
 800741e:	bf00      	nop
 8007420:	f001 f92c 	bl	800867c <HAL_GetTick>
 8007424:	4602      	mov	r2, r0
 8007426:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007428:	f603 33b8 	addw	r3, r3, #3000	@ 0xbb8
 800742c:	429a      	cmp	r2, r3
 800742e:	d3f7      	bcc.n	8007420 <main+0x72b0>
					// Non-blocking wait for 1000 ms using HAL_GetTick()
					// You can perform other non-blocking tasks here if needed
				}

				// Increment the loop count
				loop_count++;
 8007430:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8007434:	3301      	adds	r3, #1
 8007436:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
			while (loop_count < dose_num) {
 800743a:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 800743e:	f897 206c 	ldrb.w	r2, [r7, #108]	@ 0x6c
 8007442:	429a      	cmp	r2, r3
 8007444:	d3bb      	bcc.n	80073be <main+0x724e>
			}

			// Once the outer loop completes, reset the status
			status = 0;
 8007446:	2300      	movs	r3, #0
 8007448:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
			loop_count = 0;
 800744c:	2300      	movs	r3, #0
 800744e:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
			dosing_done_flag = 1;
 8007452:	2301      	movs	r3, #1
 8007454:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
			general_delay = HAL_GetTick() + 250;
 8007458:	f001 f910 	bl	800867c <HAL_GetTick>
 800745c:	4603      	mov	r3, r0
 800745e:	33fa      	adds	r3, #250	@ 0xfa
 8007460:	677b      	str	r3, [r7, #116]	@ 0x74
		while ((status == 55) && (current_tick >= general_delay)) {
 8007462:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 8007466:	2b37      	cmp	r3, #55	@ 0x37
 8007468:	d170      	bne.n	800754c <main+0x73dc>
 800746a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800746c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800746e:	429a      	cmp	r2, r3
 8007470:	f4bf af6e 	bcs.w	8007350 <main+0x71e0>
		}

		//saving calibrations
		while ((status == 56) && (current_tick >= general_delay)) {
 8007474:	e06a      	b.n	800754c <main+0x73dc>

			//get the current tick number
			current_tick = HAL_GetTick();
 8007476:	f001 f901 	bl	800867c <HAL_GetTick>
 800747a:	67f8      	str	r0, [r7, #124]	@ 0x7c
			//moving the motor to the 0 position
			TIM1->CCR1 = 999;
 800747c:	4b39      	ldr	r3, [pc, #228]	@ (8007564 <main+0x73f4>)
 800747e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8007482:	635a      	str	r2, [r3, #52]	@ 0x34

			Alcd_Clear(&lcd);
 8007484:	4838      	ldr	r0, [pc, #224]	@ (8007568 <main+0x73f8>)
 8007486:	f000 ff3f 	bl	8008308 <Alcd_Clear>
			Alcd_PutAt(&lcd, 0, 0, "save?");
 800748a:	483b      	ldr	r0, [pc, #236]	@ (8007578 <main+0x7408>)
 800748c:	f000 ff90 	bl	80083b0 <Str_Len>
 8007490:	4603      	mov	r3, r0
 8007492:	b2db      	uxtb	r3, r3
 8007494:	9300      	str	r3, [sp, #0]
 8007496:	4b38      	ldr	r3, [pc, #224]	@ (8007578 <main+0x7408>)
 8007498:	2200      	movs	r2, #0
 800749a:	2100      	movs	r1, #0
 800749c:	4832      	ldr	r0, [pc, #200]	@ (8007568 <main+0x73f8>)
 800749e:	f000 ff1a 	bl	80082d6 <Alcd_PutAt_n>

			snprintf(timeString, sizeof(timeString), "%02d", status);
 80074a2:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 80074a6:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80074aa:	4a31      	ldr	r2, [pc, #196]	@ (8007570 <main+0x7400>)
 80074ac:	2132      	movs	r1, #50	@ 0x32
 80074ae:	f004 f9ff 	bl	800b8b0 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 80074b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80074b6:	4618      	mov	r0, r3
 80074b8:	f7f8 fe52 	bl	8000160 <strlen>
 80074bc:	4603      	mov	r3, r0
 80074be:	b2db      	uxtb	r3, r3
 80074c0:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80074c4:	9300      	str	r3, [sp, #0]
 80074c6:	4613      	mov	r3, r2
 80074c8:	220e      	movs	r2, #14
 80074ca:	2100      	movs	r1, #0
 80074cc:	4826      	ldr	r0, [pc, #152]	@ (8007568 <main+0x73f8>)
 80074ce:	f000 ff02 	bl	80082d6 <Alcd_PutAt_n>

			snprintf(timeString, sizeof(timeString), "ticks: %2d s",
 80074d2:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80074d6:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80074da:	4a28      	ldr	r2, [pc, #160]	@ (800757c <main+0x740c>)
 80074dc:	2132      	movs	r1, #50	@ 0x32
 80074de:	f004 f9e7 	bl	800b8b0 <sniprintf>
					dosing_tick_sec);
			Alcd_PutAt_n(&lcd, 1, 0, timeString, strlen(timeString));
 80074e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80074e6:	4618      	mov	r0, r3
 80074e8:	f7f8 fe3a 	bl	8000160 <strlen>
 80074ec:	4603      	mov	r3, r0
 80074ee:	b2db      	uxtb	r3, r3
 80074f0:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80074f4:	9300      	str	r3, [sp, #0]
 80074f6:	4613      	mov	r3, r2
 80074f8:	2200      	movs	r2, #0
 80074fa:	2101      	movs	r1, #1
 80074fc:	481a      	ldr	r0, [pc, #104]	@ (8007568 <main+0x73f8>)
 80074fe:	f000 feea 	bl	80082d6 <Alcd_PutAt_n>

			//check if any button is pressed
			//check for any keypad input
			Keypad_Refresh(&kp);
 8007502:	481f      	ldr	r0, [pc, #124]	@ (8007580 <main+0x7410>)
 8007504:	f000 ffae 	bl	8008464 <Keypad_Refresh>

			//yes -> save ticks
			if (Keypad_Get_Key(&kp, kp_button_yes)) {
 8007508:	210f      	movs	r1, #15
 800750a:	481d      	ldr	r0, [pc, #116]	@ (8007580 <main+0x7410>)
 800750c:	f001 f846 	bl	800859c <Keypad_Get_Key>
 8007510:	4603      	mov	r3, r0
 8007512:	2b00      	cmp	r3, #0
 8007514:	d00b      	beq.n	800752e <main+0x73be>

				//save the parameters to the eeprom
				eeprom24c32_write(&memory, dosing_tick_sec, dosing_period);
 8007516:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800751a:	4a1a      	ldr	r2, [pc, #104]	@ (8007584 <main+0x7414>)
 800751c:	b292      	uxth	r2, r2
 800751e:	4619      	mov	r1, r3
 8007520:	4819      	ldr	r0, [pc, #100]	@ (8007588 <main+0x7418>)
 8007522:	f000 fb05 	bl	8007b30 <eeprom24c32_write>
				status = 21;
 8007526:	2315      	movs	r3, #21
 8007528:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 800752c:	e009      	b.n	8007542 <main+0x73d2>
			}

			// no -> return to previous state
			else if (Keypad_Get_Key(&kp, kp_button_no_back)) {
 800752e:	210e      	movs	r1, #14
 8007530:	4813      	ldr	r0, [pc, #76]	@ (8007580 <main+0x7410>)
 8007532:	f001 f833 	bl	800859c <Keypad_Get_Key>
 8007536:	4603      	mov	r3, r0
 8007538:	2b00      	cmp	r3, #0
 800753a:	d002      	beq.n	8007542 <main+0x73d2>

				status = 24;
 800753c:	2318      	movs	r3, #24
 800753e:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
			}

			general_delay = HAL_GetTick() + 250;
 8007542:	f001 f89b 	bl	800867c <HAL_GetTick>
 8007546:	4603      	mov	r3, r0
 8007548:	33fa      	adds	r3, #250	@ 0xfa
 800754a:	677b      	str	r3, [r7, #116]	@ 0x74
		while ((status == 56) && (current_tick >= general_delay)) {
 800754c:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 8007550:	2b38      	cmp	r3, #56	@ 0x38
 8007552:	f478 ae9f 	bne.w	8000294 <main+0x124>
 8007556:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007558:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800755a:	429a      	cmp	r2, r3
 800755c:	d28b      	bcs.n	8007476 <main+0x7306>
		current_tick = HAL_GetTick();
 800755e:	f7f8 be99 	b.w	8000294 <main+0x124>
 8007562:	bf00      	nop
 8007564:	40012c00 	.word	0x40012c00
 8007568:	2000001c 	.word	0x2000001c
 800756c:	0800c494 	.word	0x0800c494
 8007570:	0800c280 	.word	0x0800c280
 8007574:	0800c49c 	.word	0x0800c49c
 8007578:	0800c45c 	.word	0x0800c45c
 800757c:	0800c4b0 	.word	0x0800c4b0
 8007580:	20000000 	.word	0x20000000
 8007584:	20000180 	.word	0x20000180
 8007588:	20000168 	.word	0x20000168

0800758c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800758c:	b580      	push	{r7, lr}
 800758e:	b090      	sub	sp, #64	@ 0x40
 8007590:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8007592:	f107 0318 	add.w	r3, r7, #24
 8007596:	2228      	movs	r2, #40	@ 0x28
 8007598:	2100      	movs	r1, #0
 800759a:	4618      	mov	r0, r3
 800759c:	f004 f9bc 	bl	800b918 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80075a0:	1d3b      	adds	r3, r7, #4
 80075a2:	2200      	movs	r2, #0
 80075a4:	601a      	str	r2, [r3, #0]
 80075a6:	605a      	str	r2, [r3, #4]
 80075a8:	609a      	str	r2, [r3, #8]
 80075aa:	60da      	str	r2, [r3, #12]
 80075ac:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80075ae:	2301      	movs	r3, #1
 80075b0:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80075b2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80075b6:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80075b8:	2300      	movs	r3, #0
 80075ba:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80075bc:	2301      	movs	r3, #1
 80075be:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80075c0:	2302      	movs	r3, #2
 80075c2:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80075c4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80075c8:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80075ca:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80075ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80075d0:	f107 0318 	add.w	r3, r7, #24
 80075d4:	4618      	mov	r0, r3
 80075d6:	f003 f81f 	bl	800a618 <HAL_RCC_OscConfig>
 80075da:	4603      	mov	r3, r0
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d001      	beq.n	80075e4 <SystemClock_Config+0x58>
		Error_Handler();
 80075e0:	f000 f906 	bl	80077f0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80075e4:	230f      	movs	r3, #15
 80075e6:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80075e8:	2302      	movs	r3, #2
 80075ea:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80075ec:	2300      	movs	r3, #0
 80075ee:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80075f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80075f4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80075f6:	2300      	movs	r3, #0
 80075f8:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80075fa:	1d3b      	adds	r3, r7, #4
 80075fc:	2102      	movs	r1, #2
 80075fe:	4618      	mov	r0, r3
 8007600:	f003 fa8c 	bl	800ab1c <HAL_RCC_ClockConfig>
 8007604:	4603      	mov	r3, r0
 8007606:	2b00      	cmp	r3, #0
 8007608:	d001      	beq.n	800760e <SystemClock_Config+0x82>
		Error_Handler();
 800760a:	f000 f8f1 	bl	80077f0 <Error_Handler>
	}
}
 800760e:	bf00      	nop
 8007610:	3740      	adds	r7, #64	@ 0x40
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}
	...

08007618 <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 8007618:	b580      	push	{r7, lr}
 800761a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 800761c:	4b12      	ldr	r3, [pc, #72]	@ (8007668 <MX_I2C2_Init+0x50>)
 800761e:	4a13      	ldr	r2, [pc, #76]	@ (800766c <MX_I2C2_Init+0x54>)
 8007620:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 100000;
 8007622:	4b11      	ldr	r3, [pc, #68]	@ (8007668 <MX_I2C2_Init+0x50>)
 8007624:	4a12      	ldr	r2, [pc, #72]	@ (8007670 <MX_I2C2_Init+0x58>)
 8007626:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007628:	4b0f      	ldr	r3, [pc, #60]	@ (8007668 <MX_I2C2_Init+0x50>)
 800762a:	2200      	movs	r2, #0
 800762c:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 800762e:	4b0e      	ldr	r3, [pc, #56]	@ (8007668 <MX_I2C2_Init+0x50>)
 8007630:	2200      	movs	r2, #0
 8007632:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007634:	4b0c      	ldr	r3, [pc, #48]	@ (8007668 <MX_I2C2_Init+0x50>)
 8007636:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800763a:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800763c:	4b0a      	ldr	r3, [pc, #40]	@ (8007668 <MX_I2C2_Init+0x50>)
 800763e:	2200      	movs	r2, #0
 8007640:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 8007642:	4b09      	ldr	r3, [pc, #36]	@ (8007668 <MX_I2C2_Init+0x50>)
 8007644:	2200      	movs	r2, #0
 8007646:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007648:	4b07      	ldr	r3, [pc, #28]	@ (8007668 <MX_I2C2_Init+0x50>)
 800764a:	2200      	movs	r2, #0
 800764c:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800764e:	4b06      	ldr	r3, [pc, #24]	@ (8007668 <MX_I2C2_Init+0x50>)
 8007650:	2200      	movs	r2, #0
 8007652:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8007654:	4804      	ldr	r0, [pc, #16]	@ (8007668 <MX_I2C2_Init+0x50>)
 8007656:	f001 fabf 	bl	8008bd8 <HAL_I2C_Init>
 800765a:	4603      	mov	r3, r0
 800765c:	2b00      	cmp	r3, #0
 800765e:	d001      	beq.n	8007664 <MX_I2C2_Init+0x4c>
		Error_Handler();
 8007660:	f000 f8c6 	bl	80077f0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 8007664:	bf00      	nop
 8007666:	bd80      	pop	{r7, pc}
 8007668:	200000b4 	.word	0x200000b4
 800766c:	40005800 	.word	0x40005800
 8007670:	000186a0 	.word	0x000186a0

08007674 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8007674:	b580      	push	{r7, lr}
 8007676:	b092      	sub	sp, #72	@ 0x48
 8007678:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800767a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800767e:	2200      	movs	r2, #0
 8007680:	601a      	str	r2, [r3, #0]
 8007682:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8007684:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007688:	2200      	movs	r2, #0
 800768a:	601a      	str	r2, [r3, #0]
 800768c:	605a      	str	r2, [r3, #4]
 800768e:	609a      	str	r2, [r3, #8]
 8007690:	60da      	str	r2, [r3, #12]
 8007692:	611a      	str	r2, [r3, #16]
 8007694:	615a      	str	r2, [r3, #20]
 8007696:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8007698:	1d3b      	adds	r3, r7, #4
 800769a:	2220      	movs	r2, #32
 800769c:	2100      	movs	r1, #0
 800769e:	4618      	mov	r0, r3
 80076a0:	f004 f93a 	bl	800b918 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80076a4:	4b33      	ldr	r3, [pc, #204]	@ (8007774 <MX_TIM1_Init+0x100>)
 80076a6:	4a34      	ldr	r2, [pc, #208]	@ (8007778 <MX_TIM1_Init+0x104>)
 80076a8:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 71;
 80076aa:	4b32      	ldr	r3, [pc, #200]	@ (8007774 <MX_TIM1_Init+0x100>)
 80076ac:	2247      	movs	r2, #71	@ 0x47
 80076ae:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80076b0:	4b30      	ldr	r3, [pc, #192]	@ (8007774 <MX_TIM1_Init+0x100>)
 80076b2:	2200      	movs	r2, #0
 80076b4:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 19999;
 80076b6:	4b2f      	ldr	r3, [pc, #188]	@ (8007774 <MX_TIM1_Init+0x100>)
 80076b8:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80076bc:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80076be:	4b2d      	ldr	r3, [pc, #180]	@ (8007774 <MX_TIM1_Init+0x100>)
 80076c0:	2200      	movs	r2, #0
 80076c2:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80076c4:	4b2b      	ldr	r3, [pc, #172]	@ (8007774 <MX_TIM1_Init+0x100>)
 80076c6:	2200      	movs	r2, #0
 80076c8:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80076ca:	4b2a      	ldr	r3, [pc, #168]	@ (8007774 <MX_TIM1_Init+0x100>)
 80076cc:	2200      	movs	r2, #0
 80076ce:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 80076d0:	4828      	ldr	r0, [pc, #160]	@ (8007774 <MX_TIM1_Init+0x100>)
 80076d2:	f003 fbe7 	bl	800aea4 <HAL_TIM_PWM_Init>
 80076d6:	4603      	mov	r3, r0
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d001      	beq.n	80076e0 <MX_TIM1_Init+0x6c>
		Error_Handler();
 80076dc:	f000 f888 	bl	80077f0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80076e0:	2300      	movs	r3, #0
 80076e2:	643b      	str	r3, [r7, #64]	@ 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80076e4:	2300      	movs	r3, #0
 80076e6:	647b      	str	r3, [r7, #68]	@ 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80076e8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80076ec:	4619      	mov	r1, r3
 80076ee:	4821      	ldr	r0, [pc, #132]	@ (8007774 <MX_TIM1_Init+0x100>)
 80076f0:	f003 ffa6 	bl	800b640 <HAL_TIMEx_MasterConfigSynchronization>
 80076f4:	4603      	mov	r3, r0
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d001      	beq.n	80076fe <MX_TIM1_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 80076fa:	f000 f879 	bl	80077f0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80076fe:	2360      	movs	r3, #96	@ 0x60
 8007700:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfigOC.Pulse = 1000;
 8007702:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007706:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007708:	2300      	movs	r3, #0
 800770a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800770c:	2300      	movs	r3, #0
 800770e:	633b      	str	r3, [r7, #48]	@ 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007710:	2300      	movs	r3, #0
 8007712:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8007714:	2300      	movs	r3, #0
 8007716:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8007718:	2300      	movs	r3, #0
 800771a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 800771c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007720:	2200      	movs	r2, #0
 8007722:	4619      	mov	r1, r3
 8007724:	4813      	ldr	r0, [pc, #76]	@ (8007774 <MX_TIM1_Init+0x100>)
 8007726:	f003 fcaf 	bl	800b088 <HAL_TIM_PWM_ConfigChannel>
 800772a:	4603      	mov	r3, r0
 800772c:	2b00      	cmp	r3, #0
 800772e:	d001      	beq.n	8007734 <MX_TIM1_Init+0xc0>
			!= HAL_OK) {
		Error_Handler();
 8007730:	f000 f85e 	bl	80077f0 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8007734:	2300      	movs	r3, #0
 8007736:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8007738:	2300      	movs	r3, #0
 800773a:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800773c:	2300      	movs	r3, #0
 800773e:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8007740:	2300      	movs	r3, #0
 8007742:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8007744:	2300      	movs	r3, #0
 8007746:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8007748:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800774c:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800774e:	2300      	movs	r3, #0
 8007750:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8007752:	1d3b      	adds	r3, r7, #4
 8007754:	4619      	mov	r1, r3
 8007756:	4807      	ldr	r0, [pc, #28]	@ (8007774 <MX_TIM1_Init+0x100>)
 8007758:	f003 ffd0 	bl	800b6fc <HAL_TIMEx_ConfigBreakDeadTime>
 800775c:	4603      	mov	r3, r0
 800775e:	2b00      	cmp	r3, #0
 8007760:	d001      	beq.n	8007766 <MX_TIM1_Init+0xf2>
			!= HAL_OK) {
		Error_Handler();
 8007762:	f000 f845 	bl	80077f0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8007766:	4803      	ldr	r0, [pc, #12]	@ (8007774 <MX_TIM1_Init+0x100>)
 8007768:	f000 f8d8 	bl	800791c <HAL_TIM_MspPostInit>

}
 800776c:	bf00      	nop
 800776e:	3748      	adds	r7, #72	@ 0x48
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}
 8007774:	20000108 	.word	0x20000108
 8007778:	40012c00 	.word	0x40012c00

0800777c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800777c:	b480      	push	{r7}
 800777e:	b085      	sub	sp, #20
 8007780:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8007782:	4b1a      	ldr	r3, [pc, #104]	@ (80077ec <MX_GPIO_Init+0x70>)
 8007784:	699b      	ldr	r3, [r3, #24]
 8007786:	4a19      	ldr	r2, [pc, #100]	@ (80077ec <MX_GPIO_Init+0x70>)
 8007788:	f043 0320 	orr.w	r3, r3, #32
 800778c:	6193      	str	r3, [r2, #24]
 800778e:	4b17      	ldr	r3, [pc, #92]	@ (80077ec <MX_GPIO_Init+0x70>)
 8007790:	699b      	ldr	r3, [r3, #24]
 8007792:	f003 0320 	and.w	r3, r3, #32
 8007796:	60fb      	str	r3, [r7, #12]
 8007798:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800779a:	4b14      	ldr	r3, [pc, #80]	@ (80077ec <MX_GPIO_Init+0x70>)
 800779c:	699b      	ldr	r3, [r3, #24]
 800779e:	4a13      	ldr	r2, [pc, #76]	@ (80077ec <MX_GPIO_Init+0x70>)
 80077a0:	f043 0308 	orr.w	r3, r3, #8
 80077a4:	6193      	str	r3, [r2, #24]
 80077a6:	4b11      	ldr	r3, [pc, #68]	@ (80077ec <MX_GPIO_Init+0x70>)
 80077a8:	699b      	ldr	r3, [r3, #24]
 80077aa:	f003 0308 	and.w	r3, r3, #8
 80077ae:	60bb      	str	r3, [r7, #8]
 80077b0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80077b2:	4b0e      	ldr	r3, [pc, #56]	@ (80077ec <MX_GPIO_Init+0x70>)
 80077b4:	699b      	ldr	r3, [r3, #24]
 80077b6:	4a0d      	ldr	r2, [pc, #52]	@ (80077ec <MX_GPIO_Init+0x70>)
 80077b8:	f043 0304 	orr.w	r3, r3, #4
 80077bc:	6193      	str	r3, [r2, #24]
 80077be:	4b0b      	ldr	r3, [pc, #44]	@ (80077ec <MX_GPIO_Init+0x70>)
 80077c0:	699b      	ldr	r3, [r3, #24]
 80077c2:	f003 0304 	and.w	r3, r3, #4
 80077c6:	607b      	str	r3, [r7, #4]
 80077c8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80077ca:	4b08      	ldr	r3, [pc, #32]	@ (80077ec <MX_GPIO_Init+0x70>)
 80077cc:	699b      	ldr	r3, [r3, #24]
 80077ce:	4a07      	ldr	r2, [pc, #28]	@ (80077ec <MX_GPIO_Init+0x70>)
 80077d0:	f043 0310 	orr.w	r3, r3, #16
 80077d4:	6193      	str	r3, [r2, #24]
 80077d6:	4b05      	ldr	r3, [pc, #20]	@ (80077ec <MX_GPIO_Init+0x70>)
 80077d8:	699b      	ldr	r3, [r3, #24]
 80077da:	f003 0310 	and.w	r3, r3, #16
 80077de:	603b      	str	r3, [r7, #0]
 80077e0:	683b      	ldr	r3, [r7, #0]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80077e2:	bf00      	nop
 80077e4:	3714      	adds	r7, #20
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bc80      	pop	{r7}
 80077ea:	4770      	bx	lr
 80077ec:	40021000 	.word	0x40021000

080077f0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80077f0:	b480      	push	{r7}
 80077f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80077f4:	b672      	cpsid	i
}
 80077f6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80077f8:	bf00      	nop
 80077fa:	e7fd      	b.n	80077f8 <Error_Handler+0x8>

080077fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b085      	sub	sp, #20
 8007800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8007802:	4b15      	ldr	r3, [pc, #84]	@ (8007858 <HAL_MspInit+0x5c>)
 8007804:	699b      	ldr	r3, [r3, #24]
 8007806:	4a14      	ldr	r2, [pc, #80]	@ (8007858 <HAL_MspInit+0x5c>)
 8007808:	f043 0301 	orr.w	r3, r3, #1
 800780c:	6193      	str	r3, [r2, #24]
 800780e:	4b12      	ldr	r3, [pc, #72]	@ (8007858 <HAL_MspInit+0x5c>)
 8007810:	699b      	ldr	r3, [r3, #24]
 8007812:	f003 0301 	and.w	r3, r3, #1
 8007816:	60bb      	str	r3, [r7, #8]
 8007818:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800781a:	4b0f      	ldr	r3, [pc, #60]	@ (8007858 <HAL_MspInit+0x5c>)
 800781c:	69db      	ldr	r3, [r3, #28]
 800781e:	4a0e      	ldr	r2, [pc, #56]	@ (8007858 <HAL_MspInit+0x5c>)
 8007820:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007824:	61d3      	str	r3, [r2, #28]
 8007826:	4b0c      	ldr	r3, [pc, #48]	@ (8007858 <HAL_MspInit+0x5c>)
 8007828:	69db      	ldr	r3, [r3, #28]
 800782a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800782e:	607b      	str	r3, [r7, #4]
 8007830:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8007832:	4b0a      	ldr	r3, [pc, #40]	@ (800785c <HAL_MspInit+0x60>)
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	60fb      	str	r3, [r7, #12]
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800783e:	60fb      	str	r3, [r7, #12]
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007846:	60fb      	str	r3, [r7, #12]
 8007848:	4a04      	ldr	r2, [pc, #16]	@ (800785c <HAL_MspInit+0x60>)
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800784e:	bf00      	nop
 8007850:	3714      	adds	r7, #20
 8007852:	46bd      	mov	sp, r7
 8007854:	bc80      	pop	{r7}
 8007856:	4770      	bx	lr
 8007858:	40021000 	.word	0x40021000
 800785c:	40010000 	.word	0x40010000

08007860 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b088      	sub	sp, #32
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007868:	f107 0310 	add.w	r3, r7, #16
 800786c:	2200      	movs	r2, #0
 800786e:	601a      	str	r2, [r3, #0]
 8007870:	605a      	str	r2, [r3, #4]
 8007872:	609a      	str	r2, [r3, #8]
 8007874:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4a16      	ldr	r2, [pc, #88]	@ (80078d4 <HAL_I2C_MspInit+0x74>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d124      	bne.n	80078ca <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007880:	4b15      	ldr	r3, [pc, #84]	@ (80078d8 <HAL_I2C_MspInit+0x78>)
 8007882:	699b      	ldr	r3, [r3, #24]
 8007884:	4a14      	ldr	r2, [pc, #80]	@ (80078d8 <HAL_I2C_MspInit+0x78>)
 8007886:	f043 0308 	orr.w	r3, r3, #8
 800788a:	6193      	str	r3, [r2, #24]
 800788c:	4b12      	ldr	r3, [pc, #72]	@ (80078d8 <HAL_I2C_MspInit+0x78>)
 800788e:	699b      	ldr	r3, [r3, #24]
 8007890:	f003 0308 	and.w	r3, r3, #8
 8007894:	60fb      	str	r3, [r7, #12]
 8007896:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8007898:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800789c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800789e:	2312      	movs	r3, #18
 80078a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80078a2:	2303      	movs	r3, #3
 80078a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80078a6:	f107 0310 	add.w	r3, r7, #16
 80078aa:	4619      	mov	r1, r3
 80078ac:	480b      	ldr	r0, [pc, #44]	@ (80078dc <HAL_I2C_MspInit+0x7c>)
 80078ae:	f000 fff7 	bl	80088a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80078b2:	4b09      	ldr	r3, [pc, #36]	@ (80078d8 <HAL_I2C_MspInit+0x78>)
 80078b4:	69db      	ldr	r3, [r3, #28]
 80078b6:	4a08      	ldr	r2, [pc, #32]	@ (80078d8 <HAL_I2C_MspInit+0x78>)
 80078b8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80078bc:	61d3      	str	r3, [r2, #28]
 80078be:	4b06      	ldr	r3, [pc, #24]	@ (80078d8 <HAL_I2C_MspInit+0x78>)
 80078c0:	69db      	ldr	r3, [r3, #28]
 80078c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80078c6:	60bb      	str	r3, [r7, #8]
 80078c8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80078ca:	bf00      	nop
 80078cc:	3720      	adds	r7, #32
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}
 80078d2:	bf00      	nop
 80078d4:	40005800 	.word	0x40005800
 80078d8:	40021000 	.word	0x40021000
 80078dc:	40010c00 	.word	0x40010c00

080078e0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b085      	sub	sp, #20
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a09      	ldr	r2, [pc, #36]	@ (8007914 <HAL_TIM_PWM_MspInit+0x34>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d10b      	bne.n	800790a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80078f2:	4b09      	ldr	r3, [pc, #36]	@ (8007918 <HAL_TIM_PWM_MspInit+0x38>)
 80078f4:	699b      	ldr	r3, [r3, #24]
 80078f6:	4a08      	ldr	r2, [pc, #32]	@ (8007918 <HAL_TIM_PWM_MspInit+0x38>)
 80078f8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80078fc:	6193      	str	r3, [r2, #24]
 80078fe:	4b06      	ldr	r3, [pc, #24]	@ (8007918 <HAL_TIM_PWM_MspInit+0x38>)
 8007900:	699b      	ldr	r3, [r3, #24]
 8007902:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007906:	60fb      	str	r3, [r7, #12]
 8007908:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800790a:	bf00      	nop
 800790c:	3714      	adds	r7, #20
 800790e:	46bd      	mov	sp, r7
 8007910:	bc80      	pop	{r7}
 8007912:	4770      	bx	lr
 8007914:	40012c00 	.word	0x40012c00
 8007918:	40021000 	.word	0x40021000

0800791c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b088      	sub	sp, #32
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007924:	f107 0310 	add.w	r3, r7, #16
 8007928:	2200      	movs	r2, #0
 800792a:	601a      	str	r2, [r3, #0]
 800792c:	605a      	str	r2, [r3, #4]
 800792e:	609a      	str	r2, [r3, #8]
 8007930:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4a10      	ldr	r2, [pc, #64]	@ (8007978 <HAL_TIM_MspPostInit+0x5c>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d118      	bne.n	800796e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800793c:	4b0f      	ldr	r3, [pc, #60]	@ (800797c <HAL_TIM_MspPostInit+0x60>)
 800793e:	699b      	ldr	r3, [r3, #24]
 8007940:	4a0e      	ldr	r2, [pc, #56]	@ (800797c <HAL_TIM_MspPostInit+0x60>)
 8007942:	f043 0304 	orr.w	r3, r3, #4
 8007946:	6193      	str	r3, [r2, #24]
 8007948:	4b0c      	ldr	r3, [pc, #48]	@ (800797c <HAL_TIM_MspPostInit+0x60>)
 800794a:	699b      	ldr	r3, [r3, #24]
 800794c:	f003 0304 	and.w	r3, r3, #4
 8007950:	60fb      	str	r3, [r7, #12]
 8007952:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8007954:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007958:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800795a:	2302      	movs	r3, #2
 800795c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800795e:	2302      	movs	r3, #2
 8007960:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007962:	f107 0310 	add.w	r3, r7, #16
 8007966:	4619      	mov	r1, r3
 8007968:	4805      	ldr	r0, [pc, #20]	@ (8007980 <HAL_TIM_MspPostInit+0x64>)
 800796a:	f000 ff99 	bl	80088a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800796e:	bf00      	nop
 8007970:	3720      	adds	r7, #32
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}
 8007976:	bf00      	nop
 8007978:	40012c00 	.word	0x40012c00
 800797c:	40021000 	.word	0x40021000
 8007980:	40010800 	.word	0x40010800

08007984 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007984:	b480      	push	{r7}
 8007986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8007988:	bf00      	nop
 800798a:	e7fd      	b.n	8007988 <NMI_Handler+0x4>

0800798c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800798c:	b480      	push	{r7}
 800798e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007990:	bf00      	nop
 8007992:	e7fd      	b.n	8007990 <HardFault_Handler+0x4>

08007994 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007994:	b480      	push	{r7}
 8007996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007998:	bf00      	nop
 800799a:	e7fd      	b.n	8007998 <MemManage_Handler+0x4>

0800799c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800799c:	b480      	push	{r7}
 800799e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80079a0:	bf00      	nop
 80079a2:	e7fd      	b.n	80079a0 <BusFault_Handler+0x4>

080079a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80079a4:	b480      	push	{r7}
 80079a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80079a8:	bf00      	nop
 80079aa:	e7fd      	b.n	80079a8 <UsageFault_Handler+0x4>

080079ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80079ac:	b480      	push	{r7}
 80079ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80079b0:	bf00      	nop
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bc80      	pop	{r7}
 80079b6:	4770      	bx	lr

080079b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80079b8:	b480      	push	{r7}
 80079ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80079bc:	bf00      	nop
 80079be:	46bd      	mov	sp, r7
 80079c0:	bc80      	pop	{r7}
 80079c2:	4770      	bx	lr

080079c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80079c4:	b480      	push	{r7}
 80079c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80079c8:	bf00      	nop
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bc80      	pop	{r7}
 80079ce:	4770      	bx	lr

080079d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80079d4:	f000 fe40 	bl	8008658 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80079d8:	bf00      	nop
 80079da:	bd80      	pop	{r7, pc}

080079dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b086      	sub	sp, #24
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80079e4:	4a14      	ldr	r2, [pc, #80]	@ (8007a38 <_sbrk+0x5c>)
 80079e6:	4b15      	ldr	r3, [pc, #84]	@ (8007a3c <_sbrk+0x60>)
 80079e8:	1ad3      	subs	r3, r2, r3
 80079ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80079f0:	4b13      	ldr	r3, [pc, #76]	@ (8007a40 <_sbrk+0x64>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d102      	bne.n	80079fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80079f8:	4b11      	ldr	r3, [pc, #68]	@ (8007a40 <_sbrk+0x64>)
 80079fa:	4a12      	ldr	r2, [pc, #72]	@ (8007a44 <_sbrk+0x68>)
 80079fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80079fe:	4b10      	ldr	r3, [pc, #64]	@ (8007a40 <_sbrk+0x64>)
 8007a00:	681a      	ldr	r2, [r3, #0]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	4413      	add	r3, r2
 8007a06:	693a      	ldr	r2, [r7, #16]
 8007a08:	429a      	cmp	r2, r3
 8007a0a:	d207      	bcs.n	8007a1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007a0c:	f003 ff8c 	bl	800b928 <__errno>
 8007a10:	4603      	mov	r3, r0
 8007a12:	220c      	movs	r2, #12
 8007a14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007a16:	f04f 33ff 	mov.w	r3, #4294967295
 8007a1a:	e009      	b.n	8007a30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007a1c:	4b08      	ldr	r3, [pc, #32]	@ (8007a40 <_sbrk+0x64>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007a22:	4b07      	ldr	r3, [pc, #28]	@ (8007a40 <_sbrk+0x64>)
 8007a24:	681a      	ldr	r2, [r3, #0]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	4413      	add	r3, r2
 8007a2a:	4a05      	ldr	r2, [pc, #20]	@ (8007a40 <_sbrk+0x64>)
 8007a2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3718      	adds	r7, #24
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}
 8007a38:	20005000 	.word	0x20005000
 8007a3c:	00000400 	.word	0x00000400
 8007a40:	20000198 	.word	0x20000198
 8007a44:	200002e8 	.word	0x200002e8

08007a48 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007a4c:	bf00      	nop
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bc80      	pop	{r7}
 8007a52:	4770      	bx	lr

08007a54 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8007a54:	f7ff fff8 	bl	8007a48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007a58:	480b      	ldr	r0, [pc, #44]	@ (8007a88 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8007a5a:	490c      	ldr	r1, [pc, #48]	@ (8007a8c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8007a5c:	4a0c      	ldr	r2, [pc, #48]	@ (8007a90 <LoopFillZerobss+0x16>)
  movs r3, #0
 8007a5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007a60:	e002      	b.n	8007a68 <LoopCopyDataInit>

08007a62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007a62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007a64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007a66:	3304      	adds	r3, #4

08007a68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007a68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007a6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007a6c:	d3f9      	bcc.n	8007a62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007a6e:	4a09      	ldr	r2, [pc, #36]	@ (8007a94 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8007a70:	4c09      	ldr	r4, [pc, #36]	@ (8007a98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8007a72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007a74:	e001      	b.n	8007a7a <LoopFillZerobss>

08007a76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007a76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007a78:	3204      	adds	r2, #4

08007a7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007a7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007a7c:	d3fb      	bcc.n	8007a76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8007a7e:	f003 ff59 	bl	800b934 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8007a82:	f7f8 fb75 	bl	8000170 <main>
  bx lr
 8007a86:	4770      	bx	lr
  ldr r0, =_sdata
 8007a88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007a8c:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8007a90:	0800c638 	.word	0x0800c638
  ldr r2, =_sbss
 8007a94:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8007a98:	200002e8 	.word	0x200002e8

08007a9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007a9c:	e7fe      	b.n	8007a9c <ADC1_2_IRQHandler>
	...

08007aa0 <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 8007aa0:	b480      	push	{r7}
 8007aa2:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8007aa4:	4b14      	ldr	r3, [pc, #80]	@ (8007af8 <DWT_Delay_Init+0x58>)
 8007aa6:	68db      	ldr	r3, [r3, #12]
 8007aa8:	4a13      	ldr	r2, [pc, #76]	@ (8007af8 <DWT_Delay_Init+0x58>)
 8007aaa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007aae:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8007ab0:	4b11      	ldr	r3, [pc, #68]	@ (8007af8 <DWT_Delay_Init+0x58>)
 8007ab2:	68db      	ldr	r3, [r3, #12]
 8007ab4:	4a10      	ldr	r2, [pc, #64]	@ (8007af8 <DWT_Delay_Init+0x58>)
 8007ab6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007aba:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8007abc:	4b0f      	ldr	r3, [pc, #60]	@ (8007afc <DWT_Delay_Init+0x5c>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a0e      	ldr	r2, [pc, #56]	@ (8007afc <DWT_Delay_Init+0x5c>)
 8007ac2:	f023 0301 	bic.w	r3, r3, #1
 8007ac6:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8007ac8:	4b0c      	ldr	r3, [pc, #48]	@ (8007afc <DWT_Delay_Init+0x5c>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a0b      	ldr	r2, [pc, #44]	@ (8007afc <DWT_Delay_Init+0x5c>)
 8007ace:	f043 0301 	orr.w	r3, r3, #1
 8007ad2:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8007ad4:	4b09      	ldr	r3, [pc, #36]	@ (8007afc <DWT_Delay_Init+0x5c>)
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8007ada:	bf00      	nop
     __ASM volatile ("NOP");
 8007adc:	bf00      	nop
  __ASM volatile ("NOP");
 8007ade:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8007ae0:	4b06      	ldr	r3, [pc, #24]	@ (8007afc <DWT_Delay_Init+0x5c>)
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d001      	beq.n	8007aec <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8007ae8:	2300      	movs	r3, #0
 8007aea:	e000      	b.n	8007aee <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8007aec:	2301      	movs	r3, #1
  }
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bc80      	pop	{r7}
 8007af4:	4770      	bx	lr
 8007af6:	bf00      	nop
 8007af8:	e000edf0 	.word	0xe000edf0
 8007afc:	e0001000 	.word	0xe0001000

08007b00 <eeprom24c32_init>:

#define EEPROM_I2C_TIMEOUT 100

//initializing the eeprom
eeprom_state_t eeprom24c32_init(eeprom24c32_t *eeprom,
		I2C_HandleTypeDef *i2c_bus) {
 8007b00:	b480      	push	{r7}
 8007b02:	b085      	sub	sp, #20
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	6039      	str	r1, [r7, #0]

	uint8_t status = 1;
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	73fb      	strb	r3, [r7, #15]
	eeprom->i2c_bus = i2c_bus;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	683a      	ldr	r2, [r7, #0]
 8007b12:	62da      	str	r2, [r3, #44]	@ 0x2c

	// Clear buffer and write to EEPROM
	eeprom->i2c_buffer[0] = 0x00;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2200      	movs	r2, #0
 8007b18:	601a      	str	r2, [r3, #0]

	// Return the appropriate status
	return (status == 1) ? eeprom_OK : eeprom_NOK;
 8007b1a:	7bfb      	ldrb	r3, [r7, #15]
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	bf14      	ite	ne
 8007b20:	2301      	movne	r3, #1
 8007b22:	2300      	moveq	r3, #0
 8007b24:	b2db      	uxtb	r3, r3

}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3714      	adds	r7, #20
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bc80      	pop	{r7}
 8007b2e:	4770      	bx	lr

08007b30 <eeprom24c32_write>:
 }
 */

//write to the eeprom function
uint8_t eeprom24c32_write(eeprom24c32_t *eeprom, uint8_t data,
		uint16_t mem_address) {
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b088      	sub	sp, #32
 8007b34:	af04      	add	r7, sp, #16
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	460b      	mov	r3, r1
 8007b3a:	70fb      	strb	r3, [r7, #3]
 8007b3c:	4613      	mov	r3, r2
 8007b3e:	803b      	strh	r3, [r7, #0]
	HAL_StatusTypeDef status;
	// Write one byte to EEPROM
	status = HAL_I2C_Mem_Write(eeprom->i2c_bus, (eeprom_SLA << 1), mem_address,
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8007b44:	883a      	ldrh	r2, [r7, #0]
 8007b46:	2364      	movs	r3, #100	@ 0x64
 8007b48:	9302      	str	r3, [sp, #8]
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	9301      	str	r3, [sp, #4]
 8007b4e:	1cfb      	adds	r3, r7, #3
 8007b50:	9300      	str	r3, [sp, #0]
 8007b52:	2310      	movs	r3, #16
 8007b54:	21a0      	movs	r1, #160	@ 0xa0
 8007b56:	f001 fced 	bl	8009534 <HAL_I2C_Mem_Write>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	73fb      	strb	r3, [r7, #15]
	I2C_MEMADD_SIZE_16BIT, &data, 1, EEPROM_I2C_TIMEOUT);
	HAL_Delay(5);  // EEPROM write delay
 8007b5e:	2005      	movs	r0, #5
 8007b60:	f000 fd96 	bl	8008690 <HAL_Delay>
	return (status == HAL_OK) ? 1 : 0;
 8007b64:	7bfb      	ldrb	r3, [r7, #15]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	bf0c      	ite	eq
 8007b6a:	2301      	moveq	r3, #1
 8007b6c:	2300      	movne	r3, #0
 8007b6e:	b2db      	uxtb	r3, r3
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	3710      	adds	r7, #16
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}

08007b78 <eeprom24c32_read>:

//read data from the eeprom
uint8_t eeprom24c32_read(eeprom24c32_t *eeprom, uint8_t *data,
		uint16_t mem_address) {
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b08a      	sub	sp, #40	@ 0x28
 8007b7c:	af04      	add	r7, sp, #16
 8007b7e:	60f8      	str	r0, [r7, #12]
 8007b80:	60b9      	str	r1, [r7, #8]
 8007b82:	4613      	mov	r3, r2
 8007b84:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef status;
	// Read one byte from EEPROM
	status = HAL_I2C_Mem_Read(eeprom->i2c_bus, (eeprom_SLA << 1), mem_address,
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8007b8a:	88fa      	ldrh	r2, [r7, #6]
 8007b8c:	2364      	movs	r3, #100	@ 0x64
 8007b8e:	9302      	str	r3, [sp, #8]
 8007b90:	2301      	movs	r3, #1
 8007b92:	9301      	str	r3, [sp, #4]
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	9300      	str	r3, [sp, #0]
 8007b98:	2310      	movs	r3, #16
 8007b9a:	21a0      	movs	r1, #160	@ 0xa0
 8007b9c:	f001 fdc4 	bl	8009728 <HAL_I2C_Mem_Read>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	75fb      	strb	r3, [r7, #23]
	I2C_MEMADD_SIZE_16BIT, data, 1, EEPROM_I2C_TIMEOUT);
	return (status == HAL_OK) ? 1 : 0;
 8007ba4:	7dfb      	ldrb	r3, [r7, #23]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	bf0c      	ite	eq
 8007baa:	2301      	moveq	r3, #1
 8007bac:	2300      	movne	r3, #0
 8007bae:	b2db      	uxtb	r3, r3
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3718      	adds	r7, #24
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <I2C__write>:
#define dev_SLA	0b1101000

#define start_address 0b00000000

static uint8_t I2C__write(uint8_t slave, uint8_t *data, uint8_t len,
		ds1307_t *clock) {
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b088      	sub	sp, #32
 8007bbc:	af02      	add	r7, sp, #8
 8007bbe:	60b9      	str	r1, [r7, #8]
 8007bc0:	607b      	str	r3, [r7, #4]
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	73fb      	strb	r3, [r7, #15]
 8007bc6:	4613      	mov	r3, r2
 8007bc8:	73bb      	strb	r3, [r7, #14]

	//master send data to the slave (RTC)
	HAL_StatusTypeDef OK = HAL_I2C_Master_Transmit(clock->i2c_bus,
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6958      	ldr	r0, [r3, #20]
 8007bce:	7bbb      	ldrb	r3, [r7, #14]
 8007bd0:	b29b      	uxth	r3, r3
 8007bd2:	2264      	movs	r2, #100	@ 0x64
 8007bd4:	9200      	str	r2, [sp, #0]
 8007bd6:	68ba      	ldr	r2, [r7, #8]
 8007bd8:	21d0      	movs	r1, #208	@ 0xd0
 8007bda:	f001 f941 	bl	8008e60 <HAL_I2C_Master_Transmit>
 8007bde:	4603      	mov	r3, r0
 8007be0:	75fb      	strb	r3, [r7, #23]
			(dev_SLA << 1), data, len, 100);

	//check for the acknowledgment flag -> if 1 returned -> not acknowledged
	return (OK == HAL_OK) ? 1 : 0;
 8007be2:	7dfb      	ldrb	r3, [r7, #23]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	bf0c      	ite	eq
 8007be8:	2301      	moveq	r3, #1
 8007bea:	2300      	movne	r3, #0
 8007bec:	b2db      	uxtb	r3, r3
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3718      	adds	r7, #24
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}

08007bf6 <I2C__read>:

static uint8_t I2C__read(uint8_t slave, uint8_t *data, uint8_t len,
		ds1307_t *clock) {
 8007bf6:	b580      	push	{r7, lr}
 8007bf8:	b088      	sub	sp, #32
 8007bfa:	af02      	add	r7, sp, #8
 8007bfc:	60b9      	str	r1, [r7, #8]
 8007bfe:	607b      	str	r3, [r7, #4]
 8007c00:	4603      	mov	r3, r0
 8007c02:	73fb      	strb	r3, [r7, #15]
 8007c04:	4613      	mov	r3, r2
 8007c06:	73bb      	strb	r3, [r7, #14]

	//master receive data from the slave (RTC)
	HAL_StatusTypeDef OK = HAL_I2C_Master_Receive(clock->i2c_bus,
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6958      	ldr	r0, [r3, #20]
 8007c0c:	7bbb      	ldrb	r3, [r7, #14]
 8007c0e:	b29b      	uxth	r3, r3
 8007c10:	2264      	movs	r2, #100	@ 0x64
 8007c12:	9200      	str	r2, [sp, #0]
 8007c14:	68ba      	ldr	r2, [r7, #8]
 8007c16:	21d0      	movs	r1, #208	@ 0xd0
 8007c18:	f001 fa20 	bl	800905c <HAL_I2C_Master_Receive>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	75fb      	strb	r3, [r7, #23]
			(dev_SLA << 1), data, len, 100);

	//check for the acknowledgment flag -> if 1 returned -> not acknowledged
	return (OK == HAL_OK) ? 1 : 0;
 8007c20:	7dfb      	ldrb	r3, [r7, #23]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	bf0c      	ite	eq
 8007c26:	2301      	moveq	r3, #1
 8007c28:	2300      	movne	r3, #0
 8007c2a:	b2db      	uxtb	r3, r3
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3718      	adds	r7, #24
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}

08007c34 <BCD2DEC>:

uint8_t BCD2DEC(uint8_t bcd) {
 8007c34:	b480      	push	{r7}
 8007c36:	b083      	sub	sp, #12
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	71fb      	strb	r3, [r7, #7]

	return ((bcd >> 4) * 10 + (0xF & bcd));
 8007c3e:	79fb      	ldrb	r3, [r7, #7]
 8007c40:	091b      	lsrs	r3, r3, #4
 8007c42:	b2db      	uxtb	r3, r3
 8007c44:	461a      	mov	r2, r3
 8007c46:	0092      	lsls	r2, r2, #2
 8007c48:	4413      	add	r3, r2
 8007c4a:	005b      	lsls	r3, r3, #1
 8007c4c:	b2da      	uxtb	r2, r3
 8007c4e:	79fb      	ldrb	r3, [r7, #7]
 8007c50:	f003 030f 	and.w	r3, r3, #15
 8007c54:	b2db      	uxtb	r3, r3
 8007c56:	4413      	add	r3, r2
 8007c58:	b2db      	uxtb	r3, r3

}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	370c      	adds	r7, #12
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bc80      	pop	{r7}
 8007c62:	4770      	bx	lr

08007c64 <DEC2BCD>:

uint8_t DEC2BCD(uint8_t dec) {
 8007c64:	b480      	push	{r7}
 8007c66:	b085      	sub	sp, #20
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	71fb      	strb	r3, [r7, #7]

	uint8_t div = dec / 10;
 8007c6e:	79fb      	ldrb	r3, [r7, #7]
 8007c70:	4a0e      	ldr	r2, [pc, #56]	@ (8007cac <DEC2BCD+0x48>)
 8007c72:	fba2 2303 	umull	r2, r3, r2, r3
 8007c76:	08db      	lsrs	r3, r3, #3
 8007c78:	73fb      	strb	r3, [r7, #15]
	uint8_t rem = dec % 10;
 8007c7a:	79fa      	ldrb	r2, [r7, #7]
 8007c7c:	4b0b      	ldr	r3, [pc, #44]	@ (8007cac <DEC2BCD+0x48>)
 8007c7e:	fba3 1302 	umull	r1, r3, r3, r2
 8007c82:	08d9      	lsrs	r1, r3, #3
 8007c84:	460b      	mov	r3, r1
 8007c86:	009b      	lsls	r3, r3, #2
 8007c88:	440b      	add	r3, r1
 8007c8a:	005b      	lsls	r3, r3, #1
 8007c8c:	1ad3      	subs	r3, r2, r3
 8007c8e:	73bb      	strb	r3, [r7, #14]

	return (div << 4 | rem);
 8007c90:	7bfb      	ldrb	r3, [r7, #15]
 8007c92:	011b      	lsls	r3, r3, #4
 8007c94:	b25a      	sxtb	r2, r3
 8007c96:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	b25b      	sxtb	r3, r3
 8007c9e:	b2db      	uxtb	r3, r3
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	3714      	adds	r7, #20
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bc80      	pop	{r7}
 8007ca8:	4770      	bx	lr
 8007caa:	bf00      	nop
 8007cac:	cccccccd 	.word	0xcccccccd

08007cb0 <Ds1307_init>:

//initializing the RTC
DS1307_state_t Ds1307_init(ds1307_t *clock, I2C_HandleTypeDef *i2c_bus) {
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b084      	sub	sp, #16
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
 8007cb8:	6039      	str	r1, [r7, #0]

	uint8_t status = 1;
 8007cba:	2301      	movs	r3, #1
 8007cbc:	73fb      	strb	r3, [r7, #15]

	clock->i2c_bus = i2c_bus;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	683a      	ldr	r2, [r7, #0]
 8007cc2:	615a      	str	r2, [r3, #20]

	clock->i2c_buffer[0] = 0x00;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	701a      	strb	r2, [r3, #0]
	status &= I2C__write(dev_SLA, clock->i2c_buffer, 1, clock);
 8007cca:	6879      	ldr	r1, [r7, #4]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2201      	movs	r2, #1
 8007cd0:	2068      	movs	r0, #104	@ 0x68
 8007cd2:	f7ff ff71 	bl	8007bb8 <I2C__write>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	461a      	mov	r2, r3
 8007cda:	7bfb      	ldrb	r3, [r7, #15]
 8007cdc:	4013      	ands	r3, r2
 8007cde:	73fb      	strb	r3, [r7, #15]

	status &= I2C__read(dev_SLA, clock->i2c_buffer, 1, clock);
 8007ce0:	6879      	ldr	r1, [r7, #4]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2201      	movs	r2, #1
 8007ce6:	2068      	movs	r0, #104	@ 0x68
 8007ce8:	f7ff ff85 	bl	8007bf6 <I2C__read>
 8007cec:	4603      	mov	r3, r0
 8007cee:	461a      	mov	r2, r3
 8007cf0:	7bfb      	ldrb	r3, [r7, #15]
 8007cf2:	4013      	ands	r3, r2
 8007cf4:	73fb      	strb	r3, [r7, #15]

	if (((clock->i2c_buffer[0]) & (1 << 7)) == 0) {
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	781b      	ldrb	r3, [r3, #0]
 8007cfa:	b25b      	sxtb	r3, r3
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	da10      	bge.n	8007d22 <Ds1307_init+0x72>

	} else {

		clock->i2c_buffer[0] = 0x00; 	//reg base address
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2200      	movs	r2, #0
 8007d04:	701a      	strb	r2, [r3, #0]

		clock->i2c_buffer[1] = 0; 		//clock hold bit
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	705a      	strb	r2, [r3, #1]

		status &= I2C__write(dev_SLA, clock->i2c_buffer, 2, clock);
 8007d0c:	6879      	ldr	r1, [r7, #4]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2202      	movs	r2, #2
 8007d12:	2068      	movs	r0, #104	@ 0x68
 8007d14:	f7ff ff50 	bl	8007bb8 <I2C__write>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	461a      	mov	r2, r3
 8007d1c:	7bfb      	ldrb	r3, [r7, #15]
 8007d1e:	4013      	ands	r3, r2
 8007d20:	73fb      	strb	r3, [r7, #15]
	}

	if (status == 1) {
 8007d22:	7bfb      	ldrb	r3, [r7, #15]
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d101      	bne.n	8007d2c <Ds1307_init+0x7c>

		return DS1307_OK;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	e000      	b.n	8007d2e <Ds1307_init+0x7e>
	} else {
		return DS1307_NOK;
 8007d2c:	2301      	movs	r3, #1
	}

}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3710      	adds	r7, #16
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}

08007d36 <Ds1307_set>:

//set the time function
DS1307_state_t Ds1307_set(ds1307_t *clock) {
 8007d36:	b580      	push	{r7, lr}
 8007d38:	b082      	sub	sp, #8
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	6078      	str	r0, [r7, #4]

	clock->i2c_buffer[0] = start_address;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2200      	movs	r2, #0
 8007d42:	701a      	strb	r2, [r3, #0]

	clock->i2c_buffer[1] = DEC2BCD(clock->sec);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	7a1b      	ldrb	r3, [r3, #8]
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f7ff ff8b 	bl	8007c64 <DEC2BCD>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	461a      	mov	r2, r3
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	705a      	strb	r2, [r3, #1]

	clock->i2c_buffer[2] = DEC2BCD(clock->min);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	7a5b      	ldrb	r3, [r3, #9]
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f7ff ff82 	bl	8007c64 <DEC2BCD>
 8007d60:	4603      	mov	r3, r0
 8007d62:	461a      	mov	r2, r3
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	709a      	strb	r2, [r3, #2]

	//in case of PMAM is selected (12H format)
	if (clock->format == 1) {
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	7c5b      	ldrb	r3, [r3, #17]
 8007d6c:	f003 0301 	and.w	r3, r3, #1
 8007d70:	b2db      	uxtb	r3, r3
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d01c      	beq.n	8007db0 <Ds1307_set+0x7a>

		clock->i2c_buffer[3] = DEC2BCD(clock->hour) | ((clock->format) << 6)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	7a9b      	ldrb	r3, [r3, #10]
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f7ff ff72 	bl	8007c64 <DEC2BCD>
 8007d80:	4603      	mov	r3, r0
 8007d82:	b25a      	sxtb	r2, r3
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	7c5b      	ldrb	r3, [r3, #17]
 8007d88:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007d8c:	b2db      	uxtb	r3, r3
 8007d8e:	019b      	lsls	r3, r3, #6
 8007d90:	b25b      	sxtb	r3, r3
 8007d92:	4313      	orrs	r3, r2
 8007d94:	b25a      	sxtb	r2, r3
				| ((clock->AM_PM) << 5);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	7c5b      	ldrb	r3, [r3, #17]
 8007d9a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007d9e:	b2db      	uxtb	r3, r3
 8007da0:	015b      	lsls	r3, r3, #5
 8007da2:	b25b      	sxtb	r3, r3
 8007da4:	4313      	orrs	r3, r2
 8007da6:	b25b      	sxtb	r3, r3
 8007da8:	b2da      	uxtb	r2, r3
		clock->i2c_buffer[3] = DEC2BCD(clock->hour) | ((clock->format) << 6)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	70da      	strb	r2, [r3, #3]
 8007dae:	e012      	b.n	8007dd6 <Ds1307_set+0xa0>
	}

	//case of 24h format
	else {

		clock->i2c_buffer[3] = DEC2BCD(clock->hour) | ((clock->AM_PM) << 5);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	7a9b      	ldrb	r3, [r3, #10]
 8007db4:	4618      	mov	r0, r3
 8007db6:	f7ff ff55 	bl	8007c64 <DEC2BCD>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	b25a      	sxtb	r2, r3
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	7c5b      	ldrb	r3, [r3, #17]
 8007dc2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007dc6:	b2db      	uxtb	r3, r3
 8007dc8:	015b      	lsls	r3, r3, #5
 8007dca:	b25b      	sxtb	r3, r3
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	b25b      	sxtb	r3, r3
 8007dd0:	b2da      	uxtb	r2, r3
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	70da      	strb	r2, [r3, #3]

	}

	clock->i2c_buffer[4] = DEC2BCD(clock->day) & 0x7;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	7adb      	ldrb	r3, [r3, #11]
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f7ff ff42 	bl	8007c64 <DEC2BCD>
 8007de0:	4603      	mov	r3, r0
 8007de2:	f003 0307 	and.w	r3, r3, #7
 8007de6:	b2da      	uxtb	r2, r3
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	711a      	strb	r2, [r3, #4]

	clock->i2c_buffer[5] = DEC2BCD(clock->date) & 0x3f;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	7b1b      	ldrb	r3, [r3, #12]
 8007df0:	4618      	mov	r0, r3
 8007df2:	f7ff ff37 	bl	8007c64 <DEC2BCD>
 8007df6:	4603      	mov	r3, r0
 8007df8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007dfc:	b2da      	uxtb	r2, r3
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	715a      	strb	r2, [r3, #5]

	clock->i2c_buffer[6] = DEC2BCD(clock->month) & 0x1f;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	7b5b      	ldrb	r3, [r3, #13]
 8007e06:	4618      	mov	r0, r3
 8007e08:	f7ff ff2c 	bl	8007c64 <DEC2BCD>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	f003 031f 	and.w	r3, r3, #31
 8007e12:	b2da      	uxtb	r2, r3
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	719a      	strb	r2, [r3, #6]

	clock->i2c_buffer[7] = DEC2BCD(clock->year - 2000);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	89db      	ldrh	r3, [r3, #14]
 8007e1c:	b2db      	uxtb	r3, r3
 8007e1e:	3330      	adds	r3, #48	@ 0x30
 8007e20:	b2db      	uxtb	r3, r3
 8007e22:	4618      	mov	r0, r3
 8007e24:	f7ff ff1e 	bl	8007c64 <DEC2BCD>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	461a      	mov	r2, r3
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	71da      	strb	r2, [r3, #7]

	if (I2C__write(dev_SLA, clock->i2c_buffer, 8, clock) == 1) {
 8007e30:	6879      	ldr	r1, [r7, #4]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2208      	movs	r2, #8
 8007e36:	2068      	movs	r0, #104	@ 0x68
 8007e38:	f7ff febe 	bl	8007bb8 <I2C__write>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	2b01      	cmp	r3, #1
 8007e40:	d101      	bne.n	8007e46 <Ds1307_set+0x110>

		return DS1307_OK;
 8007e42:	2300      	movs	r3, #0
 8007e44:	e000      	b.n	8007e48 <Ds1307_set+0x112>
	} else {

		return DS1307_NOK;
 8007e46:	2301      	movs	r3, #1
	}
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3708      	adds	r7, #8
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <Ds1307_read>:

//read the time function
DS1307_state_t Ds1307_read(ds1307_t *clock) {
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b082      	sub	sp, #8
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
	clock->i2c_buffer[0] = start_address;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	701a      	strb	r2, [r3, #0]

	    if (I2C__write(dev_SLA, clock->i2c_buffer, 1, clock) == 1) {
 8007e5e:	6879      	ldr	r1, [r7, #4]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2201      	movs	r2, #1
 8007e64:	2068      	movs	r0, #104	@ 0x68
 8007e66:	f7ff fea7 	bl	8007bb8 <I2C__write>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	f040 8088 	bne.w	8007f82 <Ds1307_read+0x132>
	        if (I2C__read(dev_SLA, clock->i2c_buffer, 7, clock) == 1) {
 8007e72:	6879      	ldr	r1, [r7, #4]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2207      	movs	r2, #7
 8007e78:	2068      	movs	r0, #104	@ 0x68
 8007e7a:	f7ff febc 	bl	8007bf6 <I2C__read>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d17e      	bne.n	8007f82 <Ds1307_read+0x132>
	            clock->sec = BCD2DEC(clock->i2c_buffer[0] & 0x7F);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e8c:	b2db      	uxtb	r3, r3
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f7ff fed0 	bl	8007c34 <BCD2DEC>
 8007e94:	4603      	mov	r3, r0
 8007e96:	461a      	mov	r2, r3
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	721a      	strb	r2, [r3, #8]
	            clock->min = BCD2DEC(clock->i2c_buffer[1]);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	785b      	ldrb	r3, [r3, #1]
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f7ff fec7 	bl	8007c34 <BCD2DEC>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	461a      	mov	r2, r3
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	725a      	strb	r2, [r3, #9]
	            clock->format = (clock->i2c_buffer[2] & 0b01000000) >> 6;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	789b      	ldrb	r3, [r3, #2]
 8007eb2:	119b      	asrs	r3, r3, #6
 8007eb4:	f003 0301 	and.w	r3, r3, #1
 8007eb8:	b2d9      	uxtb	r1, r3
 8007eba:	687a      	ldr	r2, [r7, #4]
 8007ebc:	7c53      	ldrb	r3, [r2, #17]
 8007ebe:	f361 0300 	bfi	r3, r1, #0, #1
 8007ec2:	7453      	strb	r3, [r2, #17]

	            if (clock->format == 1) { // 12h format
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	7c5b      	ldrb	r3, [r3, #17]
 8007ec8:	f003 0301 	and.w	r3, r3, #1
 8007ecc:	b2db      	uxtb	r3, r3
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d017      	beq.n	8007f02 <Ds1307_read+0xb2>
	                clock->hour = BCD2DEC(clock->i2c_buffer[2] & 0b00011111);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	789b      	ldrb	r3, [r3, #2]
 8007ed6:	f003 031f 	and.w	r3, r3, #31
 8007eda:	b2db      	uxtb	r3, r3
 8007edc:	4618      	mov	r0, r3
 8007ede:	f7ff fea9 	bl	8007c34 <BCD2DEC>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	729a      	strb	r2, [r3, #10]
	                clock->AM_PM = (clock->i2c_buffer[2] & 0b00100000) >> 5;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	789b      	ldrb	r3, [r3, #2]
 8007eee:	115b      	asrs	r3, r3, #5
 8007ef0:	f003 0301 	and.w	r3, r3, #1
 8007ef4:	b2d9      	uxtb	r1, r3
 8007ef6:	687a      	ldr	r2, [r7, #4]
 8007ef8:	7c53      	ldrb	r3, [r2, #17]
 8007efa:	f361 0341 	bfi	r3, r1, #1, #1
 8007efe:	7453      	strb	r3, [r2, #17]
 8007f00:	e017      	b.n	8007f32 <Ds1307_read+0xe2>
	            } else { // 24h format
	                clock->hour = BCD2DEC(clock->i2c_buffer[2] & 0b00111111);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	789b      	ldrb	r3, [r3, #2]
 8007f06:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007f0a:	b2db      	uxtb	r3, r3
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f7ff fe91 	bl	8007c34 <BCD2DEC>
 8007f12:	4603      	mov	r3, r0
 8007f14:	461a      	mov	r2, r3
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	729a      	strb	r2, [r3, #10]
	                clock->AM_PM = (clock->hour > 11) ? 1 : 0;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	7a9b      	ldrb	r3, [r3, #10]
 8007f1e:	2b0b      	cmp	r3, #11
 8007f20:	bf8c      	ite	hi
 8007f22:	2301      	movhi	r3, #1
 8007f24:	2300      	movls	r3, #0
 8007f26:	b2d9      	uxtb	r1, r3
 8007f28:	687a      	ldr	r2, [r7, #4]
 8007f2a:	7c53      	ldrb	r3, [r2, #17]
 8007f2c:	f361 0341 	bfi	r3, r1, #1, #1
 8007f30:	7453      	strb	r3, [r2, #17]
	            }

	            clock->day = BCD2DEC(clock->i2c_buffer[3]);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	78db      	ldrb	r3, [r3, #3]
 8007f36:	4618      	mov	r0, r3
 8007f38:	f7ff fe7c 	bl	8007c34 <BCD2DEC>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	461a      	mov	r2, r3
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	72da      	strb	r2, [r3, #11]
	            clock->date = BCD2DEC(clock->i2c_buffer[4]);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	791b      	ldrb	r3, [r3, #4]
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f7ff fe73 	bl	8007c34 <BCD2DEC>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	461a      	mov	r2, r3
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	731a      	strb	r2, [r3, #12]
	            clock->month = BCD2DEC(clock->i2c_buffer[5]);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	795b      	ldrb	r3, [r3, #5]
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f7ff fe6a 	bl	8007c34 <BCD2DEC>
 8007f60:	4603      	mov	r3, r0
 8007f62:	461a      	mov	r2, r3
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	735a      	strb	r2, [r3, #13]
	            clock->year = BCD2DEC(clock->i2c_buffer[6]) + 2000;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	799b      	ldrb	r3, [r3, #6]
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f7ff fe61 	bl	8007c34 <BCD2DEC>
 8007f72:	4603      	mov	r3, r0
 8007f74:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8007f78:	b29a      	uxth	r2, r3
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	81da      	strh	r2, [r3, #14]

	            return DS1307_OK;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	e000      	b.n	8007f84 <Ds1307_read+0x134>
	        }
	    }
	    return DS1307_NOK;
 8007f82:	2301      	movs	r3, #1
	}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3708      	adds	r7, #8
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}

08007f8c <DWT_Delay_us>:

/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds) {
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b084      	sub	sp, #16
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
	uint32_t clk_cycle_start = DWT->CYCCNT;
 8007f94:	4b0d      	ldr	r3, [pc, #52]	@ (8007fcc <DWT_Delay_us+0x40>)
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	60fb      	str	r3, [r7, #12]

	/* Go to number of cycles for system */
	microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8007f9a:	f002 fefd 	bl	800ad98 <HAL_RCC_GetHCLKFreq>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	4a0b      	ldr	r2, [pc, #44]	@ (8007fd0 <DWT_Delay_us+0x44>)
 8007fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8007fa6:	0c9b      	lsrs	r3, r3, #18
 8007fa8:	687a      	ldr	r2, [r7, #4]
 8007faa:	fb02 f303 	mul.w	r3, r2, r3
 8007fae:	607b      	str	r3, [r7, #4]

	/* Delay till end */
	while ((DWT->CYCCNT - clk_cycle_start) < microseconds)
 8007fb0:	bf00      	nop
 8007fb2:	4b06      	ldr	r3, [pc, #24]	@ (8007fcc <DWT_Delay_us+0x40>)
 8007fb4:	685a      	ldr	r2, [r3, #4]
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	1ad2      	subs	r2, r2, r3
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	429a      	cmp	r2, r3
 8007fbe:	d3f8      	bcc.n	8007fb2 <DWT_Delay_us+0x26>
		;
}
 8007fc0:	bf00      	nop
 8007fc2:	bf00      	nop
 8007fc4:	3710      	adds	r7, #16
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}
 8007fca:	bf00      	nop
 8007fcc:	e0001000 	.word	0xe0001000
 8007fd0:	431bde83 	.word	0x431bde83

08007fd4 <usDelay>:
    EN_SET(lcd,0);    \
    usDelay(100); \
  } while (0)

/* Hardware interface functions */
static void usDelay(uint16_t delay_us) {
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b082      	sub	sp, #8
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	4603      	mov	r3, r0
 8007fdc:	80fb      	strh	r3, [r7, #6]
	DWT_Delay_us(delay_us);
 8007fde:	88fb      	ldrh	r3, [r7, #6]
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f7ff ffd3 	bl	8007f8c <DWT_Delay_us>
}
 8007fe6:	bf00      	nop
 8007fe8:	3708      	adds	r7, #8
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}

08007fee <Write_HalfByte>:
/// the top 4 bits are ignored
/// transfers the status of the 4-bit data to the hardware GPIO pins
static void Write_HalfByte(Alcd_t *lcd, uint8_t HalfByte) {
 8007fee:	b480      	push	{r7}
 8007ff0:	b083      	sub	sp, #12
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
 8007ff6:	460b      	mov	r3, r1
 8007ff8:	70fb      	strb	r3, [r7, #3]
	lcd->Data_GPIO->ODR &= ~(0xf << lcd->Data_GPIO_Start_Pin);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	68da      	ldr	r2, [r3, #12]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	7a1b      	ldrb	r3, [r3, #8]
 8008004:	4619      	mov	r1, r3
 8008006:	230f      	movs	r3, #15
 8008008:	408b      	lsls	r3, r1
 800800a:	43db      	mvns	r3, r3
 800800c:	4619      	mov	r1, r3
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	400a      	ands	r2, r1
 8008014:	60da      	str	r2, [r3, #12]
	lcd->Data_GPIO->ODR |= HalfByte << lcd->Data_GPIO_Start_Pin;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	68da      	ldr	r2, [r3, #12]
 800801c:	78fb      	ldrb	r3, [r7, #3]
 800801e:	6879      	ldr	r1, [r7, #4]
 8008020:	7a09      	ldrb	r1, [r1, #8]
 8008022:	408b      	lsls	r3, r1
 8008024:	4619      	mov	r1, r3
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	685b      	ldr	r3, [r3, #4]
 800802a:	430a      	orrs	r2, r1
 800802c:	60da      	str	r2, [r3, #12]
}
 800802e:	bf00      	nop
 8008030:	370c      	adds	r7, #12
 8008032:	46bd      	mov	sp, r7
 8008034:	bc80      	pop	{r7}
 8008036:	4770      	bx	lr

08008038 <RS_SET>:
/// @brief 1 for set and 0 for reset
static void RS_SET(Alcd_t *lcd, uint8_t R_S_Stat) {
 8008038:	b580      	push	{r7, lr}
 800803a:	b082      	sub	sp, #8
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	460b      	mov	r3, r1
 8008042:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->RS_GPIO, lcd->RS_GPIO_Pin, R_S_Stat);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6958      	ldr	r0, [r3, #20]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	8b1b      	ldrh	r3, [r3, #24]
 800804c:	78fa      	ldrb	r2, [r7, #3]
 800804e:	4619      	mov	r1, r3
 8008050:	f000 fdaa 	bl	8008ba8 <HAL_GPIO_WritePin>
}
 8008054:	bf00      	nop
 8008056:	3708      	adds	r7, #8
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}

0800805c <EN_SET>:
/// @brief 1 for set and 0 for reset
static void EN_SET(Alcd_t *lcd, uint8_t EN_Stat) {
 800805c:	b580      	push	{r7, lr}
 800805e:	b082      	sub	sp, #8
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	460b      	mov	r3, r1
 8008066:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->EN_GPIO, lcd->EN_GPIO_Pin, EN_Stat);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	68d8      	ldr	r0, [r3, #12]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	8a1b      	ldrh	r3, [r3, #16]
 8008070:	78fa      	ldrb	r2, [r7, #3]
 8008072:	4619      	mov	r1, r3
 8008074:	f000 fd98 	bl	8008ba8 <HAL_GPIO_WritePin>
}
 8008078:	bf00      	nop
 800807a:	3708      	adds	r7, #8
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}

08008080 <Alcd_Init_GPIO>:

static void Alcd_Init_GPIO(Alcd_t *lcd) {
 8008080:	b580      	push	{r7, lr}
 8008082:	b086      	sub	sp, #24
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef G = { .Mode = GPIO_MODE_OUTPUT_PP, .Pin = lcd->RS_GPIO_Pin,
 8008088:	f107 0308 	add.w	r3, r7, #8
 800808c:	2200      	movs	r2, #0
 800808e:	601a      	str	r2, [r3, #0]
 8008090:	605a      	str	r2, [r3, #4]
 8008092:	609a      	str	r2, [r3, #8]
 8008094:	60da      	str	r2, [r3, #12]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	8b1b      	ldrh	r3, [r3, #24]
 800809a:	60bb      	str	r3, [r7, #8]
 800809c:	2301      	movs	r3, #1
 800809e:	60fb      	str	r3, [r7, #12]
 80080a0:	2302      	movs	r3, #2
 80080a2:	617b      	str	r3, [r7, #20]
			.Speed = GPIO_SPEED_FREQ_LOW };
	HAL_GPIO_Init(lcd->RS_GPIO, &G);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	695b      	ldr	r3, [r3, #20]
 80080a8:	f107 0208 	add.w	r2, r7, #8
 80080ac:	4611      	mov	r1, r2
 80080ae:	4618      	mov	r0, r3
 80080b0:	f000 fbf6 	bl	80088a0 <HAL_GPIO_Init>
	G.Pin = lcd->EN_GPIO_Pin;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	8a1b      	ldrh	r3, [r3, #16]
 80080b8:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(lcd->EN_GPIO, &G);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	68db      	ldr	r3, [r3, #12]
 80080be:	f107 0208 	add.w	r2, r7, #8
 80080c2:	4611      	mov	r1, r2
 80080c4:	4618      	mov	r0, r3
 80080c6:	f000 fbeb 	bl	80088a0 <HAL_GPIO_Init>

	G.Pin = 0xf << lcd->Data_GPIO_Start_Pin;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	7a1b      	ldrb	r3, [r3, #8]
 80080ce:	461a      	mov	r2, r3
 80080d0:	230f      	movs	r3, #15
 80080d2:	4093      	lsls	r3, r2
 80080d4:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(lcd->Data_GPIO, &G);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	685b      	ldr	r3, [r3, #4]
 80080da:	f107 0208 	add.w	r2, r7, #8
 80080de:	4611      	mov	r1, r2
 80080e0:	4618      	mov	r0, r3
 80080e2:	f000 fbdd 	bl	80088a0 <HAL_GPIO_Init>
}
 80080e6:	bf00      	nop
 80080e8:	3718      	adds	r7, #24
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}

080080ee <Alcd_SendByte>:

/* User Functions  */
void Alcd_Display(Alcd_t *lcd, uint8_t ON_OFF);

static inline void Alcd_SendByte(Alcd_t *lcd, uint8_t CMD_Data, uint8_t value) {
 80080ee:	b580      	push	{r7, lr}
 80080f0:	b082      	sub	sp, #8
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	6078      	str	r0, [r7, #4]
 80080f6:	460b      	mov	r3, r1
 80080f8:	70fb      	strb	r3, [r7, #3]
 80080fa:	4613      	mov	r3, r2
 80080fc:	70bb      	strb	r3, [r7, #2]
	RS_SET(lcd, CMD_Data);
 80080fe:	78fb      	ldrb	r3, [r7, #3]
 8008100:	4619      	mov	r1, r3
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f7ff ff98 	bl	8008038 <RS_SET>
	// send the higher 4 bits
	Write_HalfByte(lcd, value >> 4);
 8008108:	78bb      	ldrb	r3, [r7, #2]
 800810a:	091b      	lsrs	r3, r3, #4
 800810c:	b2db      	uxtb	r3, r3
 800810e:	4619      	mov	r1, r3
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f7ff ff6c 	bl	8007fee <Write_HalfByte>
	// pulse the enable pin
	PulseEn
 8008116:	2101      	movs	r1, #1
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f7ff ff9f 	bl	800805c <EN_SET>
 800811e:	200a      	movs	r0, #10
 8008120:	f7ff ff58 	bl	8007fd4 <usDelay>
 8008124:	2100      	movs	r1, #0
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f7ff ff98 	bl	800805c <EN_SET>
 800812c:	2064      	movs	r0, #100	@ 0x64
 800812e:	f7ff ff51 	bl	8007fd4 <usDelay>
	;
	Write_HalfByte(lcd, value);
 8008132:	78bb      	ldrb	r3, [r7, #2]
 8008134:	4619      	mov	r1, r3
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f7ff ff59 	bl	8007fee <Write_HalfByte>
	PulseEn
 800813c:	2101      	movs	r1, #1
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f7ff ff8c 	bl	800805c <EN_SET>
 8008144:	200a      	movs	r0, #10
 8008146:	f7ff ff45 	bl	8007fd4 <usDelay>
 800814a:	2100      	movs	r1, #0
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f7ff ff85 	bl	800805c <EN_SET>
 8008152:	2064      	movs	r0, #100	@ 0x64
 8008154:	f7ff ff3e 	bl	8007fd4 <usDelay>
	;
}
 8008158:	bf00      	nop
 800815a:	3708      	adds	r7, #8
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}

08008160 <Alcd_Init>:

void Alcd_Init(Alcd_t *lcd, uint8_t Lines, uint8_t Chars) {
 8008160:	b580      	push	{r7, lr}
 8008162:	b084      	sub	sp, #16
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
 8008168:	460b      	mov	r3, r1
 800816a:	70fb      	strb	r3, [r7, #3]
 800816c:	4613      	mov	r3, r2
 800816e:	70bb      	strb	r3, [r7, #2]
	//INitialize the delay function using the ARM core cycle counter
	DWT_Delay_Init();
 8008170:	f7ff fc96 	bl	8007aa0 <DWT_Delay_Init>
	Alcd_Init_GPIO(lcd);
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f7ff ff83 	bl	8008080 <Alcd_Init_GPIO>
	uint8_t x;

	lcd->RowOffsets[0] = 0;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2200      	movs	r2, #0
 800817e:	769a      	strb	r2, [r3, #26]
	lcd->RowOffsets[1] = 0x40;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2240      	movs	r2, #64	@ 0x40
 8008184:	76da      	strb	r2, [r3, #27]
	lcd->RowOffsets[2] = 0 + Chars;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	78ba      	ldrb	r2, [r7, #2]
 800818a:	771a      	strb	r2, [r3, #28]
	lcd->RowOffsets[3] = 0x40 + Chars;
 800818c:	78bb      	ldrb	r3, [r7, #2]
 800818e:	3340      	adds	r3, #64	@ 0x40
 8008190:	b2da      	uxtb	r2, r3
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	775a      	strb	r2, [r3, #29]

	RS_SET(lcd, 0);
 8008196:	2100      	movs	r1, #0
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f7ff ff4d 	bl	8008038 <RS_SET>
	EN_SET(lcd, 0);
 800819e:	2100      	movs	r1, #0
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f7ff ff5b 	bl	800805c <EN_SET>
	usDelay(50000);
 80081a6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80081aa:	f7ff ff13 	bl	8007fd4 <usDelay>

	// init display in 4-bit mode
	for (x = 0; x < 2; x++) {
 80081ae:	2300      	movs	r3, #0
 80081b0:	73fb      	strb	r3, [r7, #15]
 80081b2:	e018      	b.n	80081e6 <Alcd_Init+0x86>
		Write_HalfByte(lcd, 0x03);
 80081b4:	2103      	movs	r1, #3
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f7ff ff19 	bl	8007fee <Write_HalfByte>
		PulseEn
 80081bc:	2101      	movs	r1, #1
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f7ff ff4c 	bl	800805c <EN_SET>
 80081c4:	200a      	movs	r0, #10
 80081c6:	f7ff ff05 	bl	8007fd4 <usDelay>
 80081ca:	2100      	movs	r1, #0
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f7ff ff45 	bl	800805c <EN_SET>
 80081d2:	2064      	movs	r0, #100	@ 0x64
 80081d4:	f7ff fefe 	bl	8007fd4 <usDelay>
		;
		usDelay(4500);
 80081d8:	f241 1094 	movw	r0, #4500	@ 0x1194
 80081dc:	f7ff fefa 	bl	8007fd4 <usDelay>
	for (x = 0; x < 2; x++) {
 80081e0:	7bfb      	ldrb	r3, [r7, #15]
 80081e2:	3301      	adds	r3, #1
 80081e4:	73fb      	strb	r3, [r7, #15]
 80081e6:	7bfb      	ldrb	r3, [r7, #15]
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d9e3      	bls.n	80081b4 <Alcd_Init+0x54>
	}
	Write_HalfByte(lcd, 0x03);
 80081ec:	2103      	movs	r1, #3
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f7ff fefd 	bl	8007fee <Write_HalfByte>
	PulseEn
 80081f4:	2101      	movs	r1, #1
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f7ff ff30 	bl	800805c <EN_SET>
 80081fc:	200a      	movs	r0, #10
 80081fe:	f7ff fee9 	bl	8007fd4 <usDelay>
 8008202:	2100      	movs	r1, #0
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f7ff ff29 	bl	800805c <EN_SET>
 800820a:	2064      	movs	r0, #100	@ 0x64
 800820c:	f7ff fee2 	bl	8007fd4 <usDelay>
	;
	usDelay(150);
 8008210:	2096      	movs	r0, #150	@ 0x96
 8008212:	f7ff fedf 	bl	8007fd4 <usDelay>
	Write_HalfByte(lcd, 0x02);
 8008216:	2102      	movs	r1, #2
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f7ff fee8 	bl	8007fee <Write_HalfByte>
	PulseEn
 800821e:	2101      	movs	r1, #1
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f7ff ff1b 	bl	800805c <EN_SET>
 8008226:	200a      	movs	r0, #10
 8008228:	f7ff fed4 	bl	8007fd4 <usDelay>
 800822c:	2100      	movs	r1, #0
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f7ff ff14 	bl	800805c <EN_SET>
 8008234:	2064      	movs	r0, #100	@ 0x64
 8008236:	f7ff fecd 	bl	8007fd4 <usDelay>
	;

	// finally, set # lines, font size, etc.
	SendByte(0, LCD_FUNCTIONSET | LCD_2LINE | LCD_5x8DOTS);
 800823a:	2228      	movs	r2, #40	@ 0x28
 800823c:	2100      	movs	r1, #0
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f7ff ff55 	bl	80080ee <Alcd_SendByte>

	// turn the display on with no cursor or blinking default
	// lcd->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;

	// turn on the display
	Alcd_Display_Control(lcd, 1, 0, 0);
 8008244:	2300      	movs	r3, #0
 8008246:	2200      	movs	r2, #0
 8008248:	2101      	movs	r1, #1
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f000 f86d 	bl	800832a <Alcd_Display_Control>
	Alcd_Clear(lcd);
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f000 f859 	bl	8008308 <Alcd_Clear>
}
 8008256:	bf00      	nop
 8008258:	3710      	adds	r7, #16
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}

0800825e <Alcd_CursorAt>:

void Alcd_CursorAt(Alcd_t *lcd, uint8_t Row, uint8_t Col) {
 800825e:	b580      	push	{r7, lr}
 8008260:	b082      	sub	sp, #8
 8008262:	af00      	add	r7, sp, #0
 8008264:	6078      	str	r0, [r7, #4]
 8008266:	460b      	mov	r3, r1
 8008268:	70fb      	strb	r3, [r7, #3]
 800826a:	4613      	mov	r3, r2
 800826c:	70bb      	strb	r3, [r7, #2]
	SendByte(0, LCD_SETDDRAMADDR | (Col + lcd->RowOffsets[Row]));
 800826e:	78fb      	ldrb	r3, [r7, #3]
 8008270:	687a      	ldr	r2, [r7, #4]
 8008272:	4413      	add	r3, r2
 8008274:	7e9a      	ldrb	r2, [r3, #26]
 8008276:	78bb      	ldrb	r3, [r7, #2]
 8008278:	4413      	add	r3, r2
 800827a:	b2db      	uxtb	r3, r3
 800827c:	b25b      	sxtb	r3, r3
 800827e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008282:	b25b      	sxtb	r3, r3
 8008284:	b2db      	uxtb	r3, r3
 8008286:	461a      	mov	r2, r3
 8008288:	2100      	movs	r1, #0
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f7ff ff2f 	bl	80080ee <Alcd_SendByte>
}
 8008290:	bf00      	nop
 8008292:	3708      	adds	r7, #8
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}

08008298 <Alcd_Put_n>:

void Alcd_Put_n(Alcd_t *lcd, char *text, uint8_t len) {
 8008298:	b580      	push	{r7, lr}
 800829a:	b086      	sub	sp, #24
 800829c:	af00      	add	r7, sp, #0
 800829e:	60f8      	str	r0, [r7, #12]
 80082a0:	60b9      	str	r1, [r7, #8]
 80082a2:	4613      	mov	r3, r2
 80082a4:	71fb      	strb	r3, [r7, #7]
	for (uint8_t x = 0; x < len; x++) {
 80082a6:	2300      	movs	r3, #0
 80082a8:	75fb      	strb	r3, [r7, #23]
 80082aa:	e00b      	b.n	80082c4 <Alcd_Put_n+0x2c>
		SendByte(1, *(text++));
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	1c5a      	adds	r2, r3, #1
 80082b0:	60ba      	str	r2, [r7, #8]
 80082b2:	781b      	ldrb	r3, [r3, #0]
 80082b4:	461a      	mov	r2, r3
 80082b6:	2101      	movs	r1, #1
 80082b8:	68f8      	ldr	r0, [r7, #12]
 80082ba:	f7ff ff18 	bl	80080ee <Alcd_SendByte>
	for (uint8_t x = 0; x < len; x++) {
 80082be:	7dfb      	ldrb	r3, [r7, #23]
 80082c0:	3301      	adds	r3, #1
 80082c2:	75fb      	strb	r3, [r7, #23]
 80082c4:	7dfa      	ldrb	r2, [r7, #23]
 80082c6:	79fb      	ldrb	r3, [r7, #7]
 80082c8:	429a      	cmp	r2, r3
 80082ca:	d3ef      	bcc.n	80082ac <Alcd_Put_n+0x14>
	}
}
 80082cc:	bf00      	nop
 80082ce:	bf00      	nop
 80082d0:	3718      	adds	r7, #24
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}

080082d6 <Alcd_PutAt_n>:

void Alcd_PutAt_n(Alcd_t *lcd, uint8_t Row, uint8_t Col, char *text,
		uint8_t len) {
 80082d6:	b580      	push	{r7, lr}
 80082d8:	b084      	sub	sp, #16
 80082da:	af00      	add	r7, sp, #0
 80082dc:	60f8      	str	r0, [r7, #12]
 80082de:	607b      	str	r3, [r7, #4]
 80082e0:	460b      	mov	r3, r1
 80082e2:	72fb      	strb	r3, [r7, #11]
 80082e4:	4613      	mov	r3, r2
 80082e6:	72bb      	strb	r3, [r7, #10]
	Alcd_CursorAt(lcd, Row, Col);
 80082e8:	7aba      	ldrb	r2, [r7, #10]
 80082ea:	7afb      	ldrb	r3, [r7, #11]
 80082ec:	4619      	mov	r1, r3
 80082ee:	68f8      	ldr	r0, [r7, #12]
 80082f0:	f7ff ffb5 	bl	800825e <Alcd_CursorAt>
	Alcd_Put_n(lcd, text, len);
 80082f4:	7e3b      	ldrb	r3, [r7, #24]
 80082f6:	461a      	mov	r2, r3
 80082f8:	6879      	ldr	r1, [r7, #4]
 80082fa:	68f8      	ldr	r0, [r7, #12]
 80082fc:	f7ff ffcc 	bl	8008298 <Alcd_Put_n>
}
 8008300:	bf00      	nop
 8008302:	3710      	adds	r7, #16
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}

08008308 <Alcd_Clear>:
void Alcd_Home(Alcd_t *lcd) {
	SendByte(0, LCD_RETURNHOME);
	usDelay(2000);
}

void Alcd_Clear(Alcd_t *lcd) {
 8008308:	b580      	push	{r7, lr}
 800830a:	b082      	sub	sp, #8
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
	SendByte(0, LCD_CLEARDISPLAY);
 8008310:	2201      	movs	r2, #1
 8008312:	2100      	movs	r1, #0
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f7ff feea 	bl	80080ee <Alcd_SendByte>
	usDelay(2000);
 800831a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800831e:	f7ff fe59 	bl	8007fd4 <usDelay>
}
 8008322:	bf00      	nop
 8008324:	3708      	adds	r7, #8
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}

0800832a <Alcd_Display_Control>:

void Alcd_Display_Control(Alcd_t *lcd, uint8_t ON_OFF, uint8_t CUR_ON_OFF,
		uint8_t BLINK_ON_OFF) {
 800832a:	b580      	push	{r7, lr}
 800832c:	b082      	sub	sp, #8
 800832e:	af00      	add	r7, sp, #0
 8008330:	6078      	str	r0, [r7, #4]
 8008332:	4608      	mov	r0, r1
 8008334:	4611      	mov	r1, r2
 8008336:	461a      	mov	r2, r3
 8008338:	4603      	mov	r3, r0
 800833a:	70fb      	strb	r3, [r7, #3]
 800833c:	460b      	mov	r3, r1
 800833e:	70bb      	strb	r3, [r7, #2]
 8008340:	4613      	mov	r3, r2
 8008342:	707b      	strb	r3, [r7, #1]
	lcd->_displaycontrol = 0;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2200      	movs	r2, #0
 8008348:	779a      	strb	r2, [r3, #30]
	if (ON_OFF) {
 800834a:	78fb      	ldrb	r3, [r7, #3]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d006      	beq.n	800835e <Alcd_Display_Control+0x34>
		lcd->_displaycontrol |= LCD_DISPLAYON;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	7f9b      	ldrb	r3, [r3, #30]
 8008354:	f043 0304 	orr.w	r3, r3, #4
 8008358:	b2da      	uxtb	r2, r3
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	779a      	strb	r2, [r3, #30]
	}
	if (CUR_ON_OFF) {
 800835e:	78bb      	ldrb	r3, [r7, #2]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d006      	beq.n	8008372 <Alcd_Display_Control+0x48>
		lcd->_displaycontrol |= LCD_CURSORON;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	7f9b      	ldrb	r3, [r3, #30]
 8008368:	f043 0302 	orr.w	r3, r3, #2
 800836c:	b2da      	uxtb	r2, r3
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	779a      	strb	r2, [r3, #30]
	}
	if (BLINK_ON_OFF) {
 8008372:	787b      	ldrb	r3, [r7, #1]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d006      	beq.n	8008386 <Alcd_Display_Control+0x5c>
		lcd->_displaycontrol |= LCD_BLINKON;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	7f9b      	ldrb	r3, [r3, #30]
 800837c:	f043 0301 	orr.w	r3, r3, #1
 8008380:	b2da      	uxtb	r2, r3
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	779a      	strb	r2, [r3, #30]
	}
	lcd->_displaycontrol |= LCD_DISPLAYON;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	7f9b      	ldrb	r3, [r3, #30]
 800838a:	f043 0304 	orr.w	r3, r3, #4
 800838e:	b2da      	uxtb	r2, r3
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	779a      	strb	r2, [r3, #30]
	SendByte(0, LCD_DISPLAYCONTROL | lcd->_displaycontrol);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	7f9b      	ldrb	r3, [r3, #30]
 8008398:	f043 0308 	orr.w	r3, r3, #8
 800839c:	b2db      	uxtb	r3, r3
 800839e:	461a      	mov	r2, r3
 80083a0:	2100      	movs	r1, #0
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f7ff fea3 	bl	80080ee <Alcd_SendByte>
}
 80083a8:	bf00      	nop
 80083aa:	3708      	adds	r7, #8
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}

080083b0 <Str_Len>:

void Alcd_PutChar(Alcd_t *lcd, char chr) {
	SendByte(1, chr);
}

int Str_Len(char *string) {
 80083b0:	b480      	push	{r7}
 80083b2:	b085      	sub	sp, #20
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
	int len = 0;
 80083b8:	2300      	movs	r3, #0
 80083ba:	60fb      	str	r3, [r7, #12]
	while (*(string++)) {
 80083bc:	e002      	b.n	80083c4 <Str_Len+0x14>
		len++;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	3301      	adds	r3, #1
 80083c2:	60fb      	str	r3, [r7, #12]
	while (*(string++)) {
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	1c5a      	adds	r2, r3, #1
 80083c8:	607a      	str	r2, [r7, #4]
 80083ca:	781b      	ldrb	r3, [r3, #0]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d1f6      	bne.n	80083be <Str_Len+0xe>
	}
	return len;
 80083d0:	68fb      	ldr	r3, [r7, #12]
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3714      	adds	r7, #20
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bc80      	pop	{r7}
 80083da:	4770      	bx	lr

080083dc <Keypad_GetInputs>:
 */

#include "Matrix_Keypad.h"

/// @brief Reads the input status from the input port
static uint16_t Keypad_GetInputs(Matrix_Keypad_t *keypad) {
 80083dc:	b480      	push	{r7}
 80083de:	b085      	sub	sp, #20
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
	uint16_t Input = keypad->IntputPort->IDR & keypad->IP_Mask;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	689b      	ldr	r3, [r3, #8]
 80083e8:	689b      	ldr	r3, [r3, #8]
 80083ea:	b29a      	uxth	r2, r3
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	8b1b      	ldrh	r3, [r3, #24]
 80083f0:	4013      	ands	r3, r2
 80083f2:	81fb      	strh	r3, [r7, #14]
	return (Input >> keypad->InputStartingPin);
 80083f4:	89fa      	ldrh	r2, [r7, #14]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	68db      	ldr	r3, [r3, #12]
 80083fa:	fa42 f303 	asr.w	r3, r2, r3
 80083fe:	b29b      	uxth	r3, r3
}
 8008400:	4618      	mov	r0, r3
 8008402:	3714      	adds	r7, #20
 8008404:	46bd      	mov	sp, r7
 8008406:	bc80      	pop	{r7}
 8008408:	4770      	bx	lr

0800840a <Keypad_SetOutputs>:

///@brief Write the status of output ports
static void Keypad_SetOutputs(Matrix_Keypad_t *keypad, uint16_t OutputStat) {
 800840a:	b480      	push	{r7}
 800840c:	b083      	sub	sp, #12
 800840e:	af00      	add	r7, sp, #0
 8008410:	6078      	str	r0, [r7, #4]
 8008412:	460b      	mov	r3, r1
 8008414:	807b      	strh	r3, [r7, #2]
	//turn off the pins
	keypad->OutputPort->BRR |= keypad->OP_Mask;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	691b      	ldr	r3, [r3, #16]
 800841a:	695a      	ldr	r2, [r3, #20]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	8b5b      	ldrh	r3, [r3, #26]
 8008420:	4619      	mov	r1, r3
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	691b      	ldr	r3, [r3, #16]
 8008426:	430a      	orrs	r2, r1
 8008428:	615a      	str	r2, [r3, #20]
	//turn on only the needed ones according to the required output
	keypad->OutputPort->BSRR |= (OutputStat << keypad->OutputStartingPin);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	691b      	ldr	r3, [r3, #16]
 800842e:	691a      	ldr	r2, [r3, #16]
 8008430:	8879      	ldrh	r1, [r7, #2]
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	695b      	ldr	r3, [r3, #20]
 8008436:	fa01 f303 	lsl.w	r3, r1, r3
 800843a:	4619      	mov	r1, r3
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	691b      	ldr	r3, [r3, #16]
 8008440:	430a      	orrs	r2, r1
 8008442:	611a      	str	r2, [r3, #16]
}
 8008444:	bf00      	nop
 8008446:	370c      	adds	r7, #12
 8008448:	46bd      	mov	sp, r7
 800844a:	bc80      	pop	{r7}
 800844c:	4770      	bx	lr

0800844e <Keypad_Delay>:

/// @fn void Keypad_Delay(uint32_t)
/// @brief
/// Halts the program execution for a certain time
/// @param delay_ms delay value in milliseconds
static void Keypad_Delay(uint32_t delay_ms) {
 800844e:	b580      	push	{r7, lr}
 8008450:	b082      	sub	sp, #8
 8008452:	af00      	add	r7, sp, #0
 8008454:	6078      	str	r0, [r7, #4]
	HAL_Delay(delay_ms);
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f000 f91a 	bl	8008690 <HAL_Delay>
}
 800845c:	bf00      	nop
 800845e:	3708      	adds	r7, #8
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}

08008464 <Keypad_Refresh>:

void Keypad_Refresh(Matrix_Keypad_t *keypad) {
 8008464:	b580      	push	{r7, lr}
 8008466:	b084      	sub	sp, #16
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
// temporary variable to store the new status of keys
	uint32_t TempKeys = 0;
 800846c:	2300      	movs	r3, #0
 800846e:	60fb      	str	r3, [r7, #12]
	uint16_t OutputStat = 1 << (keypad->Rows - 1);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	781b      	ldrb	r3, [r3, #0]
 8008474:	3b01      	subs	r3, #1
 8008476:	2201      	movs	r2, #1
 8008478:	fa02 f303 	lsl.w	r3, r2, r3
 800847c:	817b      	strh	r3, [r7, #10]

	uint16_t x = 0;
 800847e:	2300      	movs	r3, #0
 8008480:	813b      	strh	r3, [r7, #8]
	do {

		TempKeys <<= keypad->Columns;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	785b      	ldrb	r3, [r3, #1]
 8008486:	461a      	mov	r2, r3
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	4093      	lsls	r3, r2
 800848c:	60fb      	str	r3, [r7, #12]
		// send the output status to the hardware
		Keypad_SetOutputs(keypad, OutputStat);
 800848e:	897b      	ldrh	r3, [r7, #10]
 8008490:	4619      	mov	r1, r3
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f7ff ffb9 	bl	800840a <Keypad_SetOutputs>
		Keypad_Delay(1);
 8008498:	2001      	movs	r0, #1
 800849a:	f7ff ffd8 	bl	800844e <Keypad_Delay>
		// read the input status from the hardware

		TempKeys |= Keypad_GetInputs(keypad);
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f7ff ff9c 	bl	80083dc <Keypad_GetInputs>
 80084a4:	4603      	mov	r3, r0
 80084a6:	461a      	mov	r2, r3
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	4313      	orrs	r3, r2
 80084ac:	60fb      	str	r3, [r7, #12]
		OutputStat >>= 1;
 80084ae:	897b      	ldrh	r3, [r7, #10]
 80084b0:	085b      	lsrs	r3, r3, #1
 80084b2:	817b      	strh	r3, [r7, #10]
		x++;
 80084b4:	893b      	ldrh	r3, [r7, #8]
 80084b6:	3301      	adds	r3, #1
 80084b8:	813b      	strh	r3, [r7, #8]
	} while (x < keypad->Rows);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	781b      	ldrb	r3, [r3, #0]
 80084be:	461a      	mov	r2, r3
 80084c0:	893b      	ldrh	r3, [r7, #8]
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d3dd      	bcc.n	8008482 <Keypad_Refresh+0x1e>

	keypad->KeysStatus = TempKeys;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	68fa      	ldr	r2, [r7, #12]
 80084ca:	605a      	str	r2, [r3, #4]
}
 80084cc:	bf00      	nop
 80084ce:	3710      	adds	r7, #16
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}

080084d4 <Keypad_Init>:

void Keypad_Init(Matrix_Keypad_t *keypad) {
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b08a      	sub	sp, #40	@ 0x28
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef config;

//put a logic 1 in every position where an input pin is selected
	uint16_t Pins = 0;
 80084dc:	2300      	movs	r3, #0
 80084de:	84fb      	strh	r3, [r7, #38]	@ 0x26

//configure the columns gpio pins as inputs
//enable pull down resistors to eliminate the use of external ones
	for (int x = 0; x < keypad->Columns; x++) {
 80084e0:	2300      	movs	r3, #0
 80084e2:	623b      	str	r3, [r7, #32]
 80084e4:	e00f      	b.n	8008506 <Keypad_Init+0x32>
		Pins |= (1 << (x + keypad->InputStartingPin));
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	68da      	ldr	r2, [r3, #12]
 80084ea:	6a3b      	ldr	r3, [r7, #32]
 80084ec:	4413      	add	r3, r2
 80084ee:	2201      	movs	r2, #1
 80084f0:	fa02 f303 	lsl.w	r3, r2, r3
 80084f4:	b21a      	sxth	r2, r3
 80084f6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80084fa:	4313      	orrs	r3, r2
 80084fc:	b21b      	sxth	r3, r3
 80084fe:	84fb      	strh	r3, [r7, #38]	@ 0x26
	for (int x = 0; x < keypad->Columns; x++) {
 8008500:	6a3b      	ldr	r3, [r7, #32]
 8008502:	3301      	adds	r3, #1
 8008504:	623b      	str	r3, [r7, #32]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	785b      	ldrb	r3, [r3, #1]
 800850a:	461a      	mov	r2, r3
 800850c:	6a3b      	ldr	r3, [r7, #32]
 800850e:	4293      	cmp	r3, r2
 8008510:	dbe9      	blt.n	80084e6 <Keypad_Init+0x12>
	}
//Load the input pin Mask
	keypad->IP_Mask = Pins;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8008516:	831a      	strh	r2, [r3, #24]

	config.Mode = GPIO_MODE_INPUT;
 8008518:	2300      	movs	r3, #0
 800851a:	613b      	str	r3, [r7, #16]
	config.Pull = GPIO_PULLDOWN;
 800851c:	2302      	movs	r3, #2
 800851e:	617b      	str	r3, [r7, #20]
	config.Pin = Pins;
 8008520:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008522:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(keypad->IntputPort, &config);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	689b      	ldr	r3, [r3, #8]
 8008528:	f107 020c 	add.w	r2, r7, #12
 800852c:	4611      	mov	r1, r2
 800852e:	4618      	mov	r0, r3
 8008530:	f000 f9b6 	bl	80088a0 <HAL_GPIO_Init>

//configure the rows gpio pins as outputs
	Pins = 0;
 8008534:	2300      	movs	r3, #0
 8008536:	84fb      	strh	r3, [r7, #38]	@ 0x26
	for (int x = 0; x < keypad->Rows; x++) {
 8008538:	2300      	movs	r3, #0
 800853a:	61fb      	str	r3, [r7, #28]
 800853c:	e00f      	b.n	800855e <Keypad_Init+0x8a>
		Pins |= (1 << (x + keypad->OutputStartingPin));
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	695a      	ldr	r2, [r3, #20]
 8008542:	69fb      	ldr	r3, [r7, #28]
 8008544:	4413      	add	r3, r2
 8008546:	2201      	movs	r2, #1
 8008548:	fa02 f303 	lsl.w	r3, r2, r3
 800854c:	b21a      	sxth	r2, r3
 800854e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8008552:	4313      	orrs	r3, r2
 8008554:	b21b      	sxth	r3, r3
 8008556:	84fb      	strh	r3, [r7, #38]	@ 0x26
	for (int x = 0; x < keypad->Rows; x++) {
 8008558:	69fb      	ldr	r3, [r7, #28]
 800855a:	3301      	adds	r3, #1
 800855c:	61fb      	str	r3, [r7, #28]
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	781b      	ldrb	r3, [r3, #0]
 8008562:	461a      	mov	r2, r3
 8008564:	69fb      	ldr	r3, [r7, #28]
 8008566:	4293      	cmp	r3, r2
 8008568:	dbe9      	blt.n	800853e <Keypad_Init+0x6a>
	}

//Load the output pin Mask
	keypad->OP_Mask = Pins;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800856e:	835a      	strh	r2, [r3, #26]

	config.Mode = GPIO_MODE_OUTPUT_PP;
 8008570:	2301      	movs	r3, #1
 8008572:	613b      	str	r3, [r7, #16]
	config.Speed = GPIO_SPEED_FREQ_LOW;
 8008574:	2302      	movs	r3, #2
 8008576:	61bb      	str	r3, [r7, #24]
	config.Pin = Pins;
 8008578:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800857a:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(keypad->IntputPort, &config);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	689b      	ldr	r3, [r3, #8]
 8008580:	f107 020c 	add.w	r2, r7, #12
 8008584:	4611      	mov	r1, r2
 8008586:	4618      	mov	r0, r3
 8008588:	f000 f98a 	bl	80088a0 <HAL_GPIO_Init>

//turn off all the outputs
	Keypad_SetOutputs(keypad, 0);
 800858c:	2100      	movs	r1, #0
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f7ff ff3b 	bl	800840a <Keypad_SetOutputs>
}
 8008594:	bf00      	nop
 8008596:	3728      	adds	r7, #40	@ 0x28
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}

0800859c <Keypad_Get_Key>:

uint8_t Keypad_Get_Key(Matrix_Keypad_t *keypad, uint8_t key) {
 800859c:	b480      	push	{r7}
 800859e:	b083      	sub	sp, #12
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
 80085a4:	460b      	mov	r3, r1
 80085a6:	70fb      	strb	r3, [r7, #3]
	return (keypad->KeysStatus & (1 << key)) ? 1 : 0;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	685b      	ldr	r3, [r3, #4]
 80085ac:	78fa      	ldrb	r2, [r7, #3]
 80085ae:	2101      	movs	r1, #1
 80085b0:	fa01 f202 	lsl.w	r2, r1, r2
 80085b4:	4013      	ands	r3, r2
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	bf14      	ite	ne
 80085ba:	2301      	movne	r3, #1
 80085bc:	2300      	moveq	r3, #0
 80085be:	b2db      	uxtb	r3, r3
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	370c      	adds	r7, #12
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bc80      	pop	{r7}
 80085c8:	4770      	bx	lr
	...

080085cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80085d0:	4b08      	ldr	r3, [pc, #32]	@ (80085f4 <HAL_Init+0x28>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	4a07      	ldr	r2, [pc, #28]	@ (80085f4 <HAL_Init+0x28>)
 80085d6:	f043 0310 	orr.w	r3, r3, #16
 80085da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80085dc:	2003      	movs	r0, #3
 80085de:	f000 f92b 	bl	8008838 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80085e2:	200f      	movs	r0, #15
 80085e4:	f000 f808 	bl	80085f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80085e8:	f7ff f908 	bl	80077fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80085ec:	2300      	movs	r3, #0
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	bd80      	pop	{r7, pc}
 80085f2:	bf00      	nop
 80085f4:	40022000 	.word	0x40022000

080085f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b082      	sub	sp, #8
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008600:	4b12      	ldr	r3, [pc, #72]	@ (800864c <HAL_InitTick+0x54>)
 8008602:	681a      	ldr	r2, [r3, #0]
 8008604:	4b12      	ldr	r3, [pc, #72]	@ (8008650 <HAL_InitTick+0x58>)
 8008606:	781b      	ldrb	r3, [r3, #0]
 8008608:	4619      	mov	r1, r3
 800860a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800860e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008612:	fbb2 f3f3 	udiv	r3, r2, r3
 8008616:	4618      	mov	r0, r3
 8008618:	f000 f935 	bl	8008886 <HAL_SYSTICK_Config>
 800861c:	4603      	mov	r3, r0
 800861e:	2b00      	cmp	r3, #0
 8008620:	d001      	beq.n	8008626 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008622:	2301      	movs	r3, #1
 8008624:	e00e      	b.n	8008644 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2b0f      	cmp	r3, #15
 800862a:	d80a      	bhi.n	8008642 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800862c:	2200      	movs	r2, #0
 800862e:	6879      	ldr	r1, [r7, #4]
 8008630:	f04f 30ff 	mov.w	r0, #4294967295
 8008634:	f000 f90b 	bl	800884e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008638:	4a06      	ldr	r2, [pc, #24]	@ (8008654 <HAL_InitTick+0x5c>)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800863e:	2300      	movs	r3, #0
 8008640:	e000      	b.n	8008644 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008642:	2301      	movs	r3, #1
}
 8008644:	4618      	mov	r0, r3
 8008646:	3708      	adds	r7, #8
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}
 800864c:	2000003c 	.word	0x2000003c
 8008650:	20000044 	.word	0x20000044
 8008654:	20000040 	.word	0x20000040

08008658 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008658:	b480      	push	{r7}
 800865a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800865c:	4b05      	ldr	r3, [pc, #20]	@ (8008674 <HAL_IncTick+0x1c>)
 800865e:	781b      	ldrb	r3, [r3, #0]
 8008660:	461a      	mov	r2, r3
 8008662:	4b05      	ldr	r3, [pc, #20]	@ (8008678 <HAL_IncTick+0x20>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4413      	add	r3, r2
 8008668:	4a03      	ldr	r2, [pc, #12]	@ (8008678 <HAL_IncTick+0x20>)
 800866a:	6013      	str	r3, [r2, #0]
}
 800866c:	bf00      	nop
 800866e:	46bd      	mov	sp, r7
 8008670:	bc80      	pop	{r7}
 8008672:	4770      	bx	lr
 8008674:	20000044 	.word	0x20000044
 8008678:	2000019c 	.word	0x2000019c

0800867c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800867c:	b480      	push	{r7}
 800867e:	af00      	add	r7, sp, #0
  return uwTick;
 8008680:	4b02      	ldr	r3, [pc, #8]	@ (800868c <HAL_GetTick+0x10>)
 8008682:	681b      	ldr	r3, [r3, #0]
}
 8008684:	4618      	mov	r0, r3
 8008686:	46bd      	mov	sp, r7
 8008688:	bc80      	pop	{r7}
 800868a:	4770      	bx	lr
 800868c:	2000019c 	.word	0x2000019c

08008690 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b084      	sub	sp, #16
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008698:	f7ff fff0 	bl	800867c <HAL_GetTick>
 800869c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086a8:	d005      	beq.n	80086b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80086aa:	4b0a      	ldr	r3, [pc, #40]	@ (80086d4 <HAL_Delay+0x44>)
 80086ac:	781b      	ldrb	r3, [r3, #0]
 80086ae:	461a      	mov	r2, r3
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	4413      	add	r3, r2
 80086b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80086b6:	bf00      	nop
 80086b8:	f7ff ffe0 	bl	800867c <HAL_GetTick>
 80086bc:	4602      	mov	r2, r0
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	1ad3      	subs	r3, r2, r3
 80086c2:	68fa      	ldr	r2, [r7, #12]
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d8f7      	bhi.n	80086b8 <HAL_Delay+0x28>
  {
  }
}
 80086c8:	bf00      	nop
 80086ca:	bf00      	nop
 80086cc:	3710      	adds	r7, #16
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
 80086d2:	bf00      	nop
 80086d4:	20000044 	.word	0x20000044

080086d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80086d8:	b480      	push	{r7}
 80086da:	b085      	sub	sp, #20
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f003 0307 	and.w	r3, r3, #7
 80086e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80086e8:	4b0c      	ldr	r3, [pc, #48]	@ (800871c <__NVIC_SetPriorityGrouping+0x44>)
 80086ea:	68db      	ldr	r3, [r3, #12]
 80086ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80086ee:	68ba      	ldr	r2, [r7, #8]
 80086f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80086f4:	4013      	ands	r3, r2
 80086f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008700:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008704:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008708:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800870a:	4a04      	ldr	r2, [pc, #16]	@ (800871c <__NVIC_SetPriorityGrouping+0x44>)
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	60d3      	str	r3, [r2, #12]
}
 8008710:	bf00      	nop
 8008712:	3714      	adds	r7, #20
 8008714:	46bd      	mov	sp, r7
 8008716:	bc80      	pop	{r7}
 8008718:	4770      	bx	lr
 800871a:	bf00      	nop
 800871c:	e000ed00 	.word	0xe000ed00

08008720 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008720:	b480      	push	{r7}
 8008722:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008724:	4b04      	ldr	r3, [pc, #16]	@ (8008738 <__NVIC_GetPriorityGrouping+0x18>)
 8008726:	68db      	ldr	r3, [r3, #12]
 8008728:	0a1b      	lsrs	r3, r3, #8
 800872a:	f003 0307 	and.w	r3, r3, #7
}
 800872e:	4618      	mov	r0, r3
 8008730:	46bd      	mov	sp, r7
 8008732:	bc80      	pop	{r7}
 8008734:	4770      	bx	lr
 8008736:	bf00      	nop
 8008738:	e000ed00 	.word	0xe000ed00

0800873c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800873c:	b480      	push	{r7}
 800873e:	b083      	sub	sp, #12
 8008740:	af00      	add	r7, sp, #0
 8008742:	4603      	mov	r3, r0
 8008744:	6039      	str	r1, [r7, #0]
 8008746:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800874c:	2b00      	cmp	r3, #0
 800874e:	db0a      	blt.n	8008766 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	b2da      	uxtb	r2, r3
 8008754:	490c      	ldr	r1, [pc, #48]	@ (8008788 <__NVIC_SetPriority+0x4c>)
 8008756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800875a:	0112      	lsls	r2, r2, #4
 800875c:	b2d2      	uxtb	r2, r2
 800875e:	440b      	add	r3, r1
 8008760:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008764:	e00a      	b.n	800877c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	b2da      	uxtb	r2, r3
 800876a:	4908      	ldr	r1, [pc, #32]	@ (800878c <__NVIC_SetPriority+0x50>)
 800876c:	79fb      	ldrb	r3, [r7, #7]
 800876e:	f003 030f 	and.w	r3, r3, #15
 8008772:	3b04      	subs	r3, #4
 8008774:	0112      	lsls	r2, r2, #4
 8008776:	b2d2      	uxtb	r2, r2
 8008778:	440b      	add	r3, r1
 800877a:	761a      	strb	r2, [r3, #24]
}
 800877c:	bf00      	nop
 800877e:	370c      	adds	r7, #12
 8008780:	46bd      	mov	sp, r7
 8008782:	bc80      	pop	{r7}
 8008784:	4770      	bx	lr
 8008786:	bf00      	nop
 8008788:	e000e100 	.word	0xe000e100
 800878c:	e000ed00 	.word	0xe000ed00

08008790 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008790:	b480      	push	{r7}
 8008792:	b089      	sub	sp, #36	@ 0x24
 8008794:	af00      	add	r7, sp, #0
 8008796:	60f8      	str	r0, [r7, #12]
 8008798:	60b9      	str	r1, [r7, #8]
 800879a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	f003 0307 	and.w	r3, r3, #7
 80087a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80087a4:	69fb      	ldr	r3, [r7, #28]
 80087a6:	f1c3 0307 	rsb	r3, r3, #7
 80087aa:	2b04      	cmp	r3, #4
 80087ac:	bf28      	it	cs
 80087ae:	2304      	movcs	r3, #4
 80087b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80087b2:	69fb      	ldr	r3, [r7, #28]
 80087b4:	3304      	adds	r3, #4
 80087b6:	2b06      	cmp	r3, #6
 80087b8:	d902      	bls.n	80087c0 <NVIC_EncodePriority+0x30>
 80087ba:	69fb      	ldr	r3, [r7, #28]
 80087bc:	3b03      	subs	r3, #3
 80087be:	e000      	b.n	80087c2 <NVIC_EncodePriority+0x32>
 80087c0:	2300      	movs	r3, #0
 80087c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80087c4:	f04f 32ff 	mov.w	r2, #4294967295
 80087c8:	69bb      	ldr	r3, [r7, #24]
 80087ca:	fa02 f303 	lsl.w	r3, r2, r3
 80087ce:	43da      	mvns	r2, r3
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	401a      	ands	r2, r3
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80087d8:	f04f 31ff 	mov.w	r1, #4294967295
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	fa01 f303 	lsl.w	r3, r1, r3
 80087e2:	43d9      	mvns	r1, r3
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80087e8:	4313      	orrs	r3, r2
         );
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3724      	adds	r7, #36	@ 0x24
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bc80      	pop	{r7}
 80087f2:	4770      	bx	lr

080087f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b082      	sub	sp, #8
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	3b01      	subs	r3, #1
 8008800:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008804:	d301      	bcc.n	800880a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008806:	2301      	movs	r3, #1
 8008808:	e00f      	b.n	800882a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800880a:	4a0a      	ldr	r2, [pc, #40]	@ (8008834 <SysTick_Config+0x40>)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	3b01      	subs	r3, #1
 8008810:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008812:	210f      	movs	r1, #15
 8008814:	f04f 30ff 	mov.w	r0, #4294967295
 8008818:	f7ff ff90 	bl	800873c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800881c:	4b05      	ldr	r3, [pc, #20]	@ (8008834 <SysTick_Config+0x40>)
 800881e:	2200      	movs	r2, #0
 8008820:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008822:	4b04      	ldr	r3, [pc, #16]	@ (8008834 <SysTick_Config+0x40>)
 8008824:	2207      	movs	r2, #7
 8008826:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008828:	2300      	movs	r3, #0
}
 800882a:	4618      	mov	r0, r3
 800882c:	3708      	adds	r7, #8
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}
 8008832:	bf00      	nop
 8008834:	e000e010 	.word	0xe000e010

08008838 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b082      	sub	sp, #8
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f7ff ff49 	bl	80086d8 <__NVIC_SetPriorityGrouping>
}
 8008846:	bf00      	nop
 8008848:	3708      	adds	r7, #8
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}

0800884e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800884e:	b580      	push	{r7, lr}
 8008850:	b086      	sub	sp, #24
 8008852:	af00      	add	r7, sp, #0
 8008854:	4603      	mov	r3, r0
 8008856:	60b9      	str	r1, [r7, #8]
 8008858:	607a      	str	r2, [r7, #4]
 800885a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800885c:	2300      	movs	r3, #0
 800885e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008860:	f7ff ff5e 	bl	8008720 <__NVIC_GetPriorityGrouping>
 8008864:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008866:	687a      	ldr	r2, [r7, #4]
 8008868:	68b9      	ldr	r1, [r7, #8]
 800886a:	6978      	ldr	r0, [r7, #20]
 800886c:	f7ff ff90 	bl	8008790 <NVIC_EncodePriority>
 8008870:	4602      	mov	r2, r0
 8008872:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008876:	4611      	mov	r1, r2
 8008878:	4618      	mov	r0, r3
 800887a:	f7ff ff5f 	bl	800873c <__NVIC_SetPriority>
}
 800887e:	bf00      	nop
 8008880:	3718      	adds	r7, #24
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}

08008886 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008886:	b580      	push	{r7, lr}
 8008888:	b082      	sub	sp, #8
 800888a:	af00      	add	r7, sp, #0
 800888c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f7ff ffb0 	bl	80087f4 <SysTick_Config>
 8008894:	4603      	mov	r3, r0
}
 8008896:	4618      	mov	r0, r3
 8008898:	3708      	adds	r7, #8
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}
	...

080088a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80088a0:	b480      	push	{r7}
 80088a2:	b08b      	sub	sp, #44	@ 0x2c
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
 80088a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80088aa:	2300      	movs	r3, #0
 80088ac:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80088ae:	2300      	movs	r3, #0
 80088b0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80088b2:	e169      	b.n	8008b88 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80088b4:	2201      	movs	r2, #1
 80088b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088b8:	fa02 f303 	lsl.w	r3, r2, r3
 80088bc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	69fa      	ldr	r2, [r7, #28]
 80088c4:	4013      	ands	r3, r2
 80088c6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80088c8:	69ba      	ldr	r2, [r7, #24]
 80088ca:	69fb      	ldr	r3, [r7, #28]
 80088cc:	429a      	cmp	r2, r3
 80088ce:	f040 8158 	bne.w	8008b82 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	685b      	ldr	r3, [r3, #4]
 80088d6:	4a9a      	ldr	r2, [pc, #616]	@ (8008b40 <HAL_GPIO_Init+0x2a0>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d05e      	beq.n	800899a <HAL_GPIO_Init+0xfa>
 80088dc:	4a98      	ldr	r2, [pc, #608]	@ (8008b40 <HAL_GPIO_Init+0x2a0>)
 80088de:	4293      	cmp	r3, r2
 80088e0:	d875      	bhi.n	80089ce <HAL_GPIO_Init+0x12e>
 80088e2:	4a98      	ldr	r2, [pc, #608]	@ (8008b44 <HAL_GPIO_Init+0x2a4>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d058      	beq.n	800899a <HAL_GPIO_Init+0xfa>
 80088e8:	4a96      	ldr	r2, [pc, #600]	@ (8008b44 <HAL_GPIO_Init+0x2a4>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d86f      	bhi.n	80089ce <HAL_GPIO_Init+0x12e>
 80088ee:	4a96      	ldr	r2, [pc, #600]	@ (8008b48 <HAL_GPIO_Init+0x2a8>)
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d052      	beq.n	800899a <HAL_GPIO_Init+0xfa>
 80088f4:	4a94      	ldr	r2, [pc, #592]	@ (8008b48 <HAL_GPIO_Init+0x2a8>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d869      	bhi.n	80089ce <HAL_GPIO_Init+0x12e>
 80088fa:	4a94      	ldr	r2, [pc, #592]	@ (8008b4c <HAL_GPIO_Init+0x2ac>)
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d04c      	beq.n	800899a <HAL_GPIO_Init+0xfa>
 8008900:	4a92      	ldr	r2, [pc, #584]	@ (8008b4c <HAL_GPIO_Init+0x2ac>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d863      	bhi.n	80089ce <HAL_GPIO_Init+0x12e>
 8008906:	4a92      	ldr	r2, [pc, #584]	@ (8008b50 <HAL_GPIO_Init+0x2b0>)
 8008908:	4293      	cmp	r3, r2
 800890a:	d046      	beq.n	800899a <HAL_GPIO_Init+0xfa>
 800890c:	4a90      	ldr	r2, [pc, #576]	@ (8008b50 <HAL_GPIO_Init+0x2b0>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d85d      	bhi.n	80089ce <HAL_GPIO_Init+0x12e>
 8008912:	2b12      	cmp	r3, #18
 8008914:	d82a      	bhi.n	800896c <HAL_GPIO_Init+0xcc>
 8008916:	2b12      	cmp	r3, #18
 8008918:	d859      	bhi.n	80089ce <HAL_GPIO_Init+0x12e>
 800891a:	a201      	add	r2, pc, #4	@ (adr r2, 8008920 <HAL_GPIO_Init+0x80>)
 800891c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008920:	0800899b 	.word	0x0800899b
 8008924:	08008975 	.word	0x08008975
 8008928:	08008987 	.word	0x08008987
 800892c:	080089c9 	.word	0x080089c9
 8008930:	080089cf 	.word	0x080089cf
 8008934:	080089cf 	.word	0x080089cf
 8008938:	080089cf 	.word	0x080089cf
 800893c:	080089cf 	.word	0x080089cf
 8008940:	080089cf 	.word	0x080089cf
 8008944:	080089cf 	.word	0x080089cf
 8008948:	080089cf 	.word	0x080089cf
 800894c:	080089cf 	.word	0x080089cf
 8008950:	080089cf 	.word	0x080089cf
 8008954:	080089cf 	.word	0x080089cf
 8008958:	080089cf 	.word	0x080089cf
 800895c:	080089cf 	.word	0x080089cf
 8008960:	080089cf 	.word	0x080089cf
 8008964:	0800897d 	.word	0x0800897d
 8008968:	08008991 	.word	0x08008991
 800896c:	4a79      	ldr	r2, [pc, #484]	@ (8008b54 <HAL_GPIO_Init+0x2b4>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d013      	beq.n	800899a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8008972:	e02c      	b.n	80089ce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	68db      	ldr	r3, [r3, #12]
 8008978:	623b      	str	r3, [r7, #32]
          break;
 800897a:	e029      	b.n	80089d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	68db      	ldr	r3, [r3, #12]
 8008980:	3304      	adds	r3, #4
 8008982:	623b      	str	r3, [r7, #32]
          break;
 8008984:	e024      	b.n	80089d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	68db      	ldr	r3, [r3, #12]
 800898a:	3308      	adds	r3, #8
 800898c:	623b      	str	r3, [r7, #32]
          break;
 800898e:	e01f      	b.n	80089d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	68db      	ldr	r3, [r3, #12]
 8008994:	330c      	adds	r3, #12
 8008996:	623b      	str	r3, [r7, #32]
          break;
 8008998:	e01a      	b.n	80089d0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	689b      	ldr	r3, [r3, #8]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d102      	bne.n	80089a8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80089a2:	2304      	movs	r3, #4
 80089a4:	623b      	str	r3, [r7, #32]
          break;
 80089a6:	e013      	b.n	80089d0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	689b      	ldr	r3, [r3, #8]
 80089ac:	2b01      	cmp	r3, #1
 80089ae:	d105      	bne.n	80089bc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80089b0:	2308      	movs	r3, #8
 80089b2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	69fa      	ldr	r2, [r7, #28]
 80089b8:	611a      	str	r2, [r3, #16]
          break;
 80089ba:	e009      	b.n	80089d0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80089bc:	2308      	movs	r3, #8
 80089be:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	69fa      	ldr	r2, [r7, #28]
 80089c4:	615a      	str	r2, [r3, #20]
          break;
 80089c6:	e003      	b.n	80089d0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80089c8:	2300      	movs	r3, #0
 80089ca:	623b      	str	r3, [r7, #32]
          break;
 80089cc:	e000      	b.n	80089d0 <HAL_GPIO_Init+0x130>
          break;
 80089ce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80089d0:	69bb      	ldr	r3, [r7, #24]
 80089d2:	2bff      	cmp	r3, #255	@ 0xff
 80089d4:	d801      	bhi.n	80089da <HAL_GPIO_Init+0x13a>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	e001      	b.n	80089de <HAL_GPIO_Init+0x13e>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	3304      	adds	r3, #4
 80089de:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80089e0:	69bb      	ldr	r3, [r7, #24]
 80089e2:	2bff      	cmp	r3, #255	@ 0xff
 80089e4:	d802      	bhi.n	80089ec <HAL_GPIO_Init+0x14c>
 80089e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089e8:	009b      	lsls	r3, r3, #2
 80089ea:	e002      	b.n	80089f2 <HAL_GPIO_Init+0x152>
 80089ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089ee:	3b08      	subs	r3, #8
 80089f0:	009b      	lsls	r3, r3, #2
 80089f2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	681a      	ldr	r2, [r3, #0]
 80089f8:	210f      	movs	r1, #15
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	fa01 f303 	lsl.w	r3, r1, r3
 8008a00:	43db      	mvns	r3, r3
 8008a02:	401a      	ands	r2, r3
 8008a04:	6a39      	ldr	r1, [r7, #32]
 8008a06:	693b      	ldr	r3, [r7, #16]
 8008a08:	fa01 f303 	lsl.w	r3, r1, r3
 8008a0c:	431a      	orrs	r2, r3
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	685b      	ldr	r3, [r3, #4]
 8008a16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	f000 80b1 	beq.w	8008b82 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8008a20:	4b4d      	ldr	r3, [pc, #308]	@ (8008b58 <HAL_GPIO_Init+0x2b8>)
 8008a22:	699b      	ldr	r3, [r3, #24]
 8008a24:	4a4c      	ldr	r2, [pc, #304]	@ (8008b58 <HAL_GPIO_Init+0x2b8>)
 8008a26:	f043 0301 	orr.w	r3, r3, #1
 8008a2a:	6193      	str	r3, [r2, #24]
 8008a2c:	4b4a      	ldr	r3, [pc, #296]	@ (8008b58 <HAL_GPIO_Init+0x2b8>)
 8008a2e:	699b      	ldr	r3, [r3, #24]
 8008a30:	f003 0301 	and.w	r3, r3, #1
 8008a34:	60bb      	str	r3, [r7, #8]
 8008a36:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8008a38:	4a48      	ldr	r2, [pc, #288]	@ (8008b5c <HAL_GPIO_Init+0x2bc>)
 8008a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a3c:	089b      	lsrs	r3, r3, #2
 8008a3e:	3302      	adds	r3, #2
 8008a40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a44:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8008a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a48:	f003 0303 	and.w	r3, r3, #3
 8008a4c:	009b      	lsls	r3, r3, #2
 8008a4e:	220f      	movs	r2, #15
 8008a50:	fa02 f303 	lsl.w	r3, r2, r3
 8008a54:	43db      	mvns	r3, r3
 8008a56:	68fa      	ldr	r2, [r7, #12]
 8008a58:	4013      	ands	r3, r2
 8008a5a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	4a40      	ldr	r2, [pc, #256]	@ (8008b60 <HAL_GPIO_Init+0x2c0>)
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d013      	beq.n	8008a8c <HAL_GPIO_Init+0x1ec>
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	4a3f      	ldr	r2, [pc, #252]	@ (8008b64 <HAL_GPIO_Init+0x2c4>)
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	d00d      	beq.n	8008a88 <HAL_GPIO_Init+0x1e8>
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	4a3e      	ldr	r2, [pc, #248]	@ (8008b68 <HAL_GPIO_Init+0x2c8>)
 8008a70:	4293      	cmp	r3, r2
 8008a72:	d007      	beq.n	8008a84 <HAL_GPIO_Init+0x1e4>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	4a3d      	ldr	r2, [pc, #244]	@ (8008b6c <HAL_GPIO_Init+0x2cc>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d101      	bne.n	8008a80 <HAL_GPIO_Init+0x1e0>
 8008a7c:	2303      	movs	r3, #3
 8008a7e:	e006      	b.n	8008a8e <HAL_GPIO_Init+0x1ee>
 8008a80:	2304      	movs	r3, #4
 8008a82:	e004      	b.n	8008a8e <HAL_GPIO_Init+0x1ee>
 8008a84:	2302      	movs	r3, #2
 8008a86:	e002      	b.n	8008a8e <HAL_GPIO_Init+0x1ee>
 8008a88:	2301      	movs	r3, #1
 8008a8a:	e000      	b.n	8008a8e <HAL_GPIO_Init+0x1ee>
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a90:	f002 0203 	and.w	r2, r2, #3
 8008a94:	0092      	lsls	r2, r2, #2
 8008a96:	4093      	lsls	r3, r2
 8008a98:	68fa      	ldr	r2, [r7, #12]
 8008a9a:	4313      	orrs	r3, r2
 8008a9c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8008a9e:	492f      	ldr	r1, [pc, #188]	@ (8008b5c <HAL_GPIO_Init+0x2bc>)
 8008aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aa2:	089b      	lsrs	r3, r3, #2
 8008aa4:	3302      	adds	r3, #2
 8008aa6:	68fa      	ldr	r2, [r7, #12]
 8008aa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	685b      	ldr	r3, [r3, #4]
 8008ab0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d006      	beq.n	8008ac6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8008ab8:	4b2d      	ldr	r3, [pc, #180]	@ (8008b70 <HAL_GPIO_Init+0x2d0>)
 8008aba:	689a      	ldr	r2, [r3, #8]
 8008abc:	492c      	ldr	r1, [pc, #176]	@ (8008b70 <HAL_GPIO_Init+0x2d0>)
 8008abe:	69bb      	ldr	r3, [r7, #24]
 8008ac0:	4313      	orrs	r3, r2
 8008ac2:	608b      	str	r3, [r1, #8]
 8008ac4:	e006      	b.n	8008ad4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8008ac6:	4b2a      	ldr	r3, [pc, #168]	@ (8008b70 <HAL_GPIO_Init+0x2d0>)
 8008ac8:	689a      	ldr	r2, [r3, #8]
 8008aca:	69bb      	ldr	r3, [r7, #24]
 8008acc:	43db      	mvns	r3, r3
 8008ace:	4928      	ldr	r1, [pc, #160]	@ (8008b70 <HAL_GPIO_Init+0x2d0>)
 8008ad0:	4013      	ands	r3, r2
 8008ad2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d006      	beq.n	8008aee <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8008ae0:	4b23      	ldr	r3, [pc, #140]	@ (8008b70 <HAL_GPIO_Init+0x2d0>)
 8008ae2:	68da      	ldr	r2, [r3, #12]
 8008ae4:	4922      	ldr	r1, [pc, #136]	@ (8008b70 <HAL_GPIO_Init+0x2d0>)
 8008ae6:	69bb      	ldr	r3, [r7, #24]
 8008ae8:	4313      	orrs	r3, r2
 8008aea:	60cb      	str	r3, [r1, #12]
 8008aec:	e006      	b.n	8008afc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8008aee:	4b20      	ldr	r3, [pc, #128]	@ (8008b70 <HAL_GPIO_Init+0x2d0>)
 8008af0:	68da      	ldr	r2, [r3, #12]
 8008af2:	69bb      	ldr	r3, [r7, #24]
 8008af4:	43db      	mvns	r3, r3
 8008af6:	491e      	ldr	r1, [pc, #120]	@ (8008b70 <HAL_GPIO_Init+0x2d0>)
 8008af8:	4013      	ands	r3, r2
 8008afa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	685b      	ldr	r3, [r3, #4]
 8008b00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d006      	beq.n	8008b16 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8008b08:	4b19      	ldr	r3, [pc, #100]	@ (8008b70 <HAL_GPIO_Init+0x2d0>)
 8008b0a:	685a      	ldr	r2, [r3, #4]
 8008b0c:	4918      	ldr	r1, [pc, #96]	@ (8008b70 <HAL_GPIO_Init+0x2d0>)
 8008b0e:	69bb      	ldr	r3, [r7, #24]
 8008b10:	4313      	orrs	r3, r2
 8008b12:	604b      	str	r3, [r1, #4]
 8008b14:	e006      	b.n	8008b24 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8008b16:	4b16      	ldr	r3, [pc, #88]	@ (8008b70 <HAL_GPIO_Init+0x2d0>)
 8008b18:	685a      	ldr	r2, [r3, #4]
 8008b1a:	69bb      	ldr	r3, [r7, #24]
 8008b1c:	43db      	mvns	r3, r3
 8008b1e:	4914      	ldr	r1, [pc, #80]	@ (8008b70 <HAL_GPIO_Init+0x2d0>)
 8008b20:	4013      	ands	r3, r2
 8008b22:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	685b      	ldr	r3, [r3, #4]
 8008b28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d021      	beq.n	8008b74 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8008b30:	4b0f      	ldr	r3, [pc, #60]	@ (8008b70 <HAL_GPIO_Init+0x2d0>)
 8008b32:	681a      	ldr	r2, [r3, #0]
 8008b34:	490e      	ldr	r1, [pc, #56]	@ (8008b70 <HAL_GPIO_Init+0x2d0>)
 8008b36:	69bb      	ldr	r3, [r7, #24]
 8008b38:	4313      	orrs	r3, r2
 8008b3a:	600b      	str	r3, [r1, #0]
 8008b3c:	e021      	b.n	8008b82 <HAL_GPIO_Init+0x2e2>
 8008b3e:	bf00      	nop
 8008b40:	10320000 	.word	0x10320000
 8008b44:	10310000 	.word	0x10310000
 8008b48:	10220000 	.word	0x10220000
 8008b4c:	10210000 	.word	0x10210000
 8008b50:	10120000 	.word	0x10120000
 8008b54:	10110000 	.word	0x10110000
 8008b58:	40021000 	.word	0x40021000
 8008b5c:	40010000 	.word	0x40010000
 8008b60:	40010800 	.word	0x40010800
 8008b64:	40010c00 	.word	0x40010c00
 8008b68:	40011000 	.word	0x40011000
 8008b6c:	40011400 	.word	0x40011400
 8008b70:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8008b74:	4b0b      	ldr	r3, [pc, #44]	@ (8008ba4 <HAL_GPIO_Init+0x304>)
 8008b76:	681a      	ldr	r2, [r3, #0]
 8008b78:	69bb      	ldr	r3, [r7, #24]
 8008b7a:	43db      	mvns	r3, r3
 8008b7c:	4909      	ldr	r1, [pc, #36]	@ (8008ba4 <HAL_GPIO_Init+0x304>)
 8008b7e:	4013      	ands	r3, r2
 8008b80:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8008b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b84:	3301      	adds	r3, #1
 8008b86:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	681a      	ldr	r2, [r3, #0]
 8008b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	f47f ae8e 	bne.w	80088b4 <HAL_GPIO_Init+0x14>
  }
}
 8008b98:	bf00      	nop
 8008b9a:	bf00      	nop
 8008b9c:	372c      	adds	r7, #44	@ 0x2c
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bc80      	pop	{r7}
 8008ba2:	4770      	bx	lr
 8008ba4:	40010400 	.word	0x40010400

08008ba8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b083      	sub	sp, #12
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
 8008bb0:	460b      	mov	r3, r1
 8008bb2:	807b      	strh	r3, [r7, #2]
 8008bb4:	4613      	mov	r3, r2
 8008bb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008bb8:	787b      	ldrb	r3, [r7, #1]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d003      	beq.n	8008bc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008bbe:	887a      	ldrh	r2, [r7, #2]
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8008bc4:	e003      	b.n	8008bce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8008bc6:	887b      	ldrh	r3, [r7, #2]
 8008bc8:	041a      	lsls	r2, r3, #16
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	611a      	str	r2, [r3, #16]
}
 8008bce:	bf00      	nop
 8008bd0:	370c      	adds	r7, #12
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bc80      	pop	{r7}
 8008bd6:	4770      	bx	lr

08008bd8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b084      	sub	sp, #16
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d101      	bne.n	8008bea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008be6:	2301      	movs	r3, #1
 8008be8:	e12b      	b.n	8008e42 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008bf0:	b2db      	uxtb	r3, r3
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d106      	bne.n	8008c04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f7fe fe2e 	bl	8007860 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2224      	movs	r2, #36	@ 0x24
 8008c08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	681a      	ldr	r2, [r3, #0]
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f022 0201 	bic.w	r2, r2, #1
 8008c1a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	681a      	ldr	r2, [r3, #0]
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008c2a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	681a      	ldr	r2, [r3, #0]
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008c3a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008c3c:	f002 f8b6 	bl	800adac <HAL_RCC_GetPCLK1Freq>
 8008c40:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	685b      	ldr	r3, [r3, #4]
 8008c46:	4a81      	ldr	r2, [pc, #516]	@ (8008e4c <HAL_I2C_Init+0x274>)
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	d807      	bhi.n	8008c5c <HAL_I2C_Init+0x84>
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	4a80      	ldr	r2, [pc, #512]	@ (8008e50 <HAL_I2C_Init+0x278>)
 8008c50:	4293      	cmp	r3, r2
 8008c52:	bf94      	ite	ls
 8008c54:	2301      	movls	r3, #1
 8008c56:	2300      	movhi	r3, #0
 8008c58:	b2db      	uxtb	r3, r3
 8008c5a:	e006      	b.n	8008c6a <HAL_I2C_Init+0x92>
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	4a7d      	ldr	r2, [pc, #500]	@ (8008e54 <HAL_I2C_Init+0x27c>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	bf94      	ite	ls
 8008c64:	2301      	movls	r3, #1
 8008c66:	2300      	movhi	r3, #0
 8008c68:	b2db      	uxtb	r3, r3
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d001      	beq.n	8008c72 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008c6e:	2301      	movs	r3, #1
 8008c70:	e0e7      	b.n	8008e42 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	4a78      	ldr	r2, [pc, #480]	@ (8008e58 <HAL_I2C_Init+0x280>)
 8008c76:	fba2 2303 	umull	r2, r3, r2, r3
 8008c7a:	0c9b      	lsrs	r3, r3, #18
 8008c7c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	68ba      	ldr	r2, [r7, #8]
 8008c8e:	430a      	orrs	r2, r1
 8008c90:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	6a1b      	ldr	r3, [r3, #32]
 8008c98:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	685b      	ldr	r3, [r3, #4]
 8008ca0:	4a6a      	ldr	r2, [pc, #424]	@ (8008e4c <HAL_I2C_Init+0x274>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d802      	bhi.n	8008cac <HAL_I2C_Init+0xd4>
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	3301      	adds	r3, #1
 8008caa:	e009      	b.n	8008cc0 <HAL_I2C_Init+0xe8>
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8008cb2:	fb02 f303 	mul.w	r3, r2, r3
 8008cb6:	4a69      	ldr	r2, [pc, #420]	@ (8008e5c <HAL_I2C_Init+0x284>)
 8008cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8008cbc:	099b      	lsrs	r3, r3, #6
 8008cbe:	3301      	adds	r3, #1
 8008cc0:	687a      	ldr	r2, [r7, #4]
 8008cc2:	6812      	ldr	r2, [r2, #0]
 8008cc4:	430b      	orrs	r3, r1
 8008cc6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	69db      	ldr	r3, [r3, #28]
 8008cce:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8008cd2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	685b      	ldr	r3, [r3, #4]
 8008cda:	495c      	ldr	r1, [pc, #368]	@ (8008e4c <HAL_I2C_Init+0x274>)
 8008cdc:	428b      	cmp	r3, r1
 8008cde:	d819      	bhi.n	8008d14 <HAL_I2C_Init+0x13c>
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	1e59      	subs	r1, r3, #1
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	685b      	ldr	r3, [r3, #4]
 8008ce8:	005b      	lsls	r3, r3, #1
 8008cea:	fbb1 f3f3 	udiv	r3, r1, r3
 8008cee:	1c59      	adds	r1, r3, #1
 8008cf0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008cf4:	400b      	ands	r3, r1
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d00a      	beq.n	8008d10 <HAL_I2C_Init+0x138>
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	1e59      	subs	r1, r3, #1
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	685b      	ldr	r3, [r3, #4]
 8008d02:	005b      	lsls	r3, r3, #1
 8008d04:	fbb1 f3f3 	udiv	r3, r1, r3
 8008d08:	3301      	adds	r3, #1
 8008d0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008d0e:	e051      	b.n	8008db4 <HAL_I2C_Init+0x1dc>
 8008d10:	2304      	movs	r3, #4
 8008d12:	e04f      	b.n	8008db4 <HAL_I2C_Init+0x1dc>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	689b      	ldr	r3, [r3, #8]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d111      	bne.n	8008d40 <HAL_I2C_Init+0x168>
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	1e58      	subs	r0, r3, #1
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6859      	ldr	r1, [r3, #4]
 8008d24:	460b      	mov	r3, r1
 8008d26:	005b      	lsls	r3, r3, #1
 8008d28:	440b      	add	r3, r1
 8008d2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8008d2e:	3301      	adds	r3, #1
 8008d30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	bf0c      	ite	eq
 8008d38:	2301      	moveq	r3, #1
 8008d3a:	2300      	movne	r3, #0
 8008d3c:	b2db      	uxtb	r3, r3
 8008d3e:	e012      	b.n	8008d66 <HAL_I2C_Init+0x18e>
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	1e58      	subs	r0, r3, #1
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6859      	ldr	r1, [r3, #4]
 8008d48:	460b      	mov	r3, r1
 8008d4a:	009b      	lsls	r3, r3, #2
 8008d4c:	440b      	add	r3, r1
 8008d4e:	0099      	lsls	r1, r3, #2
 8008d50:	440b      	add	r3, r1
 8008d52:	fbb0 f3f3 	udiv	r3, r0, r3
 8008d56:	3301      	adds	r3, #1
 8008d58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	bf0c      	ite	eq
 8008d60:	2301      	moveq	r3, #1
 8008d62:	2300      	movne	r3, #0
 8008d64:	b2db      	uxtb	r3, r3
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d001      	beq.n	8008d6e <HAL_I2C_Init+0x196>
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	e022      	b.n	8008db4 <HAL_I2C_Init+0x1dc>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	689b      	ldr	r3, [r3, #8]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d10e      	bne.n	8008d94 <HAL_I2C_Init+0x1bc>
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	1e58      	subs	r0, r3, #1
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6859      	ldr	r1, [r3, #4]
 8008d7e:	460b      	mov	r3, r1
 8008d80:	005b      	lsls	r3, r3, #1
 8008d82:	440b      	add	r3, r1
 8008d84:	fbb0 f3f3 	udiv	r3, r0, r3
 8008d88:	3301      	adds	r3, #1
 8008d8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008d8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d92:	e00f      	b.n	8008db4 <HAL_I2C_Init+0x1dc>
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	1e58      	subs	r0, r3, #1
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	6859      	ldr	r1, [r3, #4]
 8008d9c:	460b      	mov	r3, r1
 8008d9e:	009b      	lsls	r3, r3, #2
 8008da0:	440b      	add	r3, r1
 8008da2:	0099      	lsls	r1, r3, #2
 8008da4:	440b      	add	r3, r1
 8008da6:	fbb0 f3f3 	udiv	r3, r0, r3
 8008daa:	3301      	adds	r3, #1
 8008dac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008db0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008db4:	6879      	ldr	r1, [r7, #4]
 8008db6:	6809      	ldr	r1, [r1, #0]
 8008db8:	4313      	orrs	r3, r2
 8008dba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	69da      	ldr	r2, [r3, #28]
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6a1b      	ldr	r3, [r3, #32]
 8008dce:	431a      	orrs	r2, r3
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	430a      	orrs	r2, r1
 8008dd6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	689b      	ldr	r3, [r3, #8]
 8008dde:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8008de2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008de6:	687a      	ldr	r2, [r7, #4]
 8008de8:	6911      	ldr	r1, [r2, #16]
 8008dea:	687a      	ldr	r2, [r7, #4]
 8008dec:	68d2      	ldr	r2, [r2, #12]
 8008dee:	4311      	orrs	r1, r2
 8008df0:	687a      	ldr	r2, [r7, #4]
 8008df2:	6812      	ldr	r2, [r2, #0]
 8008df4:	430b      	orrs	r3, r1
 8008df6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	68db      	ldr	r3, [r3, #12]
 8008dfe:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	695a      	ldr	r2, [r3, #20]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	699b      	ldr	r3, [r3, #24]
 8008e0a:	431a      	orrs	r2, r3
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	430a      	orrs	r2, r1
 8008e12:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	681a      	ldr	r2, [r3, #0]
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f042 0201 	orr.w	r2, r2, #1
 8008e22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2200      	movs	r2, #0
 8008e28:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2220      	movs	r2, #32
 8008e2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2200      	movs	r2, #0
 8008e36:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8008e40:	2300      	movs	r3, #0
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	3710      	adds	r7, #16
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}
 8008e4a:	bf00      	nop
 8008e4c:	000186a0 	.word	0x000186a0
 8008e50:	001e847f 	.word	0x001e847f
 8008e54:	003d08ff 	.word	0x003d08ff
 8008e58:	431bde83 	.word	0x431bde83
 8008e5c:	10624dd3 	.word	0x10624dd3

08008e60 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b088      	sub	sp, #32
 8008e64:	af02      	add	r7, sp, #8
 8008e66:	60f8      	str	r0, [r7, #12]
 8008e68:	607a      	str	r2, [r7, #4]
 8008e6a:	461a      	mov	r2, r3
 8008e6c:	460b      	mov	r3, r1
 8008e6e:	817b      	strh	r3, [r7, #10]
 8008e70:	4613      	mov	r3, r2
 8008e72:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008e74:	f7ff fc02 	bl	800867c <HAL_GetTick>
 8008e78:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008e80:	b2db      	uxtb	r3, r3
 8008e82:	2b20      	cmp	r3, #32
 8008e84:	f040 80e0 	bne.w	8009048 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008e88:	697b      	ldr	r3, [r7, #20]
 8008e8a:	9300      	str	r3, [sp, #0]
 8008e8c:	2319      	movs	r3, #25
 8008e8e:	2201      	movs	r2, #1
 8008e90:	4970      	ldr	r1, [pc, #448]	@ (8009054 <HAL_I2C_Master_Transmit+0x1f4>)
 8008e92:	68f8      	ldr	r0, [r7, #12]
 8008e94:	f001 f98a 	bl	800a1ac <I2C_WaitOnFlagUntilTimeout>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d001      	beq.n	8008ea2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8008e9e:	2302      	movs	r3, #2
 8008ea0:	e0d3      	b.n	800904a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008ea8:	2b01      	cmp	r3, #1
 8008eaa:	d101      	bne.n	8008eb0 <HAL_I2C_Master_Transmit+0x50>
 8008eac:	2302      	movs	r3, #2
 8008eae:	e0cc      	b.n	800904a <HAL_I2C_Master_Transmit+0x1ea>
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f003 0301 	and.w	r3, r3, #1
 8008ec2:	2b01      	cmp	r3, #1
 8008ec4:	d007      	beq.n	8008ed6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	681a      	ldr	r2, [r3, #0]
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f042 0201 	orr.w	r2, r2, #1
 8008ed4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	681a      	ldr	r2, [r3, #0]
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008ee4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	2221      	movs	r2, #33	@ 0x21
 8008eea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	2210      	movs	r2, #16
 8008ef2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	2200      	movs	r2, #0
 8008efa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	687a      	ldr	r2, [r7, #4]
 8008f00:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	893a      	ldrh	r2, [r7, #8]
 8008f06:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f0c:	b29a      	uxth	r2, r3
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	4a50      	ldr	r2, [pc, #320]	@ (8009058 <HAL_I2C_Master_Transmit+0x1f8>)
 8008f16:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008f18:	8979      	ldrh	r1, [r7, #10]
 8008f1a:	697b      	ldr	r3, [r7, #20]
 8008f1c:	6a3a      	ldr	r2, [r7, #32]
 8008f1e:	68f8      	ldr	r0, [r7, #12]
 8008f20:	f000 fe76 	bl	8009c10 <I2C_MasterRequestWrite>
 8008f24:	4603      	mov	r3, r0
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d001      	beq.n	8008f2e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	e08d      	b.n	800904a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008f2e:	2300      	movs	r3, #0
 8008f30:	613b      	str	r3, [r7, #16]
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	695b      	ldr	r3, [r3, #20]
 8008f38:	613b      	str	r3, [r7, #16]
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	699b      	ldr	r3, [r3, #24]
 8008f40:	613b      	str	r3, [r7, #16]
 8008f42:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8008f44:	e066      	b.n	8009014 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008f46:	697a      	ldr	r2, [r7, #20]
 8008f48:	6a39      	ldr	r1, [r7, #32]
 8008f4a:	68f8      	ldr	r0, [r7, #12]
 8008f4c:	f001 fa48 	bl	800a3e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8008f50:	4603      	mov	r3, r0
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d00d      	beq.n	8008f72 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f5a:	2b04      	cmp	r3, #4
 8008f5c:	d107      	bne.n	8008f6e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	681a      	ldr	r2, [r3, #0]
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008f6c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008f6e:	2301      	movs	r3, #1
 8008f70:	e06b      	b.n	800904a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f76:	781a      	ldrb	r2, [r3, #0]
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f82:	1c5a      	adds	r2, r3, #1
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f8c:	b29b      	uxth	r3, r3
 8008f8e:	3b01      	subs	r3, #1
 8008f90:	b29a      	uxth	r2, r3
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f9a:	3b01      	subs	r3, #1
 8008f9c:	b29a      	uxth	r2, r3
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	695b      	ldr	r3, [r3, #20]
 8008fa8:	f003 0304 	and.w	r3, r3, #4
 8008fac:	2b04      	cmp	r3, #4
 8008fae:	d11b      	bne.n	8008fe8 <HAL_I2C_Master_Transmit+0x188>
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d017      	beq.n	8008fe8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fbc:	781a      	ldrb	r2, [r3, #0]
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fc8:	1c5a      	adds	r2, r3, #1
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008fd2:	b29b      	uxth	r3, r3
 8008fd4:	3b01      	subs	r3, #1
 8008fd6:	b29a      	uxth	r2, r3
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008fe0:	3b01      	subs	r3, #1
 8008fe2:	b29a      	uxth	r2, r3
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008fe8:	697a      	ldr	r2, [r7, #20]
 8008fea:	6a39      	ldr	r1, [r7, #32]
 8008fec:	68f8      	ldr	r0, [r7, #12]
 8008fee:	f001 fa3f 	bl	800a470 <I2C_WaitOnBTFFlagUntilTimeout>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d00d      	beq.n	8009014 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ffc:	2b04      	cmp	r3, #4
 8008ffe:	d107      	bne.n	8009010 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	681a      	ldr	r2, [r3, #0]
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800900e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009010:	2301      	movs	r3, #1
 8009012:	e01a      	b.n	800904a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009018:	2b00      	cmp	r3, #0
 800901a:	d194      	bne.n	8008f46 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	681a      	ldr	r2, [r3, #0]
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800902a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	2220      	movs	r2, #32
 8009030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	2200      	movs	r2, #0
 8009038:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	2200      	movs	r2, #0
 8009040:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8009044:	2300      	movs	r3, #0
 8009046:	e000      	b.n	800904a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8009048:	2302      	movs	r3, #2
  }
}
 800904a:	4618      	mov	r0, r3
 800904c:	3718      	adds	r7, #24
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}
 8009052:	bf00      	nop
 8009054:	00100002 	.word	0x00100002
 8009058:	ffff0000 	.word	0xffff0000

0800905c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b08c      	sub	sp, #48	@ 0x30
 8009060:	af02      	add	r7, sp, #8
 8009062:	60f8      	str	r0, [r7, #12]
 8009064:	607a      	str	r2, [r7, #4]
 8009066:	461a      	mov	r2, r3
 8009068:	460b      	mov	r3, r1
 800906a:	817b      	strh	r3, [r7, #10]
 800906c:	4613      	mov	r3, r2
 800906e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8009070:	2300      	movs	r3, #0
 8009072:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009074:	f7ff fb02 	bl	800867c <HAL_GetTick>
 8009078:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009080:	b2db      	uxtb	r3, r3
 8009082:	2b20      	cmp	r3, #32
 8009084:	f040 824b 	bne.w	800951e <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800908a:	9300      	str	r3, [sp, #0]
 800908c:	2319      	movs	r3, #25
 800908e:	2201      	movs	r2, #1
 8009090:	497f      	ldr	r1, [pc, #508]	@ (8009290 <HAL_I2C_Master_Receive+0x234>)
 8009092:	68f8      	ldr	r0, [r7, #12]
 8009094:	f001 f88a 	bl	800a1ac <I2C_WaitOnFlagUntilTimeout>
 8009098:	4603      	mov	r3, r0
 800909a:	2b00      	cmp	r3, #0
 800909c:	d001      	beq.n	80090a2 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800909e:	2302      	movs	r3, #2
 80090a0:	e23e      	b.n	8009520 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80090a8:	2b01      	cmp	r3, #1
 80090aa:	d101      	bne.n	80090b0 <HAL_I2C_Master_Receive+0x54>
 80090ac:	2302      	movs	r3, #2
 80090ae:	e237      	b.n	8009520 <HAL_I2C_Master_Receive+0x4c4>
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	2201      	movs	r2, #1
 80090b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f003 0301 	and.w	r3, r3, #1
 80090c2:	2b01      	cmp	r3, #1
 80090c4:	d007      	beq.n	80090d6 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	681a      	ldr	r2, [r3, #0]
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f042 0201 	orr.w	r2, r2, #1
 80090d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	681a      	ldr	r2, [r3, #0]
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80090e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	2222      	movs	r2, #34	@ 0x22
 80090ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	2210      	movs	r2, #16
 80090f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	2200      	movs	r2, #0
 80090fa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	687a      	ldr	r2, [r7, #4]
 8009100:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	893a      	ldrh	r2, [r7, #8]
 8009106:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800910c:	b29a      	uxth	r2, r3
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	4a5f      	ldr	r2, [pc, #380]	@ (8009294 <HAL_I2C_Master_Receive+0x238>)
 8009116:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009118:	8979      	ldrh	r1, [r7, #10]
 800911a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800911c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800911e:	68f8      	ldr	r0, [r7, #12]
 8009120:	f000 fdf8 	bl	8009d14 <I2C_MasterRequestRead>
 8009124:	4603      	mov	r3, r0
 8009126:	2b00      	cmp	r3, #0
 8009128:	d001      	beq.n	800912e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800912a:	2301      	movs	r3, #1
 800912c:	e1f8      	b.n	8009520 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009132:	2b00      	cmp	r3, #0
 8009134:	d113      	bne.n	800915e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009136:	2300      	movs	r3, #0
 8009138:	61fb      	str	r3, [r7, #28]
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	695b      	ldr	r3, [r3, #20]
 8009140:	61fb      	str	r3, [r7, #28]
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	699b      	ldr	r3, [r3, #24]
 8009148:	61fb      	str	r3, [r7, #28]
 800914a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	681a      	ldr	r2, [r3, #0]
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800915a:	601a      	str	r2, [r3, #0]
 800915c:	e1cc      	b.n	80094f8 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009162:	2b01      	cmp	r3, #1
 8009164:	d11e      	bne.n	80091a4 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	681a      	ldr	r2, [r3, #0]
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009174:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009176:	b672      	cpsid	i
}
 8009178:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800917a:	2300      	movs	r3, #0
 800917c:	61bb      	str	r3, [r7, #24]
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	695b      	ldr	r3, [r3, #20]
 8009184:	61bb      	str	r3, [r7, #24]
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	699b      	ldr	r3, [r3, #24]
 800918c:	61bb      	str	r3, [r7, #24]
 800918e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	681a      	ldr	r2, [r3, #0]
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800919e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80091a0:	b662      	cpsie	i
}
 80091a2:	e035      	b.n	8009210 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80091a8:	2b02      	cmp	r3, #2
 80091aa:	d11e      	bne.n	80091ea <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	681a      	ldr	r2, [r3, #0]
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80091ba:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80091bc:	b672      	cpsid	i
}
 80091be:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80091c0:	2300      	movs	r3, #0
 80091c2:	617b      	str	r3, [r7, #20]
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	695b      	ldr	r3, [r3, #20]
 80091ca:	617b      	str	r3, [r7, #20]
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	699b      	ldr	r3, [r3, #24]
 80091d2:	617b      	str	r3, [r7, #20]
 80091d4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	681a      	ldr	r2, [r3, #0]
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80091e4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80091e6:	b662      	cpsie	i
}
 80091e8:	e012      	b.n	8009210 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	681a      	ldr	r2, [r3, #0]
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80091f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80091fa:	2300      	movs	r3, #0
 80091fc:	613b      	str	r3, [r7, #16]
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	695b      	ldr	r3, [r3, #20]
 8009204:	613b      	str	r3, [r7, #16]
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	699b      	ldr	r3, [r3, #24]
 800920c:	613b      	str	r3, [r7, #16]
 800920e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8009210:	e172      	b.n	80094f8 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009216:	2b03      	cmp	r3, #3
 8009218:	f200 811f 	bhi.w	800945a <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009220:	2b01      	cmp	r3, #1
 8009222:	d123      	bne.n	800926c <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009224:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009226:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009228:	68f8      	ldr	r0, [r7, #12]
 800922a:	f001 f969 	bl	800a500 <I2C_WaitOnRXNEFlagUntilTimeout>
 800922e:	4603      	mov	r3, r0
 8009230:	2b00      	cmp	r3, #0
 8009232:	d001      	beq.n	8009238 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8009234:	2301      	movs	r3, #1
 8009236:	e173      	b.n	8009520 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	691a      	ldr	r2, [r3, #16]
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009242:	b2d2      	uxtb	r2, r2
 8009244:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800924a:	1c5a      	adds	r2, r3, #1
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009254:	3b01      	subs	r3, #1
 8009256:	b29a      	uxth	r2, r3
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009260:	b29b      	uxth	r3, r3
 8009262:	3b01      	subs	r3, #1
 8009264:	b29a      	uxth	r2, r3
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800926a:	e145      	b.n	80094f8 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009270:	2b02      	cmp	r3, #2
 8009272:	d152      	bne.n	800931a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009276:	9300      	str	r3, [sp, #0]
 8009278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800927a:	2200      	movs	r2, #0
 800927c:	4906      	ldr	r1, [pc, #24]	@ (8009298 <HAL_I2C_Master_Receive+0x23c>)
 800927e:	68f8      	ldr	r0, [r7, #12]
 8009280:	f000 ff94 	bl	800a1ac <I2C_WaitOnFlagUntilTimeout>
 8009284:	4603      	mov	r3, r0
 8009286:	2b00      	cmp	r3, #0
 8009288:	d008      	beq.n	800929c <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800928a:	2301      	movs	r3, #1
 800928c:	e148      	b.n	8009520 <HAL_I2C_Master_Receive+0x4c4>
 800928e:	bf00      	nop
 8009290:	00100002 	.word	0x00100002
 8009294:	ffff0000 	.word	0xffff0000
 8009298:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800929c:	b672      	cpsid	i
}
 800929e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	681a      	ldr	r2, [r3, #0]
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80092ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	691a      	ldr	r2, [r3, #16]
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092ba:	b2d2      	uxtb	r2, r2
 80092bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092c2:	1c5a      	adds	r2, r3, #1
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80092cc:	3b01      	subs	r3, #1
 80092ce:	b29a      	uxth	r2, r3
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80092d8:	b29b      	uxth	r3, r3
 80092da:	3b01      	subs	r3, #1
 80092dc:	b29a      	uxth	r2, r3
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80092e2:	b662      	cpsie	i
}
 80092e4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	691a      	ldr	r2, [r3, #16]
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092f0:	b2d2      	uxtb	r2, r2
 80092f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092f8:	1c5a      	adds	r2, r3, #1
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009302:	3b01      	subs	r3, #1
 8009304:	b29a      	uxth	r2, r3
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800930e:	b29b      	uxth	r3, r3
 8009310:	3b01      	subs	r3, #1
 8009312:	b29a      	uxth	r2, r3
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009318:	e0ee      	b.n	80094f8 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800931a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800931c:	9300      	str	r3, [sp, #0]
 800931e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009320:	2200      	movs	r2, #0
 8009322:	4981      	ldr	r1, [pc, #516]	@ (8009528 <HAL_I2C_Master_Receive+0x4cc>)
 8009324:	68f8      	ldr	r0, [r7, #12]
 8009326:	f000 ff41 	bl	800a1ac <I2C_WaitOnFlagUntilTimeout>
 800932a:	4603      	mov	r3, r0
 800932c:	2b00      	cmp	r3, #0
 800932e:	d001      	beq.n	8009334 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8009330:	2301      	movs	r3, #1
 8009332:	e0f5      	b.n	8009520 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	681a      	ldr	r2, [r3, #0]
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009342:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009344:	b672      	cpsid	i
}
 8009346:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	691a      	ldr	r2, [r3, #16]
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009352:	b2d2      	uxtb	r2, r2
 8009354:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800935a:	1c5a      	adds	r2, r3, #1
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009364:	3b01      	subs	r3, #1
 8009366:	b29a      	uxth	r2, r3
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009370:	b29b      	uxth	r3, r3
 8009372:	3b01      	subs	r3, #1
 8009374:	b29a      	uxth	r2, r3
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800937a:	4b6c      	ldr	r3, [pc, #432]	@ (800952c <HAL_I2C_Master_Receive+0x4d0>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	08db      	lsrs	r3, r3, #3
 8009380:	4a6b      	ldr	r2, [pc, #428]	@ (8009530 <HAL_I2C_Master_Receive+0x4d4>)
 8009382:	fba2 2303 	umull	r2, r3, r2, r3
 8009386:	0a1a      	lsrs	r2, r3, #8
 8009388:	4613      	mov	r3, r2
 800938a:	009b      	lsls	r3, r3, #2
 800938c:	4413      	add	r3, r2
 800938e:	00da      	lsls	r2, r3, #3
 8009390:	1ad3      	subs	r3, r2, r3
 8009392:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8009394:	6a3b      	ldr	r3, [r7, #32]
 8009396:	3b01      	subs	r3, #1
 8009398:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800939a:	6a3b      	ldr	r3, [r7, #32]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d118      	bne.n	80093d2 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	2200      	movs	r2, #0
 80093a4:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	2220      	movs	r2, #32
 80093aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	2200      	movs	r2, #0
 80093b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093ba:	f043 0220 	orr.w	r2, r3, #32
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80093c2:	b662      	cpsie	i
}
 80093c4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	2200      	movs	r2, #0
 80093ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80093ce:	2301      	movs	r3, #1
 80093d0:	e0a6      	b.n	8009520 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	695b      	ldr	r3, [r3, #20]
 80093d8:	f003 0304 	and.w	r3, r3, #4
 80093dc:	2b04      	cmp	r3, #4
 80093de:	d1d9      	bne.n	8009394 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	681a      	ldr	r2, [r3, #0]
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80093ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	691a      	ldr	r2, [r3, #16]
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093fa:	b2d2      	uxtb	r2, r2
 80093fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009402:	1c5a      	adds	r2, r3, #1
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800940c:	3b01      	subs	r3, #1
 800940e:	b29a      	uxth	r2, r3
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009418:	b29b      	uxth	r3, r3
 800941a:	3b01      	subs	r3, #1
 800941c:	b29a      	uxth	r2, r3
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009422:	b662      	cpsie	i
}
 8009424:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	691a      	ldr	r2, [r3, #16]
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009430:	b2d2      	uxtb	r2, r2
 8009432:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009438:	1c5a      	adds	r2, r3, #1
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009442:	3b01      	subs	r3, #1
 8009444:	b29a      	uxth	r2, r3
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800944e:	b29b      	uxth	r3, r3
 8009450:	3b01      	subs	r3, #1
 8009452:	b29a      	uxth	r2, r3
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009458:	e04e      	b.n	80094f8 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800945a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800945c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800945e:	68f8      	ldr	r0, [r7, #12]
 8009460:	f001 f84e 	bl	800a500 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009464:	4603      	mov	r3, r0
 8009466:	2b00      	cmp	r3, #0
 8009468:	d001      	beq.n	800946e <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800946a:	2301      	movs	r3, #1
 800946c:	e058      	b.n	8009520 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	691a      	ldr	r2, [r3, #16]
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009478:	b2d2      	uxtb	r2, r2
 800947a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009480:	1c5a      	adds	r2, r3, #1
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800948a:	3b01      	subs	r3, #1
 800948c:	b29a      	uxth	r2, r3
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009496:	b29b      	uxth	r3, r3
 8009498:	3b01      	subs	r3, #1
 800949a:	b29a      	uxth	r2, r3
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	695b      	ldr	r3, [r3, #20]
 80094a6:	f003 0304 	and.w	r3, r3, #4
 80094aa:	2b04      	cmp	r3, #4
 80094ac:	d124      	bne.n	80094f8 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80094b2:	2b03      	cmp	r3, #3
 80094b4:	d107      	bne.n	80094c6 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	681a      	ldr	r2, [r3, #0]
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80094c4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	691a      	ldr	r2, [r3, #16]
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094d0:	b2d2      	uxtb	r2, r2
 80094d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094d8:	1c5a      	adds	r2, r3, #1
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80094e2:	3b01      	subs	r3, #1
 80094e4:	b29a      	uxth	r2, r3
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80094ee:	b29b      	uxth	r3, r3
 80094f0:	3b01      	subs	r3, #1
 80094f2:	b29a      	uxth	r2, r3
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	f47f ae88 	bne.w	8009212 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	2220      	movs	r2, #32
 8009506:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	2200      	movs	r2, #0
 800950e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	2200      	movs	r2, #0
 8009516:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800951a:	2300      	movs	r3, #0
 800951c:	e000      	b.n	8009520 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 800951e:	2302      	movs	r3, #2
  }
}
 8009520:	4618      	mov	r0, r3
 8009522:	3728      	adds	r7, #40	@ 0x28
 8009524:	46bd      	mov	sp, r7
 8009526:	bd80      	pop	{r7, pc}
 8009528:	00010004 	.word	0x00010004
 800952c:	2000003c 	.word	0x2000003c
 8009530:	14f8b589 	.word	0x14f8b589

08009534 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b088      	sub	sp, #32
 8009538:	af02      	add	r7, sp, #8
 800953a:	60f8      	str	r0, [r7, #12]
 800953c:	4608      	mov	r0, r1
 800953e:	4611      	mov	r1, r2
 8009540:	461a      	mov	r2, r3
 8009542:	4603      	mov	r3, r0
 8009544:	817b      	strh	r3, [r7, #10]
 8009546:	460b      	mov	r3, r1
 8009548:	813b      	strh	r3, [r7, #8]
 800954a:	4613      	mov	r3, r2
 800954c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800954e:	f7ff f895 	bl	800867c <HAL_GetTick>
 8009552:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800955a:	b2db      	uxtb	r3, r3
 800955c:	2b20      	cmp	r3, #32
 800955e:	f040 80d9 	bne.w	8009714 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009562:	697b      	ldr	r3, [r7, #20]
 8009564:	9300      	str	r3, [sp, #0]
 8009566:	2319      	movs	r3, #25
 8009568:	2201      	movs	r2, #1
 800956a:	496d      	ldr	r1, [pc, #436]	@ (8009720 <HAL_I2C_Mem_Write+0x1ec>)
 800956c:	68f8      	ldr	r0, [r7, #12]
 800956e:	f000 fe1d 	bl	800a1ac <I2C_WaitOnFlagUntilTimeout>
 8009572:	4603      	mov	r3, r0
 8009574:	2b00      	cmp	r3, #0
 8009576:	d001      	beq.n	800957c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009578:	2302      	movs	r3, #2
 800957a:	e0cc      	b.n	8009716 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009582:	2b01      	cmp	r3, #1
 8009584:	d101      	bne.n	800958a <HAL_I2C_Mem_Write+0x56>
 8009586:	2302      	movs	r3, #2
 8009588:	e0c5      	b.n	8009716 <HAL_I2C_Mem_Write+0x1e2>
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	2201      	movs	r2, #1
 800958e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f003 0301 	and.w	r3, r3, #1
 800959c:	2b01      	cmp	r3, #1
 800959e:	d007      	beq.n	80095b0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	681a      	ldr	r2, [r3, #0]
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f042 0201 	orr.w	r2, r2, #1
 80095ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	681a      	ldr	r2, [r3, #0]
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80095be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	2221      	movs	r2, #33	@ 0x21
 80095c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	2240      	movs	r2, #64	@ 0x40
 80095cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	2200      	movs	r2, #0
 80095d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	6a3a      	ldr	r2, [r7, #32]
 80095da:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80095e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80095e6:	b29a      	uxth	r2, r3
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	4a4d      	ldr	r2, [pc, #308]	@ (8009724 <HAL_I2C_Mem_Write+0x1f0>)
 80095f0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80095f2:	88f8      	ldrh	r0, [r7, #6]
 80095f4:	893a      	ldrh	r2, [r7, #8]
 80095f6:	8979      	ldrh	r1, [r7, #10]
 80095f8:	697b      	ldr	r3, [r7, #20]
 80095fa:	9301      	str	r3, [sp, #4]
 80095fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095fe:	9300      	str	r3, [sp, #0]
 8009600:	4603      	mov	r3, r0
 8009602:	68f8      	ldr	r0, [r7, #12]
 8009604:	f000 fc54 	bl	8009eb0 <I2C_RequestMemoryWrite>
 8009608:	4603      	mov	r3, r0
 800960a:	2b00      	cmp	r3, #0
 800960c:	d052      	beq.n	80096b4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800960e:	2301      	movs	r3, #1
 8009610:	e081      	b.n	8009716 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009612:	697a      	ldr	r2, [r7, #20]
 8009614:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009616:	68f8      	ldr	r0, [r7, #12]
 8009618:	f000 fee2 	bl	800a3e0 <I2C_WaitOnTXEFlagUntilTimeout>
 800961c:	4603      	mov	r3, r0
 800961e:	2b00      	cmp	r3, #0
 8009620:	d00d      	beq.n	800963e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009626:	2b04      	cmp	r3, #4
 8009628:	d107      	bne.n	800963a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	681a      	ldr	r2, [r3, #0]
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009638:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800963a:	2301      	movs	r3, #1
 800963c:	e06b      	b.n	8009716 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009642:	781a      	ldrb	r2, [r3, #0]
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800964e:	1c5a      	adds	r2, r3, #1
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009658:	3b01      	subs	r3, #1
 800965a:	b29a      	uxth	r2, r3
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009664:	b29b      	uxth	r3, r3
 8009666:	3b01      	subs	r3, #1
 8009668:	b29a      	uxth	r2, r3
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	695b      	ldr	r3, [r3, #20]
 8009674:	f003 0304 	and.w	r3, r3, #4
 8009678:	2b04      	cmp	r3, #4
 800967a:	d11b      	bne.n	80096b4 <HAL_I2C_Mem_Write+0x180>
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009680:	2b00      	cmp	r3, #0
 8009682:	d017      	beq.n	80096b4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009688:	781a      	ldrb	r2, [r3, #0]
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009694:	1c5a      	adds	r2, r3, #1
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800969e:	3b01      	subs	r3, #1
 80096a0:	b29a      	uxth	r2, r3
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80096aa:	b29b      	uxth	r3, r3
 80096ac:	3b01      	subs	r3, #1
 80096ae:	b29a      	uxth	r2, r3
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d1aa      	bne.n	8009612 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80096bc:	697a      	ldr	r2, [r7, #20]
 80096be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80096c0:	68f8      	ldr	r0, [r7, #12]
 80096c2:	f000 fed5 	bl	800a470 <I2C_WaitOnBTFFlagUntilTimeout>
 80096c6:	4603      	mov	r3, r0
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d00d      	beq.n	80096e8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096d0:	2b04      	cmp	r3, #4
 80096d2:	d107      	bne.n	80096e4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	681a      	ldr	r2, [r3, #0]
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80096e2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80096e4:	2301      	movs	r3, #1
 80096e6:	e016      	b.n	8009716 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	681a      	ldr	r2, [r3, #0]
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80096f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	2220      	movs	r2, #32
 80096fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	2200      	movs	r2, #0
 8009704:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	2200      	movs	r2, #0
 800970c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8009710:	2300      	movs	r3, #0
 8009712:	e000      	b.n	8009716 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009714:	2302      	movs	r3, #2
  }
}
 8009716:	4618      	mov	r0, r3
 8009718:	3718      	adds	r7, #24
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}
 800971e:	bf00      	nop
 8009720:	00100002 	.word	0x00100002
 8009724:	ffff0000 	.word	0xffff0000

08009728 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b08c      	sub	sp, #48	@ 0x30
 800972c:	af02      	add	r7, sp, #8
 800972e:	60f8      	str	r0, [r7, #12]
 8009730:	4608      	mov	r0, r1
 8009732:	4611      	mov	r1, r2
 8009734:	461a      	mov	r2, r3
 8009736:	4603      	mov	r3, r0
 8009738:	817b      	strh	r3, [r7, #10]
 800973a:	460b      	mov	r3, r1
 800973c:	813b      	strh	r3, [r7, #8]
 800973e:	4613      	mov	r3, r2
 8009740:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8009742:	2300      	movs	r3, #0
 8009744:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009746:	f7fe ff99 	bl	800867c <HAL_GetTick>
 800974a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009752:	b2db      	uxtb	r3, r3
 8009754:	2b20      	cmp	r3, #32
 8009756:	f040 8250 	bne.w	8009bfa <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800975a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800975c:	9300      	str	r3, [sp, #0]
 800975e:	2319      	movs	r3, #25
 8009760:	2201      	movs	r2, #1
 8009762:	4982      	ldr	r1, [pc, #520]	@ (800996c <HAL_I2C_Mem_Read+0x244>)
 8009764:	68f8      	ldr	r0, [r7, #12]
 8009766:	f000 fd21 	bl	800a1ac <I2C_WaitOnFlagUntilTimeout>
 800976a:	4603      	mov	r3, r0
 800976c:	2b00      	cmp	r3, #0
 800976e:	d001      	beq.n	8009774 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8009770:	2302      	movs	r3, #2
 8009772:	e243      	b.n	8009bfc <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800977a:	2b01      	cmp	r3, #1
 800977c:	d101      	bne.n	8009782 <HAL_I2C_Mem_Read+0x5a>
 800977e:	2302      	movs	r3, #2
 8009780:	e23c      	b.n	8009bfc <HAL_I2C_Mem_Read+0x4d4>
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	2201      	movs	r2, #1
 8009786:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f003 0301 	and.w	r3, r3, #1
 8009794:	2b01      	cmp	r3, #1
 8009796:	d007      	beq.n	80097a8 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	681a      	ldr	r2, [r3, #0]
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f042 0201 	orr.w	r2, r2, #1
 80097a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	681a      	ldr	r2, [r3, #0]
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80097b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	2222      	movs	r2, #34	@ 0x22
 80097bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	2240      	movs	r2, #64	@ 0x40
 80097c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	2200      	movs	r2, #0
 80097cc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80097d2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80097d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80097de:	b29a      	uxth	r2, r3
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	4a62      	ldr	r2, [pc, #392]	@ (8009970 <HAL_I2C_Mem_Read+0x248>)
 80097e8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80097ea:	88f8      	ldrh	r0, [r7, #6]
 80097ec:	893a      	ldrh	r2, [r7, #8]
 80097ee:	8979      	ldrh	r1, [r7, #10]
 80097f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097f2:	9301      	str	r3, [sp, #4]
 80097f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097f6:	9300      	str	r3, [sp, #0]
 80097f8:	4603      	mov	r3, r0
 80097fa:	68f8      	ldr	r0, [r7, #12]
 80097fc:	f000 fbee 	bl	8009fdc <I2C_RequestMemoryRead>
 8009800:	4603      	mov	r3, r0
 8009802:	2b00      	cmp	r3, #0
 8009804:	d001      	beq.n	800980a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8009806:	2301      	movs	r3, #1
 8009808:	e1f8      	b.n	8009bfc <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800980e:	2b00      	cmp	r3, #0
 8009810:	d113      	bne.n	800983a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009812:	2300      	movs	r3, #0
 8009814:	61fb      	str	r3, [r7, #28]
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	695b      	ldr	r3, [r3, #20]
 800981c:	61fb      	str	r3, [r7, #28]
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	699b      	ldr	r3, [r3, #24]
 8009824:	61fb      	str	r3, [r7, #28]
 8009826:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	681a      	ldr	r2, [r3, #0]
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009836:	601a      	str	r2, [r3, #0]
 8009838:	e1cc      	b.n	8009bd4 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800983e:	2b01      	cmp	r3, #1
 8009840:	d11e      	bne.n	8009880 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	681a      	ldr	r2, [r3, #0]
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009850:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009852:	b672      	cpsid	i
}
 8009854:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009856:	2300      	movs	r3, #0
 8009858:	61bb      	str	r3, [r7, #24]
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	695b      	ldr	r3, [r3, #20]
 8009860:	61bb      	str	r3, [r7, #24]
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	699b      	ldr	r3, [r3, #24]
 8009868:	61bb      	str	r3, [r7, #24]
 800986a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	681a      	ldr	r2, [r3, #0]
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800987a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800987c:	b662      	cpsie	i
}
 800987e:	e035      	b.n	80098ec <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009884:	2b02      	cmp	r3, #2
 8009886:	d11e      	bne.n	80098c6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	681a      	ldr	r2, [r3, #0]
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009896:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009898:	b672      	cpsid	i
}
 800989a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800989c:	2300      	movs	r3, #0
 800989e:	617b      	str	r3, [r7, #20]
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	695b      	ldr	r3, [r3, #20]
 80098a6:	617b      	str	r3, [r7, #20]
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	699b      	ldr	r3, [r3, #24]
 80098ae:	617b      	str	r3, [r7, #20]
 80098b0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	681a      	ldr	r2, [r3, #0]
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80098c0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80098c2:	b662      	cpsie	i
}
 80098c4:	e012      	b.n	80098ec <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	681a      	ldr	r2, [r3, #0]
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80098d4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80098d6:	2300      	movs	r3, #0
 80098d8:	613b      	str	r3, [r7, #16]
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	695b      	ldr	r3, [r3, #20]
 80098e0:	613b      	str	r3, [r7, #16]
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	699b      	ldr	r3, [r3, #24]
 80098e8:	613b      	str	r3, [r7, #16]
 80098ea:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80098ec:	e172      	b.n	8009bd4 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80098f2:	2b03      	cmp	r3, #3
 80098f4:	f200 811f 	bhi.w	8009b36 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80098fc:	2b01      	cmp	r3, #1
 80098fe:	d123      	bne.n	8009948 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009900:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009902:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009904:	68f8      	ldr	r0, [r7, #12]
 8009906:	f000 fdfb 	bl	800a500 <I2C_WaitOnRXNEFlagUntilTimeout>
 800990a:	4603      	mov	r3, r0
 800990c:	2b00      	cmp	r3, #0
 800990e:	d001      	beq.n	8009914 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8009910:	2301      	movs	r3, #1
 8009912:	e173      	b.n	8009bfc <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	691a      	ldr	r2, [r3, #16]
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800991e:	b2d2      	uxtb	r2, r2
 8009920:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009926:	1c5a      	adds	r2, r3, #1
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009930:	3b01      	subs	r3, #1
 8009932:	b29a      	uxth	r2, r3
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800993c:	b29b      	uxth	r3, r3
 800993e:	3b01      	subs	r3, #1
 8009940:	b29a      	uxth	r2, r3
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009946:	e145      	b.n	8009bd4 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800994c:	2b02      	cmp	r3, #2
 800994e:	d152      	bne.n	80099f6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009952:	9300      	str	r3, [sp, #0]
 8009954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009956:	2200      	movs	r2, #0
 8009958:	4906      	ldr	r1, [pc, #24]	@ (8009974 <HAL_I2C_Mem_Read+0x24c>)
 800995a:	68f8      	ldr	r0, [r7, #12]
 800995c:	f000 fc26 	bl	800a1ac <I2C_WaitOnFlagUntilTimeout>
 8009960:	4603      	mov	r3, r0
 8009962:	2b00      	cmp	r3, #0
 8009964:	d008      	beq.n	8009978 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8009966:	2301      	movs	r3, #1
 8009968:	e148      	b.n	8009bfc <HAL_I2C_Mem_Read+0x4d4>
 800996a:	bf00      	nop
 800996c:	00100002 	.word	0x00100002
 8009970:	ffff0000 	.word	0xffff0000
 8009974:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8009978:	b672      	cpsid	i
}
 800997a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	681a      	ldr	r2, [r3, #0]
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800998a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	691a      	ldr	r2, [r3, #16]
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009996:	b2d2      	uxtb	r2, r2
 8009998:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800999e:	1c5a      	adds	r2, r3, #1
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80099a8:	3b01      	subs	r3, #1
 80099aa:	b29a      	uxth	r2, r3
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80099b4:	b29b      	uxth	r3, r3
 80099b6:	3b01      	subs	r3, #1
 80099b8:	b29a      	uxth	r2, r3
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80099be:	b662      	cpsie	i
}
 80099c0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	691a      	ldr	r2, [r3, #16]
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099cc:	b2d2      	uxtb	r2, r2
 80099ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099d4:	1c5a      	adds	r2, r3, #1
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80099de:	3b01      	subs	r3, #1
 80099e0:	b29a      	uxth	r2, r3
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80099ea:	b29b      	uxth	r3, r3
 80099ec:	3b01      	subs	r3, #1
 80099ee:	b29a      	uxth	r2, r3
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80099f4:	e0ee      	b.n	8009bd4 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80099f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099f8:	9300      	str	r3, [sp, #0]
 80099fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099fc:	2200      	movs	r2, #0
 80099fe:	4981      	ldr	r1, [pc, #516]	@ (8009c04 <HAL_I2C_Mem_Read+0x4dc>)
 8009a00:	68f8      	ldr	r0, [r7, #12]
 8009a02:	f000 fbd3 	bl	800a1ac <I2C_WaitOnFlagUntilTimeout>
 8009a06:	4603      	mov	r3, r0
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d001      	beq.n	8009a10 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	e0f5      	b.n	8009bfc <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	681a      	ldr	r2, [r3, #0]
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009a1e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009a20:	b672      	cpsid	i
}
 8009a22:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	691a      	ldr	r2, [r3, #16]
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a2e:	b2d2      	uxtb	r2, r2
 8009a30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a36:	1c5a      	adds	r2, r3, #1
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009a40:	3b01      	subs	r3, #1
 8009a42:	b29a      	uxth	r2, r3
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009a4c:	b29b      	uxth	r3, r3
 8009a4e:	3b01      	subs	r3, #1
 8009a50:	b29a      	uxth	r2, r3
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8009a56:	4b6c      	ldr	r3, [pc, #432]	@ (8009c08 <HAL_I2C_Mem_Read+0x4e0>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	08db      	lsrs	r3, r3, #3
 8009a5c:	4a6b      	ldr	r2, [pc, #428]	@ (8009c0c <HAL_I2C_Mem_Read+0x4e4>)
 8009a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8009a62:	0a1a      	lsrs	r2, r3, #8
 8009a64:	4613      	mov	r3, r2
 8009a66:	009b      	lsls	r3, r3, #2
 8009a68:	4413      	add	r3, r2
 8009a6a:	00da      	lsls	r2, r3, #3
 8009a6c:	1ad3      	subs	r3, r2, r3
 8009a6e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8009a70:	6a3b      	ldr	r3, [r7, #32]
 8009a72:	3b01      	subs	r3, #1
 8009a74:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8009a76:	6a3b      	ldr	r3, [r7, #32]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d118      	bne.n	8009aae <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	2200      	movs	r2, #0
 8009a80:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	2220      	movs	r2, #32
 8009a86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a96:	f043 0220 	orr.w	r2, r3, #32
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8009a9e:	b662      	cpsie	i
}
 8009aa0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8009aaa:	2301      	movs	r3, #1
 8009aac:	e0a6      	b.n	8009bfc <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	695b      	ldr	r3, [r3, #20]
 8009ab4:	f003 0304 	and.w	r3, r3, #4
 8009ab8:	2b04      	cmp	r3, #4
 8009aba:	d1d9      	bne.n	8009a70 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	681a      	ldr	r2, [r3, #0]
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009aca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	691a      	ldr	r2, [r3, #16]
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ad6:	b2d2      	uxtb	r2, r2
 8009ad8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ade:	1c5a      	adds	r2, r3, #1
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009ae8:	3b01      	subs	r3, #1
 8009aea:	b29a      	uxth	r2, r3
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009af4:	b29b      	uxth	r3, r3
 8009af6:	3b01      	subs	r3, #1
 8009af8:	b29a      	uxth	r2, r3
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009afe:	b662      	cpsie	i
}
 8009b00:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	691a      	ldr	r2, [r3, #16]
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b0c:	b2d2      	uxtb	r2, r2
 8009b0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b14:	1c5a      	adds	r2, r3, #1
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009b1e:	3b01      	subs	r3, #1
 8009b20:	b29a      	uxth	r2, r3
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009b2a:	b29b      	uxth	r3, r3
 8009b2c:	3b01      	subs	r3, #1
 8009b2e:	b29a      	uxth	r2, r3
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009b34:	e04e      	b.n	8009bd4 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009b36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b38:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009b3a:	68f8      	ldr	r0, [r7, #12]
 8009b3c:	f000 fce0 	bl	800a500 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009b40:	4603      	mov	r3, r0
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d001      	beq.n	8009b4a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8009b46:	2301      	movs	r3, #1
 8009b48:	e058      	b.n	8009bfc <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	691a      	ldr	r2, [r3, #16]
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b54:	b2d2      	uxtb	r2, r2
 8009b56:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b5c:	1c5a      	adds	r2, r3, #1
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009b66:	3b01      	subs	r3, #1
 8009b68:	b29a      	uxth	r2, r3
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009b72:	b29b      	uxth	r3, r3
 8009b74:	3b01      	subs	r3, #1
 8009b76:	b29a      	uxth	r2, r3
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	695b      	ldr	r3, [r3, #20]
 8009b82:	f003 0304 	and.w	r3, r3, #4
 8009b86:	2b04      	cmp	r3, #4
 8009b88:	d124      	bne.n	8009bd4 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009b8e:	2b03      	cmp	r3, #3
 8009b90:	d107      	bne.n	8009ba2 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	681a      	ldr	r2, [r3, #0]
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009ba0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	691a      	ldr	r2, [r3, #16]
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bac:	b2d2      	uxtb	r2, r2
 8009bae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bb4:	1c5a      	adds	r2, r3, #1
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009bbe:	3b01      	subs	r3, #1
 8009bc0:	b29a      	uxth	r2, r3
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009bca:	b29b      	uxth	r3, r3
 8009bcc:	3b01      	subs	r3, #1
 8009bce:	b29a      	uxth	r2, r3
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	f47f ae88 	bne.w	80098ee <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	2220      	movs	r2, #32
 8009be2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	2200      	movs	r2, #0
 8009bea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	e000      	b.n	8009bfc <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8009bfa:	2302      	movs	r3, #2
  }
}
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	3728      	adds	r7, #40	@ 0x28
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bd80      	pop	{r7, pc}
 8009c04:	00010004 	.word	0x00010004
 8009c08:	2000003c 	.word	0x2000003c
 8009c0c:	14f8b589 	.word	0x14f8b589

08009c10 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b088      	sub	sp, #32
 8009c14:	af02      	add	r7, sp, #8
 8009c16:	60f8      	str	r0, [r7, #12]
 8009c18:	607a      	str	r2, [r7, #4]
 8009c1a:	603b      	str	r3, [r7, #0]
 8009c1c:	460b      	mov	r3, r1
 8009c1e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c24:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009c26:	697b      	ldr	r3, [r7, #20]
 8009c28:	2b08      	cmp	r3, #8
 8009c2a:	d006      	beq.n	8009c3a <I2C_MasterRequestWrite+0x2a>
 8009c2c:	697b      	ldr	r3, [r7, #20]
 8009c2e:	2b01      	cmp	r3, #1
 8009c30:	d003      	beq.n	8009c3a <I2C_MasterRequestWrite+0x2a>
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009c38:	d108      	bne.n	8009c4c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	681a      	ldr	r2, [r3, #0]
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009c48:	601a      	str	r2, [r3, #0]
 8009c4a:	e00b      	b.n	8009c64 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c50:	2b12      	cmp	r3, #18
 8009c52:	d107      	bne.n	8009c64 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	681a      	ldr	r2, [r3, #0]
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009c62:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	9300      	str	r3, [sp, #0]
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009c70:	68f8      	ldr	r0, [r7, #12]
 8009c72:	f000 fa9b 	bl	800a1ac <I2C_WaitOnFlagUntilTimeout>
 8009c76:	4603      	mov	r3, r0
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d00d      	beq.n	8009c98 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009c8a:	d103      	bne.n	8009c94 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009c92:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009c94:	2303      	movs	r3, #3
 8009c96:	e035      	b.n	8009d04 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	691b      	ldr	r3, [r3, #16]
 8009c9c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009ca0:	d108      	bne.n	8009cb4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009ca2:	897b      	ldrh	r3, [r7, #10]
 8009ca4:	b2db      	uxtb	r3, r3
 8009ca6:	461a      	mov	r2, r3
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8009cb0:	611a      	str	r2, [r3, #16]
 8009cb2:	e01b      	b.n	8009cec <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009cb4:	897b      	ldrh	r3, [r7, #10]
 8009cb6:	11db      	asrs	r3, r3, #7
 8009cb8:	b2db      	uxtb	r3, r3
 8009cba:	f003 0306 	and.w	r3, r3, #6
 8009cbe:	b2db      	uxtb	r3, r3
 8009cc0:	f063 030f 	orn	r3, r3, #15
 8009cc4:	b2da      	uxtb	r2, r3
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	687a      	ldr	r2, [r7, #4]
 8009cd0:	490e      	ldr	r1, [pc, #56]	@ (8009d0c <I2C_MasterRequestWrite+0xfc>)
 8009cd2:	68f8      	ldr	r0, [r7, #12]
 8009cd4:	f000 fae4 	bl	800a2a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d001      	beq.n	8009ce2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8009cde:	2301      	movs	r3, #1
 8009ce0:	e010      	b.n	8009d04 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009ce2:	897b      	ldrh	r3, [r7, #10]
 8009ce4:	b2da      	uxtb	r2, r3
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	687a      	ldr	r2, [r7, #4]
 8009cf0:	4907      	ldr	r1, [pc, #28]	@ (8009d10 <I2C_MasterRequestWrite+0x100>)
 8009cf2:	68f8      	ldr	r0, [r7, #12]
 8009cf4:	f000 fad4 	bl	800a2a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d001      	beq.n	8009d02 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8009cfe:	2301      	movs	r3, #1
 8009d00:	e000      	b.n	8009d04 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8009d02:	2300      	movs	r3, #0
}
 8009d04:	4618      	mov	r0, r3
 8009d06:	3718      	adds	r7, #24
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bd80      	pop	{r7, pc}
 8009d0c:	00010008 	.word	0x00010008
 8009d10:	00010002 	.word	0x00010002

08009d14 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b088      	sub	sp, #32
 8009d18:	af02      	add	r7, sp, #8
 8009d1a:	60f8      	str	r0, [r7, #12]
 8009d1c:	607a      	str	r2, [r7, #4]
 8009d1e:	603b      	str	r3, [r7, #0]
 8009d20:	460b      	mov	r3, r1
 8009d22:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d28:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	681a      	ldr	r2, [r3, #0]
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009d38:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009d3a:	697b      	ldr	r3, [r7, #20]
 8009d3c:	2b08      	cmp	r3, #8
 8009d3e:	d006      	beq.n	8009d4e <I2C_MasterRequestRead+0x3a>
 8009d40:	697b      	ldr	r3, [r7, #20]
 8009d42:	2b01      	cmp	r3, #1
 8009d44:	d003      	beq.n	8009d4e <I2C_MasterRequestRead+0x3a>
 8009d46:	697b      	ldr	r3, [r7, #20]
 8009d48:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009d4c:	d108      	bne.n	8009d60 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	681a      	ldr	r2, [r3, #0]
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009d5c:	601a      	str	r2, [r3, #0]
 8009d5e:	e00b      	b.n	8009d78 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d64:	2b11      	cmp	r3, #17
 8009d66:	d107      	bne.n	8009d78 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	681a      	ldr	r2, [r3, #0]
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009d76:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	9300      	str	r3, [sp, #0]
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009d84:	68f8      	ldr	r0, [r7, #12]
 8009d86:	f000 fa11 	bl	800a1ac <I2C_WaitOnFlagUntilTimeout>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d00d      	beq.n	8009dac <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009d9e:	d103      	bne.n	8009da8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009da6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009da8:	2303      	movs	r3, #3
 8009daa:	e079      	b.n	8009ea0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	691b      	ldr	r3, [r3, #16]
 8009db0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009db4:	d108      	bne.n	8009dc8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009db6:	897b      	ldrh	r3, [r7, #10]
 8009db8:	b2db      	uxtb	r3, r3
 8009dba:	f043 0301 	orr.w	r3, r3, #1
 8009dbe:	b2da      	uxtb	r2, r3
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	611a      	str	r2, [r3, #16]
 8009dc6:	e05f      	b.n	8009e88 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009dc8:	897b      	ldrh	r3, [r7, #10]
 8009dca:	11db      	asrs	r3, r3, #7
 8009dcc:	b2db      	uxtb	r3, r3
 8009dce:	f003 0306 	and.w	r3, r3, #6
 8009dd2:	b2db      	uxtb	r3, r3
 8009dd4:	f063 030f 	orn	r3, r3, #15
 8009dd8:	b2da      	uxtb	r2, r3
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	687a      	ldr	r2, [r7, #4]
 8009de4:	4930      	ldr	r1, [pc, #192]	@ (8009ea8 <I2C_MasterRequestRead+0x194>)
 8009de6:	68f8      	ldr	r0, [r7, #12]
 8009de8:	f000 fa5a 	bl	800a2a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009dec:	4603      	mov	r3, r0
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d001      	beq.n	8009df6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8009df2:	2301      	movs	r3, #1
 8009df4:	e054      	b.n	8009ea0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009df6:	897b      	ldrh	r3, [r7, #10]
 8009df8:	b2da      	uxtb	r2, r3
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	687a      	ldr	r2, [r7, #4]
 8009e04:	4929      	ldr	r1, [pc, #164]	@ (8009eac <I2C_MasterRequestRead+0x198>)
 8009e06:	68f8      	ldr	r0, [r7, #12]
 8009e08:	f000 fa4a 	bl	800a2a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009e0c:	4603      	mov	r3, r0
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d001      	beq.n	8009e16 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8009e12:	2301      	movs	r3, #1
 8009e14:	e044      	b.n	8009ea0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009e16:	2300      	movs	r3, #0
 8009e18:	613b      	str	r3, [r7, #16]
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	695b      	ldr	r3, [r3, #20]
 8009e20:	613b      	str	r3, [r7, #16]
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	699b      	ldr	r3, [r3, #24]
 8009e28:	613b      	str	r3, [r7, #16]
 8009e2a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	681a      	ldr	r2, [r3, #0]
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009e3a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	9300      	str	r3, [sp, #0]
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2200      	movs	r2, #0
 8009e44:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009e48:	68f8      	ldr	r0, [r7, #12]
 8009e4a:	f000 f9af 	bl	800a1ac <I2C_WaitOnFlagUntilTimeout>
 8009e4e:	4603      	mov	r3, r0
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d00d      	beq.n	8009e70 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e62:	d103      	bne.n	8009e6c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009e6a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8009e6c:	2303      	movs	r3, #3
 8009e6e:	e017      	b.n	8009ea0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8009e70:	897b      	ldrh	r3, [r7, #10]
 8009e72:	11db      	asrs	r3, r3, #7
 8009e74:	b2db      	uxtb	r3, r3
 8009e76:	f003 0306 	and.w	r3, r3, #6
 8009e7a:	b2db      	uxtb	r3, r3
 8009e7c:	f063 030e 	orn	r3, r3, #14
 8009e80:	b2da      	uxtb	r2, r3
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	687a      	ldr	r2, [r7, #4]
 8009e8c:	4907      	ldr	r1, [pc, #28]	@ (8009eac <I2C_MasterRequestRead+0x198>)
 8009e8e:	68f8      	ldr	r0, [r7, #12]
 8009e90:	f000 fa06 	bl	800a2a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009e94:	4603      	mov	r3, r0
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d001      	beq.n	8009e9e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8009e9a:	2301      	movs	r3, #1
 8009e9c:	e000      	b.n	8009ea0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8009e9e:	2300      	movs	r3, #0
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	3718      	adds	r7, #24
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}
 8009ea8:	00010008 	.word	0x00010008
 8009eac:	00010002 	.word	0x00010002

08009eb0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b088      	sub	sp, #32
 8009eb4:	af02      	add	r7, sp, #8
 8009eb6:	60f8      	str	r0, [r7, #12]
 8009eb8:	4608      	mov	r0, r1
 8009eba:	4611      	mov	r1, r2
 8009ebc:	461a      	mov	r2, r3
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	817b      	strh	r3, [r7, #10]
 8009ec2:	460b      	mov	r3, r1
 8009ec4:	813b      	strh	r3, [r7, #8]
 8009ec6:	4613      	mov	r3, r2
 8009ec8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	681a      	ldr	r2, [r3, #0]
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009ed8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009edc:	9300      	str	r3, [sp, #0]
 8009ede:	6a3b      	ldr	r3, [r7, #32]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009ee6:	68f8      	ldr	r0, [r7, #12]
 8009ee8:	f000 f960 	bl	800a1ac <I2C_WaitOnFlagUntilTimeout>
 8009eec:	4603      	mov	r3, r0
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d00d      	beq.n	8009f0e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009efc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f00:	d103      	bne.n	8009f0a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009f08:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009f0a:	2303      	movs	r3, #3
 8009f0c:	e05f      	b.n	8009fce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009f0e:	897b      	ldrh	r3, [r7, #10]
 8009f10:	b2db      	uxtb	r3, r3
 8009f12:	461a      	mov	r2, r3
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8009f1c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f20:	6a3a      	ldr	r2, [r7, #32]
 8009f22:	492d      	ldr	r1, [pc, #180]	@ (8009fd8 <I2C_RequestMemoryWrite+0x128>)
 8009f24:	68f8      	ldr	r0, [r7, #12]
 8009f26:	f000 f9bb 	bl	800a2a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d001      	beq.n	8009f34 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8009f30:	2301      	movs	r3, #1
 8009f32:	e04c      	b.n	8009fce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009f34:	2300      	movs	r3, #0
 8009f36:	617b      	str	r3, [r7, #20]
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	695b      	ldr	r3, [r3, #20]
 8009f3e:	617b      	str	r3, [r7, #20]
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	699b      	ldr	r3, [r3, #24]
 8009f46:	617b      	str	r3, [r7, #20]
 8009f48:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009f4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009f4c:	6a39      	ldr	r1, [r7, #32]
 8009f4e:	68f8      	ldr	r0, [r7, #12]
 8009f50:	f000 fa46 	bl	800a3e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8009f54:	4603      	mov	r3, r0
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d00d      	beq.n	8009f76 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f5e:	2b04      	cmp	r3, #4
 8009f60:	d107      	bne.n	8009f72 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	681a      	ldr	r2, [r3, #0]
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009f70:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009f72:	2301      	movs	r3, #1
 8009f74:	e02b      	b.n	8009fce <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009f76:	88fb      	ldrh	r3, [r7, #6]
 8009f78:	2b01      	cmp	r3, #1
 8009f7a:	d105      	bne.n	8009f88 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009f7c:	893b      	ldrh	r3, [r7, #8]
 8009f7e:	b2da      	uxtb	r2, r3
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	611a      	str	r2, [r3, #16]
 8009f86:	e021      	b.n	8009fcc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009f88:	893b      	ldrh	r3, [r7, #8]
 8009f8a:	0a1b      	lsrs	r3, r3, #8
 8009f8c:	b29b      	uxth	r3, r3
 8009f8e:	b2da      	uxtb	r2, r3
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009f96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009f98:	6a39      	ldr	r1, [r7, #32]
 8009f9a:	68f8      	ldr	r0, [r7, #12]
 8009f9c:	f000 fa20 	bl	800a3e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d00d      	beq.n	8009fc2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009faa:	2b04      	cmp	r3, #4
 8009fac:	d107      	bne.n	8009fbe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	681a      	ldr	r2, [r3, #0]
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009fbc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	e005      	b.n	8009fce <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009fc2:	893b      	ldrh	r3, [r7, #8]
 8009fc4:	b2da      	uxtb	r2, r3
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009fcc:	2300      	movs	r3, #0
}
 8009fce:	4618      	mov	r0, r3
 8009fd0:	3718      	adds	r7, #24
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bd80      	pop	{r7, pc}
 8009fd6:	bf00      	nop
 8009fd8:	00010002 	.word	0x00010002

08009fdc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b088      	sub	sp, #32
 8009fe0:	af02      	add	r7, sp, #8
 8009fe2:	60f8      	str	r0, [r7, #12]
 8009fe4:	4608      	mov	r0, r1
 8009fe6:	4611      	mov	r1, r2
 8009fe8:	461a      	mov	r2, r3
 8009fea:	4603      	mov	r3, r0
 8009fec:	817b      	strh	r3, [r7, #10]
 8009fee:	460b      	mov	r3, r1
 8009ff0:	813b      	strh	r3, [r7, #8]
 8009ff2:	4613      	mov	r3, r2
 8009ff4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	681a      	ldr	r2, [r3, #0]
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a004:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	681a      	ldr	r2, [r3, #0]
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a014:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a018:	9300      	str	r3, [sp, #0]
 800a01a:	6a3b      	ldr	r3, [r7, #32]
 800a01c:	2200      	movs	r2, #0
 800a01e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800a022:	68f8      	ldr	r0, [r7, #12]
 800a024:	f000 f8c2 	bl	800a1ac <I2C_WaitOnFlagUntilTimeout>
 800a028:	4603      	mov	r3, r0
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d00d      	beq.n	800a04a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a038:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a03c:	d103      	bne.n	800a046 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a044:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800a046:	2303      	movs	r3, #3
 800a048:	e0aa      	b.n	800a1a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a04a:	897b      	ldrh	r3, [r7, #10]
 800a04c:	b2db      	uxtb	r3, r3
 800a04e:	461a      	mov	r2, r3
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800a058:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a05a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a05c:	6a3a      	ldr	r2, [r7, #32]
 800a05e:	4952      	ldr	r1, [pc, #328]	@ (800a1a8 <I2C_RequestMemoryRead+0x1cc>)
 800a060:	68f8      	ldr	r0, [r7, #12]
 800a062:	f000 f91d 	bl	800a2a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a066:	4603      	mov	r3, r0
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d001      	beq.n	800a070 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a06c:	2301      	movs	r3, #1
 800a06e:	e097      	b.n	800a1a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a070:	2300      	movs	r3, #0
 800a072:	617b      	str	r3, [r7, #20]
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	695b      	ldr	r3, [r3, #20]
 800a07a:	617b      	str	r3, [r7, #20]
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	699b      	ldr	r3, [r3, #24]
 800a082:	617b      	str	r3, [r7, #20]
 800a084:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a086:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a088:	6a39      	ldr	r1, [r7, #32]
 800a08a:	68f8      	ldr	r0, [r7, #12]
 800a08c:	f000 f9a8 	bl	800a3e0 <I2C_WaitOnTXEFlagUntilTimeout>
 800a090:	4603      	mov	r3, r0
 800a092:	2b00      	cmp	r3, #0
 800a094:	d00d      	beq.n	800a0b2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a09a:	2b04      	cmp	r3, #4
 800a09c:	d107      	bne.n	800a0ae <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	681a      	ldr	r2, [r3, #0]
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a0ac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a0ae:	2301      	movs	r3, #1
 800a0b0:	e076      	b.n	800a1a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a0b2:	88fb      	ldrh	r3, [r7, #6]
 800a0b4:	2b01      	cmp	r3, #1
 800a0b6:	d105      	bne.n	800a0c4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a0b8:	893b      	ldrh	r3, [r7, #8]
 800a0ba:	b2da      	uxtb	r2, r3
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	611a      	str	r2, [r3, #16]
 800a0c2:	e021      	b.n	800a108 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a0c4:	893b      	ldrh	r3, [r7, #8]
 800a0c6:	0a1b      	lsrs	r3, r3, #8
 800a0c8:	b29b      	uxth	r3, r3
 800a0ca:	b2da      	uxtb	r2, r3
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a0d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a0d4:	6a39      	ldr	r1, [r7, #32]
 800a0d6:	68f8      	ldr	r0, [r7, #12]
 800a0d8:	f000 f982 	bl	800a3e0 <I2C_WaitOnTXEFlagUntilTimeout>
 800a0dc:	4603      	mov	r3, r0
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d00d      	beq.n	800a0fe <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0e6:	2b04      	cmp	r3, #4
 800a0e8:	d107      	bne.n	800a0fa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	681a      	ldr	r2, [r3, #0]
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a0f8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	e050      	b.n	800a1a0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a0fe:	893b      	ldrh	r3, [r7, #8]
 800a100:	b2da      	uxtb	r2, r3
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a108:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a10a:	6a39      	ldr	r1, [r7, #32]
 800a10c:	68f8      	ldr	r0, [r7, #12]
 800a10e:	f000 f967 	bl	800a3e0 <I2C_WaitOnTXEFlagUntilTimeout>
 800a112:	4603      	mov	r3, r0
 800a114:	2b00      	cmp	r3, #0
 800a116:	d00d      	beq.n	800a134 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a11c:	2b04      	cmp	r3, #4
 800a11e:	d107      	bne.n	800a130 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	681a      	ldr	r2, [r3, #0]
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a12e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a130:	2301      	movs	r3, #1
 800a132:	e035      	b.n	800a1a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	681a      	ldr	r2, [r3, #0]
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a142:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a146:	9300      	str	r3, [sp, #0]
 800a148:	6a3b      	ldr	r3, [r7, #32]
 800a14a:	2200      	movs	r2, #0
 800a14c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800a150:	68f8      	ldr	r0, [r7, #12]
 800a152:	f000 f82b 	bl	800a1ac <I2C_WaitOnFlagUntilTimeout>
 800a156:	4603      	mov	r3, r0
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d00d      	beq.n	800a178 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a166:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a16a:	d103      	bne.n	800a174 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a172:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800a174:	2303      	movs	r3, #3
 800a176:	e013      	b.n	800a1a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a178:	897b      	ldrh	r3, [r7, #10]
 800a17a:	b2db      	uxtb	r3, r3
 800a17c:	f043 0301 	orr.w	r3, r3, #1
 800a180:	b2da      	uxtb	r2, r3
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a18a:	6a3a      	ldr	r2, [r7, #32]
 800a18c:	4906      	ldr	r1, [pc, #24]	@ (800a1a8 <I2C_RequestMemoryRead+0x1cc>)
 800a18e:	68f8      	ldr	r0, [r7, #12]
 800a190:	f000 f886 	bl	800a2a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a194:	4603      	mov	r3, r0
 800a196:	2b00      	cmp	r3, #0
 800a198:	d001      	beq.n	800a19e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a19a:	2301      	movs	r3, #1
 800a19c:	e000      	b.n	800a1a0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a19e:	2300      	movs	r3, #0
}
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	3718      	adds	r7, #24
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}
 800a1a8:	00010002 	.word	0x00010002

0800a1ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b084      	sub	sp, #16
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	60f8      	str	r0, [r7, #12]
 800a1b4:	60b9      	str	r1, [r7, #8]
 800a1b6:	603b      	str	r3, [r7, #0]
 800a1b8:	4613      	mov	r3, r2
 800a1ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a1bc:	e048      	b.n	800a250 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1c4:	d044      	beq.n	800a250 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a1c6:	f7fe fa59 	bl	800867c <HAL_GetTick>
 800a1ca:	4602      	mov	r2, r0
 800a1cc:	69bb      	ldr	r3, [r7, #24]
 800a1ce:	1ad3      	subs	r3, r2, r3
 800a1d0:	683a      	ldr	r2, [r7, #0]
 800a1d2:	429a      	cmp	r2, r3
 800a1d4:	d302      	bcc.n	800a1dc <I2C_WaitOnFlagUntilTimeout+0x30>
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d139      	bne.n	800a250 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a1dc:	68bb      	ldr	r3, [r7, #8]
 800a1de:	0c1b      	lsrs	r3, r3, #16
 800a1e0:	b2db      	uxtb	r3, r3
 800a1e2:	2b01      	cmp	r3, #1
 800a1e4:	d10d      	bne.n	800a202 <I2C_WaitOnFlagUntilTimeout+0x56>
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	695b      	ldr	r3, [r3, #20]
 800a1ec:	43da      	mvns	r2, r3
 800a1ee:	68bb      	ldr	r3, [r7, #8]
 800a1f0:	4013      	ands	r3, r2
 800a1f2:	b29b      	uxth	r3, r3
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	bf0c      	ite	eq
 800a1f8:	2301      	moveq	r3, #1
 800a1fa:	2300      	movne	r3, #0
 800a1fc:	b2db      	uxtb	r3, r3
 800a1fe:	461a      	mov	r2, r3
 800a200:	e00c      	b.n	800a21c <I2C_WaitOnFlagUntilTimeout+0x70>
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	699b      	ldr	r3, [r3, #24]
 800a208:	43da      	mvns	r2, r3
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	4013      	ands	r3, r2
 800a20e:	b29b      	uxth	r3, r3
 800a210:	2b00      	cmp	r3, #0
 800a212:	bf0c      	ite	eq
 800a214:	2301      	moveq	r3, #1
 800a216:	2300      	movne	r3, #0
 800a218:	b2db      	uxtb	r3, r3
 800a21a:	461a      	mov	r2, r3
 800a21c:	79fb      	ldrb	r3, [r7, #7]
 800a21e:	429a      	cmp	r2, r3
 800a220:	d116      	bne.n	800a250 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	2200      	movs	r2, #0
 800a226:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	2220      	movs	r2, #32
 800a22c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	2200      	movs	r2, #0
 800a234:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a23c:	f043 0220 	orr.w	r2, r3, #32
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	2200      	movs	r2, #0
 800a248:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800a24c:	2301      	movs	r3, #1
 800a24e:	e023      	b.n	800a298 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	0c1b      	lsrs	r3, r3, #16
 800a254:	b2db      	uxtb	r3, r3
 800a256:	2b01      	cmp	r3, #1
 800a258:	d10d      	bne.n	800a276 <I2C_WaitOnFlagUntilTimeout+0xca>
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	695b      	ldr	r3, [r3, #20]
 800a260:	43da      	mvns	r2, r3
 800a262:	68bb      	ldr	r3, [r7, #8]
 800a264:	4013      	ands	r3, r2
 800a266:	b29b      	uxth	r3, r3
 800a268:	2b00      	cmp	r3, #0
 800a26a:	bf0c      	ite	eq
 800a26c:	2301      	moveq	r3, #1
 800a26e:	2300      	movne	r3, #0
 800a270:	b2db      	uxtb	r3, r3
 800a272:	461a      	mov	r2, r3
 800a274:	e00c      	b.n	800a290 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	699b      	ldr	r3, [r3, #24]
 800a27c:	43da      	mvns	r2, r3
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	4013      	ands	r3, r2
 800a282:	b29b      	uxth	r3, r3
 800a284:	2b00      	cmp	r3, #0
 800a286:	bf0c      	ite	eq
 800a288:	2301      	moveq	r3, #1
 800a28a:	2300      	movne	r3, #0
 800a28c:	b2db      	uxtb	r3, r3
 800a28e:	461a      	mov	r2, r3
 800a290:	79fb      	ldrb	r3, [r7, #7]
 800a292:	429a      	cmp	r2, r3
 800a294:	d093      	beq.n	800a1be <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a296:	2300      	movs	r3, #0
}
 800a298:	4618      	mov	r0, r3
 800a29a:	3710      	adds	r7, #16
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}

0800a2a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b084      	sub	sp, #16
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	60f8      	str	r0, [r7, #12]
 800a2a8:	60b9      	str	r1, [r7, #8]
 800a2aa:	607a      	str	r2, [r7, #4]
 800a2ac:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a2ae:	e071      	b.n	800a394 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	695b      	ldr	r3, [r3, #20]
 800a2b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a2ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a2be:	d123      	bne.n	800a308 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	681a      	ldr	r2, [r3, #0]
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a2ce:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800a2d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	2200      	movs	r2, #0
 800a2de:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	2220      	movs	r2, #32
 800a2e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2f4:	f043 0204 	orr.w	r2, r3, #4
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	2200      	movs	r2, #0
 800a300:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800a304:	2301      	movs	r3, #1
 800a306:	e067      	b.n	800a3d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a30e:	d041      	beq.n	800a394 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a310:	f7fe f9b4 	bl	800867c <HAL_GetTick>
 800a314:	4602      	mov	r2, r0
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	1ad3      	subs	r3, r2, r3
 800a31a:	687a      	ldr	r2, [r7, #4]
 800a31c:	429a      	cmp	r2, r3
 800a31e:	d302      	bcc.n	800a326 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d136      	bne.n	800a394 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800a326:	68bb      	ldr	r3, [r7, #8]
 800a328:	0c1b      	lsrs	r3, r3, #16
 800a32a:	b2db      	uxtb	r3, r3
 800a32c:	2b01      	cmp	r3, #1
 800a32e:	d10c      	bne.n	800a34a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	695b      	ldr	r3, [r3, #20]
 800a336:	43da      	mvns	r2, r3
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	4013      	ands	r3, r2
 800a33c:	b29b      	uxth	r3, r3
 800a33e:	2b00      	cmp	r3, #0
 800a340:	bf14      	ite	ne
 800a342:	2301      	movne	r3, #1
 800a344:	2300      	moveq	r3, #0
 800a346:	b2db      	uxtb	r3, r3
 800a348:	e00b      	b.n	800a362 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	699b      	ldr	r3, [r3, #24]
 800a350:	43da      	mvns	r2, r3
 800a352:	68bb      	ldr	r3, [r7, #8]
 800a354:	4013      	ands	r3, r2
 800a356:	b29b      	uxth	r3, r3
 800a358:	2b00      	cmp	r3, #0
 800a35a:	bf14      	ite	ne
 800a35c:	2301      	movne	r3, #1
 800a35e:	2300      	moveq	r3, #0
 800a360:	b2db      	uxtb	r3, r3
 800a362:	2b00      	cmp	r3, #0
 800a364:	d016      	beq.n	800a394 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	2200      	movs	r2, #0
 800a36a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	2220      	movs	r2, #32
 800a370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	2200      	movs	r2, #0
 800a378:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a380:	f043 0220 	orr.w	r2, r3, #32
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	2200      	movs	r2, #0
 800a38c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800a390:	2301      	movs	r3, #1
 800a392:	e021      	b.n	800a3d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a394:	68bb      	ldr	r3, [r7, #8]
 800a396:	0c1b      	lsrs	r3, r3, #16
 800a398:	b2db      	uxtb	r3, r3
 800a39a:	2b01      	cmp	r3, #1
 800a39c:	d10c      	bne.n	800a3b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	695b      	ldr	r3, [r3, #20]
 800a3a4:	43da      	mvns	r2, r3
 800a3a6:	68bb      	ldr	r3, [r7, #8]
 800a3a8:	4013      	ands	r3, r2
 800a3aa:	b29b      	uxth	r3, r3
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	bf14      	ite	ne
 800a3b0:	2301      	movne	r3, #1
 800a3b2:	2300      	moveq	r3, #0
 800a3b4:	b2db      	uxtb	r3, r3
 800a3b6:	e00b      	b.n	800a3d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	699b      	ldr	r3, [r3, #24]
 800a3be:	43da      	mvns	r2, r3
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	4013      	ands	r3, r2
 800a3c4:	b29b      	uxth	r3, r3
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	bf14      	ite	ne
 800a3ca:	2301      	movne	r3, #1
 800a3cc:	2300      	moveq	r3, #0
 800a3ce:	b2db      	uxtb	r3, r3
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	f47f af6d 	bne.w	800a2b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800a3d6:	2300      	movs	r3, #0
}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	3710      	adds	r7, #16
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	bd80      	pop	{r7, pc}

0800a3e0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b084      	sub	sp, #16
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	60f8      	str	r0, [r7, #12]
 800a3e8:	60b9      	str	r1, [r7, #8]
 800a3ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a3ec:	e034      	b.n	800a458 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a3ee:	68f8      	ldr	r0, [r7, #12]
 800a3f0:	f000 f8e3 	bl	800a5ba <I2C_IsAcknowledgeFailed>
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d001      	beq.n	800a3fe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	e034      	b.n	800a468 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a3fe:	68bb      	ldr	r3, [r7, #8]
 800a400:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a404:	d028      	beq.n	800a458 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a406:	f7fe f939 	bl	800867c <HAL_GetTick>
 800a40a:	4602      	mov	r2, r0
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	1ad3      	subs	r3, r2, r3
 800a410:	68ba      	ldr	r2, [r7, #8]
 800a412:	429a      	cmp	r2, r3
 800a414:	d302      	bcc.n	800a41c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d11d      	bne.n	800a458 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	695b      	ldr	r3, [r3, #20]
 800a422:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a426:	2b80      	cmp	r3, #128	@ 0x80
 800a428:	d016      	beq.n	800a458 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	2200      	movs	r2, #0
 800a42e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	2220      	movs	r2, #32
 800a434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	2200      	movs	r2, #0
 800a43c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a444:	f043 0220 	orr.w	r2, r3, #32
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	2200      	movs	r2, #0
 800a450:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800a454:	2301      	movs	r3, #1
 800a456:	e007      	b.n	800a468 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	695b      	ldr	r3, [r3, #20]
 800a45e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a462:	2b80      	cmp	r3, #128	@ 0x80
 800a464:	d1c3      	bne.n	800a3ee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a466:	2300      	movs	r3, #0
}
 800a468:	4618      	mov	r0, r3
 800a46a:	3710      	adds	r7, #16
 800a46c:	46bd      	mov	sp, r7
 800a46e:	bd80      	pop	{r7, pc}

0800a470 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b084      	sub	sp, #16
 800a474:	af00      	add	r7, sp, #0
 800a476:	60f8      	str	r0, [r7, #12]
 800a478:	60b9      	str	r1, [r7, #8]
 800a47a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a47c:	e034      	b.n	800a4e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a47e:	68f8      	ldr	r0, [r7, #12]
 800a480:	f000 f89b 	bl	800a5ba <I2C_IsAcknowledgeFailed>
 800a484:	4603      	mov	r3, r0
 800a486:	2b00      	cmp	r3, #0
 800a488:	d001      	beq.n	800a48e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a48a:	2301      	movs	r3, #1
 800a48c:	e034      	b.n	800a4f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a48e:	68bb      	ldr	r3, [r7, #8]
 800a490:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a494:	d028      	beq.n	800a4e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a496:	f7fe f8f1 	bl	800867c <HAL_GetTick>
 800a49a:	4602      	mov	r2, r0
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	1ad3      	subs	r3, r2, r3
 800a4a0:	68ba      	ldr	r2, [r7, #8]
 800a4a2:	429a      	cmp	r2, r3
 800a4a4:	d302      	bcc.n	800a4ac <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a4a6:	68bb      	ldr	r3, [r7, #8]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d11d      	bne.n	800a4e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	695b      	ldr	r3, [r3, #20]
 800a4b2:	f003 0304 	and.w	r3, r3, #4
 800a4b6:	2b04      	cmp	r3, #4
 800a4b8:	d016      	beq.n	800a4e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	2220      	movs	r2, #32
 800a4c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4d4:	f043 0220 	orr.w	r2, r3, #32
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	2200      	movs	r2, #0
 800a4e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800a4e4:	2301      	movs	r3, #1
 800a4e6:	e007      	b.n	800a4f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	695b      	ldr	r3, [r3, #20]
 800a4ee:	f003 0304 	and.w	r3, r3, #4
 800a4f2:	2b04      	cmp	r3, #4
 800a4f4:	d1c3      	bne.n	800a47e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a4f6:	2300      	movs	r3, #0
}
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	3710      	adds	r7, #16
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}

0800a500 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b084      	sub	sp, #16
 800a504:	af00      	add	r7, sp, #0
 800a506:	60f8      	str	r0, [r7, #12]
 800a508:	60b9      	str	r1, [r7, #8]
 800a50a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a50c:	e049      	b.n	800a5a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	695b      	ldr	r3, [r3, #20]
 800a514:	f003 0310 	and.w	r3, r3, #16
 800a518:	2b10      	cmp	r3, #16
 800a51a:	d119      	bne.n	800a550 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	f06f 0210 	mvn.w	r2, #16
 800a524:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	2200      	movs	r2, #0
 800a52a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	2220      	movs	r2, #32
 800a530:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	2200      	movs	r2, #0
 800a538:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	2200      	movs	r2, #0
 800a548:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800a54c:	2301      	movs	r3, #1
 800a54e:	e030      	b.n	800a5b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a550:	f7fe f894 	bl	800867c <HAL_GetTick>
 800a554:	4602      	mov	r2, r0
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	1ad3      	subs	r3, r2, r3
 800a55a:	68ba      	ldr	r2, [r7, #8]
 800a55c:	429a      	cmp	r2, r3
 800a55e:	d302      	bcc.n	800a566 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a560:	68bb      	ldr	r3, [r7, #8]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d11d      	bne.n	800a5a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	695b      	ldr	r3, [r3, #20]
 800a56c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a570:	2b40      	cmp	r3, #64	@ 0x40
 800a572:	d016      	beq.n	800a5a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	2200      	movs	r2, #0
 800a578:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	2220      	movs	r2, #32
 800a57e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	2200      	movs	r2, #0
 800a586:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a58e:	f043 0220 	orr.w	r2, r3, #32
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	2200      	movs	r2, #0
 800a59a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800a59e:	2301      	movs	r3, #1
 800a5a0:	e007      	b.n	800a5b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	695b      	ldr	r3, [r3, #20]
 800a5a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5ac:	2b40      	cmp	r3, #64	@ 0x40
 800a5ae:	d1ae      	bne.n	800a50e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a5b0:	2300      	movs	r3, #0
}
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	3710      	adds	r7, #16
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	bd80      	pop	{r7, pc}

0800a5ba <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a5ba:	b480      	push	{r7}
 800a5bc:	b083      	sub	sp, #12
 800a5be:	af00      	add	r7, sp, #0
 800a5c0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	695b      	ldr	r3, [r3, #20]
 800a5c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a5cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a5d0:	d11b      	bne.n	800a60a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800a5da:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2200      	movs	r2, #0
 800a5e0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	2220      	movs	r2, #32
 800a5e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5f6:	f043 0204 	orr.w	r2, r3, #4
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2200      	movs	r2, #0
 800a602:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800a606:	2301      	movs	r3, #1
 800a608:	e000      	b.n	800a60c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a60a:	2300      	movs	r3, #0
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	370c      	adds	r7, #12
 800a610:	46bd      	mov	sp, r7
 800a612:	bc80      	pop	{r7}
 800a614:	4770      	bx	lr
	...

0800a618 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b086      	sub	sp, #24
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d101      	bne.n	800a62a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a626:	2301      	movs	r3, #1
 800a628:	e272      	b.n	800ab10 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	f003 0301 	and.w	r3, r3, #1
 800a632:	2b00      	cmp	r3, #0
 800a634:	f000 8087 	beq.w	800a746 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a638:	4b92      	ldr	r3, [pc, #584]	@ (800a884 <HAL_RCC_OscConfig+0x26c>)
 800a63a:	685b      	ldr	r3, [r3, #4]
 800a63c:	f003 030c 	and.w	r3, r3, #12
 800a640:	2b04      	cmp	r3, #4
 800a642:	d00c      	beq.n	800a65e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a644:	4b8f      	ldr	r3, [pc, #572]	@ (800a884 <HAL_RCC_OscConfig+0x26c>)
 800a646:	685b      	ldr	r3, [r3, #4]
 800a648:	f003 030c 	and.w	r3, r3, #12
 800a64c:	2b08      	cmp	r3, #8
 800a64e:	d112      	bne.n	800a676 <HAL_RCC_OscConfig+0x5e>
 800a650:	4b8c      	ldr	r3, [pc, #560]	@ (800a884 <HAL_RCC_OscConfig+0x26c>)
 800a652:	685b      	ldr	r3, [r3, #4]
 800a654:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a658:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a65c:	d10b      	bne.n	800a676 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a65e:	4b89      	ldr	r3, [pc, #548]	@ (800a884 <HAL_RCC_OscConfig+0x26c>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a666:	2b00      	cmp	r3, #0
 800a668:	d06c      	beq.n	800a744 <HAL_RCC_OscConfig+0x12c>
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	685b      	ldr	r3, [r3, #4]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d168      	bne.n	800a744 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a672:	2301      	movs	r3, #1
 800a674:	e24c      	b.n	800ab10 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	685b      	ldr	r3, [r3, #4]
 800a67a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a67e:	d106      	bne.n	800a68e <HAL_RCC_OscConfig+0x76>
 800a680:	4b80      	ldr	r3, [pc, #512]	@ (800a884 <HAL_RCC_OscConfig+0x26c>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	4a7f      	ldr	r2, [pc, #508]	@ (800a884 <HAL_RCC_OscConfig+0x26c>)
 800a686:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a68a:	6013      	str	r3, [r2, #0]
 800a68c:	e02e      	b.n	800a6ec <HAL_RCC_OscConfig+0xd4>
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	685b      	ldr	r3, [r3, #4]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d10c      	bne.n	800a6b0 <HAL_RCC_OscConfig+0x98>
 800a696:	4b7b      	ldr	r3, [pc, #492]	@ (800a884 <HAL_RCC_OscConfig+0x26c>)
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	4a7a      	ldr	r2, [pc, #488]	@ (800a884 <HAL_RCC_OscConfig+0x26c>)
 800a69c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a6a0:	6013      	str	r3, [r2, #0]
 800a6a2:	4b78      	ldr	r3, [pc, #480]	@ (800a884 <HAL_RCC_OscConfig+0x26c>)
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	4a77      	ldr	r2, [pc, #476]	@ (800a884 <HAL_RCC_OscConfig+0x26c>)
 800a6a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a6ac:	6013      	str	r3, [r2, #0]
 800a6ae:	e01d      	b.n	800a6ec <HAL_RCC_OscConfig+0xd4>
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	685b      	ldr	r3, [r3, #4]
 800a6b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a6b8:	d10c      	bne.n	800a6d4 <HAL_RCC_OscConfig+0xbc>
 800a6ba:	4b72      	ldr	r3, [pc, #456]	@ (800a884 <HAL_RCC_OscConfig+0x26c>)
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	4a71      	ldr	r2, [pc, #452]	@ (800a884 <HAL_RCC_OscConfig+0x26c>)
 800a6c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a6c4:	6013      	str	r3, [r2, #0]
 800a6c6:	4b6f      	ldr	r3, [pc, #444]	@ (800a884 <HAL_RCC_OscConfig+0x26c>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	4a6e      	ldr	r2, [pc, #440]	@ (800a884 <HAL_RCC_OscConfig+0x26c>)
 800a6cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a6d0:	6013      	str	r3, [r2, #0]
 800a6d2:	e00b      	b.n	800a6ec <HAL_RCC_OscConfig+0xd4>
 800a6d4:	4b6b      	ldr	r3, [pc, #428]	@ (800a884 <HAL_RCC_OscConfig+0x26c>)
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	4a6a      	ldr	r2, [pc, #424]	@ (800a884 <HAL_RCC_OscConfig+0x26c>)
 800a6da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a6de:	6013      	str	r3, [r2, #0]
 800a6e0:	4b68      	ldr	r3, [pc, #416]	@ (800a884 <HAL_RCC_OscConfig+0x26c>)
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	4a67      	ldr	r2, [pc, #412]	@ (800a884 <HAL_RCC_OscConfig+0x26c>)
 800a6e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a6ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	685b      	ldr	r3, [r3, #4]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d013      	beq.n	800a71c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a6f4:	f7fd ffc2 	bl	800867c <HAL_GetTick>
 800a6f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a6fa:	e008      	b.n	800a70e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a6fc:	f7fd ffbe 	bl	800867c <HAL_GetTick>
 800a700:	4602      	mov	r2, r0
 800a702:	693b      	ldr	r3, [r7, #16]
 800a704:	1ad3      	subs	r3, r2, r3
 800a706:	2b64      	cmp	r3, #100	@ 0x64
 800a708:	d901      	bls.n	800a70e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a70a:	2303      	movs	r3, #3
 800a70c:	e200      	b.n	800ab10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a70e:	4b5d      	ldr	r3, [pc, #372]	@ (800a884 <HAL_RCC_OscConfig+0x26c>)
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a716:	2b00      	cmp	r3, #0
 800a718:	d0f0      	beq.n	800a6fc <HAL_RCC_OscConfig+0xe4>
 800a71a:	e014      	b.n	800a746 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a71c:	f7fd ffae 	bl	800867c <HAL_GetTick>
 800a720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a722:	e008      	b.n	800a736 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a724:	f7fd ffaa 	bl	800867c <HAL_GetTick>
 800a728:	4602      	mov	r2, r0
 800a72a:	693b      	ldr	r3, [r7, #16]
 800a72c:	1ad3      	subs	r3, r2, r3
 800a72e:	2b64      	cmp	r3, #100	@ 0x64
 800a730:	d901      	bls.n	800a736 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a732:	2303      	movs	r3, #3
 800a734:	e1ec      	b.n	800ab10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a736:	4b53      	ldr	r3, [pc, #332]	@ (800a884 <HAL_RCC_OscConfig+0x26c>)
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d1f0      	bne.n	800a724 <HAL_RCC_OscConfig+0x10c>
 800a742:	e000      	b.n	800a746 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a744:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	f003 0302 	and.w	r3, r3, #2
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d063      	beq.n	800a81a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a752:	4b4c      	ldr	r3, [pc, #304]	@ (800a884 <HAL_RCC_OscConfig+0x26c>)
 800a754:	685b      	ldr	r3, [r3, #4]
 800a756:	f003 030c 	and.w	r3, r3, #12
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d00b      	beq.n	800a776 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800a75e:	4b49      	ldr	r3, [pc, #292]	@ (800a884 <HAL_RCC_OscConfig+0x26c>)
 800a760:	685b      	ldr	r3, [r3, #4]
 800a762:	f003 030c 	and.w	r3, r3, #12
 800a766:	2b08      	cmp	r3, #8
 800a768:	d11c      	bne.n	800a7a4 <HAL_RCC_OscConfig+0x18c>
 800a76a:	4b46      	ldr	r3, [pc, #280]	@ (800a884 <HAL_RCC_OscConfig+0x26c>)
 800a76c:	685b      	ldr	r3, [r3, #4]
 800a76e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a772:	2b00      	cmp	r3, #0
 800a774:	d116      	bne.n	800a7a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a776:	4b43      	ldr	r3, [pc, #268]	@ (800a884 <HAL_RCC_OscConfig+0x26c>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	f003 0302 	and.w	r3, r3, #2
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d005      	beq.n	800a78e <HAL_RCC_OscConfig+0x176>
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	691b      	ldr	r3, [r3, #16]
 800a786:	2b01      	cmp	r3, #1
 800a788:	d001      	beq.n	800a78e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800a78a:	2301      	movs	r3, #1
 800a78c:	e1c0      	b.n	800ab10 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a78e:	4b3d      	ldr	r3, [pc, #244]	@ (800a884 <HAL_RCC_OscConfig+0x26c>)
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	695b      	ldr	r3, [r3, #20]
 800a79a:	00db      	lsls	r3, r3, #3
 800a79c:	4939      	ldr	r1, [pc, #228]	@ (800a884 <HAL_RCC_OscConfig+0x26c>)
 800a79e:	4313      	orrs	r3, r2
 800a7a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a7a2:	e03a      	b.n	800a81a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	691b      	ldr	r3, [r3, #16]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d020      	beq.n	800a7ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a7ac:	4b36      	ldr	r3, [pc, #216]	@ (800a888 <HAL_RCC_OscConfig+0x270>)
 800a7ae:	2201      	movs	r2, #1
 800a7b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a7b2:	f7fd ff63 	bl	800867c <HAL_GetTick>
 800a7b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a7b8:	e008      	b.n	800a7cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a7ba:	f7fd ff5f 	bl	800867c <HAL_GetTick>
 800a7be:	4602      	mov	r2, r0
 800a7c0:	693b      	ldr	r3, [r7, #16]
 800a7c2:	1ad3      	subs	r3, r2, r3
 800a7c4:	2b02      	cmp	r3, #2
 800a7c6:	d901      	bls.n	800a7cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800a7c8:	2303      	movs	r3, #3
 800a7ca:	e1a1      	b.n	800ab10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a7cc:	4b2d      	ldr	r3, [pc, #180]	@ (800a884 <HAL_RCC_OscConfig+0x26c>)
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	f003 0302 	and.w	r3, r3, #2
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d0f0      	beq.n	800a7ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a7d8:	4b2a      	ldr	r3, [pc, #168]	@ (800a884 <HAL_RCC_OscConfig+0x26c>)
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	695b      	ldr	r3, [r3, #20]
 800a7e4:	00db      	lsls	r3, r3, #3
 800a7e6:	4927      	ldr	r1, [pc, #156]	@ (800a884 <HAL_RCC_OscConfig+0x26c>)
 800a7e8:	4313      	orrs	r3, r2
 800a7ea:	600b      	str	r3, [r1, #0]
 800a7ec:	e015      	b.n	800a81a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a7ee:	4b26      	ldr	r3, [pc, #152]	@ (800a888 <HAL_RCC_OscConfig+0x270>)
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a7f4:	f7fd ff42 	bl	800867c <HAL_GetTick>
 800a7f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a7fa:	e008      	b.n	800a80e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a7fc:	f7fd ff3e 	bl	800867c <HAL_GetTick>
 800a800:	4602      	mov	r2, r0
 800a802:	693b      	ldr	r3, [r7, #16]
 800a804:	1ad3      	subs	r3, r2, r3
 800a806:	2b02      	cmp	r3, #2
 800a808:	d901      	bls.n	800a80e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800a80a:	2303      	movs	r3, #3
 800a80c:	e180      	b.n	800ab10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a80e:	4b1d      	ldr	r3, [pc, #116]	@ (800a884 <HAL_RCC_OscConfig+0x26c>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f003 0302 	and.w	r3, r3, #2
 800a816:	2b00      	cmp	r3, #0
 800a818:	d1f0      	bne.n	800a7fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f003 0308 	and.w	r3, r3, #8
 800a822:	2b00      	cmp	r3, #0
 800a824:	d03a      	beq.n	800a89c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	699b      	ldr	r3, [r3, #24]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d019      	beq.n	800a862 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a82e:	4b17      	ldr	r3, [pc, #92]	@ (800a88c <HAL_RCC_OscConfig+0x274>)
 800a830:	2201      	movs	r2, #1
 800a832:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a834:	f7fd ff22 	bl	800867c <HAL_GetTick>
 800a838:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a83a:	e008      	b.n	800a84e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a83c:	f7fd ff1e 	bl	800867c <HAL_GetTick>
 800a840:	4602      	mov	r2, r0
 800a842:	693b      	ldr	r3, [r7, #16]
 800a844:	1ad3      	subs	r3, r2, r3
 800a846:	2b02      	cmp	r3, #2
 800a848:	d901      	bls.n	800a84e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800a84a:	2303      	movs	r3, #3
 800a84c:	e160      	b.n	800ab10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a84e:	4b0d      	ldr	r3, [pc, #52]	@ (800a884 <HAL_RCC_OscConfig+0x26c>)
 800a850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a852:	f003 0302 	and.w	r3, r3, #2
 800a856:	2b00      	cmp	r3, #0
 800a858:	d0f0      	beq.n	800a83c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800a85a:	2001      	movs	r0, #1
 800a85c:	f000 faba 	bl	800add4 <RCC_Delay>
 800a860:	e01c      	b.n	800a89c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a862:	4b0a      	ldr	r3, [pc, #40]	@ (800a88c <HAL_RCC_OscConfig+0x274>)
 800a864:	2200      	movs	r2, #0
 800a866:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a868:	f7fd ff08 	bl	800867c <HAL_GetTick>
 800a86c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a86e:	e00f      	b.n	800a890 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a870:	f7fd ff04 	bl	800867c <HAL_GetTick>
 800a874:	4602      	mov	r2, r0
 800a876:	693b      	ldr	r3, [r7, #16]
 800a878:	1ad3      	subs	r3, r2, r3
 800a87a:	2b02      	cmp	r3, #2
 800a87c:	d908      	bls.n	800a890 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800a87e:	2303      	movs	r3, #3
 800a880:	e146      	b.n	800ab10 <HAL_RCC_OscConfig+0x4f8>
 800a882:	bf00      	nop
 800a884:	40021000 	.word	0x40021000
 800a888:	42420000 	.word	0x42420000
 800a88c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a890:	4b92      	ldr	r3, [pc, #584]	@ (800aadc <HAL_RCC_OscConfig+0x4c4>)
 800a892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a894:	f003 0302 	and.w	r3, r3, #2
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d1e9      	bne.n	800a870 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f003 0304 	and.w	r3, r3, #4
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	f000 80a6 	beq.w	800a9f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a8ae:	4b8b      	ldr	r3, [pc, #556]	@ (800aadc <HAL_RCC_OscConfig+0x4c4>)
 800a8b0:	69db      	ldr	r3, [r3, #28]
 800a8b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d10d      	bne.n	800a8d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a8ba:	4b88      	ldr	r3, [pc, #544]	@ (800aadc <HAL_RCC_OscConfig+0x4c4>)
 800a8bc:	69db      	ldr	r3, [r3, #28]
 800a8be:	4a87      	ldr	r2, [pc, #540]	@ (800aadc <HAL_RCC_OscConfig+0x4c4>)
 800a8c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a8c4:	61d3      	str	r3, [r2, #28]
 800a8c6:	4b85      	ldr	r3, [pc, #532]	@ (800aadc <HAL_RCC_OscConfig+0x4c4>)
 800a8c8:	69db      	ldr	r3, [r3, #28]
 800a8ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a8ce:	60bb      	str	r3, [r7, #8]
 800a8d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a8d6:	4b82      	ldr	r3, [pc, #520]	@ (800aae0 <HAL_RCC_OscConfig+0x4c8>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d118      	bne.n	800a914 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a8e2:	4b7f      	ldr	r3, [pc, #508]	@ (800aae0 <HAL_RCC_OscConfig+0x4c8>)
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	4a7e      	ldr	r2, [pc, #504]	@ (800aae0 <HAL_RCC_OscConfig+0x4c8>)
 800a8e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a8ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a8ee:	f7fd fec5 	bl	800867c <HAL_GetTick>
 800a8f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a8f4:	e008      	b.n	800a908 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a8f6:	f7fd fec1 	bl	800867c <HAL_GetTick>
 800a8fa:	4602      	mov	r2, r0
 800a8fc:	693b      	ldr	r3, [r7, #16]
 800a8fe:	1ad3      	subs	r3, r2, r3
 800a900:	2b64      	cmp	r3, #100	@ 0x64
 800a902:	d901      	bls.n	800a908 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800a904:	2303      	movs	r3, #3
 800a906:	e103      	b.n	800ab10 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a908:	4b75      	ldr	r3, [pc, #468]	@ (800aae0 <HAL_RCC_OscConfig+0x4c8>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a910:	2b00      	cmp	r3, #0
 800a912:	d0f0      	beq.n	800a8f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	68db      	ldr	r3, [r3, #12]
 800a918:	2b01      	cmp	r3, #1
 800a91a:	d106      	bne.n	800a92a <HAL_RCC_OscConfig+0x312>
 800a91c:	4b6f      	ldr	r3, [pc, #444]	@ (800aadc <HAL_RCC_OscConfig+0x4c4>)
 800a91e:	6a1b      	ldr	r3, [r3, #32]
 800a920:	4a6e      	ldr	r2, [pc, #440]	@ (800aadc <HAL_RCC_OscConfig+0x4c4>)
 800a922:	f043 0301 	orr.w	r3, r3, #1
 800a926:	6213      	str	r3, [r2, #32]
 800a928:	e02d      	b.n	800a986 <HAL_RCC_OscConfig+0x36e>
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	68db      	ldr	r3, [r3, #12]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d10c      	bne.n	800a94c <HAL_RCC_OscConfig+0x334>
 800a932:	4b6a      	ldr	r3, [pc, #424]	@ (800aadc <HAL_RCC_OscConfig+0x4c4>)
 800a934:	6a1b      	ldr	r3, [r3, #32]
 800a936:	4a69      	ldr	r2, [pc, #420]	@ (800aadc <HAL_RCC_OscConfig+0x4c4>)
 800a938:	f023 0301 	bic.w	r3, r3, #1
 800a93c:	6213      	str	r3, [r2, #32]
 800a93e:	4b67      	ldr	r3, [pc, #412]	@ (800aadc <HAL_RCC_OscConfig+0x4c4>)
 800a940:	6a1b      	ldr	r3, [r3, #32]
 800a942:	4a66      	ldr	r2, [pc, #408]	@ (800aadc <HAL_RCC_OscConfig+0x4c4>)
 800a944:	f023 0304 	bic.w	r3, r3, #4
 800a948:	6213      	str	r3, [r2, #32]
 800a94a:	e01c      	b.n	800a986 <HAL_RCC_OscConfig+0x36e>
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	68db      	ldr	r3, [r3, #12]
 800a950:	2b05      	cmp	r3, #5
 800a952:	d10c      	bne.n	800a96e <HAL_RCC_OscConfig+0x356>
 800a954:	4b61      	ldr	r3, [pc, #388]	@ (800aadc <HAL_RCC_OscConfig+0x4c4>)
 800a956:	6a1b      	ldr	r3, [r3, #32]
 800a958:	4a60      	ldr	r2, [pc, #384]	@ (800aadc <HAL_RCC_OscConfig+0x4c4>)
 800a95a:	f043 0304 	orr.w	r3, r3, #4
 800a95e:	6213      	str	r3, [r2, #32]
 800a960:	4b5e      	ldr	r3, [pc, #376]	@ (800aadc <HAL_RCC_OscConfig+0x4c4>)
 800a962:	6a1b      	ldr	r3, [r3, #32]
 800a964:	4a5d      	ldr	r2, [pc, #372]	@ (800aadc <HAL_RCC_OscConfig+0x4c4>)
 800a966:	f043 0301 	orr.w	r3, r3, #1
 800a96a:	6213      	str	r3, [r2, #32]
 800a96c:	e00b      	b.n	800a986 <HAL_RCC_OscConfig+0x36e>
 800a96e:	4b5b      	ldr	r3, [pc, #364]	@ (800aadc <HAL_RCC_OscConfig+0x4c4>)
 800a970:	6a1b      	ldr	r3, [r3, #32]
 800a972:	4a5a      	ldr	r2, [pc, #360]	@ (800aadc <HAL_RCC_OscConfig+0x4c4>)
 800a974:	f023 0301 	bic.w	r3, r3, #1
 800a978:	6213      	str	r3, [r2, #32]
 800a97a:	4b58      	ldr	r3, [pc, #352]	@ (800aadc <HAL_RCC_OscConfig+0x4c4>)
 800a97c:	6a1b      	ldr	r3, [r3, #32]
 800a97e:	4a57      	ldr	r2, [pc, #348]	@ (800aadc <HAL_RCC_OscConfig+0x4c4>)
 800a980:	f023 0304 	bic.w	r3, r3, #4
 800a984:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	68db      	ldr	r3, [r3, #12]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d015      	beq.n	800a9ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a98e:	f7fd fe75 	bl	800867c <HAL_GetTick>
 800a992:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a994:	e00a      	b.n	800a9ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a996:	f7fd fe71 	bl	800867c <HAL_GetTick>
 800a99a:	4602      	mov	r2, r0
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	1ad3      	subs	r3, r2, r3
 800a9a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a9a4:	4293      	cmp	r3, r2
 800a9a6:	d901      	bls.n	800a9ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800a9a8:	2303      	movs	r3, #3
 800a9aa:	e0b1      	b.n	800ab10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a9ac:	4b4b      	ldr	r3, [pc, #300]	@ (800aadc <HAL_RCC_OscConfig+0x4c4>)
 800a9ae:	6a1b      	ldr	r3, [r3, #32]
 800a9b0:	f003 0302 	and.w	r3, r3, #2
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d0ee      	beq.n	800a996 <HAL_RCC_OscConfig+0x37e>
 800a9b8:	e014      	b.n	800a9e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a9ba:	f7fd fe5f 	bl	800867c <HAL_GetTick>
 800a9be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a9c0:	e00a      	b.n	800a9d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a9c2:	f7fd fe5b 	bl	800867c <HAL_GetTick>
 800a9c6:	4602      	mov	r2, r0
 800a9c8:	693b      	ldr	r3, [r7, #16]
 800a9ca:	1ad3      	subs	r3, r2, r3
 800a9cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a9d0:	4293      	cmp	r3, r2
 800a9d2:	d901      	bls.n	800a9d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800a9d4:	2303      	movs	r3, #3
 800a9d6:	e09b      	b.n	800ab10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a9d8:	4b40      	ldr	r3, [pc, #256]	@ (800aadc <HAL_RCC_OscConfig+0x4c4>)
 800a9da:	6a1b      	ldr	r3, [r3, #32]
 800a9dc:	f003 0302 	and.w	r3, r3, #2
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d1ee      	bne.n	800a9c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800a9e4:	7dfb      	ldrb	r3, [r7, #23]
 800a9e6:	2b01      	cmp	r3, #1
 800a9e8:	d105      	bne.n	800a9f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a9ea:	4b3c      	ldr	r3, [pc, #240]	@ (800aadc <HAL_RCC_OscConfig+0x4c4>)
 800a9ec:	69db      	ldr	r3, [r3, #28]
 800a9ee:	4a3b      	ldr	r2, [pc, #236]	@ (800aadc <HAL_RCC_OscConfig+0x4c4>)
 800a9f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a9f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	69db      	ldr	r3, [r3, #28]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	f000 8087 	beq.w	800ab0e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800aa00:	4b36      	ldr	r3, [pc, #216]	@ (800aadc <HAL_RCC_OscConfig+0x4c4>)
 800aa02:	685b      	ldr	r3, [r3, #4]
 800aa04:	f003 030c 	and.w	r3, r3, #12
 800aa08:	2b08      	cmp	r3, #8
 800aa0a:	d061      	beq.n	800aad0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	69db      	ldr	r3, [r3, #28]
 800aa10:	2b02      	cmp	r3, #2
 800aa12:	d146      	bne.n	800aaa2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aa14:	4b33      	ldr	r3, [pc, #204]	@ (800aae4 <HAL_RCC_OscConfig+0x4cc>)
 800aa16:	2200      	movs	r2, #0
 800aa18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aa1a:	f7fd fe2f 	bl	800867c <HAL_GetTick>
 800aa1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800aa20:	e008      	b.n	800aa34 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aa22:	f7fd fe2b 	bl	800867c <HAL_GetTick>
 800aa26:	4602      	mov	r2, r0
 800aa28:	693b      	ldr	r3, [r7, #16]
 800aa2a:	1ad3      	subs	r3, r2, r3
 800aa2c:	2b02      	cmp	r3, #2
 800aa2e:	d901      	bls.n	800aa34 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800aa30:	2303      	movs	r3, #3
 800aa32:	e06d      	b.n	800ab10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800aa34:	4b29      	ldr	r3, [pc, #164]	@ (800aadc <HAL_RCC_OscConfig+0x4c4>)
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d1f0      	bne.n	800aa22 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	6a1b      	ldr	r3, [r3, #32]
 800aa44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa48:	d108      	bne.n	800aa5c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800aa4a:	4b24      	ldr	r3, [pc, #144]	@ (800aadc <HAL_RCC_OscConfig+0x4c4>)
 800aa4c:	685b      	ldr	r3, [r3, #4]
 800aa4e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	689b      	ldr	r3, [r3, #8]
 800aa56:	4921      	ldr	r1, [pc, #132]	@ (800aadc <HAL_RCC_OscConfig+0x4c4>)
 800aa58:	4313      	orrs	r3, r2
 800aa5a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800aa5c:	4b1f      	ldr	r3, [pc, #124]	@ (800aadc <HAL_RCC_OscConfig+0x4c4>)
 800aa5e:	685b      	ldr	r3, [r3, #4]
 800aa60:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	6a19      	ldr	r1, [r3, #32]
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa6c:	430b      	orrs	r3, r1
 800aa6e:	491b      	ldr	r1, [pc, #108]	@ (800aadc <HAL_RCC_OscConfig+0x4c4>)
 800aa70:	4313      	orrs	r3, r2
 800aa72:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800aa74:	4b1b      	ldr	r3, [pc, #108]	@ (800aae4 <HAL_RCC_OscConfig+0x4cc>)
 800aa76:	2201      	movs	r2, #1
 800aa78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aa7a:	f7fd fdff 	bl	800867c <HAL_GetTick>
 800aa7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800aa80:	e008      	b.n	800aa94 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aa82:	f7fd fdfb 	bl	800867c <HAL_GetTick>
 800aa86:	4602      	mov	r2, r0
 800aa88:	693b      	ldr	r3, [r7, #16]
 800aa8a:	1ad3      	subs	r3, r2, r3
 800aa8c:	2b02      	cmp	r3, #2
 800aa8e:	d901      	bls.n	800aa94 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800aa90:	2303      	movs	r3, #3
 800aa92:	e03d      	b.n	800ab10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800aa94:	4b11      	ldr	r3, [pc, #68]	@ (800aadc <HAL_RCC_OscConfig+0x4c4>)
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d0f0      	beq.n	800aa82 <HAL_RCC_OscConfig+0x46a>
 800aaa0:	e035      	b.n	800ab0e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aaa2:	4b10      	ldr	r3, [pc, #64]	@ (800aae4 <HAL_RCC_OscConfig+0x4cc>)
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aaa8:	f7fd fde8 	bl	800867c <HAL_GetTick>
 800aaac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800aaae:	e008      	b.n	800aac2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aab0:	f7fd fde4 	bl	800867c <HAL_GetTick>
 800aab4:	4602      	mov	r2, r0
 800aab6:	693b      	ldr	r3, [r7, #16]
 800aab8:	1ad3      	subs	r3, r2, r3
 800aaba:	2b02      	cmp	r3, #2
 800aabc:	d901      	bls.n	800aac2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800aabe:	2303      	movs	r3, #3
 800aac0:	e026      	b.n	800ab10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800aac2:	4b06      	ldr	r3, [pc, #24]	@ (800aadc <HAL_RCC_OscConfig+0x4c4>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d1f0      	bne.n	800aab0 <HAL_RCC_OscConfig+0x498>
 800aace:	e01e      	b.n	800ab0e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	69db      	ldr	r3, [r3, #28]
 800aad4:	2b01      	cmp	r3, #1
 800aad6:	d107      	bne.n	800aae8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800aad8:	2301      	movs	r3, #1
 800aada:	e019      	b.n	800ab10 <HAL_RCC_OscConfig+0x4f8>
 800aadc:	40021000 	.word	0x40021000
 800aae0:	40007000 	.word	0x40007000
 800aae4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800aae8:	4b0b      	ldr	r3, [pc, #44]	@ (800ab18 <HAL_RCC_OscConfig+0x500>)
 800aaea:	685b      	ldr	r3, [r3, #4]
 800aaec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6a1b      	ldr	r3, [r3, #32]
 800aaf8:	429a      	cmp	r2, r3
 800aafa:	d106      	bne.n	800ab0a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ab06:	429a      	cmp	r2, r3
 800ab08:	d001      	beq.n	800ab0e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800ab0a:	2301      	movs	r3, #1
 800ab0c:	e000      	b.n	800ab10 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800ab0e:	2300      	movs	r3, #0
}
 800ab10:	4618      	mov	r0, r3
 800ab12:	3718      	adds	r7, #24
 800ab14:	46bd      	mov	sp, r7
 800ab16:	bd80      	pop	{r7, pc}
 800ab18:	40021000 	.word	0x40021000

0800ab1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b084      	sub	sp, #16
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
 800ab24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d101      	bne.n	800ab30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ab2c:	2301      	movs	r3, #1
 800ab2e:	e0d0      	b.n	800acd2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ab30:	4b6a      	ldr	r3, [pc, #424]	@ (800acdc <HAL_RCC_ClockConfig+0x1c0>)
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	f003 0307 	and.w	r3, r3, #7
 800ab38:	683a      	ldr	r2, [r7, #0]
 800ab3a:	429a      	cmp	r2, r3
 800ab3c:	d910      	bls.n	800ab60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ab3e:	4b67      	ldr	r3, [pc, #412]	@ (800acdc <HAL_RCC_ClockConfig+0x1c0>)
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	f023 0207 	bic.w	r2, r3, #7
 800ab46:	4965      	ldr	r1, [pc, #404]	@ (800acdc <HAL_RCC_ClockConfig+0x1c0>)
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	4313      	orrs	r3, r2
 800ab4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ab4e:	4b63      	ldr	r3, [pc, #396]	@ (800acdc <HAL_RCC_ClockConfig+0x1c0>)
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	f003 0307 	and.w	r3, r3, #7
 800ab56:	683a      	ldr	r2, [r7, #0]
 800ab58:	429a      	cmp	r2, r3
 800ab5a:	d001      	beq.n	800ab60 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800ab5c:	2301      	movs	r3, #1
 800ab5e:	e0b8      	b.n	800acd2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	f003 0302 	and.w	r3, r3, #2
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d020      	beq.n	800abae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	f003 0304 	and.w	r3, r3, #4
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d005      	beq.n	800ab84 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ab78:	4b59      	ldr	r3, [pc, #356]	@ (800ace0 <HAL_RCC_ClockConfig+0x1c4>)
 800ab7a:	685b      	ldr	r3, [r3, #4]
 800ab7c:	4a58      	ldr	r2, [pc, #352]	@ (800ace0 <HAL_RCC_ClockConfig+0x1c4>)
 800ab7e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800ab82:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	f003 0308 	and.w	r3, r3, #8
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d005      	beq.n	800ab9c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ab90:	4b53      	ldr	r3, [pc, #332]	@ (800ace0 <HAL_RCC_ClockConfig+0x1c4>)
 800ab92:	685b      	ldr	r3, [r3, #4]
 800ab94:	4a52      	ldr	r2, [pc, #328]	@ (800ace0 <HAL_RCC_ClockConfig+0x1c4>)
 800ab96:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800ab9a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ab9c:	4b50      	ldr	r3, [pc, #320]	@ (800ace0 <HAL_RCC_ClockConfig+0x1c4>)
 800ab9e:	685b      	ldr	r3, [r3, #4]
 800aba0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	689b      	ldr	r3, [r3, #8]
 800aba8:	494d      	ldr	r1, [pc, #308]	@ (800ace0 <HAL_RCC_ClockConfig+0x1c4>)
 800abaa:	4313      	orrs	r3, r2
 800abac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	f003 0301 	and.w	r3, r3, #1
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d040      	beq.n	800ac3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	685b      	ldr	r3, [r3, #4]
 800abbe:	2b01      	cmp	r3, #1
 800abc0:	d107      	bne.n	800abd2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800abc2:	4b47      	ldr	r3, [pc, #284]	@ (800ace0 <HAL_RCC_ClockConfig+0x1c4>)
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d115      	bne.n	800abfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800abce:	2301      	movs	r3, #1
 800abd0:	e07f      	b.n	800acd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	685b      	ldr	r3, [r3, #4]
 800abd6:	2b02      	cmp	r3, #2
 800abd8:	d107      	bne.n	800abea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800abda:	4b41      	ldr	r3, [pc, #260]	@ (800ace0 <HAL_RCC_ClockConfig+0x1c4>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d109      	bne.n	800abfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800abe6:	2301      	movs	r3, #1
 800abe8:	e073      	b.n	800acd2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800abea:	4b3d      	ldr	r3, [pc, #244]	@ (800ace0 <HAL_RCC_ClockConfig+0x1c4>)
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	f003 0302 	and.w	r3, r3, #2
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d101      	bne.n	800abfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800abf6:	2301      	movs	r3, #1
 800abf8:	e06b      	b.n	800acd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800abfa:	4b39      	ldr	r3, [pc, #228]	@ (800ace0 <HAL_RCC_ClockConfig+0x1c4>)
 800abfc:	685b      	ldr	r3, [r3, #4]
 800abfe:	f023 0203 	bic.w	r2, r3, #3
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	685b      	ldr	r3, [r3, #4]
 800ac06:	4936      	ldr	r1, [pc, #216]	@ (800ace0 <HAL_RCC_ClockConfig+0x1c4>)
 800ac08:	4313      	orrs	r3, r2
 800ac0a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ac0c:	f7fd fd36 	bl	800867c <HAL_GetTick>
 800ac10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ac12:	e00a      	b.n	800ac2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ac14:	f7fd fd32 	bl	800867c <HAL_GetTick>
 800ac18:	4602      	mov	r2, r0
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	1ad3      	subs	r3, r2, r3
 800ac1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ac22:	4293      	cmp	r3, r2
 800ac24:	d901      	bls.n	800ac2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ac26:	2303      	movs	r3, #3
 800ac28:	e053      	b.n	800acd2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ac2a:	4b2d      	ldr	r3, [pc, #180]	@ (800ace0 <HAL_RCC_ClockConfig+0x1c4>)
 800ac2c:	685b      	ldr	r3, [r3, #4]
 800ac2e:	f003 020c 	and.w	r2, r3, #12
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	685b      	ldr	r3, [r3, #4]
 800ac36:	009b      	lsls	r3, r3, #2
 800ac38:	429a      	cmp	r2, r3
 800ac3a:	d1eb      	bne.n	800ac14 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ac3c:	4b27      	ldr	r3, [pc, #156]	@ (800acdc <HAL_RCC_ClockConfig+0x1c0>)
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	f003 0307 	and.w	r3, r3, #7
 800ac44:	683a      	ldr	r2, [r7, #0]
 800ac46:	429a      	cmp	r2, r3
 800ac48:	d210      	bcs.n	800ac6c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ac4a:	4b24      	ldr	r3, [pc, #144]	@ (800acdc <HAL_RCC_ClockConfig+0x1c0>)
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	f023 0207 	bic.w	r2, r3, #7
 800ac52:	4922      	ldr	r1, [pc, #136]	@ (800acdc <HAL_RCC_ClockConfig+0x1c0>)
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	4313      	orrs	r3, r2
 800ac58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ac5a:	4b20      	ldr	r3, [pc, #128]	@ (800acdc <HAL_RCC_ClockConfig+0x1c0>)
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	f003 0307 	and.w	r3, r3, #7
 800ac62:	683a      	ldr	r2, [r7, #0]
 800ac64:	429a      	cmp	r2, r3
 800ac66:	d001      	beq.n	800ac6c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800ac68:	2301      	movs	r3, #1
 800ac6a:	e032      	b.n	800acd2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	f003 0304 	and.w	r3, r3, #4
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d008      	beq.n	800ac8a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ac78:	4b19      	ldr	r3, [pc, #100]	@ (800ace0 <HAL_RCC_ClockConfig+0x1c4>)
 800ac7a:	685b      	ldr	r3, [r3, #4]
 800ac7c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	68db      	ldr	r3, [r3, #12]
 800ac84:	4916      	ldr	r1, [pc, #88]	@ (800ace0 <HAL_RCC_ClockConfig+0x1c4>)
 800ac86:	4313      	orrs	r3, r2
 800ac88:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	f003 0308 	and.w	r3, r3, #8
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d009      	beq.n	800acaa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800ac96:	4b12      	ldr	r3, [pc, #72]	@ (800ace0 <HAL_RCC_ClockConfig+0x1c4>)
 800ac98:	685b      	ldr	r3, [r3, #4]
 800ac9a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	691b      	ldr	r3, [r3, #16]
 800aca2:	00db      	lsls	r3, r3, #3
 800aca4:	490e      	ldr	r1, [pc, #56]	@ (800ace0 <HAL_RCC_ClockConfig+0x1c4>)
 800aca6:	4313      	orrs	r3, r2
 800aca8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800acaa:	f000 f821 	bl	800acf0 <HAL_RCC_GetSysClockFreq>
 800acae:	4602      	mov	r2, r0
 800acb0:	4b0b      	ldr	r3, [pc, #44]	@ (800ace0 <HAL_RCC_ClockConfig+0x1c4>)
 800acb2:	685b      	ldr	r3, [r3, #4]
 800acb4:	091b      	lsrs	r3, r3, #4
 800acb6:	f003 030f 	and.w	r3, r3, #15
 800acba:	490a      	ldr	r1, [pc, #40]	@ (800ace4 <HAL_RCC_ClockConfig+0x1c8>)
 800acbc:	5ccb      	ldrb	r3, [r1, r3]
 800acbe:	fa22 f303 	lsr.w	r3, r2, r3
 800acc2:	4a09      	ldr	r2, [pc, #36]	@ (800ace8 <HAL_RCC_ClockConfig+0x1cc>)
 800acc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800acc6:	4b09      	ldr	r3, [pc, #36]	@ (800acec <HAL_RCC_ClockConfig+0x1d0>)
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	4618      	mov	r0, r3
 800accc:	f7fd fc94 	bl	80085f8 <HAL_InitTick>

  return HAL_OK;
 800acd0:	2300      	movs	r3, #0
}
 800acd2:	4618      	mov	r0, r3
 800acd4:	3710      	adds	r7, #16
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bd80      	pop	{r7, pc}
 800acda:	bf00      	nop
 800acdc:	40022000 	.word	0x40022000
 800ace0:	40021000 	.word	0x40021000
 800ace4:	0800c4c8 	.word	0x0800c4c8
 800ace8:	2000003c 	.word	0x2000003c
 800acec:	20000040 	.word	0x20000040

0800acf0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800acf0:	b480      	push	{r7}
 800acf2:	b087      	sub	sp, #28
 800acf4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800acf6:	2300      	movs	r3, #0
 800acf8:	60fb      	str	r3, [r7, #12]
 800acfa:	2300      	movs	r3, #0
 800acfc:	60bb      	str	r3, [r7, #8]
 800acfe:	2300      	movs	r3, #0
 800ad00:	617b      	str	r3, [r7, #20]
 800ad02:	2300      	movs	r3, #0
 800ad04:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800ad06:	2300      	movs	r3, #0
 800ad08:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800ad0a:	4b1e      	ldr	r3, [pc, #120]	@ (800ad84 <HAL_RCC_GetSysClockFreq+0x94>)
 800ad0c:	685b      	ldr	r3, [r3, #4]
 800ad0e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	f003 030c 	and.w	r3, r3, #12
 800ad16:	2b04      	cmp	r3, #4
 800ad18:	d002      	beq.n	800ad20 <HAL_RCC_GetSysClockFreq+0x30>
 800ad1a:	2b08      	cmp	r3, #8
 800ad1c:	d003      	beq.n	800ad26 <HAL_RCC_GetSysClockFreq+0x36>
 800ad1e:	e027      	b.n	800ad70 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800ad20:	4b19      	ldr	r3, [pc, #100]	@ (800ad88 <HAL_RCC_GetSysClockFreq+0x98>)
 800ad22:	613b      	str	r3, [r7, #16]
      break;
 800ad24:	e027      	b.n	800ad76 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	0c9b      	lsrs	r3, r3, #18
 800ad2a:	f003 030f 	and.w	r3, r3, #15
 800ad2e:	4a17      	ldr	r2, [pc, #92]	@ (800ad8c <HAL_RCC_GetSysClockFreq+0x9c>)
 800ad30:	5cd3      	ldrb	r3, [r2, r3]
 800ad32:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d010      	beq.n	800ad60 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800ad3e:	4b11      	ldr	r3, [pc, #68]	@ (800ad84 <HAL_RCC_GetSysClockFreq+0x94>)
 800ad40:	685b      	ldr	r3, [r3, #4]
 800ad42:	0c5b      	lsrs	r3, r3, #17
 800ad44:	f003 0301 	and.w	r3, r3, #1
 800ad48:	4a11      	ldr	r2, [pc, #68]	@ (800ad90 <HAL_RCC_GetSysClockFreq+0xa0>)
 800ad4a:	5cd3      	ldrb	r3, [r2, r3]
 800ad4c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	4a0d      	ldr	r2, [pc, #52]	@ (800ad88 <HAL_RCC_GetSysClockFreq+0x98>)
 800ad52:	fb03 f202 	mul.w	r2, r3, r2
 800ad56:	68bb      	ldr	r3, [r7, #8]
 800ad58:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad5c:	617b      	str	r3, [r7, #20]
 800ad5e:	e004      	b.n	800ad6a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	4a0c      	ldr	r2, [pc, #48]	@ (800ad94 <HAL_RCC_GetSysClockFreq+0xa4>)
 800ad64:	fb02 f303 	mul.w	r3, r2, r3
 800ad68:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800ad6a:	697b      	ldr	r3, [r7, #20]
 800ad6c:	613b      	str	r3, [r7, #16]
      break;
 800ad6e:	e002      	b.n	800ad76 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800ad70:	4b05      	ldr	r3, [pc, #20]	@ (800ad88 <HAL_RCC_GetSysClockFreq+0x98>)
 800ad72:	613b      	str	r3, [r7, #16]
      break;
 800ad74:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ad76:	693b      	ldr	r3, [r7, #16]
}
 800ad78:	4618      	mov	r0, r3
 800ad7a:	371c      	adds	r7, #28
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bc80      	pop	{r7}
 800ad80:	4770      	bx	lr
 800ad82:	bf00      	nop
 800ad84:	40021000 	.word	0x40021000
 800ad88:	007a1200 	.word	0x007a1200
 800ad8c:	0800c4e0 	.word	0x0800c4e0
 800ad90:	0800c4f0 	.word	0x0800c4f0
 800ad94:	003d0900 	.word	0x003d0900

0800ad98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ad98:	b480      	push	{r7}
 800ad9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ad9c:	4b02      	ldr	r3, [pc, #8]	@ (800ada8 <HAL_RCC_GetHCLKFreq+0x10>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
}
 800ada0:	4618      	mov	r0, r3
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bc80      	pop	{r7}
 800ada6:	4770      	bx	lr
 800ada8:	2000003c 	.word	0x2000003c

0800adac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800adb0:	f7ff fff2 	bl	800ad98 <HAL_RCC_GetHCLKFreq>
 800adb4:	4602      	mov	r2, r0
 800adb6:	4b05      	ldr	r3, [pc, #20]	@ (800adcc <HAL_RCC_GetPCLK1Freq+0x20>)
 800adb8:	685b      	ldr	r3, [r3, #4]
 800adba:	0a1b      	lsrs	r3, r3, #8
 800adbc:	f003 0307 	and.w	r3, r3, #7
 800adc0:	4903      	ldr	r1, [pc, #12]	@ (800add0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800adc2:	5ccb      	ldrb	r3, [r1, r3]
 800adc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800adc8:	4618      	mov	r0, r3
 800adca:	bd80      	pop	{r7, pc}
 800adcc:	40021000 	.word	0x40021000
 800add0:	0800c4d8 	.word	0x0800c4d8

0800add4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800add4:	b480      	push	{r7}
 800add6:	b085      	sub	sp, #20
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800addc:	4b0a      	ldr	r3, [pc, #40]	@ (800ae08 <RCC_Delay+0x34>)
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	4a0a      	ldr	r2, [pc, #40]	@ (800ae0c <RCC_Delay+0x38>)
 800ade2:	fba2 2303 	umull	r2, r3, r2, r3
 800ade6:	0a5b      	lsrs	r3, r3, #9
 800ade8:	687a      	ldr	r2, [r7, #4]
 800adea:	fb02 f303 	mul.w	r3, r2, r3
 800adee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800adf0:	bf00      	nop
  }
  while (Delay --);
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	1e5a      	subs	r2, r3, #1
 800adf6:	60fa      	str	r2, [r7, #12]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d1f9      	bne.n	800adf0 <RCC_Delay+0x1c>
}
 800adfc:	bf00      	nop
 800adfe:	bf00      	nop
 800ae00:	3714      	adds	r7, #20
 800ae02:	46bd      	mov	sp, r7
 800ae04:	bc80      	pop	{r7}
 800ae06:	4770      	bx	lr
 800ae08:	2000003c 	.word	0x2000003c
 800ae0c:	10624dd3 	.word	0x10624dd3

0800ae10 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800ae10:	b480      	push	{r7}
 800ae12:	b085      	sub	sp, #20
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ae1e:	b2db      	uxtb	r3, r3
 800ae20:	2b01      	cmp	r3, #1
 800ae22:	d001      	beq.n	800ae28 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800ae24:	2301      	movs	r3, #1
 800ae26:	e032      	b.n	800ae8e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	2202      	movs	r2, #2
 800ae2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	4a18      	ldr	r2, [pc, #96]	@ (800ae98 <HAL_TIM_Base_Start+0x88>)
 800ae36:	4293      	cmp	r3, r2
 800ae38:	d00e      	beq.n	800ae58 <HAL_TIM_Base_Start+0x48>
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae42:	d009      	beq.n	800ae58 <HAL_TIM_Base_Start+0x48>
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	4a14      	ldr	r2, [pc, #80]	@ (800ae9c <HAL_TIM_Base_Start+0x8c>)
 800ae4a:	4293      	cmp	r3, r2
 800ae4c:	d004      	beq.n	800ae58 <HAL_TIM_Base_Start+0x48>
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	4a13      	ldr	r2, [pc, #76]	@ (800aea0 <HAL_TIM_Base_Start+0x90>)
 800ae54:	4293      	cmp	r3, r2
 800ae56:	d111      	bne.n	800ae7c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	689b      	ldr	r3, [r3, #8]
 800ae5e:	f003 0307 	and.w	r3, r3, #7
 800ae62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	2b06      	cmp	r3, #6
 800ae68:	d010      	beq.n	800ae8c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	681a      	ldr	r2, [r3, #0]
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	f042 0201 	orr.w	r2, r2, #1
 800ae78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae7a:	e007      	b.n	800ae8c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	681a      	ldr	r2, [r3, #0]
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	f042 0201 	orr.w	r2, r2, #1
 800ae8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ae8c:	2300      	movs	r3, #0
}
 800ae8e:	4618      	mov	r0, r3
 800ae90:	3714      	adds	r7, #20
 800ae92:	46bd      	mov	sp, r7
 800ae94:	bc80      	pop	{r7}
 800ae96:	4770      	bx	lr
 800ae98:	40012c00 	.word	0x40012c00
 800ae9c:	40000400 	.word	0x40000400
 800aea0:	40000800 	.word	0x40000800

0800aea4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b082      	sub	sp, #8
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d101      	bne.n	800aeb6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800aeb2:	2301      	movs	r3, #1
 800aeb4:	e041      	b.n	800af3a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aebc:	b2db      	uxtb	r3, r3
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d106      	bne.n	800aed0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	2200      	movs	r2, #0
 800aec6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800aeca:	6878      	ldr	r0, [r7, #4]
 800aecc:	f7fc fd08 	bl	80078e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2202      	movs	r2, #2
 800aed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681a      	ldr	r2, [r3, #0]
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	3304      	adds	r3, #4
 800aee0:	4619      	mov	r1, r3
 800aee2:	4610      	mov	r0, r2
 800aee4:	f000 f992 	bl	800b20c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	2201      	movs	r2, #1
 800aeec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2201      	movs	r2, #1
 800aef4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2201      	movs	r2, #1
 800aefc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	2201      	movs	r2, #1
 800af04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2201      	movs	r2, #1
 800af0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2201      	movs	r2, #1
 800af14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2201      	movs	r2, #1
 800af1c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2201      	movs	r2, #1
 800af24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2201      	movs	r2, #1
 800af2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2201      	movs	r2, #1
 800af34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800af38:	2300      	movs	r3, #0
}
 800af3a:	4618      	mov	r0, r3
 800af3c:	3708      	adds	r7, #8
 800af3e:	46bd      	mov	sp, r7
 800af40:	bd80      	pop	{r7, pc}
	...

0800af44 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b084      	sub	sp, #16
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
 800af4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800af4e:	683b      	ldr	r3, [r7, #0]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d109      	bne.n	800af68 <HAL_TIM_PWM_Start+0x24>
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800af5a:	b2db      	uxtb	r3, r3
 800af5c:	2b01      	cmp	r3, #1
 800af5e:	bf14      	ite	ne
 800af60:	2301      	movne	r3, #1
 800af62:	2300      	moveq	r3, #0
 800af64:	b2db      	uxtb	r3, r3
 800af66:	e022      	b.n	800afae <HAL_TIM_PWM_Start+0x6a>
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	2b04      	cmp	r3, #4
 800af6c:	d109      	bne.n	800af82 <HAL_TIM_PWM_Start+0x3e>
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800af74:	b2db      	uxtb	r3, r3
 800af76:	2b01      	cmp	r3, #1
 800af78:	bf14      	ite	ne
 800af7a:	2301      	movne	r3, #1
 800af7c:	2300      	moveq	r3, #0
 800af7e:	b2db      	uxtb	r3, r3
 800af80:	e015      	b.n	800afae <HAL_TIM_PWM_Start+0x6a>
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	2b08      	cmp	r3, #8
 800af86:	d109      	bne.n	800af9c <HAL_TIM_PWM_Start+0x58>
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800af8e:	b2db      	uxtb	r3, r3
 800af90:	2b01      	cmp	r3, #1
 800af92:	bf14      	ite	ne
 800af94:	2301      	movne	r3, #1
 800af96:	2300      	moveq	r3, #0
 800af98:	b2db      	uxtb	r3, r3
 800af9a:	e008      	b.n	800afae <HAL_TIM_PWM_Start+0x6a>
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800afa2:	b2db      	uxtb	r3, r3
 800afa4:	2b01      	cmp	r3, #1
 800afa6:	bf14      	ite	ne
 800afa8:	2301      	movne	r3, #1
 800afaa:	2300      	moveq	r3, #0
 800afac:	b2db      	uxtb	r3, r3
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d001      	beq.n	800afb6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800afb2:	2301      	movs	r3, #1
 800afb4:	e05e      	b.n	800b074 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d104      	bne.n	800afc6 <HAL_TIM_PWM_Start+0x82>
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2202      	movs	r2, #2
 800afc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800afc4:	e013      	b.n	800afee <HAL_TIM_PWM_Start+0xaa>
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	2b04      	cmp	r3, #4
 800afca:	d104      	bne.n	800afd6 <HAL_TIM_PWM_Start+0x92>
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2202      	movs	r2, #2
 800afd0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800afd4:	e00b      	b.n	800afee <HAL_TIM_PWM_Start+0xaa>
 800afd6:	683b      	ldr	r3, [r7, #0]
 800afd8:	2b08      	cmp	r3, #8
 800afda:	d104      	bne.n	800afe6 <HAL_TIM_PWM_Start+0xa2>
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2202      	movs	r2, #2
 800afe0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800afe4:	e003      	b.n	800afee <HAL_TIM_PWM_Start+0xaa>
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	2202      	movs	r2, #2
 800afea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	2201      	movs	r2, #1
 800aff4:	6839      	ldr	r1, [r7, #0]
 800aff6:	4618      	mov	r0, r3
 800aff8:	f000 fafe 	bl	800b5f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	4a1e      	ldr	r2, [pc, #120]	@ (800b07c <HAL_TIM_PWM_Start+0x138>)
 800b002:	4293      	cmp	r3, r2
 800b004:	d107      	bne.n	800b016 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b014:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	4a18      	ldr	r2, [pc, #96]	@ (800b07c <HAL_TIM_PWM_Start+0x138>)
 800b01c:	4293      	cmp	r3, r2
 800b01e:	d00e      	beq.n	800b03e <HAL_TIM_PWM_Start+0xfa>
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b028:	d009      	beq.n	800b03e <HAL_TIM_PWM_Start+0xfa>
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	4a14      	ldr	r2, [pc, #80]	@ (800b080 <HAL_TIM_PWM_Start+0x13c>)
 800b030:	4293      	cmp	r3, r2
 800b032:	d004      	beq.n	800b03e <HAL_TIM_PWM_Start+0xfa>
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	4a12      	ldr	r2, [pc, #72]	@ (800b084 <HAL_TIM_PWM_Start+0x140>)
 800b03a:	4293      	cmp	r3, r2
 800b03c:	d111      	bne.n	800b062 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	689b      	ldr	r3, [r3, #8]
 800b044:	f003 0307 	and.w	r3, r3, #7
 800b048:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	2b06      	cmp	r3, #6
 800b04e:	d010      	beq.n	800b072 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	681a      	ldr	r2, [r3, #0]
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	f042 0201 	orr.w	r2, r2, #1
 800b05e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b060:	e007      	b.n	800b072 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	681a      	ldr	r2, [r3, #0]
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	f042 0201 	orr.w	r2, r2, #1
 800b070:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b072:	2300      	movs	r3, #0
}
 800b074:	4618      	mov	r0, r3
 800b076:	3710      	adds	r7, #16
 800b078:	46bd      	mov	sp, r7
 800b07a:	bd80      	pop	{r7, pc}
 800b07c:	40012c00 	.word	0x40012c00
 800b080:	40000400 	.word	0x40000400
 800b084:	40000800 	.word	0x40000800

0800b088 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b086      	sub	sp, #24
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	60f8      	str	r0, [r7, #12]
 800b090:	60b9      	str	r1, [r7, #8]
 800b092:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b094:	2300      	movs	r3, #0
 800b096:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b09e:	2b01      	cmp	r3, #1
 800b0a0:	d101      	bne.n	800b0a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b0a2:	2302      	movs	r3, #2
 800b0a4:	e0ae      	b.n	800b204 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	2201      	movs	r2, #1
 800b0aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	2b0c      	cmp	r3, #12
 800b0b2:	f200 809f 	bhi.w	800b1f4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800b0b6:	a201      	add	r2, pc, #4	@ (adr r2, 800b0bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b0b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0bc:	0800b0f1 	.word	0x0800b0f1
 800b0c0:	0800b1f5 	.word	0x0800b1f5
 800b0c4:	0800b1f5 	.word	0x0800b1f5
 800b0c8:	0800b1f5 	.word	0x0800b1f5
 800b0cc:	0800b131 	.word	0x0800b131
 800b0d0:	0800b1f5 	.word	0x0800b1f5
 800b0d4:	0800b1f5 	.word	0x0800b1f5
 800b0d8:	0800b1f5 	.word	0x0800b1f5
 800b0dc:	0800b173 	.word	0x0800b173
 800b0e0:	0800b1f5 	.word	0x0800b1f5
 800b0e4:	0800b1f5 	.word	0x0800b1f5
 800b0e8:	0800b1f5 	.word	0x0800b1f5
 800b0ec:	0800b1b3 	.word	0x0800b1b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	68b9      	ldr	r1, [r7, #8]
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	f000 f8f6 	bl	800b2e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	699a      	ldr	r2, [r3, #24]
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	f042 0208 	orr.w	r2, r2, #8
 800b10a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	699a      	ldr	r2, [r3, #24]
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	f022 0204 	bic.w	r2, r2, #4
 800b11a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	6999      	ldr	r1, [r3, #24]
 800b122:	68bb      	ldr	r3, [r7, #8]
 800b124:	691a      	ldr	r2, [r3, #16]
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	430a      	orrs	r2, r1
 800b12c:	619a      	str	r2, [r3, #24]
      break;
 800b12e:	e064      	b.n	800b1fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	68b9      	ldr	r1, [r7, #8]
 800b136:	4618      	mov	r0, r3
 800b138:	f000 f93c 	bl	800b3b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	699a      	ldr	r2, [r3, #24]
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b14a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	699a      	ldr	r2, [r3, #24]
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b15a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	6999      	ldr	r1, [r3, #24]
 800b162:	68bb      	ldr	r3, [r7, #8]
 800b164:	691b      	ldr	r3, [r3, #16]
 800b166:	021a      	lsls	r2, r3, #8
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	430a      	orrs	r2, r1
 800b16e:	619a      	str	r2, [r3, #24]
      break;
 800b170:	e043      	b.n	800b1fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	68b9      	ldr	r1, [r7, #8]
 800b178:	4618      	mov	r0, r3
 800b17a:	f000 f985 	bl	800b488 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	69da      	ldr	r2, [r3, #28]
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	f042 0208 	orr.w	r2, r2, #8
 800b18c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	69da      	ldr	r2, [r3, #28]
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	f022 0204 	bic.w	r2, r2, #4
 800b19c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	69d9      	ldr	r1, [r3, #28]
 800b1a4:	68bb      	ldr	r3, [r7, #8]
 800b1a6:	691a      	ldr	r2, [r3, #16]
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	430a      	orrs	r2, r1
 800b1ae:	61da      	str	r2, [r3, #28]
      break;
 800b1b0:	e023      	b.n	800b1fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	68b9      	ldr	r1, [r7, #8]
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	f000 f9cf 	bl	800b55c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	69da      	ldr	r2, [r3, #28]
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b1cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	69da      	ldr	r2, [r3, #28]
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b1dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	69d9      	ldr	r1, [r3, #28]
 800b1e4:	68bb      	ldr	r3, [r7, #8]
 800b1e6:	691b      	ldr	r3, [r3, #16]
 800b1e8:	021a      	lsls	r2, r3, #8
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	430a      	orrs	r2, r1
 800b1f0:	61da      	str	r2, [r3, #28]
      break;
 800b1f2:	e002      	b.n	800b1fa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800b1f4:	2301      	movs	r3, #1
 800b1f6:	75fb      	strb	r3, [r7, #23]
      break;
 800b1f8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b202:	7dfb      	ldrb	r3, [r7, #23]
}
 800b204:	4618      	mov	r0, r3
 800b206:	3718      	adds	r7, #24
 800b208:	46bd      	mov	sp, r7
 800b20a:	bd80      	pop	{r7, pc}

0800b20c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b20c:	b480      	push	{r7}
 800b20e:	b085      	sub	sp, #20
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
 800b214:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	4a2f      	ldr	r2, [pc, #188]	@ (800b2dc <TIM_Base_SetConfig+0xd0>)
 800b220:	4293      	cmp	r3, r2
 800b222:	d00b      	beq.n	800b23c <TIM_Base_SetConfig+0x30>
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b22a:	d007      	beq.n	800b23c <TIM_Base_SetConfig+0x30>
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	4a2c      	ldr	r2, [pc, #176]	@ (800b2e0 <TIM_Base_SetConfig+0xd4>)
 800b230:	4293      	cmp	r3, r2
 800b232:	d003      	beq.n	800b23c <TIM_Base_SetConfig+0x30>
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	4a2b      	ldr	r2, [pc, #172]	@ (800b2e4 <TIM_Base_SetConfig+0xd8>)
 800b238:	4293      	cmp	r3, r2
 800b23a:	d108      	bne.n	800b24e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b242:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b244:	683b      	ldr	r3, [r7, #0]
 800b246:	685b      	ldr	r3, [r3, #4]
 800b248:	68fa      	ldr	r2, [r7, #12]
 800b24a:	4313      	orrs	r3, r2
 800b24c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	4a22      	ldr	r2, [pc, #136]	@ (800b2dc <TIM_Base_SetConfig+0xd0>)
 800b252:	4293      	cmp	r3, r2
 800b254:	d00b      	beq.n	800b26e <TIM_Base_SetConfig+0x62>
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b25c:	d007      	beq.n	800b26e <TIM_Base_SetConfig+0x62>
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	4a1f      	ldr	r2, [pc, #124]	@ (800b2e0 <TIM_Base_SetConfig+0xd4>)
 800b262:	4293      	cmp	r3, r2
 800b264:	d003      	beq.n	800b26e <TIM_Base_SetConfig+0x62>
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	4a1e      	ldr	r2, [pc, #120]	@ (800b2e4 <TIM_Base_SetConfig+0xd8>)
 800b26a:	4293      	cmp	r3, r2
 800b26c:	d108      	bne.n	800b280 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b274:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b276:	683b      	ldr	r3, [r7, #0]
 800b278:	68db      	ldr	r3, [r3, #12]
 800b27a:	68fa      	ldr	r2, [r7, #12]
 800b27c:	4313      	orrs	r3, r2
 800b27e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	695b      	ldr	r3, [r3, #20]
 800b28a:	4313      	orrs	r3, r2
 800b28c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	68fa      	ldr	r2, [r7, #12]
 800b292:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	689a      	ldr	r2, [r3, #8]
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	681a      	ldr	r2, [r3, #0]
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	4a0d      	ldr	r2, [pc, #52]	@ (800b2dc <TIM_Base_SetConfig+0xd0>)
 800b2a8:	4293      	cmp	r3, r2
 800b2aa:	d103      	bne.n	800b2b4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b2ac:	683b      	ldr	r3, [r7, #0]
 800b2ae:	691a      	ldr	r2, [r3, #16]
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2201      	movs	r2, #1
 800b2b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	691b      	ldr	r3, [r3, #16]
 800b2be:	f003 0301 	and.w	r3, r3, #1
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d005      	beq.n	800b2d2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	691b      	ldr	r3, [r3, #16]
 800b2ca:	f023 0201 	bic.w	r2, r3, #1
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	611a      	str	r2, [r3, #16]
  }
}
 800b2d2:	bf00      	nop
 800b2d4:	3714      	adds	r7, #20
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	bc80      	pop	{r7}
 800b2da:	4770      	bx	lr
 800b2dc:	40012c00 	.word	0x40012c00
 800b2e0:	40000400 	.word	0x40000400
 800b2e4:	40000800 	.word	0x40000800

0800b2e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b2e8:	b480      	push	{r7}
 800b2ea:	b087      	sub	sp, #28
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
 800b2f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	6a1b      	ldr	r3, [r3, #32]
 800b2f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	6a1b      	ldr	r3, [r3, #32]
 800b2fc:	f023 0201 	bic.w	r2, r3, #1
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	685b      	ldr	r3, [r3, #4]
 800b308:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	699b      	ldr	r3, [r3, #24]
 800b30e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b316:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	f023 0303 	bic.w	r3, r3, #3
 800b31e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	68fa      	ldr	r2, [r7, #12]
 800b326:	4313      	orrs	r3, r2
 800b328:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b32a:	697b      	ldr	r3, [r7, #20]
 800b32c:	f023 0302 	bic.w	r3, r3, #2
 800b330:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	689b      	ldr	r3, [r3, #8]
 800b336:	697a      	ldr	r2, [r7, #20]
 800b338:	4313      	orrs	r3, r2
 800b33a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	4a1c      	ldr	r2, [pc, #112]	@ (800b3b0 <TIM_OC1_SetConfig+0xc8>)
 800b340:	4293      	cmp	r3, r2
 800b342:	d10c      	bne.n	800b35e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b344:	697b      	ldr	r3, [r7, #20]
 800b346:	f023 0308 	bic.w	r3, r3, #8
 800b34a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	68db      	ldr	r3, [r3, #12]
 800b350:	697a      	ldr	r2, [r7, #20]
 800b352:	4313      	orrs	r3, r2
 800b354:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b356:	697b      	ldr	r3, [r7, #20]
 800b358:	f023 0304 	bic.w	r3, r3, #4
 800b35c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	4a13      	ldr	r2, [pc, #76]	@ (800b3b0 <TIM_OC1_SetConfig+0xc8>)
 800b362:	4293      	cmp	r3, r2
 800b364:	d111      	bne.n	800b38a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b366:	693b      	ldr	r3, [r7, #16]
 800b368:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b36c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b36e:	693b      	ldr	r3, [r7, #16]
 800b370:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b374:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	695b      	ldr	r3, [r3, #20]
 800b37a:	693a      	ldr	r2, [r7, #16]
 800b37c:	4313      	orrs	r3, r2
 800b37e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b380:	683b      	ldr	r3, [r7, #0]
 800b382:	699b      	ldr	r3, [r3, #24]
 800b384:	693a      	ldr	r2, [r7, #16]
 800b386:	4313      	orrs	r3, r2
 800b388:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	693a      	ldr	r2, [r7, #16]
 800b38e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	68fa      	ldr	r2, [r7, #12]
 800b394:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	685a      	ldr	r2, [r3, #4]
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	697a      	ldr	r2, [r7, #20]
 800b3a2:	621a      	str	r2, [r3, #32]
}
 800b3a4:	bf00      	nop
 800b3a6:	371c      	adds	r7, #28
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	bc80      	pop	{r7}
 800b3ac:	4770      	bx	lr
 800b3ae:	bf00      	nop
 800b3b0:	40012c00 	.word	0x40012c00

0800b3b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b3b4:	b480      	push	{r7}
 800b3b6:	b087      	sub	sp, #28
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
 800b3bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	6a1b      	ldr	r3, [r3, #32]
 800b3c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	6a1b      	ldr	r3, [r3, #32]
 800b3c8:	f023 0210 	bic.w	r2, r3, #16
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	685b      	ldr	r3, [r3, #4]
 800b3d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	699b      	ldr	r3, [r3, #24]
 800b3da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b3e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b3ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	021b      	lsls	r3, r3, #8
 800b3f2:	68fa      	ldr	r2, [r7, #12]
 800b3f4:	4313      	orrs	r3, r2
 800b3f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b3f8:	697b      	ldr	r3, [r7, #20]
 800b3fa:	f023 0320 	bic.w	r3, r3, #32
 800b3fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	689b      	ldr	r3, [r3, #8]
 800b404:	011b      	lsls	r3, r3, #4
 800b406:	697a      	ldr	r2, [r7, #20]
 800b408:	4313      	orrs	r3, r2
 800b40a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	4a1d      	ldr	r2, [pc, #116]	@ (800b484 <TIM_OC2_SetConfig+0xd0>)
 800b410:	4293      	cmp	r3, r2
 800b412:	d10d      	bne.n	800b430 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b414:	697b      	ldr	r3, [r7, #20]
 800b416:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b41a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b41c:	683b      	ldr	r3, [r7, #0]
 800b41e:	68db      	ldr	r3, [r3, #12]
 800b420:	011b      	lsls	r3, r3, #4
 800b422:	697a      	ldr	r2, [r7, #20]
 800b424:	4313      	orrs	r3, r2
 800b426:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b428:	697b      	ldr	r3, [r7, #20]
 800b42a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b42e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	4a14      	ldr	r2, [pc, #80]	@ (800b484 <TIM_OC2_SetConfig+0xd0>)
 800b434:	4293      	cmp	r3, r2
 800b436:	d113      	bne.n	800b460 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b438:	693b      	ldr	r3, [r7, #16]
 800b43a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b43e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b440:	693b      	ldr	r3, [r7, #16]
 800b442:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b446:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b448:	683b      	ldr	r3, [r7, #0]
 800b44a:	695b      	ldr	r3, [r3, #20]
 800b44c:	009b      	lsls	r3, r3, #2
 800b44e:	693a      	ldr	r2, [r7, #16]
 800b450:	4313      	orrs	r3, r2
 800b452:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b454:	683b      	ldr	r3, [r7, #0]
 800b456:	699b      	ldr	r3, [r3, #24]
 800b458:	009b      	lsls	r3, r3, #2
 800b45a:	693a      	ldr	r2, [r7, #16]
 800b45c:	4313      	orrs	r3, r2
 800b45e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	693a      	ldr	r2, [r7, #16]
 800b464:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	68fa      	ldr	r2, [r7, #12]
 800b46a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b46c:	683b      	ldr	r3, [r7, #0]
 800b46e:	685a      	ldr	r2, [r3, #4]
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	697a      	ldr	r2, [r7, #20]
 800b478:	621a      	str	r2, [r3, #32]
}
 800b47a:	bf00      	nop
 800b47c:	371c      	adds	r7, #28
 800b47e:	46bd      	mov	sp, r7
 800b480:	bc80      	pop	{r7}
 800b482:	4770      	bx	lr
 800b484:	40012c00 	.word	0x40012c00

0800b488 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b488:	b480      	push	{r7}
 800b48a:	b087      	sub	sp, #28
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
 800b490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	6a1b      	ldr	r3, [r3, #32]
 800b496:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	6a1b      	ldr	r3, [r3, #32]
 800b49c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	685b      	ldr	r3, [r3, #4]
 800b4a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	69db      	ldr	r3, [r3, #28]
 800b4ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b4b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	f023 0303 	bic.w	r3, r3, #3
 800b4be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b4c0:	683b      	ldr	r3, [r7, #0]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	68fa      	ldr	r2, [r7, #12]
 800b4c6:	4313      	orrs	r3, r2
 800b4c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b4ca:	697b      	ldr	r3, [r7, #20]
 800b4cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b4d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b4d2:	683b      	ldr	r3, [r7, #0]
 800b4d4:	689b      	ldr	r3, [r3, #8]
 800b4d6:	021b      	lsls	r3, r3, #8
 800b4d8:	697a      	ldr	r2, [r7, #20]
 800b4da:	4313      	orrs	r3, r2
 800b4dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	4a1d      	ldr	r2, [pc, #116]	@ (800b558 <TIM_OC3_SetConfig+0xd0>)
 800b4e2:	4293      	cmp	r3, r2
 800b4e4:	d10d      	bne.n	800b502 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b4e6:	697b      	ldr	r3, [r7, #20]
 800b4e8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b4ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b4ee:	683b      	ldr	r3, [r7, #0]
 800b4f0:	68db      	ldr	r3, [r3, #12]
 800b4f2:	021b      	lsls	r3, r3, #8
 800b4f4:	697a      	ldr	r2, [r7, #20]
 800b4f6:	4313      	orrs	r3, r2
 800b4f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b4fa:	697b      	ldr	r3, [r7, #20]
 800b4fc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b500:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	4a14      	ldr	r2, [pc, #80]	@ (800b558 <TIM_OC3_SetConfig+0xd0>)
 800b506:	4293      	cmp	r3, r2
 800b508:	d113      	bne.n	800b532 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b50a:	693b      	ldr	r3, [r7, #16]
 800b50c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b510:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b512:	693b      	ldr	r3, [r7, #16]
 800b514:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b518:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	695b      	ldr	r3, [r3, #20]
 800b51e:	011b      	lsls	r3, r3, #4
 800b520:	693a      	ldr	r2, [r7, #16]
 800b522:	4313      	orrs	r3, r2
 800b524:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	699b      	ldr	r3, [r3, #24]
 800b52a:	011b      	lsls	r3, r3, #4
 800b52c:	693a      	ldr	r2, [r7, #16]
 800b52e:	4313      	orrs	r3, r2
 800b530:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	693a      	ldr	r2, [r7, #16]
 800b536:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	68fa      	ldr	r2, [r7, #12]
 800b53c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b53e:	683b      	ldr	r3, [r7, #0]
 800b540:	685a      	ldr	r2, [r3, #4]
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	697a      	ldr	r2, [r7, #20]
 800b54a:	621a      	str	r2, [r3, #32]
}
 800b54c:	bf00      	nop
 800b54e:	371c      	adds	r7, #28
 800b550:	46bd      	mov	sp, r7
 800b552:	bc80      	pop	{r7}
 800b554:	4770      	bx	lr
 800b556:	bf00      	nop
 800b558:	40012c00 	.word	0x40012c00

0800b55c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b55c:	b480      	push	{r7}
 800b55e:	b087      	sub	sp, #28
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
 800b564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	6a1b      	ldr	r3, [r3, #32]
 800b56a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	6a1b      	ldr	r3, [r3, #32]
 800b570:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	685b      	ldr	r3, [r3, #4]
 800b57c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	69db      	ldr	r3, [r3, #28]
 800b582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b58a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b592:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	021b      	lsls	r3, r3, #8
 800b59a:	68fa      	ldr	r2, [r7, #12]
 800b59c:	4313      	orrs	r3, r2
 800b59e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b5a0:	693b      	ldr	r3, [r7, #16]
 800b5a2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b5a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	689b      	ldr	r3, [r3, #8]
 800b5ac:	031b      	lsls	r3, r3, #12
 800b5ae:	693a      	ldr	r2, [r7, #16]
 800b5b0:	4313      	orrs	r3, r2
 800b5b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	4a0f      	ldr	r2, [pc, #60]	@ (800b5f4 <TIM_OC4_SetConfig+0x98>)
 800b5b8:	4293      	cmp	r3, r2
 800b5ba:	d109      	bne.n	800b5d0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b5bc:	697b      	ldr	r3, [r7, #20]
 800b5be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b5c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	695b      	ldr	r3, [r3, #20]
 800b5c8:	019b      	lsls	r3, r3, #6
 800b5ca:	697a      	ldr	r2, [r7, #20]
 800b5cc:	4313      	orrs	r3, r2
 800b5ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	697a      	ldr	r2, [r7, #20]
 800b5d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	68fa      	ldr	r2, [r7, #12]
 800b5da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b5dc:	683b      	ldr	r3, [r7, #0]
 800b5de:	685a      	ldr	r2, [r3, #4]
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	693a      	ldr	r2, [r7, #16]
 800b5e8:	621a      	str	r2, [r3, #32]
}
 800b5ea:	bf00      	nop
 800b5ec:	371c      	adds	r7, #28
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	bc80      	pop	{r7}
 800b5f2:	4770      	bx	lr
 800b5f4:	40012c00 	.word	0x40012c00

0800b5f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b5f8:	b480      	push	{r7}
 800b5fa:	b087      	sub	sp, #28
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	60f8      	str	r0, [r7, #12]
 800b600:	60b9      	str	r1, [r7, #8]
 800b602:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b604:	68bb      	ldr	r3, [r7, #8]
 800b606:	f003 031f 	and.w	r3, r3, #31
 800b60a:	2201      	movs	r2, #1
 800b60c:	fa02 f303 	lsl.w	r3, r2, r3
 800b610:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	6a1a      	ldr	r2, [r3, #32]
 800b616:	697b      	ldr	r3, [r7, #20]
 800b618:	43db      	mvns	r3, r3
 800b61a:	401a      	ands	r2, r3
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	6a1a      	ldr	r2, [r3, #32]
 800b624:	68bb      	ldr	r3, [r7, #8]
 800b626:	f003 031f 	and.w	r3, r3, #31
 800b62a:	6879      	ldr	r1, [r7, #4]
 800b62c:	fa01 f303 	lsl.w	r3, r1, r3
 800b630:	431a      	orrs	r2, r3
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	621a      	str	r2, [r3, #32]
}
 800b636:	bf00      	nop
 800b638:	371c      	adds	r7, #28
 800b63a:	46bd      	mov	sp, r7
 800b63c:	bc80      	pop	{r7}
 800b63e:	4770      	bx	lr

0800b640 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b640:	b480      	push	{r7}
 800b642:	b085      	sub	sp, #20
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
 800b648:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b650:	2b01      	cmp	r3, #1
 800b652:	d101      	bne.n	800b658 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b654:	2302      	movs	r3, #2
 800b656:	e046      	b.n	800b6e6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2201      	movs	r2, #1
 800b65c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2202      	movs	r2, #2
 800b664:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	685b      	ldr	r3, [r3, #4]
 800b66e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	689b      	ldr	r3, [r3, #8]
 800b676:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b67e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	68fa      	ldr	r2, [r7, #12]
 800b686:	4313      	orrs	r3, r2
 800b688:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	68fa      	ldr	r2, [r7, #12]
 800b690:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	4a16      	ldr	r2, [pc, #88]	@ (800b6f0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800b698:	4293      	cmp	r3, r2
 800b69a:	d00e      	beq.n	800b6ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b6a4:	d009      	beq.n	800b6ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	4a12      	ldr	r2, [pc, #72]	@ (800b6f4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800b6ac:	4293      	cmp	r3, r2
 800b6ae:	d004      	beq.n	800b6ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	4a10      	ldr	r2, [pc, #64]	@ (800b6f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800b6b6:	4293      	cmp	r3, r2
 800b6b8:	d10c      	bne.n	800b6d4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b6ba:	68bb      	ldr	r3, [r7, #8]
 800b6bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b6c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b6c2:	683b      	ldr	r3, [r7, #0]
 800b6c4:	685b      	ldr	r3, [r3, #4]
 800b6c6:	68ba      	ldr	r2, [r7, #8]
 800b6c8:	4313      	orrs	r3, r2
 800b6ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	68ba      	ldr	r2, [r7, #8]
 800b6d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2201      	movs	r2, #1
 800b6d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2200      	movs	r2, #0
 800b6e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b6e4:	2300      	movs	r3, #0
}
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	3714      	adds	r7, #20
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bc80      	pop	{r7}
 800b6ee:	4770      	bx	lr
 800b6f0:	40012c00 	.word	0x40012c00
 800b6f4:	40000400 	.word	0x40000400
 800b6f8:	40000800 	.word	0x40000800

0800b6fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b6fc:	b480      	push	{r7}
 800b6fe:	b085      	sub	sp, #20
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
 800b704:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b706:	2300      	movs	r3, #0
 800b708:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b710:	2b01      	cmp	r3, #1
 800b712:	d101      	bne.n	800b718 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b714:	2302      	movs	r3, #2
 800b716:	e03d      	b.n	800b794 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	2201      	movs	r2, #1
 800b71c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800b726:	683b      	ldr	r3, [r7, #0]
 800b728:	68db      	ldr	r3, [r3, #12]
 800b72a:	4313      	orrs	r3, r2
 800b72c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b734:	683b      	ldr	r3, [r7, #0]
 800b736:	689b      	ldr	r3, [r3, #8]
 800b738:	4313      	orrs	r3, r2
 800b73a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800b742:	683b      	ldr	r3, [r7, #0]
 800b744:	685b      	ldr	r3, [r3, #4]
 800b746:	4313      	orrs	r3, r2
 800b748:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800b750:	683b      	ldr	r3, [r7, #0]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	4313      	orrs	r3, r2
 800b756:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b75e:	683b      	ldr	r3, [r7, #0]
 800b760:	691b      	ldr	r3, [r3, #16]
 800b762:	4313      	orrs	r3, r2
 800b764:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800b76c:	683b      	ldr	r3, [r7, #0]
 800b76e:	695b      	ldr	r3, [r3, #20]
 800b770:	4313      	orrs	r3, r2
 800b772:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800b77a:	683b      	ldr	r3, [r7, #0]
 800b77c:	69db      	ldr	r3, [r3, #28]
 800b77e:	4313      	orrs	r3, r2
 800b780:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	68fa      	ldr	r2, [r7, #12]
 800b788:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	2200      	movs	r2, #0
 800b78e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b792:	2300      	movs	r3, #0
}
 800b794:	4618      	mov	r0, r3
 800b796:	3714      	adds	r7, #20
 800b798:	46bd      	mov	sp, r7
 800b79a:	bc80      	pop	{r7}
 800b79c:	4770      	bx	lr

0800b79e <atoi>:
 800b79e:	220a      	movs	r2, #10
 800b7a0:	2100      	movs	r1, #0
 800b7a2:	f000 b87b 	b.w	800b89c <strtol>
	...

0800b7a8 <_strtol_l.constprop.0>:
 800b7a8:	2b24      	cmp	r3, #36	@ 0x24
 800b7aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7ae:	4686      	mov	lr, r0
 800b7b0:	4690      	mov	r8, r2
 800b7b2:	d801      	bhi.n	800b7b8 <_strtol_l.constprop.0+0x10>
 800b7b4:	2b01      	cmp	r3, #1
 800b7b6:	d106      	bne.n	800b7c6 <_strtol_l.constprop.0+0x1e>
 800b7b8:	f000 f8b6 	bl	800b928 <__errno>
 800b7bc:	2316      	movs	r3, #22
 800b7be:	6003      	str	r3, [r0, #0]
 800b7c0:	2000      	movs	r0, #0
 800b7c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7c6:	460d      	mov	r5, r1
 800b7c8:	4833      	ldr	r0, [pc, #204]	@ (800b898 <_strtol_l.constprop.0+0xf0>)
 800b7ca:	462a      	mov	r2, r5
 800b7cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b7d0:	5d06      	ldrb	r6, [r0, r4]
 800b7d2:	f016 0608 	ands.w	r6, r6, #8
 800b7d6:	d1f8      	bne.n	800b7ca <_strtol_l.constprop.0+0x22>
 800b7d8:	2c2d      	cmp	r4, #45	@ 0x2d
 800b7da:	d12d      	bne.n	800b838 <_strtol_l.constprop.0+0x90>
 800b7dc:	2601      	movs	r6, #1
 800b7de:	782c      	ldrb	r4, [r5, #0]
 800b7e0:	1c95      	adds	r5, r2, #2
 800b7e2:	f033 0210 	bics.w	r2, r3, #16
 800b7e6:	d109      	bne.n	800b7fc <_strtol_l.constprop.0+0x54>
 800b7e8:	2c30      	cmp	r4, #48	@ 0x30
 800b7ea:	d12a      	bne.n	800b842 <_strtol_l.constprop.0+0x9a>
 800b7ec:	782a      	ldrb	r2, [r5, #0]
 800b7ee:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b7f2:	2a58      	cmp	r2, #88	@ 0x58
 800b7f4:	d125      	bne.n	800b842 <_strtol_l.constprop.0+0x9a>
 800b7f6:	2310      	movs	r3, #16
 800b7f8:	786c      	ldrb	r4, [r5, #1]
 800b7fa:	3502      	adds	r5, #2
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b802:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b806:	fbbc f9f3 	udiv	r9, ip, r3
 800b80a:	4610      	mov	r0, r2
 800b80c:	fb03 ca19 	mls	sl, r3, r9, ip
 800b810:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b814:	2f09      	cmp	r7, #9
 800b816:	d81b      	bhi.n	800b850 <_strtol_l.constprop.0+0xa8>
 800b818:	463c      	mov	r4, r7
 800b81a:	42a3      	cmp	r3, r4
 800b81c:	dd27      	ble.n	800b86e <_strtol_l.constprop.0+0xc6>
 800b81e:	1c57      	adds	r7, r2, #1
 800b820:	d007      	beq.n	800b832 <_strtol_l.constprop.0+0x8a>
 800b822:	4581      	cmp	r9, r0
 800b824:	d320      	bcc.n	800b868 <_strtol_l.constprop.0+0xc0>
 800b826:	d101      	bne.n	800b82c <_strtol_l.constprop.0+0x84>
 800b828:	45a2      	cmp	sl, r4
 800b82a:	db1d      	blt.n	800b868 <_strtol_l.constprop.0+0xc0>
 800b82c:	2201      	movs	r2, #1
 800b82e:	fb00 4003 	mla	r0, r0, r3, r4
 800b832:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b836:	e7eb      	b.n	800b810 <_strtol_l.constprop.0+0x68>
 800b838:	2c2b      	cmp	r4, #43	@ 0x2b
 800b83a:	bf04      	itt	eq
 800b83c:	782c      	ldrbeq	r4, [r5, #0]
 800b83e:	1c95      	addeq	r5, r2, #2
 800b840:	e7cf      	b.n	800b7e2 <_strtol_l.constprop.0+0x3a>
 800b842:	2b00      	cmp	r3, #0
 800b844:	d1da      	bne.n	800b7fc <_strtol_l.constprop.0+0x54>
 800b846:	2c30      	cmp	r4, #48	@ 0x30
 800b848:	bf0c      	ite	eq
 800b84a:	2308      	moveq	r3, #8
 800b84c:	230a      	movne	r3, #10
 800b84e:	e7d5      	b.n	800b7fc <_strtol_l.constprop.0+0x54>
 800b850:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b854:	2f19      	cmp	r7, #25
 800b856:	d801      	bhi.n	800b85c <_strtol_l.constprop.0+0xb4>
 800b858:	3c37      	subs	r4, #55	@ 0x37
 800b85a:	e7de      	b.n	800b81a <_strtol_l.constprop.0+0x72>
 800b85c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b860:	2f19      	cmp	r7, #25
 800b862:	d804      	bhi.n	800b86e <_strtol_l.constprop.0+0xc6>
 800b864:	3c57      	subs	r4, #87	@ 0x57
 800b866:	e7d8      	b.n	800b81a <_strtol_l.constprop.0+0x72>
 800b868:	f04f 32ff 	mov.w	r2, #4294967295
 800b86c:	e7e1      	b.n	800b832 <_strtol_l.constprop.0+0x8a>
 800b86e:	1c53      	adds	r3, r2, #1
 800b870:	d108      	bne.n	800b884 <_strtol_l.constprop.0+0xdc>
 800b872:	2322      	movs	r3, #34	@ 0x22
 800b874:	4660      	mov	r0, ip
 800b876:	f8ce 3000 	str.w	r3, [lr]
 800b87a:	f1b8 0f00 	cmp.w	r8, #0
 800b87e:	d0a0      	beq.n	800b7c2 <_strtol_l.constprop.0+0x1a>
 800b880:	1e69      	subs	r1, r5, #1
 800b882:	e006      	b.n	800b892 <_strtol_l.constprop.0+0xea>
 800b884:	b106      	cbz	r6, 800b888 <_strtol_l.constprop.0+0xe0>
 800b886:	4240      	negs	r0, r0
 800b888:	f1b8 0f00 	cmp.w	r8, #0
 800b88c:	d099      	beq.n	800b7c2 <_strtol_l.constprop.0+0x1a>
 800b88e:	2a00      	cmp	r2, #0
 800b890:	d1f6      	bne.n	800b880 <_strtol_l.constprop.0+0xd8>
 800b892:	f8c8 1000 	str.w	r1, [r8]
 800b896:	e794      	b.n	800b7c2 <_strtol_l.constprop.0+0x1a>
 800b898:	0800c4f3 	.word	0x0800c4f3

0800b89c <strtol>:
 800b89c:	4613      	mov	r3, r2
 800b89e:	460a      	mov	r2, r1
 800b8a0:	4601      	mov	r1, r0
 800b8a2:	4802      	ldr	r0, [pc, #8]	@ (800b8ac <strtol+0x10>)
 800b8a4:	6800      	ldr	r0, [r0, #0]
 800b8a6:	f7ff bf7f 	b.w	800b7a8 <_strtol_l.constprop.0>
 800b8aa:	bf00      	nop
 800b8ac:	20000048 	.word	0x20000048

0800b8b0 <sniprintf>:
 800b8b0:	b40c      	push	{r2, r3}
 800b8b2:	b530      	push	{r4, r5, lr}
 800b8b4:	4b17      	ldr	r3, [pc, #92]	@ (800b914 <sniprintf+0x64>)
 800b8b6:	1e0c      	subs	r4, r1, #0
 800b8b8:	681d      	ldr	r5, [r3, #0]
 800b8ba:	b09d      	sub	sp, #116	@ 0x74
 800b8bc:	da08      	bge.n	800b8d0 <sniprintf+0x20>
 800b8be:	238b      	movs	r3, #139	@ 0x8b
 800b8c0:	f04f 30ff 	mov.w	r0, #4294967295
 800b8c4:	602b      	str	r3, [r5, #0]
 800b8c6:	b01d      	add	sp, #116	@ 0x74
 800b8c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b8cc:	b002      	add	sp, #8
 800b8ce:	4770      	bx	lr
 800b8d0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b8d4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b8d8:	bf0c      	ite	eq
 800b8da:	4623      	moveq	r3, r4
 800b8dc:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b8e0:	9304      	str	r3, [sp, #16]
 800b8e2:	9307      	str	r3, [sp, #28]
 800b8e4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b8e8:	9002      	str	r0, [sp, #8]
 800b8ea:	9006      	str	r0, [sp, #24]
 800b8ec:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b8f0:	4628      	mov	r0, r5
 800b8f2:	ab21      	add	r3, sp, #132	@ 0x84
 800b8f4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b8f6:	a902      	add	r1, sp, #8
 800b8f8:	9301      	str	r3, [sp, #4]
 800b8fa:	f000 f993 	bl	800bc24 <_svfiprintf_r>
 800b8fe:	1c43      	adds	r3, r0, #1
 800b900:	bfbc      	itt	lt
 800b902:	238b      	movlt	r3, #139	@ 0x8b
 800b904:	602b      	strlt	r3, [r5, #0]
 800b906:	2c00      	cmp	r4, #0
 800b908:	d0dd      	beq.n	800b8c6 <sniprintf+0x16>
 800b90a:	2200      	movs	r2, #0
 800b90c:	9b02      	ldr	r3, [sp, #8]
 800b90e:	701a      	strb	r2, [r3, #0]
 800b910:	e7d9      	b.n	800b8c6 <sniprintf+0x16>
 800b912:	bf00      	nop
 800b914:	20000048 	.word	0x20000048

0800b918 <memset>:
 800b918:	4603      	mov	r3, r0
 800b91a:	4402      	add	r2, r0
 800b91c:	4293      	cmp	r3, r2
 800b91e:	d100      	bne.n	800b922 <memset+0xa>
 800b920:	4770      	bx	lr
 800b922:	f803 1b01 	strb.w	r1, [r3], #1
 800b926:	e7f9      	b.n	800b91c <memset+0x4>

0800b928 <__errno>:
 800b928:	4b01      	ldr	r3, [pc, #4]	@ (800b930 <__errno+0x8>)
 800b92a:	6818      	ldr	r0, [r3, #0]
 800b92c:	4770      	bx	lr
 800b92e:	bf00      	nop
 800b930:	20000048 	.word	0x20000048

0800b934 <__libc_init_array>:
 800b934:	b570      	push	{r4, r5, r6, lr}
 800b936:	2600      	movs	r6, #0
 800b938:	4d0c      	ldr	r5, [pc, #48]	@ (800b96c <__libc_init_array+0x38>)
 800b93a:	4c0d      	ldr	r4, [pc, #52]	@ (800b970 <__libc_init_array+0x3c>)
 800b93c:	1b64      	subs	r4, r4, r5
 800b93e:	10a4      	asrs	r4, r4, #2
 800b940:	42a6      	cmp	r6, r4
 800b942:	d109      	bne.n	800b958 <__libc_init_array+0x24>
 800b944:	f000 fc78 	bl	800c238 <_init>
 800b948:	2600      	movs	r6, #0
 800b94a:	4d0a      	ldr	r5, [pc, #40]	@ (800b974 <__libc_init_array+0x40>)
 800b94c:	4c0a      	ldr	r4, [pc, #40]	@ (800b978 <__libc_init_array+0x44>)
 800b94e:	1b64      	subs	r4, r4, r5
 800b950:	10a4      	asrs	r4, r4, #2
 800b952:	42a6      	cmp	r6, r4
 800b954:	d105      	bne.n	800b962 <__libc_init_array+0x2e>
 800b956:	bd70      	pop	{r4, r5, r6, pc}
 800b958:	f855 3b04 	ldr.w	r3, [r5], #4
 800b95c:	4798      	blx	r3
 800b95e:	3601      	adds	r6, #1
 800b960:	e7ee      	b.n	800b940 <__libc_init_array+0xc>
 800b962:	f855 3b04 	ldr.w	r3, [r5], #4
 800b966:	4798      	blx	r3
 800b968:	3601      	adds	r6, #1
 800b96a:	e7f2      	b.n	800b952 <__libc_init_array+0x1e>
 800b96c:	0800c630 	.word	0x0800c630
 800b970:	0800c630 	.word	0x0800c630
 800b974:	0800c630 	.word	0x0800c630
 800b978:	0800c634 	.word	0x0800c634

0800b97c <__retarget_lock_acquire_recursive>:
 800b97c:	4770      	bx	lr

0800b97e <__retarget_lock_release_recursive>:
 800b97e:	4770      	bx	lr

0800b980 <_free_r>:
 800b980:	b538      	push	{r3, r4, r5, lr}
 800b982:	4605      	mov	r5, r0
 800b984:	2900      	cmp	r1, #0
 800b986:	d040      	beq.n	800ba0a <_free_r+0x8a>
 800b988:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b98c:	1f0c      	subs	r4, r1, #4
 800b98e:	2b00      	cmp	r3, #0
 800b990:	bfb8      	it	lt
 800b992:	18e4      	addlt	r4, r4, r3
 800b994:	f000 f8de 	bl	800bb54 <__malloc_lock>
 800b998:	4a1c      	ldr	r2, [pc, #112]	@ (800ba0c <_free_r+0x8c>)
 800b99a:	6813      	ldr	r3, [r2, #0]
 800b99c:	b933      	cbnz	r3, 800b9ac <_free_r+0x2c>
 800b99e:	6063      	str	r3, [r4, #4]
 800b9a0:	6014      	str	r4, [r2, #0]
 800b9a2:	4628      	mov	r0, r5
 800b9a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b9a8:	f000 b8da 	b.w	800bb60 <__malloc_unlock>
 800b9ac:	42a3      	cmp	r3, r4
 800b9ae:	d908      	bls.n	800b9c2 <_free_r+0x42>
 800b9b0:	6820      	ldr	r0, [r4, #0]
 800b9b2:	1821      	adds	r1, r4, r0
 800b9b4:	428b      	cmp	r3, r1
 800b9b6:	bf01      	itttt	eq
 800b9b8:	6819      	ldreq	r1, [r3, #0]
 800b9ba:	685b      	ldreq	r3, [r3, #4]
 800b9bc:	1809      	addeq	r1, r1, r0
 800b9be:	6021      	streq	r1, [r4, #0]
 800b9c0:	e7ed      	b.n	800b99e <_free_r+0x1e>
 800b9c2:	461a      	mov	r2, r3
 800b9c4:	685b      	ldr	r3, [r3, #4]
 800b9c6:	b10b      	cbz	r3, 800b9cc <_free_r+0x4c>
 800b9c8:	42a3      	cmp	r3, r4
 800b9ca:	d9fa      	bls.n	800b9c2 <_free_r+0x42>
 800b9cc:	6811      	ldr	r1, [r2, #0]
 800b9ce:	1850      	adds	r0, r2, r1
 800b9d0:	42a0      	cmp	r0, r4
 800b9d2:	d10b      	bne.n	800b9ec <_free_r+0x6c>
 800b9d4:	6820      	ldr	r0, [r4, #0]
 800b9d6:	4401      	add	r1, r0
 800b9d8:	1850      	adds	r0, r2, r1
 800b9da:	4283      	cmp	r3, r0
 800b9dc:	6011      	str	r1, [r2, #0]
 800b9de:	d1e0      	bne.n	800b9a2 <_free_r+0x22>
 800b9e0:	6818      	ldr	r0, [r3, #0]
 800b9e2:	685b      	ldr	r3, [r3, #4]
 800b9e4:	4408      	add	r0, r1
 800b9e6:	6010      	str	r0, [r2, #0]
 800b9e8:	6053      	str	r3, [r2, #4]
 800b9ea:	e7da      	b.n	800b9a2 <_free_r+0x22>
 800b9ec:	d902      	bls.n	800b9f4 <_free_r+0x74>
 800b9ee:	230c      	movs	r3, #12
 800b9f0:	602b      	str	r3, [r5, #0]
 800b9f2:	e7d6      	b.n	800b9a2 <_free_r+0x22>
 800b9f4:	6820      	ldr	r0, [r4, #0]
 800b9f6:	1821      	adds	r1, r4, r0
 800b9f8:	428b      	cmp	r3, r1
 800b9fa:	bf01      	itttt	eq
 800b9fc:	6819      	ldreq	r1, [r3, #0]
 800b9fe:	685b      	ldreq	r3, [r3, #4]
 800ba00:	1809      	addeq	r1, r1, r0
 800ba02:	6021      	streq	r1, [r4, #0]
 800ba04:	6063      	str	r3, [r4, #4]
 800ba06:	6054      	str	r4, [r2, #4]
 800ba08:	e7cb      	b.n	800b9a2 <_free_r+0x22>
 800ba0a:	bd38      	pop	{r3, r4, r5, pc}
 800ba0c:	200002e4 	.word	0x200002e4

0800ba10 <sbrk_aligned>:
 800ba10:	b570      	push	{r4, r5, r6, lr}
 800ba12:	4e0f      	ldr	r6, [pc, #60]	@ (800ba50 <sbrk_aligned+0x40>)
 800ba14:	460c      	mov	r4, r1
 800ba16:	6831      	ldr	r1, [r6, #0]
 800ba18:	4605      	mov	r5, r0
 800ba1a:	b911      	cbnz	r1, 800ba22 <sbrk_aligned+0x12>
 800ba1c:	f000 fbaa 	bl	800c174 <_sbrk_r>
 800ba20:	6030      	str	r0, [r6, #0]
 800ba22:	4621      	mov	r1, r4
 800ba24:	4628      	mov	r0, r5
 800ba26:	f000 fba5 	bl	800c174 <_sbrk_r>
 800ba2a:	1c43      	adds	r3, r0, #1
 800ba2c:	d103      	bne.n	800ba36 <sbrk_aligned+0x26>
 800ba2e:	f04f 34ff 	mov.w	r4, #4294967295
 800ba32:	4620      	mov	r0, r4
 800ba34:	bd70      	pop	{r4, r5, r6, pc}
 800ba36:	1cc4      	adds	r4, r0, #3
 800ba38:	f024 0403 	bic.w	r4, r4, #3
 800ba3c:	42a0      	cmp	r0, r4
 800ba3e:	d0f8      	beq.n	800ba32 <sbrk_aligned+0x22>
 800ba40:	1a21      	subs	r1, r4, r0
 800ba42:	4628      	mov	r0, r5
 800ba44:	f000 fb96 	bl	800c174 <_sbrk_r>
 800ba48:	3001      	adds	r0, #1
 800ba4a:	d1f2      	bne.n	800ba32 <sbrk_aligned+0x22>
 800ba4c:	e7ef      	b.n	800ba2e <sbrk_aligned+0x1e>
 800ba4e:	bf00      	nop
 800ba50:	200002e0 	.word	0x200002e0

0800ba54 <_malloc_r>:
 800ba54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba58:	1ccd      	adds	r5, r1, #3
 800ba5a:	f025 0503 	bic.w	r5, r5, #3
 800ba5e:	3508      	adds	r5, #8
 800ba60:	2d0c      	cmp	r5, #12
 800ba62:	bf38      	it	cc
 800ba64:	250c      	movcc	r5, #12
 800ba66:	2d00      	cmp	r5, #0
 800ba68:	4606      	mov	r6, r0
 800ba6a:	db01      	blt.n	800ba70 <_malloc_r+0x1c>
 800ba6c:	42a9      	cmp	r1, r5
 800ba6e:	d904      	bls.n	800ba7a <_malloc_r+0x26>
 800ba70:	230c      	movs	r3, #12
 800ba72:	6033      	str	r3, [r6, #0]
 800ba74:	2000      	movs	r0, #0
 800ba76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba7a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bb50 <_malloc_r+0xfc>
 800ba7e:	f000 f869 	bl	800bb54 <__malloc_lock>
 800ba82:	f8d8 3000 	ldr.w	r3, [r8]
 800ba86:	461c      	mov	r4, r3
 800ba88:	bb44      	cbnz	r4, 800badc <_malloc_r+0x88>
 800ba8a:	4629      	mov	r1, r5
 800ba8c:	4630      	mov	r0, r6
 800ba8e:	f7ff ffbf 	bl	800ba10 <sbrk_aligned>
 800ba92:	1c43      	adds	r3, r0, #1
 800ba94:	4604      	mov	r4, r0
 800ba96:	d158      	bne.n	800bb4a <_malloc_r+0xf6>
 800ba98:	f8d8 4000 	ldr.w	r4, [r8]
 800ba9c:	4627      	mov	r7, r4
 800ba9e:	2f00      	cmp	r7, #0
 800baa0:	d143      	bne.n	800bb2a <_malloc_r+0xd6>
 800baa2:	2c00      	cmp	r4, #0
 800baa4:	d04b      	beq.n	800bb3e <_malloc_r+0xea>
 800baa6:	6823      	ldr	r3, [r4, #0]
 800baa8:	4639      	mov	r1, r7
 800baaa:	4630      	mov	r0, r6
 800baac:	eb04 0903 	add.w	r9, r4, r3
 800bab0:	f000 fb60 	bl	800c174 <_sbrk_r>
 800bab4:	4581      	cmp	r9, r0
 800bab6:	d142      	bne.n	800bb3e <_malloc_r+0xea>
 800bab8:	6821      	ldr	r1, [r4, #0]
 800baba:	4630      	mov	r0, r6
 800babc:	1a6d      	subs	r5, r5, r1
 800babe:	4629      	mov	r1, r5
 800bac0:	f7ff ffa6 	bl	800ba10 <sbrk_aligned>
 800bac4:	3001      	adds	r0, #1
 800bac6:	d03a      	beq.n	800bb3e <_malloc_r+0xea>
 800bac8:	6823      	ldr	r3, [r4, #0]
 800baca:	442b      	add	r3, r5
 800bacc:	6023      	str	r3, [r4, #0]
 800bace:	f8d8 3000 	ldr.w	r3, [r8]
 800bad2:	685a      	ldr	r2, [r3, #4]
 800bad4:	bb62      	cbnz	r2, 800bb30 <_malloc_r+0xdc>
 800bad6:	f8c8 7000 	str.w	r7, [r8]
 800bada:	e00f      	b.n	800bafc <_malloc_r+0xa8>
 800badc:	6822      	ldr	r2, [r4, #0]
 800bade:	1b52      	subs	r2, r2, r5
 800bae0:	d420      	bmi.n	800bb24 <_malloc_r+0xd0>
 800bae2:	2a0b      	cmp	r2, #11
 800bae4:	d917      	bls.n	800bb16 <_malloc_r+0xc2>
 800bae6:	1961      	adds	r1, r4, r5
 800bae8:	42a3      	cmp	r3, r4
 800baea:	6025      	str	r5, [r4, #0]
 800baec:	bf18      	it	ne
 800baee:	6059      	strne	r1, [r3, #4]
 800baf0:	6863      	ldr	r3, [r4, #4]
 800baf2:	bf08      	it	eq
 800baf4:	f8c8 1000 	streq.w	r1, [r8]
 800baf8:	5162      	str	r2, [r4, r5]
 800bafa:	604b      	str	r3, [r1, #4]
 800bafc:	4630      	mov	r0, r6
 800bafe:	f000 f82f 	bl	800bb60 <__malloc_unlock>
 800bb02:	f104 000b 	add.w	r0, r4, #11
 800bb06:	1d23      	adds	r3, r4, #4
 800bb08:	f020 0007 	bic.w	r0, r0, #7
 800bb0c:	1ac2      	subs	r2, r0, r3
 800bb0e:	bf1c      	itt	ne
 800bb10:	1a1b      	subne	r3, r3, r0
 800bb12:	50a3      	strne	r3, [r4, r2]
 800bb14:	e7af      	b.n	800ba76 <_malloc_r+0x22>
 800bb16:	6862      	ldr	r2, [r4, #4]
 800bb18:	42a3      	cmp	r3, r4
 800bb1a:	bf0c      	ite	eq
 800bb1c:	f8c8 2000 	streq.w	r2, [r8]
 800bb20:	605a      	strne	r2, [r3, #4]
 800bb22:	e7eb      	b.n	800bafc <_malloc_r+0xa8>
 800bb24:	4623      	mov	r3, r4
 800bb26:	6864      	ldr	r4, [r4, #4]
 800bb28:	e7ae      	b.n	800ba88 <_malloc_r+0x34>
 800bb2a:	463c      	mov	r4, r7
 800bb2c:	687f      	ldr	r7, [r7, #4]
 800bb2e:	e7b6      	b.n	800ba9e <_malloc_r+0x4a>
 800bb30:	461a      	mov	r2, r3
 800bb32:	685b      	ldr	r3, [r3, #4]
 800bb34:	42a3      	cmp	r3, r4
 800bb36:	d1fb      	bne.n	800bb30 <_malloc_r+0xdc>
 800bb38:	2300      	movs	r3, #0
 800bb3a:	6053      	str	r3, [r2, #4]
 800bb3c:	e7de      	b.n	800bafc <_malloc_r+0xa8>
 800bb3e:	230c      	movs	r3, #12
 800bb40:	4630      	mov	r0, r6
 800bb42:	6033      	str	r3, [r6, #0]
 800bb44:	f000 f80c 	bl	800bb60 <__malloc_unlock>
 800bb48:	e794      	b.n	800ba74 <_malloc_r+0x20>
 800bb4a:	6005      	str	r5, [r0, #0]
 800bb4c:	e7d6      	b.n	800bafc <_malloc_r+0xa8>
 800bb4e:	bf00      	nop
 800bb50:	200002e4 	.word	0x200002e4

0800bb54 <__malloc_lock>:
 800bb54:	4801      	ldr	r0, [pc, #4]	@ (800bb5c <__malloc_lock+0x8>)
 800bb56:	f7ff bf11 	b.w	800b97c <__retarget_lock_acquire_recursive>
 800bb5a:	bf00      	nop
 800bb5c:	200002dc 	.word	0x200002dc

0800bb60 <__malloc_unlock>:
 800bb60:	4801      	ldr	r0, [pc, #4]	@ (800bb68 <__malloc_unlock+0x8>)
 800bb62:	f7ff bf0c 	b.w	800b97e <__retarget_lock_release_recursive>
 800bb66:	bf00      	nop
 800bb68:	200002dc 	.word	0x200002dc

0800bb6c <__ssputs_r>:
 800bb6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb70:	461f      	mov	r7, r3
 800bb72:	688e      	ldr	r6, [r1, #8]
 800bb74:	4682      	mov	sl, r0
 800bb76:	42be      	cmp	r6, r7
 800bb78:	460c      	mov	r4, r1
 800bb7a:	4690      	mov	r8, r2
 800bb7c:	680b      	ldr	r3, [r1, #0]
 800bb7e:	d82d      	bhi.n	800bbdc <__ssputs_r+0x70>
 800bb80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bb84:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bb88:	d026      	beq.n	800bbd8 <__ssputs_r+0x6c>
 800bb8a:	6965      	ldr	r5, [r4, #20]
 800bb8c:	6909      	ldr	r1, [r1, #16]
 800bb8e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bb92:	eba3 0901 	sub.w	r9, r3, r1
 800bb96:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bb9a:	1c7b      	adds	r3, r7, #1
 800bb9c:	444b      	add	r3, r9
 800bb9e:	106d      	asrs	r5, r5, #1
 800bba0:	429d      	cmp	r5, r3
 800bba2:	bf38      	it	cc
 800bba4:	461d      	movcc	r5, r3
 800bba6:	0553      	lsls	r3, r2, #21
 800bba8:	d527      	bpl.n	800bbfa <__ssputs_r+0x8e>
 800bbaa:	4629      	mov	r1, r5
 800bbac:	f7ff ff52 	bl	800ba54 <_malloc_r>
 800bbb0:	4606      	mov	r6, r0
 800bbb2:	b360      	cbz	r0, 800bc0e <__ssputs_r+0xa2>
 800bbb4:	464a      	mov	r2, r9
 800bbb6:	6921      	ldr	r1, [r4, #16]
 800bbb8:	f000 fafa 	bl	800c1b0 <memcpy>
 800bbbc:	89a3      	ldrh	r3, [r4, #12]
 800bbbe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bbc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bbc6:	81a3      	strh	r3, [r4, #12]
 800bbc8:	6126      	str	r6, [r4, #16]
 800bbca:	444e      	add	r6, r9
 800bbcc:	6026      	str	r6, [r4, #0]
 800bbce:	463e      	mov	r6, r7
 800bbd0:	6165      	str	r5, [r4, #20]
 800bbd2:	eba5 0509 	sub.w	r5, r5, r9
 800bbd6:	60a5      	str	r5, [r4, #8]
 800bbd8:	42be      	cmp	r6, r7
 800bbda:	d900      	bls.n	800bbde <__ssputs_r+0x72>
 800bbdc:	463e      	mov	r6, r7
 800bbde:	4632      	mov	r2, r6
 800bbe0:	4641      	mov	r1, r8
 800bbe2:	6820      	ldr	r0, [r4, #0]
 800bbe4:	f000 faac 	bl	800c140 <memmove>
 800bbe8:	2000      	movs	r0, #0
 800bbea:	68a3      	ldr	r3, [r4, #8]
 800bbec:	1b9b      	subs	r3, r3, r6
 800bbee:	60a3      	str	r3, [r4, #8]
 800bbf0:	6823      	ldr	r3, [r4, #0]
 800bbf2:	4433      	add	r3, r6
 800bbf4:	6023      	str	r3, [r4, #0]
 800bbf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbfa:	462a      	mov	r2, r5
 800bbfc:	f000 fae6 	bl	800c1cc <_realloc_r>
 800bc00:	4606      	mov	r6, r0
 800bc02:	2800      	cmp	r0, #0
 800bc04:	d1e0      	bne.n	800bbc8 <__ssputs_r+0x5c>
 800bc06:	4650      	mov	r0, sl
 800bc08:	6921      	ldr	r1, [r4, #16]
 800bc0a:	f7ff feb9 	bl	800b980 <_free_r>
 800bc0e:	230c      	movs	r3, #12
 800bc10:	f8ca 3000 	str.w	r3, [sl]
 800bc14:	89a3      	ldrh	r3, [r4, #12]
 800bc16:	f04f 30ff 	mov.w	r0, #4294967295
 800bc1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bc1e:	81a3      	strh	r3, [r4, #12]
 800bc20:	e7e9      	b.n	800bbf6 <__ssputs_r+0x8a>
	...

0800bc24 <_svfiprintf_r>:
 800bc24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc28:	4698      	mov	r8, r3
 800bc2a:	898b      	ldrh	r3, [r1, #12]
 800bc2c:	4607      	mov	r7, r0
 800bc2e:	061b      	lsls	r3, r3, #24
 800bc30:	460d      	mov	r5, r1
 800bc32:	4614      	mov	r4, r2
 800bc34:	b09d      	sub	sp, #116	@ 0x74
 800bc36:	d510      	bpl.n	800bc5a <_svfiprintf_r+0x36>
 800bc38:	690b      	ldr	r3, [r1, #16]
 800bc3a:	b973      	cbnz	r3, 800bc5a <_svfiprintf_r+0x36>
 800bc3c:	2140      	movs	r1, #64	@ 0x40
 800bc3e:	f7ff ff09 	bl	800ba54 <_malloc_r>
 800bc42:	6028      	str	r0, [r5, #0]
 800bc44:	6128      	str	r0, [r5, #16]
 800bc46:	b930      	cbnz	r0, 800bc56 <_svfiprintf_r+0x32>
 800bc48:	230c      	movs	r3, #12
 800bc4a:	603b      	str	r3, [r7, #0]
 800bc4c:	f04f 30ff 	mov.w	r0, #4294967295
 800bc50:	b01d      	add	sp, #116	@ 0x74
 800bc52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc56:	2340      	movs	r3, #64	@ 0x40
 800bc58:	616b      	str	r3, [r5, #20]
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc5e:	2320      	movs	r3, #32
 800bc60:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bc64:	2330      	movs	r3, #48	@ 0x30
 800bc66:	f04f 0901 	mov.w	r9, #1
 800bc6a:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc6e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800be08 <_svfiprintf_r+0x1e4>
 800bc72:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bc76:	4623      	mov	r3, r4
 800bc78:	469a      	mov	sl, r3
 800bc7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc7e:	b10a      	cbz	r2, 800bc84 <_svfiprintf_r+0x60>
 800bc80:	2a25      	cmp	r2, #37	@ 0x25
 800bc82:	d1f9      	bne.n	800bc78 <_svfiprintf_r+0x54>
 800bc84:	ebba 0b04 	subs.w	fp, sl, r4
 800bc88:	d00b      	beq.n	800bca2 <_svfiprintf_r+0x7e>
 800bc8a:	465b      	mov	r3, fp
 800bc8c:	4622      	mov	r2, r4
 800bc8e:	4629      	mov	r1, r5
 800bc90:	4638      	mov	r0, r7
 800bc92:	f7ff ff6b 	bl	800bb6c <__ssputs_r>
 800bc96:	3001      	adds	r0, #1
 800bc98:	f000 80a7 	beq.w	800bdea <_svfiprintf_r+0x1c6>
 800bc9c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bc9e:	445a      	add	r2, fp
 800bca0:	9209      	str	r2, [sp, #36]	@ 0x24
 800bca2:	f89a 3000 	ldrb.w	r3, [sl]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	f000 809f 	beq.w	800bdea <_svfiprintf_r+0x1c6>
 800bcac:	2300      	movs	r3, #0
 800bcae:	f04f 32ff 	mov.w	r2, #4294967295
 800bcb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bcb6:	f10a 0a01 	add.w	sl, sl, #1
 800bcba:	9304      	str	r3, [sp, #16]
 800bcbc:	9307      	str	r3, [sp, #28]
 800bcbe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bcc2:	931a      	str	r3, [sp, #104]	@ 0x68
 800bcc4:	4654      	mov	r4, sl
 800bcc6:	2205      	movs	r2, #5
 800bcc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bccc:	484e      	ldr	r0, [pc, #312]	@ (800be08 <_svfiprintf_r+0x1e4>)
 800bcce:	f000 fa61 	bl	800c194 <memchr>
 800bcd2:	9a04      	ldr	r2, [sp, #16]
 800bcd4:	b9d8      	cbnz	r0, 800bd0e <_svfiprintf_r+0xea>
 800bcd6:	06d0      	lsls	r0, r2, #27
 800bcd8:	bf44      	itt	mi
 800bcda:	2320      	movmi	r3, #32
 800bcdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bce0:	0711      	lsls	r1, r2, #28
 800bce2:	bf44      	itt	mi
 800bce4:	232b      	movmi	r3, #43	@ 0x2b
 800bce6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bcea:	f89a 3000 	ldrb.w	r3, [sl]
 800bcee:	2b2a      	cmp	r3, #42	@ 0x2a
 800bcf0:	d015      	beq.n	800bd1e <_svfiprintf_r+0xfa>
 800bcf2:	4654      	mov	r4, sl
 800bcf4:	2000      	movs	r0, #0
 800bcf6:	f04f 0c0a 	mov.w	ip, #10
 800bcfa:	9a07      	ldr	r2, [sp, #28]
 800bcfc:	4621      	mov	r1, r4
 800bcfe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd02:	3b30      	subs	r3, #48	@ 0x30
 800bd04:	2b09      	cmp	r3, #9
 800bd06:	d94b      	bls.n	800bda0 <_svfiprintf_r+0x17c>
 800bd08:	b1b0      	cbz	r0, 800bd38 <_svfiprintf_r+0x114>
 800bd0a:	9207      	str	r2, [sp, #28]
 800bd0c:	e014      	b.n	800bd38 <_svfiprintf_r+0x114>
 800bd0e:	eba0 0308 	sub.w	r3, r0, r8
 800bd12:	fa09 f303 	lsl.w	r3, r9, r3
 800bd16:	4313      	orrs	r3, r2
 800bd18:	46a2      	mov	sl, r4
 800bd1a:	9304      	str	r3, [sp, #16]
 800bd1c:	e7d2      	b.n	800bcc4 <_svfiprintf_r+0xa0>
 800bd1e:	9b03      	ldr	r3, [sp, #12]
 800bd20:	1d19      	adds	r1, r3, #4
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	9103      	str	r1, [sp, #12]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	bfbb      	ittet	lt
 800bd2a:	425b      	neglt	r3, r3
 800bd2c:	f042 0202 	orrlt.w	r2, r2, #2
 800bd30:	9307      	strge	r3, [sp, #28]
 800bd32:	9307      	strlt	r3, [sp, #28]
 800bd34:	bfb8      	it	lt
 800bd36:	9204      	strlt	r2, [sp, #16]
 800bd38:	7823      	ldrb	r3, [r4, #0]
 800bd3a:	2b2e      	cmp	r3, #46	@ 0x2e
 800bd3c:	d10a      	bne.n	800bd54 <_svfiprintf_r+0x130>
 800bd3e:	7863      	ldrb	r3, [r4, #1]
 800bd40:	2b2a      	cmp	r3, #42	@ 0x2a
 800bd42:	d132      	bne.n	800bdaa <_svfiprintf_r+0x186>
 800bd44:	9b03      	ldr	r3, [sp, #12]
 800bd46:	3402      	adds	r4, #2
 800bd48:	1d1a      	adds	r2, r3, #4
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	9203      	str	r2, [sp, #12]
 800bd4e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bd52:	9305      	str	r3, [sp, #20]
 800bd54:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800be0c <_svfiprintf_r+0x1e8>
 800bd58:	2203      	movs	r2, #3
 800bd5a:	4650      	mov	r0, sl
 800bd5c:	7821      	ldrb	r1, [r4, #0]
 800bd5e:	f000 fa19 	bl	800c194 <memchr>
 800bd62:	b138      	cbz	r0, 800bd74 <_svfiprintf_r+0x150>
 800bd64:	2240      	movs	r2, #64	@ 0x40
 800bd66:	9b04      	ldr	r3, [sp, #16]
 800bd68:	eba0 000a 	sub.w	r0, r0, sl
 800bd6c:	4082      	lsls	r2, r0
 800bd6e:	4313      	orrs	r3, r2
 800bd70:	3401      	adds	r4, #1
 800bd72:	9304      	str	r3, [sp, #16]
 800bd74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd78:	2206      	movs	r2, #6
 800bd7a:	4825      	ldr	r0, [pc, #148]	@ (800be10 <_svfiprintf_r+0x1ec>)
 800bd7c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bd80:	f000 fa08 	bl	800c194 <memchr>
 800bd84:	2800      	cmp	r0, #0
 800bd86:	d036      	beq.n	800bdf6 <_svfiprintf_r+0x1d2>
 800bd88:	4b22      	ldr	r3, [pc, #136]	@ (800be14 <_svfiprintf_r+0x1f0>)
 800bd8a:	bb1b      	cbnz	r3, 800bdd4 <_svfiprintf_r+0x1b0>
 800bd8c:	9b03      	ldr	r3, [sp, #12]
 800bd8e:	3307      	adds	r3, #7
 800bd90:	f023 0307 	bic.w	r3, r3, #7
 800bd94:	3308      	adds	r3, #8
 800bd96:	9303      	str	r3, [sp, #12]
 800bd98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd9a:	4433      	add	r3, r6
 800bd9c:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd9e:	e76a      	b.n	800bc76 <_svfiprintf_r+0x52>
 800bda0:	460c      	mov	r4, r1
 800bda2:	2001      	movs	r0, #1
 800bda4:	fb0c 3202 	mla	r2, ip, r2, r3
 800bda8:	e7a8      	b.n	800bcfc <_svfiprintf_r+0xd8>
 800bdaa:	2300      	movs	r3, #0
 800bdac:	f04f 0c0a 	mov.w	ip, #10
 800bdb0:	4619      	mov	r1, r3
 800bdb2:	3401      	adds	r4, #1
 800bdb4:	9305      	str	r3, [sp, #20]
 800bdb6:	4620      	mov	r0, r4
 800bdb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bdbc:	3a30      	subs	r2, #48	@ 0x30
 800bdbe:	2a09      	cmp	r2, #9
 800bdc0:	d903      	bls.n	800bdca <_svfiprintf_r+0x1a6>
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d0c6      	beq.n	800bd54 <_svfiprintf_r+0x130>
 800bdc6:	9105      	str	r1, [sp, #20]
 800bdc8:	e7c4      	b.n	800bd54 <_svfiprintf_r+0x130>
 800bdca:	4604      	mov	r4, r0
 800bdcc:	2301      	movs	r3, #1
 800bdce:	fb0c 2101 	mla	r1, ip, r1, r2
 800bdd2:	e7f0      	b.n	800bdb6 <_svfiprintf_r+0x192>
 800bdd4:	ab03      	add	r3, sp, #12
 800bdd6:	9300      	str	r3, [sp, #0]
 800bdd8:	462a      	mov	r2, r5
 800bdda:	4638      	mov	r0, r7
 800bddc:	4b0e      	ldr	r3, [pc, #56]	@ (800be18 <_svfiprintf_r+0x1f4>)
 800bdde:	a904      	add	r1, sp, #16
 800bde0:	f3af 8000 	nop.w
 800bde4:	1c42      	adds	r2, r0, #1
 800bde6:	4606      	mov	r6, r0
 800bde8:	d1d6      	bne.n	800bd98 <_svfiprintf_r+0x174>
 800bdea:	89ab      	ldrh	r3, [r5, #12]
 800bdec:	065b      	lsls	r3, r3, #25
 800bdee:	f53f af2d 	bmi.w	800bc4c <_svfiprintf_r+0x28>
 800bdf2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bdf4:	e72c      	b.n	800bc50 <_svfiprintf_r+0x2c>
 800bdf6:	ab03      	add	r3, sp, #12
 800bdf8:	9300      	str	r3, [sp, #0]
 800bdfa:	462a      	mov	r2, r5
 800bdfc:	4638      	mov	r0, r7
 800bdfe:	4b06      	ldr	r3, [pc, #24]	@ (800be18 <_svfiprintf_r+0x1f4>)
 800be00:	a904      	add	r1, sp, #16
 800be02:	f000 f87d 	bl	800bf00 <_printf_i>
 800be06:	e7ed      	b.n	800bde4 <_svfiprintf_r+0x1c0>
 800be08:	0800c5f3 	.word	0x0800c5f3
 800be0c:	0800c5f9 	.word	0x0800c5f9
 800be10:	0800c5fd 	.word	0x0800c5fd
 800be14:	00000000 	.word	0x00000000
 800be18:	0800bb6d 	.word	0x0800bb6d

0800be1c <_printf_common>:
 800be1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be20:	4616      	mov	r6, r2
 800be22:	4698      	mov	r8, r3
 800be24:	688a      	ldr	r2, [r1, #8]
 800be26:	690b      	ldr	r3, [r1, #16]
 800be28:	4607      	mov	r7, r0
 800be2a:	4293      	cmp	r3, r2
 800be2c:	bfb8      	it	lt
 800be2e:	4613      	movlt	r3, r2
 800be30:	6033      	str	r3, [r6, #0]
 800be32:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800be36:	460c      	mov	r4, r1
 800be38:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800be3c:	b10a      	cbz	r2, 800be42 <_printf_common+0x26>
 800be3e:	3301      	adds	r3, #1
 800be40:	6033      	str	r3, [r6, #0]
 800be42:	6823      	ldr	r3, [r4, #0]
 800be44:	0699      	lsls	r1, r3, #26
 800be46:	bf42      	ittt	mi
 800be48:	6833      	ldrmi	r3, [r6, #0]
 800be4a:	3302      	addmi	r3, #2
 800be4c:	6033      	strmi	r3, [r6, #0]
 800be4e:	6825      	ldr	r5, [r4, #0]
 800be50:	f015 0506 	ands.w	r5, r5, #6
 800be54:	d106      	bne.n	800be64 <_printf_common+0x48>
 800be56:	f104 0a19 	add.w	sl, r4, #25
 800be5a:	68e3      	ldr	r3, [r4, #12]
 800be5c:	6832      	ldr	r2, [r6, #0]
 800be5e:	1a9b      	subs	r3, r3, r2
 800be60:	42ab      	cmp	r3, r5
 800be62:	dc2b      	bgt.n	800bebc <_printf_common+0xa0>
 800be64:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800be68:	6822      	ldr	r2, [r4, #0]
 800be6a:	3b00      	subs	r3, #0
 800be6c:	bf18      	it	ne
 800be6e:	2301      	movne	r3, #1
 800be70:	0692      	lsls	r2, r2, #26
 800be72:	d430      	bmi.n	800bed6 <_printf_common+0xba>
 800be74:	4641      	mov	r1, r8
 800be76:	4638      	mov	r0, r7
 800be78:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800be7c:	47c8      	blx	r9
 800be7e:	3001      	adds	r0, #1
 800be80:	d023      	beq.n	800beca <_printf_common+0xae>
 800be82:	6823      	ldr	r3, [r4, #0]
 800be84:	6922      	ldr	r2, [r4, #16]
 800be86:	f003 0306 	and.w	r3, r3, #6
 800be8a:	2b04      	cmp	r3, #4
 800be8c:	bf14      	ite	ne
 800be8e:	2500      	movne	r5, #0
 800be90:	6833      	ldreq	r3, [r6, #0]
 800be92:	f04f 0600 	mov.w	r6, #0
 800be96:	bf08      	it	eq
 800be98:	68e5      	ldreq	r5, [r4, #12]
 800be9a:	f104 041a 	add.w	r4, r4, #26
 800be9e:	bf08      	it	eq
 800bea0:	1aed      	subeq	r5, r5, r3
 800bea2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800bea6:	bf08      	it	eq
 800bea8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800beac:	4293      	cmp	r3, r2
 800beae:	bfc4      	itt	gt
 800beb0:	1a9b      	subgt	r3, r3, r2
 800beb2:	18ed      	addgt	r5, r5, r3
 800beb4:	42b5      	cmp	r5, r6
 800beb6:	d11a      	bne.n	800beee <_printf_common+0xd2>
 800beb8:	2000      	movs	r0, #0
 800beba:	e008      	b.n	800bece <_printf_common+0xb2>
 800bebc:	2301      	movs	r3, #1
 800bebe:	4652      	mov	r2, sl
 800bec0:	4641      	mov	r1, r8
 800bec2:	4638      	mov	r0, r7
 800bec4:	47c8      	blx	r9
 800bec6:	3001      	adds	r0, #1
 800bec8:	d103      	bne.n	800bed2 <_printf_common+0xb6>
 800beca:	f04f 30ff 	mov.w	r0, #4294967295
 800bece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bed2:	3501      	adds	r5, #1
 800bed4:	e7c1      	b.n	800be5a <_printf_common+0x3e>
 800bed6:	2030      	movs	r0, #48	@ 0x30
 800bed8:	18e1      	adds	r1, r4, r3
 800beda:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bede:	1c5a      	adds	r2, r3, #1
 800bee0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bee4:	4422      	add	r2, r4
 800bee6:	3302      	adds	r3, #2
 800bee8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800beec:	e7c2      	b.n	800be74 <_printf_common+0x58>
 800beee:	2301      	movs	r3, #1
 800bef0:	4622      	mov	r2, r4
 800bef2:	4641      	mov	r1, r8
 800bef4:	4638      	mov	r0, r7
 800bef6:	47c8      	blx	r9
 800bef8:	3001      	adds	r0, #1
 800befa:	d0e6      	beq.n	800beca <_printf_common+0xae>
 800befc:	3601      	adds	r6, #1
 800befe:	e7d9      	b.n	800beb4 <_printf_common+0x98>

0800bf00 <_printf_i>:
 800bf00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bf04:	7e0f      	ldrb	r7, [r1, #24]
 800bf06:	4691      	mov	r9, r2
 800bf08:	2f78      	cmp	r7, #120	@ 0x78
 800bf0a:	4680      	mov	r8, r0
 800bf0c:	460c      	mov	r4, r1
 800bf0e:	469a      	mov	sl, r3
 800bf10:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bf12:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bf16:	d807      	bhi.n	800bf28 <_printf_i+0x28>
 800bf18:	2f62      	cmp	r7, #98	@ 0x62
 800bf1a:	d80a      	bhi.n	800bf32 <_printf_i+0x32>
 800bf1c:	2f00      	cmp	r7, #0
 800bf1e:	f000 80d3 	beq.w	800c0c8 <_printf_i+0x1c8>
 800bf22:	2f58      	cmp	r7, #88	@ 0x58
 800bf24:	f000 80ba 	beq.w	800c09c <_printf_i+0x19c>
 800bf28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bf2c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bf30:	e03a      	b.n	800bfa8 <_printf_i+0xa8>
 800bf32:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bf36:	2b15      	cmp	r3, #21
 800bf38:	d8f6      	bhi.n	800bf28 <_printf_i+0x28>
 800bf3a:	a101      	add	r1, pc, #4	@ (adr r1, 800bf40 <_printf_i+0x40>)
 800bf3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bf40:	0800bf99 	.word	0x0800bf99
 800bf44:	0800bfad 	.word	0x0800bfad
 800bf48:	0800bf29 	.word	0x0800bf29
 800bf4c:	0800bf29 	.word	0x0800bf29
 800bf50:	0800bf29 	.word	0x0800bf29
 800bf54:	0800bf29 	.word	0x0800bf29
 800bf58:	0800bfad 	.word	0x0800bfad
 800bf5c:	0800bf29 	.word	0x0800bf29
 800bf60:	0800bf29 	.word	0x0800bf29
 800bf64:	0800bf29 	.word	0x0800bf29
 800bf68:	0800bf29 	.word	0x0800bf29
 800bf6c:	0800c0af 	.word	0x0800c0af
 800bf70:	0800bfd7 	.word	0x0800bfd7
 800bf74:	0800c069 	.word	0x0800c069
 800bf78:	0800bf29 	.word	0x0800bf29
 800bf7c:	0800bf29 	.word	0x0800bf29
 800bf80:	0800c0d1 	.word	0x0800c0d1
 800bf84:	0800bf29 	.word	0x0800bf29
 800bf88:	0800bfd7 	.word	0x0800bfd7
 800bf8c:	0800bf29 	.word	0x0800bf29
 800bf90:	0800bf29 	.word	0x0800bf29
 800bf94:	0800c071 	.word	0x0800c071
 800bf98:	6833      	ldr	r3, [r6, #0]
 800bf9a:	1d1a      	adds	r2, r3, #4
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	6032      	str	r2, [r6, #0]
 800bfa0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bfa4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bfa8:	2301      	movs	r3, #1
 800bfaa:	e09e      	b.n	800c0ea <_printf_i+0x1ea>
 800bfac:	6833      	ldr	r3, [r6, #0]
 800bfae:	6820      	ldr	r0, [r4, #0]
 800bfb0:	1d19      	adds	r1, r3, #4
 800bfb2:	6031      	str	r1, [r6, #0]
 800bfb4:	0606      	lsls	r6, r0, #24
 800bfb6:	d501      	bpl.n	800bfbc <_printf_i+0xbc>
 800bfb8:	681d      	ldr	r5, [r3, #0]
 800bfba:	e003      	b.n	800bfc4 <_printf_i+0xc4>
 800bfbc:	0645      	lsls	r5, r0, #25
 800bfbe:	d5fb      	bpl.n	800bfb8 <_printf_i+0xb8>
 800bfc0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bfc4:	2d00      	cmp	r5, #0
 800bfc6:	da03      	bge.n	800bfd0 <_printf_i+0xd0>
 800bfc8:	232d      	movs	r3, #45	@ 0x2d
 800bfca:	426d      	negs	r5, r5
 800bfcc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bfd0:	230a      	movs	r3, #10
 800bfd2:	4859      	ldr	r0, [pc, #356]	@ (800c138 <_printf_i+0x238>)
 800bfd4:	e011      	b.n	800bffa <_printf_i+0xfa>
 800bfd6:	6821      	ldr	r1, [r4, #0]
 800bfd8:	6833      	ldr	r3, [r6, #0]
 800bfda:	0608      	lsls	r0, r1, #24
 800bfdc:	f853 5b04 	ldr.w	r5, [r3], #4
 800bfe0:	d402      	bmi.n	800bfe8 <_printf_i+0xe8>
 800bfe2:	0649      	lsls	r1, r1, #25
 800bfe4:	bf48      	it	mi
 800bfe6:	b2ad      	uxthmi	r5, r5
 800bfe8:	2f6f      	cmp	r7, #111	@ 0x6f
 800bfea:	6033      	str	r3, [r6, #0]
 800bfec:	bf14      	ite	ne
 800bfee:	230a      	movne	r3, #10
 800bff0:	2308      	moveq	r3, #8
 800bff2:	4851      	ldr	r0, [pc, #324]	@ (800c138 <_printf_i+0x238>)
 800bff4:	2100      	movs	r1, #0
 800bff6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bffa:	6866      	ldr	r6, [r4, #4]
 800bffc:	2e00      	cmp	r6, #0
 800bffe:	bfa8      	it	ge
 800c000:	6821      	ldrge	r1, [r4, #0]
 800c002:	60a6      	str	r6, [r4, #8]
 800c004:	bfa4      	itt	ge
 800c006:	f021 0104 	bicge.w	r1, r1, #4
 800c00a:	6021      	strge	r1, [r4, #0]
 800c00c:	b90d      	cbnz	r5, 800c012 <_printf_i+0x112>
 800c00e:	2e00      	cmp	r6, #0
 800c010:	d04b      	beq.n	800c0aa <_printf_i+0x1aa>
 800c012:	4616      	mov	r6, r2
 800c014:	fbb5 f1f3 	udiv	r1, r5, r3
 800c018:	fb03 5711 	mls	r7, r3, r1, r5
 800c01c:	5dc7      	ldrb	r7, [r0, r7]
 800c01e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c022:	462f      	mov	r7, r5
 800c024:	42bb      	cmp	r3, r7
 800c026:	460d      	mov	r5, r1
 800c028:	d9f4      	bls.n	800c014 <_printf_i+0x114>
 800c02a:	2b08      	cmp	r3, #8
 800c02c:	d10b      	bne.n	800c046 <_printf_i+0x146>
 800c02e:	6823      	ldr	r3, [r4, #0]
 800c030:	07df      	lsls	r7, r3, #31
 800c032:	d508      	bpl.n	800c046 <_printf_i+0x146>
 800c034:	6923      	ldr	r3, [r4, #16]
 800c036:	6861      	ldr	r1, [r4, #4]
 800c038:	4299      	cmp	r1, r3
 800c03a:	bfde      	ittt	le
 800c03c:	2330      	movle	r3, #48	@ 0x30
 800c03e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c042:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c046:	1b92      	subs	r2, r2, r6
 800c048:	6122      	str	r2, [r4, #16]
 800c04a:	464b      	mov	r3, r9
 800c04c:	4621      	mov	r1, r4
 800c04e:	4640      	mov	r0, r8
 800c050:	f8cd a000 	str.w	sl, [sp]
 800c054:	aa03      	add	r2, sp, #12
 800c056:	f7ff fee1 	bl	800be1c <_printf_common>
 800c05a:	3001      	adds	r0, #1
 800c05c:	d14a      	bne.n	800c0f4 <_printf_i+0x1f4>
 800c05e:	f04f 30ff 	mov.w	r0, #4294967295
 800c062:	b004      	add	sp, #16
 800c064:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c068:	6823      	ldr	r3, [r4, #0]
 800c06a:	f043 0320 	orr.w	r3, r3, #32
 800c06e:	6023      	str	r3, [r4, #0]
 800c070:	2778      	movs	r7, #120	@ 0x78
 800c072:	4832      	ldr	r0, [pc, #200]	@ (800c13c <_printf_i+0x23c>)
 800c074:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c078:	6823      	ldr	r3, [r4, #0]
 800c07a:	6831      	ldr	r1, [r6, #0]
 800c07c:	061f      	lsls	r7, r3, #24
 800c07e:	f851 5b04 	ldr.w	r5, [r1], #4
 800c082:	d402      	bmi.n	800c08a <_printf_i+0x18a>
 800c084:	065f      	lsls	r7, r3, #25
 800c086:	bf48      	it	mi
 800c088:	b2ad      	uxthmi	r5, r5
 800c08a:	6031      	str	r1, [r6, #0]
 800c08c:	07d9      	lsls	r1, r3, #31
 800c08e:	bf44      	itt	mi
 800c090:	f043 0320 	orrmi.w	r3, r3, #32
 800c094:	6023      	strmi	r3, [r4, #0]
 800c096:	b11d      	cbz	r5, 800c0a0 <_printf_i+0x1a0>
 800c098:	2310      	movs	r3, #16
 800c09a:	e7ab      	b.n	800bff4 <_printf_i+0xf4>
 800c09c:	4826      	ldr	r0, [pc, #152]	@ (800c138 <_printf_i+0x238>)
 800c09e:	e7e9      	b.n	800c074 <_printf_i+0x174>
 800c0a0:	6823      	ldr	r3, [r4, #0]
 800c0a2:	f023 0320 	bic.w	r3, r3, #32
 800c0a6:	6023      	str	r3, [r4, #0]
 800c0a8:	e7f6      	b.n	800c098 <_printf_i+0x198>
 800c0aa:	4616      	mov	r6, r2
 800c0ac:	e7bd      	b.n	800c02a <_printf_i+0x12a>
 800c0ae:	6833      	ldr	r3, [r6, #0]
 800c0b0:	6825      	ldr	r5, [r4, #0]
 800c0b2:	1d18      	adds	r0, r3, #4
 800c0b4:	6961      	ldr	r1, [r4, #20]
 800c0b6:	6030      	str	r0, [r6, #0]
 800c0b8:	062e      	lsls	r6, r5, #24
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	d501      	bpl.n	800c0c2 <_printf_i+0x1c2>
 800c0be:	6019      	str	r1, [r3, #0]
 800c0c0:	e002      	b.n	800c0c8 <_printf_i+0x1c8>
 800c0c2:	0668      	lsls	r0, r5, #25
 800c0c4:	d5fb      	bpl.n	800c0be <_printf_i+0x1be>
 800c0c6:	8019      	strh	r1, [r3, #0]
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	4616      	mov	r6, r2
 800c0cc:	6123      	str	r3, [r4, #16]
 800c0ce:	e7bc      	b.n	800c04a <_printf_i+0x14a>
 800c0d0:	6833      	ldr	r3, [r6, #0]
 800c0d2:	2100      	movs	r1, #0
 800c0d4:	1d1a      	adds	r2, r3, #4
 800c0d6:	6032      	str	r2, [r6, #0]
 800c0d8:	681e      	ldr	r6, [r3, #0]
 800c0da:	6862      	ldr	r2, [r4, #4]
 800c0dc:	4630      	mov	r0, r6
 800c0de:	f000 f859 	bl	800c194 <memchr>
 800c0e2:	b108      	cbz	r0, 800c0e8 <_printf_i+0x1e8>
 800c0e4:	1b80      	subs	r0, r0, r6
 800c0e6:	6060      	str	r0, [r4, #4]
 800c0e8:	6863      	ldr	r3, [r4, #4]
 800c0ea:	6123      	str	r3, [r4, #16]
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c0f2:	e7aa      	b.n	800c04a <_printf_i+0x14a>
 800c0f4:	4632      	mov	r2, r6
 800c0f6:	4649      	mov	r1, r9
 800c0f8:	4640      	mov	r0, r8
 800c0fa:	6923      	ldr	r3, [r4, #16]
 800c0fc:	47d0      	blx	sl
 800c0fe:	3001      	adds	r0, #1
 800c100:	d0ad      	beq.n	800c05e <_printf_i+0x15e>
 800c102:	6823      	ldr	r3, [r4, #0]
 800c104:	079b      	lsls	r3, r3, #30
 800c106:	d413      	bmi.n	800c130 <_printf_i+0x230>
 800c108:	68e0      	ldr	r0, [r4, #12]
 800c10a:	9b03      	ldr	r3, [sp, #12]
 800c10c:	4298      	cmp	r0, r3
 800c10e:	bfb8      	it	lt
 800c110:	4618      	movlt	r0, r3
 800c112:	e7a6      	b.n	800c062 <_printf_i+0x162>
 800c114:	2301      	movs	r3, #1
 800c116:	4632      	mov	r2, r6
 800c118:	4649      	mov	r1, r9
 800c11a:	4640      	mov	r0, r8
 800c11c:	47d0      	blx	sl
 800c11e:	3001      	adds	r0, #1
 800c120:	d09d      	beq.n	800c05e <_printf_i+0x15e>
 800c122:	3501      	adds	r5, #1
 800c124:	68e3      	ldr	r3, [r4, #12]
 800c126:	9903      	ldr	r1, [sp, #12]
 800c128:	1a5b      	subs	r3, r3, r1
 800c12a:	42ab      	cmp	r3, r5
 800c12c:	dcf2      	bgt.n	800c114 <_printf_i+0x214>
 800c12e:	e7eb      	b.n	800c108 <_printf_i+0x208>
 800c130:	2500      	movs	r5, #0
 800c132:	f104 0619 	add.w	r6, r4, #25
 800c136:	e7f5      	b.n	800c124 <_printf_i+0x224>
 800c138:	0800c604 	.word	0x0800c604
 800c13c:	0800c615 	.word	0x0800c615

0800c140 <memmove>:
 800c140:	4288      	cmp	r0, r1
 800c142:	b510      	push	{r4, lr}
 800c144:	eb01 0402 	add.w	r4, r1, r2
 800c148:	d902      	bls.n	800c150 <memmove+0x10>
 800c14a:	4284      	cmp	r4, r0
 800c14c:	4623      	mov	r3, r4
 800c14e:	d807      	bhi.n	800c160 <memmove+0x20>
 800c150:	1e43      	subs	r3, r0, #1
 800c152:	42a1      	cmp	r1, r4
 800c154:	d008      	beq.n	800c168 <memmove+0x28>
 800c156:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c15a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c15e:	e7f8      	b.n	800c152 <memmove+0x12>
 800c160:	4601      	mov	r1, r0
 800c162:	4402      	add	r2, r0
 800c164:	428a      	cmp	r2, r1
 800c166:	d100      	bne.n	800c16a <memmove+0x2a>
 800c168:	bd10      	pop	{r4, pc}
 800c16a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c16e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c172:	e7f7      	b.n	800c164 <memmove+0x24>

0800c174 <_sbrk_r>:
 800c174:	b538      	push	{r3, r4, r5, lr}
 800c176:	2300      	movs	r3, #0
 800c178:	4d05      	ldr	r5, [pc, #20]	@ (800c190 <_sbrk_r+0x1c>)
 800c17a:	4604      	mov	r4, r0
 800c17c:	4608      	mov	r0, r1
 800c17e:	602b      	str	r3, [r5, #0]
 800c180:	f7fb fc2c 	bl	80079dc <_sbrk>
 800c184:	1c43      	adds	r3, r0, #1
 800c186:	d102      	bne.n	800c18e <_sbrk_r+0x1a>
 800c188:	682b      	ldr	r3, [r5, #0]
 800c18a:	b103      	cbz	r3, 800c18e <_sbrk_r+0x1a>
 800c18c:	6023      	str	r3, [r4, #0]
 800c18e:	bd38      	pop	{r3, r4, r5, pc}
 800c190:	200002d8 	.word	0x200002d8

0800c194 <memchr>:
 800c194:	4603      	mov	r3, r0
 800c196:	b510      	push	{r4, lr}
 800c198:	b2c9      	uxtb	r1, r1
 800c19a:	4402      	add	r2, r0
 800c19c:	4293      	cmp	r3, r2
 800c19e:	4618      	mov	r0, r3
 800c1a0:	d101      	bne.n	800c1a6 <memchr+0x12>
 800c1a2:	2000      	movs	r0, #0
 800c1a4:	e003      	b.n	800c1ae <memchr+0x1a>
 800c1a6:	7804      	ldrb	r4, [r0, #0]
 800c1a8:	3301      	adds	r3, #1
 800c1aa:	428c      	cmp	r4, r1
 800c1ac:	d1f6      	bne.n	800c19c <memchr+0x8>
 800c1ae:	bd10      	pop	{r4, pc}

0800c1b0 <memcpy>:
 800c1b0:	440a      	add	r2, r1
 800c1b2:	4291      	cmp	r1, r2
 800c1b4:	f100 33ff 	add.w	r3, r0, #4294967295
 800c1b8:	d100      	bne.n	800c1bc <memcpy+0xc>
 800c1ba:	4770      	bx	lr
 800c1bc:	b510      	push	{r4, lr}
 800c1be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c1c2:	4291      	cmp	r1, r2
 800c1c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c1c8:	d1f9      	bne.n	800c1be <memcpy+0xe>
 800c1ca:	bd10      	pop	{r4, pc}

0800c1cc <_realloc_r>:
 800c1cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1d0:	4680      	mov	r8, r0
 800c1d2:	4615      	mov	r5, r2
 800c1d4:	460c      	mov	r4, r1
 800c1d6:	b921      	cbnz	r1, 800c1e2 <_realloc_r+0x16>
 800c1d8:	4611      	mov	r1, r2
 800c1da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c1de:	f7ff bc39 	b.w	800ba54 <_malloc_r>
 800c1e2:	b92a      	cbnz	r2, 800c1f0 <_realloc_r+0x24>
 800c1e4:	f7ff fbcc 	bl	800b980 <_free_r>
 800c1e8:	2400      	movs	r4, #0
 800c1ea:	4620      	mov	r0, r4
 800c1ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1f0:	f000 f81a 	bl	800c228 <_malloc_usable_size_r>
 800c1f4:	4285      	cmp	r5, r0
 800c1f6:	4606      	mov	r6, r0
 800c1f8:	d802      	bhi.n	800c200 <_realloc_r+0x34>
 800c1fa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c1fe:	d8f4      	bhi.n	800c1ea <_realloc_r+0x1e>
 800c200:	4629      	mov	r1, r5
 800c202:	4640      	mov	r0, r8
 800c204:	f7ff fc26 	bl	800ba54 <_malloc_r>
 800c208:	4607      	mov	r7, r0
 800c20a:	2800      	cmp	r0, #0
 800c20c:	d0ec      	beq.n	800c1e8 <_realloc_r+0x1c>
 800c20e:	42b5      	cmp	r5, r6
 800c210:	462a      	mov	r2, r5
 800c212:	4621      	mov	r1, r4
 800c214:	bf28      	it	cs
 800c216:	4632      	movcs	r2, r6
 800c218:	f7ff ffca 	bl	800c1b0 <memcpy>
 800c21c:	4621      	mov	r1, r4
 800c21e:	4640      	mov	r0, r8
 800c220:	f7ff fbae 	bl	800b980 <_free_r>
 800c224:	463c      	mov	r4, r7
 800c226:	e7e0      	b.n	800c1ea <_realloc_r+0x1e>

0800c228 <_malloc_usable_size_r>:
 800c228:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c22c:	1f18      	subs	r0, r3, #4
 800c22e:	2b00      	cmp	r3, #0
 800c230:	bfbc      	itt	lt
 800c232:	580b      	ldrlt	r3, [r1, r0]
 800c234:	18c0      	addlt	r0, r0, r3
 800c236:	4770      	bx	lr

0800c238 <_init>:
 800c238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c23a:	bf00      	nop
 800c23c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c23e:	bc08      	pop	{r3}
 800c240:	469e      	mov	lr, r3
 800c242:	4770      	bx	lr

0800c244 <_fini>:
 800c244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c246:	bf00      	nop
 800c248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c24a:	bc08      	pop	{r3}
 800c24c:	469e      	mov	lr, r3
 800c24e:	4770      	bx	lr
